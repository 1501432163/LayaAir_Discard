/***********************************/
/*http://www.layabox.com 2016/2/27*/
/***********************************/
window.Laya=(function(window,document){
	var Laya={
		__internals:[],
		__packages:{},
		__classmap:{'Object':Object,'Function':Function,'Array':Array,'String':String},
		__sysClass:{'object':'Object','array':'Array','string':'String','dictionary':'Dictionary'},
		__propun:{writable: true,enumerable: false,configurable: true},
		__presubstr:String.prototype.substr,
		__substr:function(ofs,sz){return arguments.length==1?Laya.__presubstr.call(this,ofs):Laya.__presubstr.call(this,ofs,sz>0?sz:(this.length+sz));},
		__init:function(_classs){_classs.forEach(function(o){o.__init$ && o.__init$();});},
		__parseInt:function(value){return !value?0:parseInt(value);},
		__isClass:function(o){return o && (o.__isclass || o==Object || o==String || o==Array);},
		__newvec:function(sz,value){
			var d=[];
			d.length=sz;
			for(var i=0;i<sz;i++) d[i]=value;
			return d;
		},
		__extend:function(d,b){
			for (var p in b){
				if (!b.hasOwnProperty(p)) continue;
				var g = b.__lookupGetter__(p), s = b.__lookupSetter__(p); 
				if ( g || s ) {
					g && d.__defineGetter__(p, g);
					s && d.__defineSetter__(p, s);
				} 
				else d[p] = b[p];
			}
			function __() { Laya.un(this,'constructor',d); }__.prototype=b.prototype;d.prototype=new __();Laya.un(d.prototype,'__imps',Laya.__copy({},b.prototype.__imps));
		},
		__copy:function(dec,src){
			if(!src) return null;
			dec=dec||{};
			for(var i in src) dec[i]=src[i];
			return dec;
		},
		__package:function(name,o){
			if(Laya.__packages[name]) return;
			Laya.__packages[name]=true;
			var p=window,strs=name.split('.');
			if(strs.length>1){
				for(var i=0,sz=strs.length-1;i<sz;i++){
					var c=p[strs[i]];
					p=c?c:(p[strs[i]]={});
				}
			}
			p[strs[strs.length-1]] || (p[strs[strs.length-1]]=o||{});
		},
		__hasOwnProperty:function(name,o){
			o=o ||this;
		    function classHas(name,o){
				if(Object.hasOwnProperty.call(o.prototype,name)) return true;
				var s=o.prototype.__super;
				return s==null?null:classHas(name,s);
			}
			return (Object.hasOwnProperty.call(o,name)) || classHas(name,o.__class);
		},
		__typeof:function(o,value){
			if(!o || !value) return false;
			if(value==String) return (typeof o=='string');
			if(value==Number) return (typeof o=='number');
			if(value.__interface__) value=value.__interface__;
			else if(typeof value!='string')  return (o instanceof value);
			return (o.__imps && o.__imps[value]) || (o.__class==value);
		},
		__as:function(value,type){
			return (this.__typeof(value,type))?value:null;
		},		
		interface:function(name,_super){
			Laya.__package(name,{});
			var ins=Laya.__internals;
			var a=ins[name]=ins[name] || {};
			a.self=name;
			if(_super)a.extend=ins[_super]=ins[_super] || {};
			var o=window,words=name.split('.');
			for(var i=0;i<words.length-1;i++) o=o[words[i]];o[words[words.length-1]]={__interface__:name};
		},
		class:function(o,fullName,_super,miniName){
			_super && Laya.__extend(o,_super);
			if(fullName){
				Laya.__package(fullName,o);
				Laya.__classmap[fullName]=o;
				if(fullName.indexOf('.')>0){
					if(fullName.indexOf('laya.')==0){
						var paths=fullName.split('.');
						miniName=miniName || paths[paths.length-1];
						if(Laya[miniName]) console.log('warning:class name redefinition,'+fullName+'/'+Laya[miniName]);
						Laya[miniName]=o;
					}					
				}
				else {
					if(fullName=="Main")
						window.Main=o;
					else{
						if(Laya[fullName]){
							console.log('warning:class name redefinition,'+fullName+'/'+Laya[fullName]);
						}
						Laya[fullName]=o;
					}
				}
			}
			var un=Laya.un,p=o.prototype;
			un(p,'hasOwnProperty',Laya.__hasOwnProperty);
			un(p,'__class',o);
			un(p,'__super',_super);
			un(p,'__className',fullName);
			un(o,'__super',_super);
			un(o,'__className',fullName);
			un(o,'__isclass',true);
			un(o,'super',function(o){this.__super.call(o);});
		},
		imps:function(dec,src){
			if(!src) return null;
			var d=dec.__imps|| Laya.un(dec,'__imps',{});
			for(var i in src){
				d[i]=src[i];
				var c=i;
				while((c=this.__internals[c]) && (c=c.extend) ){
					c=c.self;d[c]=true;
				}
			}
		},		
		getset:function(isStatic,o,name,getfn,setfn){
			if(!isStatic){
				getfn && Laya.un(o,'_$get_'+name,getfn);
				setfn && Laya.un(o,'_$set_'+name,setfn);
			}
			else{
				getfn && (o['_$GET_'+name]=getfn);
				setfn && (o['_$SET_'+name]=setfn);
			}
			if(getfn && setfn) 
				Object.defineProperty(o,name,{get:getfn,set:setfn,enumerable:false});
			else{
				getfn && Object.defineProperty(o,name,{get:getfn,enumerable:false});
				setfn && Object.defineProperty(o,name,{set:setfn,enumerable:false});
			}
		},
		static:function(_class,def){
				for(var i=0,sz=def.length;i<sz;i+=2){
					if(def[i]=='length') 
						_class.length=def[i+1].call(_class);
					else{
						function tmp(){
							var name=def[i];
							var getfn=def[i+1];
							Object.defineProperty(_class,name,{
								get:function(){delete this[name];return this[name]=getfn.call(this);},
								set:function(v){delete this[name];this[name]=v;},enumerable: true,configurable: true});
						}
						tmp();
					}
				}
		},		
		un:function(obj,name,value){
			arguments.length<3 &&(value=obj[name]);
			Laya.__propun.value=value;
			Object.defineProperty(obj, name, Laya.__propun);
			return value;
		},
		uns:function(obj,names){
			names.forEach(function(o){Laya.un(obj,o)});
		}
	};

	window.console=window.console || ({log:function(){}});
	window.trace=window.console.log;
	Error.prototype.throwError=function(){throw arguments;};
	String.prototype.substr=Laya.__substr;
	Object.defineProperty(Array.prototype,'fixed',{enumerable: false});

	return Laya;
})(window,document);

(function(window,document,Laya){
	var __un=Laya.un,__uns=Laya.uns,__static=Laya.static,__class=Laya.class,__getset=Laya.getset,__newvec=Laya.__newvec;
	Laya.interface('laya.display.ILayout');
	Laya.interface('laya.editor.core.Wraps.xml.IXMLElement');
	Laya.interface('laya.webgl.canvas.save.ISaveData');
	Laya.interface('laya.webgl.submit.ISubmit');
	Laya.interface('laya.resource.IDispose');
	Laya.interface('laya.ui.IComponent');
	Laya.interface('laya.ui.ISelect');
	Laya.interface('laya.ui.IRender');
	Laya.interface('laya.editor.core.IContent');
	Laya.interface('laya.filters.IFilter');
	Laya.interface('laya.filters.IFilterAction');
	Laya.interface('laya.ui.IItem');
	Laya.interface('laya.webgl.shapes.IShape');
	Laya.interface('laya.editor.core.IClip');
	Laya.interface('laya.ui.IBox','laya.ui.IComponent');
	Laya.interface('laya.filters.IFilterActionGL','laya.filters.IFilterAction');
	var await=Laya.await=function(caller,fn,nextLine){
		Asyn._caller_=caller;
		Asyn._callback_=fn;
		Asyn._nextLine_=nextLine;
	}


	var sleep=Laya.sleep=function(value){
		Asyn.sleep(value);
	}


	var load=Laya.load=function(url,type){
		return Asyn.load(url,type);
	}


	var wait=Laya.wait=function(conditions){
		return Asyn.wait(conditions);
	}


	/**
	*全局引用入口
	*@author yung
	*/
	//class Laya
	var ___Laya=(function(){
		//function Laya(){};
		/**是否捕获全局错误并弹出提示*/
		__getset(1,Laya,'alertGlobalError',null,function(value){
			var erralert=0;
			if (value){
				Browser.window.onerror=function (msg,url,line,column,detail){
					if (erralert++< 5 && detail)
						alert("出错啦，请把此信息截图给研发商\n"+msg+"\n"+detail.stack);
				}
				}else {
				Browser.window.onerror=null;
			}
		});

		Laya.init=function(width,height,__plugins){
			var plugins=[];for(var i=2,sz=arguments.length;i<sz;i++)plugins.push(arguments[i]);
			for (var i=0,n=plugins.length;i < n;i++){
				if (plugins[i].enable)plugins[i].enable();
			}
			Font.__init__();
			Style.__init__();
			ResourceManager.__init__();
			Laya.stage=new Stage();
			var location=Browser.window.location;
			URL.rootPath=URL.basePath=URL.getPath(location.protocal=="file:" ? location.pathname :location.href);
			Laya.initAsyn();
			Laya.render=new Render(width,height);
			Laya.stage.size(width,height);
			RenderSprite.__init__();
			KeyBoardManager.__init__();
			MouseManager.instance.__init__();
		}

		Laya.initAsyn=function(){
			Asyn.loadDo=function (url,type,d){
				var l=new Loader();
				if (d){
					l.once("complete",null,function(data){
						d.callback(data);
					});
					l.once("error",null,function(err){
					});
				}
				l.load(url,type);
				return d;
			}
			Asyn.onceTimer=function (delay,d){
				Laya.timer.once(delay,d,d.callback);
			}
			Asyn.onceEvent=function (type,listener){
				Laya.stage.once(type,null,listener);
			}
			Laya.timer.frameLoop(1,null,Asyn._loop_);
		}

		Laya.stage=null;
		Laya.render=null
		Laya.version="0.9.7";
		Laya.is3DMode=false;
		__static(Laya,
		['timer',function(){return this.timer=new Timer();},'loader',function(){return this.loader=new LoaderManager();}
		]);
		return Laya;
	})()


	/**
	*事件调度类
	*@author yung
	*/
	//class laya.events.EventDispatcher
	var EventDispatcher=(function(){
		var EventHandler;
		function EventDispatcher(){
			this._events=null;
		}

		__class(EventDispatcher,'laya.events.EventDispatcher');
		var __proto=EventDispatcher.prototype;
		/**
		*是否有某种事件监听
		*@param type 事件名称
		*@return 是否有某种事件监听
		*/
		__proto.hasListener=function(type){
			var listener=this._events && this._events[type];
			return !!listener;
		}

		/**
		*发送事件
		*@param type 事件类型
		*@param data 回调数据，可以是单数据或者Array(作为多参)
		*@return 如果没有监听者，则返回false，否则true
		*/
		__proto.event=function(type,data){
			if (!this._events || !this._events[type])return false;
			var listeners=this._events[type];
			if (listeners.run){
				if (listeners.once)delete this._events[type];
				data !=null ? listeners.runWith(data):listeners.run();
				}else {
				for (var i=0,n=listeners.length;i < n;i++){
					var listener=listeners[i];
					if (listener){
						data !=null ? listener.runWith(data):listener.run();
					}
					if (!listener || listener.once){
						listeners.splice(i,1);
						i--;
						n--;
					}
				}
				if (listeners.length===0)delete this._events[type];
			}
			return true;
		}

		/**
		*增加事件监听
		*@param type 事件类型，可以参考Event类定义
		*@param caller 执行域(this域)，默认为监听对象的this域
		*@param listener 回调方法，如果为空，则移除所有type类型的事件监听
		*@param args 回调参数
		*@return 返回对象本身
		*/
		__proto.on=function(type,caller,listener,args){
			return this._createListener(type,caller,listener,args,false);
		}

		/**
		*增加一次性事件监听，执行后会自动移除监听
		*@param type 事件类型，可以参考Event类定义
		*@param caller 执行域(this域)，默认为监听对象的this域
		*@param listener 回调方法，如果为空，则移除所有type类型的事件监听
		*@param args 回调参数
		*@return 返回对象本身
		*/
		__proto.once=function(type,caller,listener,args){
			return this._createListener(type,caller,listener,args,true);
		}

		__proto._createListener=function(type,caller,listener,args,once){
			this.off(type,caller,listener,once);
			var handler=EventHandler.create(caller || this,listener,args,once);
			this._events || (this._events={});
			var events=this._events;
			if (!events[type])events[type]=handler;
			else {
				if (!events[type].run)events[type].push(handler);
				else events[type]=[events[type],handler];
			}
			return this;
		}

		/**
		*移除事件监听，同removeListener方法
		*@param type 事件类型，可以参考Event类定义
		*@param caller 执行域(this域)，默认为监听对象的this域
		*@param listener 回调方法，如果为空，则移除所有type类型的事件监听
		*@param onceOnly 是否只移除once监听，默认为false
		*@return 返回对象本身
		*/
		__proto.off=function(type,caller,listener,onceOnly){
			(onceOnly===void 0)&& (onceOnly=false);
			if (!this._events || !this._events[type])return this;
			var listeners=this._events[type];
			if (listener !=null){
				if (listeners.run){
					if ((!caller || listeners.caller===caller)&& listeners.method===listener && (!onceOnly || listeners.once)){
						delete this._events[type];
						listeners.recover();
					}
					}else {
					var count=0;
					for (var i=0,n=listeners.length;i < n;i++){
						var item=listeners[i];
						if (item && (!caller || item.caller===caller)&& item.method===listener && (!onceOnly || item.once)){
							count++;
							listeners[i]=null;
							item.recover();
						}
					}
					if (count===n)delete this._events[type];
				}
			}
			return this;
		}

		/**
		*移除某类型所有事件监听
		*@param type 事件类型，如果为空，则移除本对象所有事件监听
		*@return 返回对象本身
		*/
		__proto.offAll=function(type){
			var events=this._events;
			if (!events)return this;
			if (type){
				this._recoverHandlers(events[type]);
				delete events[type];
				}else {
				for (var name in events){
					this._recoverHandlers(events[name]);
				}
				this._events=null;
			}
			return this;
		}

		__proto._recoverHandlers=function(arr){
			if (arr.run){
				arr.recover();
				}else {
				for (var i=arr.length-1;i >-1;i--){
					if (arr[i]){
						arr[i].recover();
						arr[i]=null;
					}
				}
			}
		}

		/**
		*是否是鼠标事件
		*@param type 事件类型
		*@return 是否鼠标事件
		*/
		__proto.isMouseEvent=function(type){
			return EventDispatcher.MOUSE_EVENTS[type];
		}

		EventDispatcher.MOUSE_EVENTS={"rightmousedown":true,"rightmouseup":true,"rightclick":true,"mousedown":true,"mouseup":true,"mousemove":true,"mouseover":true,"mouseout":true,"click":true,"doubleclick":true};
		EventDispatcher.__init$=function(){
			//class EventHandler extends laya.utils.Handler
			EventHandler=(function(_super){
				function EventHandler(caller,method,args,once){
					EventHandler.__super.call(this,caller,method,args,once);
				}
				__class(EventHandler,'',_super);
				var __proto=EventHandler.prototype;
				__proto.recover=function(){
					if (this._id > 0){
						this._id=0;
						EventHandler._pool.push(this.clear());
					}
				}
				EventHandler.create=function(caller,method,args,once){
					(once===void 0)&& (once=true);
					if (EventHandler._pool.length)return EventHandler._pool.pop().setTo(caller,method,args,once);
					return new EventHandler(caller,method,args,once);
				}
				EventHandler._pool=[];
				return EventHandler;
			})(Handler)
		}

		return EventDispatcher;
	})()


	/**
	*处理器，推荐使用Handler.create()方法从对象池创建，减少对象创建消耗
	*【注意】由于鼠标事件也用本对象池，不正确的回收及调用，可能会影响鼠标事件的执行
	*@author yung
	*/
	//class laya.utils.Handler
	var Handler=(function(){
		function Handler(caller,method,args,once){
			//this.caller=null;
			//this.method=null;
			//this.args=null;
			this.once=false;
			this._id=0;
			(once===void 0)&& (once=false);
			this.setTo(caller,method,args,once);
		}

		__class(Handler,'laya.utils.Handler');
		var __proto=Handler.prototype;
		/**
		*设置处理器
		*@param caller 执行域(this)
		*@param method 回调方法
		*@param args 携带的参数
		*@param once 是否只执行一次，如果为true，执行后执行recover()进行回收
		*@return 返回handler本身
		*/
		__proto.setTo=function(caller,method,args,once){
			this._id=Handler._gid++;
			this.caller=caller;
			this.method=method;
			this.args=args;
			this.once=once;
			return this;
		}

		/**
		*执行处理器
		*/
		__proto.run=function(){
			if (this.method==null)return;
			var id=this._id;
			this.method.apply(this.caller,this.args);
			this._id===id && this.once && this.recover();
		}

		/**
		*执行处理器，携带额外数据
		*@param data 附加的回调数据，可以是单数据或者Array(作为多参)
		*/
		__proto.runWith=function(data){
			if (this.method==null)return;
			var id=this._id;
			if (data==null)this.method.apply(this.caller,this.args);
			else if (!this.args && !data.unshift)this.method.call(this.caller,data);
			else if (this.args)this.method.apply(this.caller,this.args ? this.args.concat(data):data);
			else this.method.apply(this.caller,data);
			this._id===id && this.once && this.recover();
		}

		/**
		*清理对象引用
		*/
		__proto.clear=function(){
			this.caller=null;
			this.method=null;
			this.args=null;
			return this;
		}

		/**
		*clear()并回收到Handler对象池内
		*/
		__proto.recover=function(){
			if (this._id > 0){
				this._id=0;
				Handler._pool.push(this.clear());
			}
		}

		Handler.create=function(caller,method,args,once){
			(once===void 0)&& (once=true);
			if (Handler._pool.length)return Handler._pool.pop().setTo(caller,method,args,once);
			return new Handler(caller,method,args,once);
		}

		Handler._pool=[];
		Handler._gid=1;
		return Handler;
	})()


	/**项目配置
	*@author yung
	*/
	//class laya.editor.config.ProjectSetting
	var ProjectSetting=(function(){
		function ProjectSetting(){};
		__class(ProjectSetting,'laya.editor.config.ProjectSetting');
		ProjectSetting.adptPaths=function(){
			var i=0,len=0;
			var tKey;
			len=ProjectSetting.UiPaths.length;
			for(i=0;i<len;i++){
				tKey=ProjectSetting.UiPaths[i];
				ProjectSetting[tKey]=StringTool.trimSide(ProjectSetting[tKey]+"");
			}
		}

		ProjectSetting.isContainer=function(type){
			return ProjectSetting.boxTypes.indexOf(type)>=0;
		}

		ProjectSetting.codeExportPath="src/game/ui/";
		ProjectSetting.defaultFont="";
		ProjectSetting.resExportPath="bin/h5";
		ProjectSetting.resCanCompress=0;
		ProjectSetting.resPublishQuality=80;
		ProjectSetting.uiType=0;
		ProjectSetting.codeType=0;
		ProjectSetting.uiExportPath="bin/ui.swf";
		ProjectSetting.shareResPath="";
		ProjectSetting.exportResType="swf";
		ProjectSetting.createSwfType="image";
		ProjectSetting.langPath="";
		ProjectSetting.textureWidth=2048;
		ProjectSetting.textureHeight=2048;
		ProjectSetting.picWidth=2048;
		ProjectSetting.picHeight=2048;
		ProjectSetting.power2="true";
		ProjectSetting.trimempty="false";
		__static(ProjectSetting,
		['resTypes',function(){return this.resTypes=["png","jpg"];},'codeImports',function(){return this.codeImports="import laya.ui.*;";},'codeImportsJS',function(){return this.codeImportsJS="var View=laya.ui.View;\nvar Dialog=laya.ui.Dialog;";},'codeImportsTS',function(){return this.codeImportsTS="import View=laya.ui.View;\nimport Dialog=laya.ui.Dialog;";},'boxTypes',function(){return this.boxTypes=["Box","List","Tab","RadioGroup","ViewStack","Panel","Tree"];},'pageTypes',function(){return this.pageTypes=["View","Dialog"];},'UiPaths',function(){return this.UiPaths=
			[
			"codeExportPath",
			"resExportPath",
			"shareResPath",
			"uiExportPath",
			"codeType",
			"defaultFont",
			"uiType",
			"textureWidth",
			"textureHeight",
			"picWidth",
			"picHeight",
			"power2",
			"trimempty"];}
		]);
		return ProjectSetting;
	})()


	/**
	*
	*@author ww
	*@version 1.0
	*
	*@created 2016-3-18 上午11:14:51
	*/
	//class laya.editor.config.StyleConsts
	var StyleConsts=(function(){
		function StyleConsts(){}
		__class(StyleConsts,'laya.editor.config.StyleConsts');
		StyleConsts.FolderTxtColor="#c8c8c8";
		StyleConsts.ItemTxtColor="#aaaaaa";
		StyleConsts.ItemSelectColor="#44a7ff";
		StyleConsts.MenuButtonLabelColor="#d2d2d2,#d2d2d2,#d2d2d2,#d2d2d2";
		StyleConsts.LayoutTabTitleBtnColor="#8a8a8a,#c8c8c8,#c8c8c8,#c8c8c8";
		StyleConsts.SkinBtnLabelColor="#44a7ff,#44a7ff,#44a7ff,#44a7ff";
		StyleConsts.TextInputColor="#8a8a8a";
		StyleConsts.SelectItemInfoColor="#636363";
		return StyleConsts;
	})()


	/**系统配置
	*@author yung
	*/
	//class laya.editor.config.SystemSetting
	var SystemSetting=(function(){
		function SystemSetting(){};
		__class(SystemSetting,'laya.editor.config.SystemSetting');
		SystemSetting.setProject=function(path){
			if (FileTools.exist(path)){
				SystemSetting.projectPath=path;
				SystemSetting.projectName=FileTools.getFileName(path).replace(".laya","");
				SystemSetting.workPath=path.substr(0,path.lastIndexOf(FileTools.getSep()));
				SystemSetting.pagesPath=FileManager.getWorkPath("laya/pages");
				SystemSetting.assetsPath=FileManager.getWorkPath("laya/assets");
				SystemSetting.stylePath=FileManager.getWorkPath("laya/styles.xml");
				SystemSetting.pageStylePath=FileManager.getWorkPath("laya/pageStyles.xml");
				SystemSetting.tempPath=FileManager.getAppPath("data/"+SystemSetting.projectName);
				SystemSetting.tempResPath=FileManager.getAppPath("data/"+SystemSetting.projectName+"/assets");
				SystemSetting.tempVerPath=FileManager.getAppPath("data/"+SystemSetting.projectName+"/ver");
				SysLog.log("setProject path:"+path);
				FileManager.createDirectory(SystemSetting.pagesPath);
				FileManager.createDirectory(SystemSetting.assetsPath);
				FileManager.createDirectory(SystemSetting.tempPath);
				FileManager.createDirectory(SystemSetting.tempResPath);
				FileManager.createDirectory(SystemSetting.tempVerPath);
			}
		}

		SystemSetting.workPath="";
		SystemSetting.appPath="";
		SystemSetting.projectName="";
		SystemSetting.projectPath="";
		SystemSetting.pagesPath="";
		SystemSetting.assetsPath="";
		SystemSetting.stylePath="";
		SystemSetting.pageStylePath="";
		SystemSetting.tempResPath="";
		SystemSetting.tempVerPath="";
		SystemSetting.tempPath="";
		SystemSetting.lang="";
		SystemSetting.ifShowRuleGrid=true;
		return SystemSetting;
	})()


	/**
	*本类用于节点数据不同格式间的转换
	*@author ww
	*/
	//class laya.editor.core.design.DesignInfo
	var DesignInfo=(function(){
		function DesignInfo(){
			this.type=null;
			this.child=null;
			this.props=null;
			this.compId=0;
		}

		__class(DesignInfo,'laya.editor.core.design.DesignInfo');
		DesignInfo.uiObjToXml=function(uiObj,aniXml){
			var xml;
			xml=new XMLElement();
			xml.setLocalName(uiObj.type);
			if(!aniXml){
				aniXml=new XMLElement();
				aniXml.setLocalName("Ani");
				xml.appendChild(aniXml);
			};
			var key;
			var props;
			props=uiObj.props;
			for(key in props){
				xml.setAttribute(key,props[key]);
			};
			var childs;
			childs=uiObj.child;
			if(!childs)childs=[];
			var i=0,len=0;
			len=childs.length;
			for(i=0;i<len;i++){
				xml.appendChild(DesignInfo.uiObjToXml(childs[i],aniXml));
			}
			xml.setAttribute("editorInfo",DesignInfo.getIDEValue(uiObj));
			var frames;
			frames=uiObj.frames;
			if(!frames)frames=[];
			var frameXml;
			frameXml=new XMLElement();
			frameXml.setLocalName("tarAni");
			frameXml.setAttribute("target",uiObj.compId);
			len=frames.length;
			var tFrame;
			var tFrameO;
			for(i=0;i<len;i++){
				tFrameO=frames[i];
				tFrame=new XMLElement();
				tFrame.setLocalName("frame");
				props=tFrameO.props;
				for(key in props){
					tFrame.setAttribute(key,props[key]);
				}
				tFrame.setAttribute("editorInfo",DesignInfo.getIDEValue(tFrameO,DesignInfo.frameSaveKeys));
				frameXml.appendChild(tFrame);
			}
			aniXml.appendChild(frameXml);
			console.log("xmlString:",xml.toXMLString());
			return xml;
		}

		DesignInfo.getIDEValue=function(node,saveKeys){
			if(!saveKeys)saveKeys=DesignInfo.saveEmpty;
			var rst;
			var key;
			var KeyValues;
			KeyValues=[];
			for(key in node){
				if(!DesignInfo.specialKeys.hasOwnProperty(key)||saveKeys.hasOwnProperty(key)){
					KeyValues.push(key+"="+node[key]);
				}
			}
			rst=KeyValues.join(";");
			return rst;
		}

		DesignInfo.xmlStrToUIObj=function(xmlString){
			return DesignInfo.uiXmlToObj(Utils1.parseXMLFromString(xmlString));
		}

		DesignInfo.uiXmlToObj=function(xml){
			console.log("xml:",xml);
			var xmlObj;
			xmlObj=XML2Object.parse(xml);
			console.log("obj:",xmlObj);
			var rst;
			var aniDic;
			aniDic=DesignInfo.parseFramesData(xmlObj.cList[0]);
			rst=DesignInfo.getUIObjByXmlObj(xmlObj.cList[0],aniDic);
			console.log("uiObj:",rst);
			return rst;
		}

		DesignInfo.parseFramesData=function(data){
			console.log("parseFramesData");
			var aniDic;
			aniDic={};
			var ani;
			ani=data.cList[0];
			if(!ani)return aniDic;
			var frames;
			frames=ani.c["tarAni"];
			if(!frames)frames=[];
			var i=0,len=0;
			len=frames.length;
			var tAni;
			var tarFrames;
			for(i=0;i<len;i++){
				tAni=frames[i];
				console.log("tAni:",tAni);
				tarFrames=tAni.c.frame;
				if(!tarFrames)tarFrames=[];
				if(! (tarFrames instanceof Array)){
					tarFrames=[tarFrames];
				}
				aniDic[tAni.p["target"]]=DesignInfo.parseTarFrames(tarFrames);
			}
			console.log("aniDic:",aniDic);
			return aniDic;
		}

		DesignInfo.parseTarFrames=function(tarFrames){
			var i=0,len=0;
			len=tarFrames.length;
			var tFrame;
			var rst;
			rst=[];
			for(i=0;i<len;i++){
				rst.push(DesignInfo.createNodeObj(tarFrames[i]));
			}
			return rst;
		}

		DesignInfo.getUIObjByXmlObj=function(xmlObj,aniDic){
			var rst;
			var cList;
			rst=DesignInfo.createNodeObj(xmlObj);
			var props;
			var key;
			var i=0,len=0;
			cList=xmlObj.cList;
			var frames;
			frames=[];
			len=cList.length;
			var tObj;
			var childs;
			childs=[];
			for(i=0;i<len;i++){
				tObj=cList[i];
				if(tObj.Name=="parsererror")continue ;
				if(tObj.Name=="Ani")continue ;
				if(tObj.Name=="frame"){
					frames.push(DesignInfo.createNodeObj(tObj));
					}else{
					childs.push(DesignInfo.getUIObjByXmlObj(tObj,aniDic));
				}
			}
			rst.child=childs;
			rst.frames=aniDic[rst.compId];
			return rst;
		}

		DesignInfo.createNodeObj=function(data){
			var rst;
			rst={};
			rst.type=data.Name;
			rst.props={};
			if(rst.type=="UIView"&&!rst.source){
				rst.source=data.p.source;
			}
			DesignInfo.createValueObj(data.p,rst.props);
			delete rst["frame"];
			DesignInfo.solveEditorInfo(rst);
			return rst;
		}

		DesignInfo.createValueObj=function(srcProps,rst){
			if(!rst)
				rst={};
			var key;
			for(key in srcProps){
				rst[key]=ObjectTools.getStrTypedValue(srcProps[key]);
			}
			return rst;
		}

		DesignInfo.solveEditorInfo=function(node){
			var keyValueStr;
			keyValueStr=node.props["editorInfo"];
			delete node.props["editorInfo"];
			var keyvalueStrs;
			if(keyValueStr){
				keyvalueStrs=keyValueStr.split(";");
				var i=0,len=0;
				var tArr;
				len=keyvalueStrs.length;
				for(i=0;i<len;i++){
					tArr=keyvalueStrs[i].split("=");
					node[tArr[0]]=ObjectTools.getStrTypedValue(tArr[1]);
				}
			}
		}

		DesignInfo.EditorInfo="editorInfo";
		DesignInfo.Frame="frame";
		DesignInfo.Ani="Ani";
		DesignInfo.TarAni="tarAni";
		DesignInfo.Target="target";
		DesignInfo.saveEmpty={};
		__static(DesignInfo,
		['specialKeys',function(){return this.specialKeys={
				type:true,
				child:true,
				props:true,
				editorInfo:true,
				frames:true
				};},'frameSaveKeys',function(){return this.frameSaveKeys={
				type:true
		};}

		]);
		return DesignInfo;
	})()


	/**
	*
	*@author ww
	*@version 1.0
	*
	*@created 2015-12-15 下午2:55:24
	*/
	//class laya.editor.core.design.TreeData
	var TreeData=(function(){
		function TreeData(){
			this._nodeDic=null;
			this._root=null;
			this._nodeList=null;
		}

		__class(TreeData,'laya.editor.core.design.TreeData');
		var __proto=TreeData.prototype;
		__proto.addChild=function(child,parent){
			TreeData.getNodeChilds(parent).push(child);
			this.setNodeParent(child,parent);
			return child;
		}

		__proto.removeSelf=function(child){
			this.removeChild(child,this.getNodeParent(child));
		}

		__proto.removeChild=function(child,parent){
			child.nodeParent=null;
			if(!parent)return child;
			var childList;
			childList=TreeData.getNodeChilds(parent);
			var i=0,len=0;
			len=childList.length;
			for(i=len-1;i>=0;i--){
				if(this.isNodeSame(childList[i],child)){
					childList.splice(i,1);
				}
			}
			return child;
		}

		__proto.insertToTarParent=function(tarA,tars,after){
			(after===void 0)&& (after=false);
			var tIndex=0;
			var parent;
			if(!tarA)return;
			parent=this.getNodeParent(tarA);
			if(!parent)return;
			var i=0,len=0;
			len=tars.length;
			for(i=0;i<len;i++){
				this.removeSelf(tars[i]);
				tIndex=this.getChildIndex(tarA,parent);
				if(after)tIndex++;
				this.addChildAt(tars[i],tIndex,parent);
			}
		}

		//insertToParent(parent,tars,tIndex);
		__proto.insertToParent=function(parent,tars,index){
			(index===void 0)&& (index=-1);
			if(!parent)return;
			this.removeItemFromParent(tars);
			if(index<0)index=this.numChildren(parent);
			var i=0,len=0;
			len=tars.length;
			for(i=0;i<len;i++){
				this.transParent(tars[i],parent);
				this.addChildAt(tars[i],index,parent);
			}
		}

		__proto.removeItemFromParent=function(tars){
			var i=0,len=0;
			len=tars.length;
			for(i=0;i<len;i++){
				this.removeSelf(tars[i]);
			}
		}

		__proto.transParent=function(tar,newParent){}
		__proto.addChildAt=function(child,index,parent){
			if(child==parent){
				throw new Error("appendChildAt:add self to self");
			}
			this.removeSelf(child);
			var childs;
			childs=TreeData.getNodeChilds(parent);
			if (index >=0 && index <=childs.length){
				childs.splice(index,0,child);
				this.setNodeParent(child,parent);
				return child;
				}else {
				throw new Error("appendChildAt:The index is out of bounds");
			}
			return child;
		}

		__proto.isNodeSame=function(nodeA,nodeB){
			if(!nodeA||!nodeB)return false;
			return nodeA==nodeB||nodeA.compId==nodeB.compId;
		}

		__proto.numChildren=function(parent){
			return TreeData.getNodeChilds(parent).length;
		}

		__proto.getChildIndex=function(child,parent){
			var i=0,len=0;
			var childs;
			childs=TreeData.getNodeChilds(parent);
			len=childs.length;
			for(i=0;i<len;i++){
				if(this.isNodeSame(childs[i],child))return i;
			}
			return TreeData.getNodeChilds(parent).indexOf(child);
		}

		__proto.getNodeByID=function(id){
			return this._nodeDic[id];
		}

		__proto.getNodeParent=function(child){
			return this.getNodeByID(child.nodeParent);
		}

		__proto.setNodeParent=function(child,parent){
			child.nodeParent=TreeData.getNodeID(parent);
		}

		__proto.getNodeLabel=function(node){
			var str;
			if(node.props.name){
				str=node.type+"("+node.props.name+")";
				}else{
				str=node.type
			}
			return str;
		}

		__proto.reset=function(){
			this._root=null;
			this._nodeDic={};
			this._nodeList=[];
		}

		__proto.setData=function(uiObj){
			this.reset();
			this._root=uiObj;
			this.modifyNode(this._root,null);
		}

		__proto.modifyNode=function(node,parent){
			this._nodeList.push(node);
			delete node.x;
			delete node.y;
			if(!node.compId){
				debugger;
			}
			this._nodeDic[node.compId]=node;
			this.setNodeParent(node,parent);
			node.label=this.getNodeLabel(node);
			var i=0,len=0;
			var childs;
			childs=TreeData.getNodeChilds(node);
			len=childs.length;
			for(i=0;i<len;i++){
				this.modifyNode(childs[i],node);
			}
			node.hasChild=node.isDirectory=childs.length>0;
			TreeData.getNodeFrames(node);
		}

		__proto.getTreeArr=function(){
			return this._nodeList;
		}

		__proto.recordFrameData=function(node,frame,workChild){
			(workChild===void 0)&& (workChild=false);
			if(!node)node=this._root;
			TreeData.recordTreeFrame(node,frame);
		}

		__proto.getMaxFrame=function(){
			var maxFrame=0;
			var i=0,len=0;
			var nodes;
			var tFrameCount=0;
			nodes=this._nodeList;
			len=nodes.length;
			maxFrame=0;
			for(i=0;i<len;i++){
				tFrameCount=TreeData.getNodeMaxFrame(nodes[i]);
				if(maxFrame<tFrameCount){
					maxFrame=tFrameCount;
				}
			}
			return maxFrame;
		}

		__getset(0,__proto,'root',function(){
			return this._root;
		});

		TreeData.getNodeID=function(node){
			if(!node)return 0;
			return node.compId;
		}

		TreeData.getNodeChilds=function(node){
			if(!node.child){
				node.child=[];
			}
			return node.child;
		}

		TreeData.cleanNode=function(node){
			var i=0,len=0;
			len=TreeData._cleanNames.length;
			for(i=0;i<len;i++){
				delete node[TreeData._cleanNames[i]];
			};
			var childs;
			childs=TreeData.getNodeChilds(node);
			len=childs.length;
			for(i=0;i<len;i++){
				TreeData.cleanNode(childs[i]);
			}
		}

		TreeData.recordTreeFrame=function(node,frame,workChild){
			(workChild===void 0)&& (workChild=false);
			TreeData.recordFrame(node,frame,false);
			if(!workChild)return;
			var i=0,len=0;
			var childs;
			childs=TreeData.getNodeChilds(node);
			len=childs.length;
			for(i=0;i<len;i++){
				TreeData.recordTreeFrame(childs[i],frame,workChild);
			}
		}

		TreeData.isNodeFrameChanged=function(node,frame){
			return true;
		}

		TreeData.recordFrame=function(node,frame,autoCreate){
			(autoCreate===void 0)&& (autoCreate=false);
			var frameData;
			frameData=TreeData.getFrameData(node,frame,autoCreate);
			if(!frameData){
				return;
			}
			console.log("recordFrame:",node.props);
			TreeData.copyAniValues(frameData.props,node.props);
		}

		TreeData.getNodeMaxFrame=function(node){
			var frames;
			frames=TreeData.getNodeFrames(node);
			if(frames.length<1)return 0;
			return frames[frames.length-1].frame;
		}

		TreeData.getFrameProps=function(frameData){
			if(!frameData.props){
				frameData.props={};
			}
			return frameData.props;
		}

		TreeData.copyAniValues=function(dest,src){
			var key;
			for(key in src){
				if((typeof (src[key])=='object')){
					debugger;
				}
				dest[key]=src[key];
				if(ObjectTools.isNaN(dest[key])){
					debugger;
				}
			}
		}

		TreeData.getFrameData=function(node,frame,autoCreate){
			(autoCreate===void 0)&& (autoCreate=true);
			var frames;
			frames=TreeData.getNodeFrames(node);
			var pos=0;
			pos=ObjectTools.findItemPos(frames,"frame",frame);
			if(pos<0){
				if(!autoCreate){
					return null;
					}else{
					return TreeData.addFrame(node,frame);
				}
				}else{
				return frames[pos];
			}
		}

		TreeData.getWrapFrame=function(node,frame,autoCreate){
			(autoCreate===void 0)&& (autoCreate=true);
			TreeData.sortNodeFrames(node);
			var i=0,len=0;
			var frames;
			frames=TreeData.getNodeFrames(node);
			len=frames.length;
			var tFrame;
			for(i=0;i<len;i++){
				tFrame=frames[i];
				if(tFrame.frame==frame){
					return [tFrame];
				}
				if(tFrame.frame>frame){
					break ;
				}
			}
			if(tFrame&&tFrame.frame>=frame){
				if(tFrame.frame==frame){
					return [tFrame];
				}else
				if(tFrame.frame>frame){
					return [frames[i-1],tFrame];
				}
				}else{
				var frameProps;
				frameProps=tFrame?ObjectTools.copyObj(tFrame.props):ObjectTools.copyObj(node.props);
				tFrame=TimeFrameData.create(frame,frameProps);
				if(autoCreate){
					TreeData.addFrameToNode(tFrame,node);
					}else{
				}
				return [tFrame];
			}
			return null;
		}

		TreeData.getNodeFrameProps=function(node,frame){
			var wrapsFrames;
			wrapsFrames=TreeData.getWrapFrame(node,frame,false);
			var rst;
			if(wrapsFrames.length==1){
				rst=wrapsFrames[0].props;
				}else{
				rst=TreeData.getFrameProp(wrapsFrames[0],wrapsFrames[1],frame);
			}
			console.log("getNodeFrameProps:",rst);
			return ObjectTools.copyObj(rst);
		}

		TreeData.setDefaultValues=function(propA,propB){
			TreeData.setDefaultValueTo(propA,propB);
			TreeData.setDefaultValueTo(propB,propA);
		}

		TreeData.setDefaultValueTo=function(propA,propB){
			var key;
			for(key in propA){
				if(!propB.hasOwnProperty(key)){
					if(TreeData.defaultValueDic.hasOwnProperty(key)){
						propB[key]=TreeData.defaultValueDic[key];
						}else{
						propB[key]=propA[key];
					}
				}
			}
		}

		TreeData.getFrameProp=function(leftFrame,rightFrame,frame){
			var left=0;
			var right=0;
			var props;
			props={};
			left=leftFrame.frame;
			right=rightFrame.frame;
			var percent=NaN;
			percent=(frame-left)/(right-left);
			console.log("percent:",percent);
			var key;
			var leftProps;
			var rightProps;
			leftProps=leftFrame.props;
			rightProps=rightFrame.props;
			TreeData.setDefaultValues(rightProps,leftProps);
			var leftValue=NaN;
			var rightValue=NaN;
			for(key in leftProps){
				if(ObjectTools.isNumber(leftProps[key])){
					leftValue=parseFloat(leftProps[key]);
					rightValue=parseFloat(rightProps[key]);
					props[key]=leftValue+percent*(rightValue-leftValue);
					}else{
					props[key]=leftProps[key];
				}
				if(ObjectTools.isNaN(props[key])){
					debugger;
				}
			}
			return props;
		}

		TreeData.sortNodeFrames=function(node){
			var frames=TreeData.getNodeFrames(node);
			frames.sort(MathUtil.SortByKey("frame"));
		}

		TreeData.getNodeFrames=function(node){
			if(!node.frames){
				var frameData;
				frameData=TimeFrameData.create(0,ObjectTools.copyObj(node.props));
				node.frames=[frameData];
			}
			return node.frames;
		}

		TreeData.displayFrame=function(node,frame){
			var disProps;
			disProps=TreeData.getNodeFrameProps(node,frame);
			console.log("displayFrame:",disProps,frame,node);
			TreeData.copyAniValues(node.props,disProps);
		}

		TreeData.displayTreeToFrame=function(node,frame,self,child){
			(self===void 0)&& (self=true);
			(child===void 0)&& (child=true);
			if(self){
				TreeData.displayFrame(node,frame);
			}
			if(!child)return;
			var i=0,len=0;
			var childs;
			childs=TreeData.getNodeChilds(node);
			len=childs.length;
			for(i=0;i<len;i++){
				TreeData.displayTreeToFrame(childs[i],frame,true,true);
			}
		}

		TreeData.addFrame=function(node,frame,props){
			if(!props){
				props={};
				var wrapFrames;
				wrapFrames=TreeData.getWrapFrame(node,frame);
				TreeData.copyAniValues(props,wrapFrames[0].props);
			};
			var frameData;
			frameData=TimeFrameData.create(frame,props);
			TreeData.addFrameToNode(frameData,node);
			return frameData;
		}

		TreeData.addFrameToNode=function(frameData,node){
			var preFrameData;
			preFrameData=TreeData.getFrameData(node,frameData.frame,false);
			if(preFrameData){
				TreeData.copyAniValues(preFrameData.props,frameData.props);
				}else{
				var frames;
				frames=TreeData.getNodeFrames(node);
				frames.push(frameData);
				TreeData.sortNodeFrames(node);
			}
		}

		TreeData.moveFrame=function(node,preFrame,newFrame){}
		TreeData.createByUIObj=function(uiObj){
			var treeData;
			console.log("createByUIObj");
			treeData=new TreeData();
			treeData.setData(uiObj);
			return treeData;
		}

		__static(TreeData,
		['_cleanNames',function(){return this._cleanNames=
			[
			"label",
			"nodeParent"];},'defaultValueDic',function(){return this.defaultValueDic={
				x:0,
				y:0,
				scaleX:1,
				scaleY:1,
				rotation:0
				};},'defaultValueSameDic',function(){return this.defaultValueSameDic={
				width:0,
				height:0
		};}

		]);
		return TreeData;
	})()


	/**
	*事件类型
	*@author yung
	*/
	//class laya.events.Event
	var Event=(function(){
		function Event(){
			//this.type=null;
			//this.nativeEvent=null;
			//this.target=null;
			//this.currentTarget=null;
			//this._stoped=false;
			//this.touchId=0;
		}

		__class(Event,'laya.events.Event');
		var __proto=Event.prototype;
		/**
		*设置事件数据
		*@param type 事件类型
		*@param currentTarget 事件目标触发对象
		*@param target 事件当前冒泡对象
		*@return
		*/
		__proto.setTo=function(type,currentTarget,target){
			this.type=type;
			this.currentTarget=currentTarget;
			this.target=target;
			return this;
		}

		/**停止事件冒泡*/
		__proto.stopPropagation=function(){
			this._stoped=true;
		}

		/**鼠标事件的同时是否按下shift键*/
		__getset(0,__proto,'shiftKey',function(){
			return this.nativeEvent.shiftKey;
		});

		/**多点触摸时，返回触摸点的集合*/
		__getset(0,__proto,'touches',function(){
			var arr=this.nativeEvent.touches;
			if (arr){
				for (var i=0,n=arr.length;i < n;i++){
					var e=arr[i];
					var point=Point.TEMP;
					point.setTo(e.clientX,e.clientY);
					Laya.stage._canvasTransform.invertTransformPoint(point);
					e.stageX=point.x;
					e.stageY=point.y;
				}
			}
			return arr;
		});

		/**鼠标事件的同时是否按下alt键*/
		__getset(0,__proto,'altKey',function(){
			return this.nativeEvent.altKey;
		});

		/**鼠标事件的同时是否按下ctrl键*/
		__getset(0,__proto,'ctrlKey',function(){
			return this.nativeEvent.ctrlKey;
		});

		Event.EMPTY=new Event();
		Event.MOUSE_DOWN="mousedown";
		Event.MOUSE_UP="mouseup";
		Event.CLICK="click";
		Event.RIGHT_MOUSE_DOWN="rightmousedown";
		Event.RIGHT_MOUSE_UP="rightmouseup";
		Event.RIGHT_CLICK="rightclick";
		Event.MOUSE_MOVE="mousemove";
		Event.MOUSE_OVER="mouseover";
		Event.MOUSE_OUT="mouseout";
		Event.MOUSE_WHEEL="mousewheel";
		Event.ROLL_OVER="mouseover";
		Event.ROLL_OUT="mouseout";
		Event.DOUBLE_CLICK="doubleclick";
		Event.CHANGE="change";
		Event.CHANGED="changed";
		Event.RESIZE="resize";
		Event.ADDED="added";
		Event.REMOVED="removed";
		Event.DISPLAY="display";
		Event.UNDISPLAY="undisplay";
		Event.ERROR="error";
		Event.COMPLETE="complete";
		Event.LOADED="loaded";
		Event.PROGRESS="progress";
		Event.INPUT="input";
		Event.RENDER="render";
		Event.OPEN="open";
		Event.MESSAGE="message";
		Event.CLOSE="close";
		Event.KEY_DOWN="keydown";
		Event.KEY_PRESS="keypress";
		Event.KEY_UP="keyup";
		Event.ENTER_FRAME="enterframe";
		Event.DRAG_START="dragstart";
		Event.DRAG_MOVE="dragmove";
		Event.DRAG_END="dragend";
		Event.ENTER="enter";
		Event.SELECT="select";
		Event.BLUR="blur";
		Event.FOCUS="focus";
		Event.PLAYED="played";
		Event.PAUSED="paused";
		Event.STOPPED="stopped";
		Event.START="start";
		Event.END="end";
		Event.ENABLED_CHANGED="enabledchanged";
		Event.COMPONENT_ADDED="componentadded";
		Event.COMPONENT_REMOVED="componentremoved";
		Event.ACTIVE_CHANGED="activechanged";
		Event.LAYER_CHANGED="layerchanged";
		Event.HIERARCHY_LOADED="hierarchyloaded";
		Event.MEMORY_CHANGED="memorychanged";
		Event.RECOVERED="recovered";
		Event.RELEASED="released";
		Event.LINK="link";
		return Event;
	})()


	/**拖动管理类*/
	//class laya.editor.core.managers.DragManager
	var DragManager=(function(){
		function DragManager(){
			this._dragInitiator=null;
			this._dragImage=null;
		}

		__class(DragManager,'laya.editor.core.managers.DragManager');
		var __proto=DragManager.prototype;
		/**开始拖动
		*@param dragInitiator 拖动的源对象
		*@param dragImage 显示拖动的图片，如果为null，则是源对象本身
		*@param data 拖动传递的数据
		*@param offset 鼠标居拖动图片的偏移*/
		__proto.doDrag=function(dragInitiator,dragImage,data,offset){
			console.log("doDrag");
			this.clears();
			DragManager.prePos.setTo(Laya.stage.mouseX,Laya.stage.mouseY);
			this._dragInitiator=dragInitiator;
			this._dragImage=dragImage ? dragImage :dragInitiator;
			DragManager._data=data || {};
			if (this._dragImage !=this._dragInitiator){
				if (!this._dragImage.parent){
					Laya.stage.addChild(this._dragImage);
				}
				offset=offset || new Point();
				var p=this._dragImage.globalToLocal(new Point(Laya.stage.mouseX,Laya.stage.mouseY));
				this._dragImage.x=p.x-offset.x;
				this._dragImage.y=p.y-offset.y;
				this._dragImage.visible=false;
				this._dragImage.mouseEnabled=false;
			}
			Laya.stage.on("mousemove",this,this.onStageMouseMove);
			Laya.stage.on("mouseup",this,this.onStageMouseUp);
		}

		/**放置把拖动条拖出显示区域*/
		__proto.onStageMouseMove=function(e){
			if (Math.abs(DragManager.prePos.x-Laya.stage.mouseX)+Math.abs(DragManager.prePos.y-Laya.stage.mouseY)<8){
				return;
			}
			if(!this._dragImage)return;
			if (!DragManager.isDraging){
				this._dragImage.visible=true;
				console.log("startDrag");
				this._dragImage.x-=DragManager.prePos.x-Laya.stage.mouseX;
				this._dragImage.y-=DragManager.prePos.y-Laya.stage.mouseY;
				this._dragImage.startDrag();
				this._dragInitiator.event("dragStart",[ this._dragInitiator,DragManager._data]);
				DragManager.isDraging=true;
				this._dragImage.mouseEnabled=false;
			}
			this.sendDragEvent("Draging_Hit");
		}

		__proto.onStageMouseUp=function(e){
			Laya.stage.off("mousemove",this,this.onStageMouseMove);
			Laya.stage.off("mouseup",this,this.onStageMouseUp);
			console.log("drag end");
			DragManager.dPos.setTo(Laya.stage.mouseX-DragManager.prePos.x,Laya.stage.mouseY-DragManager.prePos.y);
			if (Math.abs(DragManager.prePos.x-Laya.stage.mouseX)+Math.abs(DragManager.prePos.y-Laya.stage.mouseY)<8){
				this.clears();
				return;
			}
			this.getTarList();
			if(!this._dragInitiator)return;
			this._dragInitiator.event("dragComplete",[ this._dragInitiator,DragManager._data]);
			this.clears();
		}

		__proto.clears=function(){
			if(this._dragImage){
				this._dragImage.mouseEnabled=true;
				if(this._dragImage!=this._dragInitiator)
					this._dragImage.removeSelf();
			}
			this._dragInitiator=null;
			DragManager._data=null;
			this._dragImage=null;
			DragManager.isDraging=false;
			FocusManager.clearFocus();
		}

		__proto.sendDragEvent=function(type){
			this.getTarList(type);
		}

		__proto.getTarList=function(type){
			(type===void 0)&& (type="dragDrop");
			var rst;
			rst=DisControlTool.getObjectsUnderPoint(Laya.stage,Laya.stage.mouseX,Laya.stage.mouseY,null,DisControlTool.visibleAndEnableObjFun);
			var i=0,len=0;
			var tTar;
			len=rst.length;
			var tEvent=DragEvent.TEMP;
			tEvent.dragInitiator=this._dragInitiator;
			tEvent.data=DragManager._data;
			tEvent.hitList=rst;
			for (i=0;i < len;i++){
				tTar=rst[i];
				if ((tTar instanceof laya.events.EventDispatcher )){
					if (tTar.hasListener(type)){
						tEvent.target=tTar;
						tTar.event(type,tEvent);
					}
				}
			}
		}

		DragManager.getDragType=function(){
			if (!DragManager._data||!DragManager._data.type)return null;
			return DragManager._data.type;
		}

		DragManager.getDragTarget=function(){
			if (!DragManager._data || !DragManager._data.target)return null;
			return DragManager._data.target;
		}

		DragManager._data=null
		DragManager.isDraging=false;
		__static(DragManager,
		['prePos',function(){return this.prePos=new Point();},'dPos',function(){return this.dPos=new Point();}
		]);
		return DragManager;
	})()


	/**对象工具集*/
	//class laya.editor.core.utils.ObjectUtils
	var ObjectUtils=(function(){
		function ObjectUtils(){};
		__class(ObjectUtils,'laya.editor.core.utils.ObjectUtils');
		ObjectUtils.addFilter=function(target,filter){
			var filters=target.filters || [];
			filters.push(filter);
			target.filters=filters;
		}

		ObjectUtils.clearFilter=function(target,filterType){
			var filters=target.filters;
			if (filters !=null && filters.length > 0){
				for (var i=filters.length-1;i >-1;i--){
					var filter=filters[i];
					if (Laya.__typeof(filter,filterType)){
						filters.splice(i,1);
					}
				}
				target.filters=filters;
			}
		}

		ObjectUtils.getTextField=function(format,text){
			(text===void 0)&& (text="Test");
			ObjectUtils._tf.align="left";
			ObjectUtils._tf.text=text;
			return ObjectUtils._tf;
		}

		ObjectUtils.measureTextWidth=function(format,text){
			(text===void 0)&& (text="Test");
			return ObjectUtils.getTextField(format,text).width;
		}

		__static(ObjectUtils,
		['_tf',function(){return this._tf=new TextField();}
		]);
		return ObjectUtils;
	})()


	/**文本工具集*/
	//class laya.editor.core.utils.StringUtils
	var StringUtils=(function(){
		function StringUtils(){};
		__class(StringUtils,'laya.editor.core.utils.StringUtils');
		StringUtils.fillArray=function(arr,str,type){
			var temp=Utils1.setValueArr([],arr);
			if (Boolean(str)){
				var a=str.split(",");
				for (var i=0,n=Math.min(temp.length,a.length);i < n;i++){
					var value=a[i];
					temp[i]=(value=="true" ? true :(value=="false" ? false :value));
					if (type !=null){
						temp[i]=type(value);
					}
				}
			}
			return temp;
		}

		StringUtils.rectToString=function(rect){
			if (rect){
				return rect.x+","+rect.y+","+rect.width+","+rect.height;
			}
			return null;
		}

		return StringUtils;
	})()


	/**
	*
	*@author ww
	*@version 1.0
	*
	*@created 2015-10-16 上午11:09:00
	*/
	//class laya.editor.core.Wraps.Dictionary
	var Dictionary=(function(){
		function Dictionary(){
			this.itemList=[];
		}

		__class(Dictionary,'laya.editor.core.Wraps.Dictionary');
		var __proto=Dictionary.prototype;
		__proto.add=function(key,value){
			var item;
			item=this.getValue(key);
			if(!item){
				item={key:key,value:value};
				this.itemList.push(item);
				}else{
				item.value=value;
			}
		}

		__proto.getValue=function(key){
			var i=0,len=this.itemList.length;
			for(i=0;i<len;i++){
				if(this.itemList[i].key==key)return this.itemList[i].value;
			}
			return null;
		}

		__proto.deleteKey=function(key){
			var i=0,len=this.itemList.length;
			for(i=0;i<len;i++){
				if(this.itemList[i].key==key)return this.itemList.splice(i,1);
			}
		}

		__proto.reset=function(){
			this.itemList.length=0;
		}

		return Dictionary;
	})()


	//class laya.editor.core.Wraps.Keyboard
	var Keyboard=(function(){
		function Keyboard(){
			;
		}

		__class(Keyboard,'laya.editor.core.Wraps.Keyboard');
		__getset(1,Keyboard,'capsLock',function(){return false});
		__getset(1,Keyboard,'physicalKeyboardType',function(){return ""});
		__getset(1,Keyboard,'numLock',function(){return false});
		__getset(1,Keyboard,'hasVirtualKeyboard',function(){return false});
		Keyboard.isAccessible=function(){return false}
		Keyboard.KEYNAME_UPARROW="Up";
		Keyboard.KEYNAME_DOWNARROW="Down";
		Keyboard.KEYNAME_LEFTARROW="Left";
		Keyboard.KEYNAME_RIGHTARROW="Right";
		Keyboard.KEYNAME_F1="F1";
		Keyboard.KEYNAME_F2="F2";
		Keyboard.KEYNAME_F3="F3";
		Keyboard.KEYNAME_F4="F4";
		Keyboard.KEYNAME_F5="F5";
		Keyboard.KEYNAME_F6="F6";
		Keyboard.KEYNAME_F7="F7";
		Keyboard.KEYNAME_F8="F8";
		Keyboard.KEYNAME_F9="F9";
		Keyboard.KEYNAME_F10="F10";
		Keyboard.KEYNAME_F11="F11";
		Keyboard.KEYNAME_F12="F12";
		Keyboard.KEYNAME_F13="F13";
		Keyboard.KEYNAME_F14="F14";
		Keyboard.KEYNAME_F15="F15";
		Keyboard.KEYNAME_F16="F16";
		Keyboard.KEYNAME_F17="F17";
		Keyboard.KEYNAME_F18="F18";
		Keyboard.KEYNAME_F19="F19";
		Keyboard.KEYNAME_F20="F20";
		Keyboard.KEYNAME_F21="F21";
		Keyboard.KEYNAME_F22="F22";
		Keyboard.KEYNAME_F23="F23";
		Keyboard.KEYNAME_F24="F24";
		Keyboard.KEYNAME_F25="F25";
		Keyboard.KEYNAME_F26="F26";
		Keyboard.KEYNAME_F27="F27";
		Keyboard.KEYNAME_F28="F28";
		Keyboard.KEYNAME_F29="F29";
		Keyboard.KEYNAME_F30="F30";
		Keyboard.KEYNAME_F31="F31";
		Keyboard.KEYNAME_F32="F32";
		Keyboard.KEYNAME_F33="F33";
		Keyboard.KEYNAME_F34="F34";
		Keyboard.KEYNAME_F35="F35";
		Keyboard.KEYNAME_INSERT="Insert";
		Keyboard.KEYNAME_DELETE="Delete";
		Keyboard.KEYNAME_HOME="Home";
		Keyboard.KEYNAME_BEGIN="Begin";
		Keyboard.KEYNAME_END="End";
		Keyboard.KEYNAME_PAGEUP="PgUp";
		Keyboard.KEYNAME_PAGEDOWN="PgDn";
		Keyboard.KEYNAME_PRINTSCREEN="PrntScrn";
		Keyboard.KEYNAME_SCROLLLOCK="ScrlLck";
		Keyboard.KEYNAME_PAUSE="Pause";
		Keyboard.KEYNAME_SYSREQ="SysReq";
		Keyboard.KEYNAME_BREAK="Break";
		Keyboard.KEYNAME_RESET="Reset";
		Keyboard.KEYNAME_STOP="Stop";
		Keyboard.KEYNAME_MENU="Menu";
		Keyboard.KEYNAME_USER="User";
		Keyboard.KEYNAME_SYSTEM="Sys";
		Keyboard.KEYNAME_PRINT="Print";
		Keyboard.KEYNAME_CLEARLINE="ClrLn";
		Keyboard.KEYNAME_CLEARDISPLAY="ClrDsp";
		Keyboard.KEYNAME_INSERTLINE="InsLn";
		Keyboard.KEYNAME_DELETELINE="DelLn";
		Keyboard.KEYNAME_INSERTCHAR="InsChr";
		Keyboard.KEYNAME_DELETECHAR="DelChr";
		Keyboard.KEYNAME_PREV="Prev";
		Keyboard.KEYNAME_NEXT="Next";
		Keyboard.KEYNAME_SELECT="Select";
		Keyboard.KEYNAME_EXECUTE="Exec";
		Keyboard.KEYNAME_UNDO="Undo";
		Keyboard.KEYNAME_REDO="Redo";
		Keyboard.KEYNAME_FIND="Find";
		Keyboard.KEYNAME_HELP="Help";
		Keyboard.KEYNAME_MODESWITCH="ModeSw";
		Keyboard.NUMBER_0=48;
		Keyboard.NUMBER_1=49;
		Keyboard.NUMBER_2=50;
		Keyboard.NUMBER_3=51;
		Keyboard.NUMBER_4=52;
		Keyboard.NUMBER_5=53;
		Keyboard.NUMBER_6=54;
		Keyboard.NUMBER_7=55;
		Keyboard.NUMBER_8=56;
		Keyboard.NUMBER_9=57;
		Keyboard.A=65;
		Keyboard.B=66;
		Keyboard.C=67;
		Keyboard.D=68;
		Keyboard.E=69;
		Keyboard.F=70;
		Keyboard.G=71;
		Keyboard.H=72;
		Keyboard.I=73;
		Keyboard.J=74;
		Keyboard.K=75;
		Keyboard.L=76;
		Keyboard.M=77;
		Keyboard.N=78;
		Keyboard.O=79;
		Keyboard.P=80;
		Keyboard.Q=81;
		Keyboard.R=82;
		Keyboard.S=83;
		Keyboard.T=84;
		Keyboard.U=85;
		Keyboard.V=86;
		Keyboard.W=87;
		Keyboard.X=88;
		Keyboard.Y=89;
		Keyboard.Z=90;
		Keyboard.SEMICOLON=186;
		Keyboard.EQUAL=187;
		Keyboard.COMMA=188;
		Keyboard.MINUS=189;
		Keyboard.PERIOD=190;
		Keyboard.SLASH=191;
		Keyboard.BACKQUOTE=192;
		Keyboard.LEFTBRACKET=219;
		Keyboard.BACKSLASH=220;
		Keyboard.RIGHTBRACKET=221;
		Keyboard.QUOTE=222;
		Keyboard.ALTERNATE=18;
		Keyboard.BACKSPACE=8;
		Keyboard.CAPS_LOCK=20;
		Keyboard.COMMAND=15;
		Keyboard.CONTROL=17;
		Keyboard.DELETE=46;
		Keyboard.DOWN=40;
		Keyboard.END=35;
		Keyboard.ENTER=13;
		Keyboard.ESCAPE=27;
		Keyboard.F1=112;
		Keyboard.F2=113;
		Keyboard.F3=114;
		Keyboard.F4=115;
		Keyboard.F5=116;
		Keyboard.F6=117;
		Keyboard.F7=118;
		Keyboard.F8=119;
		Keyboard.F9=120;
		Keyboard.F10=121;
		Keyboard.F11=122;
		Keyboard.F12=123;
		Keyboard.F13=124;
		Keyboard.F14=125;
		Keyboard.F15=126;
		Keyboard.HOME=36;
		Keyboard.INSERT=45;
		Keyboard.LEFT=37;
		Keyboard.NUMPAD=21;
		Keyboard.NUMPAD_0=96;
		Keyboard.NUMPAD_1=97;
		Keyboard.NUMPAD_2=98;
		Keyboard.NUMPAD_3=99;
		Keyboard.NUMPAD_4=100;
		Keyboard.NUMPAD_5=101;
		Keyboard.NUMPAD_6=102;
		Keyboard.NUMPAD_7=103;
		Keyboard.NUMPAD_8=104;
		Keyboard.NUMPAD_9=105;
		Keyboard.NUMPAD_ADD=107;
		Keyboard.NUMPAD_DECIMAL=110;
		Keyboard.NUMPAD_DIVIDE=111;
		Keyboard.NUMPAD_ENTER=108;
		Keyboard.NUMPAD_MULTIPLY=106;
		Keyboard.NUMPAD_SUBTRACT=109;
		Keyboard.PAGE_DOWN=34;
		Keyboard.PAGE_UP=33;
		Keyboard.RIGHT=39;
		Keyboard.SHIFT=16;
		Keyboard.SPACE=32;
		Keyboard.TAB=9;
		Keyboard.UP=38;
		Keyboard.RED=16777216;
		Keyboard.GREEN=16777217;
		Keyboard.YELLOW=16777218;
		Keyboard.BLUE=16777219;
		Keyboard.CHANNEL_UP=16777220;
		Keyboard.CHANNEL_DOWN=16777221;
		Keyboard.RECORD=16777222;
		Keyboard.PLAY=16777223;
		Keyboard.PAUSE=16777224;
		Keyboard.STOP=16777225;
		Keyboard.FAST_FORWARD=16777226;
		Keyboard.REWIND=16777227;
		Keyboard.SKIP_FORWARD=16777228;
		Keyboard.SKIP_BACKWARD=16777229;
		Keyboard.NEXT=16777230;
		Keyboard.PREVIOUS=16777231;
		Keyboard.LIVE=16777232;
		Keyboard.LAST=16777233;
		Keyboard.MENU=16777234;
		Keyboard.INFO=16777235;
		Keyboard.GUIDE=16777236;
		Keyboard.EXIT=16777237;
		Keyboard.BACK=16777238;
		Keyboard.AUDIO=16777239;
		Keyboard.SUBTITLE=16777240;
		Keyboard.DVR=16777241;
		Keyboard.VOD=16777242;
		Keyboard.INPUT=16777243;
		Keyboard.SETUP=16777244;
		Keyboard.HELP=16777245;
		Keyboard.MASTER_SHELL=16777246;
		Keyboard.SEARCH=16777247;
		__static(Keyboard,
		['CharCodeStrings',function(){return this.CharCodeStrings=["Up","Down","Left","Right","F1","F2","F3","F4","F5","F6","F7","F8","F9","F10","F11","F12","F13","F14","F15","F16","F17","F18","F19","F20","F21","F22","F23","F24","F25","F26","F27","F28","F29","F30","F31","F32","F33","F34","F35","Insert","Delete","Home","Begin","End","PgUp","PgDn","PrntScrn","ScrlLck","Pause","SysReq","Break","Reset","Stop","Menu","User","Sys","Print","ClrLn","ClrDsp","InsLn","DelLn","InsChr","DelChr","Prev","Next","Select","Exec","Undo","Redo","Find","Help","ModeSw"];}
		]);
		return Keyboard;
	})()


	//class laya.editor.core.Wraps.xml.XMLElement
	var XMLElement=(function(){
		function XMLElement(value){
			this._nodeName=null;
			this._nodeType=null;
			this._nodeValue=null;
			this._parentNode=null;
			this._attributes=[];
			this._childNodes=[];
			this._nestCount=0;
			if((value instanceof laya.editor.core.Wraps.xml.XMLElement )){return value}
				else if ((value instanceof laya.editor.core.Wraps.xml.XMLElementList )){if (value.lengths()==1){return value[0]}else {return value;}}
			if (value){
				if(value && value['_data_']){value=value.toString();}
					if (value){
					XMLElement.create(value,this);
				}
			}
		}

		__class(XMLElement,'laya.editor.core.Wraps.xml.XMLElement');
		var __proto=XMLElement.prototype;
		Laya.imps(__proto,{"laya.editor.core.Wraps.xml.IXMLElement":true})
		__proto.addNamespace=function(ns){
			return this;
		}

		/**同xml.@name=value*/
		__proto.setAttribute=function(name,value){
			var o;
			for(var $each_o in this._attributes){
				o=this._attributes[$each_o];
				if (o.key==name){
					o.val=value;
					return value;
				}
			}
			this._attributes.push({key:name,val:value});
			return value;
		}

		/**同xml.attributes()*/
		__proto.getAttributes=function(){
			return this.getAttribute("*");
		}

		/**同xml.attributes()*/
		__proto.attributes=function(){
			return this.getAttribute("*");
		}

		/**同xml.@name*/
		__proto.getAttribute=function(name){
			var attributes=this._attributes;
			var arr=[];
			for (var j=0;j < attributes.length;j++){
				var value=attributes[j]['key'];
				if (name=="*" || value==name){
					arr.push({"key":attributes[j]['key'],"val":attributes[j]['val']});
				}
			}
			if (name!="*"){
				return arr.length>0?arr[0].val:undefined;
			}
			return XMLElementList.createFromAttribute(arr);
		}

		/**同xml..@name*/
		__proto.getAllAttribute=function(name){
			var arr=[];
			this._getAllAttribute_(arr,this,name);
			return XMLElementList.createFromAttribute(arr);
		}

		__proto._getAllAttribute_=function(arr,xml,name){
			var len=xml._childNodes ? xml._childNodes.length :0;
			for (var i=0;i < len;i++){
				var node=xml._childNodes [i];
				for (var j=0;j < node._attributes.length;j++){
					var key=node._attributes[j]['key'];
					var val=node._attributes[j]['val'];
					if (name=="*"){
						arr.push({"key":key,"val":val});
						}else if (key==name){
						arr.push({"key":key,"val":val});
					}
				}
				this._getAllAttribute_(arr,node,name);
			}
		}

		/**同xml.@name*/
		__proto.attribute=function(name){
			return this.getAttribute(name);
		}

		/**同xml.name*/
		__proto.getChildByName=function(name){
			return this.child(name);
		}

		/**同xml..name*/
		__proto.getAllChildByName=function(name){
			var arr=[];
			this._getAllChildByName_(arr,this,name);
			return XMLElementList.create(arr);
		}

		__proto._getAllChildByName_=function(arr,xml,name){
			var len=xml._childNodes ? xml._childNodes.length :0;
			for (var i=0;i < len;i++){
				var node=xml._childNodes [i];
				if(name=="*"){
					arr.push(node);
					}else if (node._nodeName==name){
					arr.push(node);
				}
				this._getAllChildByName_(arr,node,name);
			}
		}

		__proto.nodeKind=function(){
			return this._nodeType;
		}

		/**同xml.(@attribute==value);或者xml.(@attribute!=value)*/
		__proto.getChildByAttribute=function(attribute,value,equal){
			(equal===void 0)&& (equal=true);
			if (attribute=="" || attribute==null)
				return null;
			if (value=="" || value==null)
				return null;
			var ar=[],len=this._childNodes ? this._childNodes.length :0;
			for (var i=0;i < len;i++){
				var n=this._childNodes [i];
				for (var j=0;j < n._attributes.length;j++){
					if (n._attributes[j]['key']==attribute){
						if (equal && n._attributes[j]['val']==value){
							ar.push(n);
							}else if (!equal && n._attributes[j]['val'] !=value){
							ar.push(n);
						}
					}
				}
			}
			return XMLElementList.create(ar);
		}

		/**xml.children()*/
		__proto.children=function(){
			var l=XMLElementList.create(this._childNodes);
			if(!l.length)
				if((typeof this._nodeValue=='string')&& this._nodeValue !=""){
				l.push(this._nodeValue);
			}
			return l;
		}

		/**xml[0];same with XMLElementList,different in with XMLElement;
		*In Flash XML class xml[0] return self,xml[1] return undefined;
		**/
		__proto.getChildAt=function(index){
			if (!this._childNodes || index > this._childNodes.length)
				return null;
			return this._childNodes[index];
		}

		/**同xml.element(*)*/
		__proto.elements=function(name){
			(name===void 0)&& (name="*");
			if (name=='*')
				return XMLElementList.create(this._childNodes);
			return this.child(name);
		}

		/**同xml.appendchild(value)*/
		__proto.appendChild=function(value){
			if ((typeof value=='string')){
				value=laya.editor.core.Wraps.xml.XMLElement.create(String(value));
			}
			if ((value instanceof laya.editor.core.Wraps.xml.XMLElement )){
				var name=value._nodeName;
				var list=this[name];
				if (!list){
					this[name]=list=new XMLElementList();
				}
				(((typeof list=='function'))!=true)&&(list.__addChild__(value));
				this._childNodes.push(value);
				}else if ((value instanceof laya.editor.core.Wraps.xml.XMLElementList )){
				var len=value.lengths();
				for (var i=0;i < len;i++){
					this.appendChild(value[i]);
				}
			}
			value._parentNode=this;
			return value;
		}

		__proto.prependChild=function(value){
			var xml=this.appendChild(value);
			var nodes=this._childNodes;
			nodes.pop();
			nodes.splice(0,0,xml);
			return xml;
		}

		/**同xml.name=value*/
		__proto.setChildByName=function(nName,value){
			var c=this.getChildByName(nName);
			if (!c)
				return null;
			var spliceIndex=this._childNodes.length;
			for (var i=this._childNodes.length-1;i >=0;i--){
				if (this._childNodes[i].localName==nName){
					this._childNodes.splice(i,1);
					spliceIndex=i;
				}
			}
			if ((value instanceof laya.editor.core.Wraps.xml.XMLElementList )){
				for (i=0;i < value.lengths();i++){
					this._childNodes.splice(spliceIndex,0,value[i]);
					spliceIndex++;
				}
				}else if ((value instanceof laya.editor.core.Wraps.xml.XMLElement )){
				this._childNodes.splice(spliceIndex,0,value);
				}else {
				return null;
			}
			return c;
		}

		/**同xml.copy()*/
		__proto.copy=function(){
			var xml=new XMLElement(this.toXMLString());
			return xml;
		}

		__proto.copyFrom=function(source){
			if ((source instanceof laya.editor.core.Wraps.xml.XMLElement )){
				var value=source;
				this._nodeName=value._nodeName;
				this._nodeValue=value._nodeValue;
				this._attributes=value._attributes;
				this._childNodes=value._childNodes;
				return this;
			}
			return null;
		}

		/**同xml.setName(name)*/
		__proto.setName=function(str){
			this._nodeName=str;
		}

		/**同xml.hasOwnProperty(p)*/
		__proto.hasOwnProperty=function(pName){
			var len=0,i=0;
			if(pName.indexOf("@")!=-1){
				var tmpPName=pName.substring(1);
				len=this._attributes.length;
				for (i=0;i < len;i++){
					if (this._attributes[i].key==tmpPName)
						return true;
				}
				}else{
				len=this._childNodes.length;
				for (i=0;i < len;i++){
					if (this._childNodes[i]._nodeName==pName)
						return true;
				}
			}
			return false;
		}

		/**同xml.hasSimpleContent()*/
		__proto.hasSimpleContent=function(){
			if (this._childNodes.length > 0){
				return false;
				}else if (this._childNodes.length==1){
				if (!this._childNodes[0].localName)
					return true;
				return false;
			}
			return true;
		}

		/**同xml.hasComplexContent()*/
		__proto.hasComplexContent=function(){
			return this._childNodes.length > 0
		}

		/**同xml.length()*/
		__proto.lengths=function(){
			return 1
		}

		/**同xml.name()*/
		__proto.name=function(){
			return this._nodeName;
		}

		/**同xml.parent()*/
		__proto.parent=function(){
			return this._parentNode;
		}

		/**同xml.toString()*/
		__proto.toString=function(){
			var str="";
			if (this._childNodes.length){
				str=this.toXMLString();
			}else
			str=this._nodeValue;
			return str;
		}

		__proto.getString=function(){
			var str="";
			str=this.toXMLString();
			return str;
		}

		/**同xml.toXMLString()*/
		__proto.toXMLString=function(){
			if (!XMLElement._callee)
				XMLElement._callee=this;
			var str="";
			str+=XMLElement.getStartEmpty(this._nestCount);
			if (this._nodeName){
				str+="<"+this._nodeName;
				for (var i=0;i < this._attributes.length;i++){
					str+=" "+this._attributes[i]['key']+'="'+this._attributes[i]['val']+'"'
				}
			}
			if (this.hasSimpleContent()&& !this.value)
				str+="/>";
			else {
				str+=this._nodeName ? ">" :"";
				str+=(this._childNodes.length ? "\n" :this._nodeValue);
				for (i=0;i < this._childNodes.length;i++){
					this._childNodes[i]._nestCount=this._nestCount+1;
					str+=this._childNodes[i].toXMLString();
					str+="\n";
				}
				if (this._nodeName)
					str+=XMLElement.getStartEmpty(this._nestCount)+"</"+this._nodeName+">";
			}
			if (XMLElement._callee !=this){
			}
			else
			XMLElement._callee=null;
			return str;
		}

		__proto.child=function(nName){
			if((typeof nName=='number')){
				return XMLElementList.create([ this._childNodes[nName]]);
			};
			var ar=[],len=this._childNodes ? this._childNodes.length :0;
			for (var i=0;i < len;i++){
				var n=this._childNodes [i];
				if (n.localName==nName){
					ar.push(n);
				}
			}
			return XMLElementList.create(ar);
		}

		__proto.childIndex=function(){
			var parent=this._parentNode;
			if (parent){
				var nodes=parent._childNodes;
				for (var i=0,n=nodes.length;i < n;i++){
					if (nodes[i]==this){
						return i;
					}
				}
			}
			return-1;
		}

		__proto.insertChildBefore=function(child1,child2){
			return null;
		}

		__proto.normalize=function(){
			return null;
		}

		__proto.comments=function(){
			return null;
		}

		__proto.contains=function(value){
			return true;
		}

		__proto.defaultSettings=function(){
			return null;
		}

		__proto.descendants=function(name){
			return null;
		}

		__proto.inScopeNamespaces=function(){
			return [];
		}

		__proto.setLocalName=function(name){
			this._nodeName=name;
		}

		/**同xml.localName()*/
		__getset(0,__proto,'localName',function(){
			return this._nodeName;
			},function(str){
			this._nodeName=str;
		});

		__getset(0,__proto,'nodeType',function(){
			return this._nodeType;
		});

		__getset(0,__proto,'childNodes',function(){
			return this._childNodes;
		});

		__getset(0,__proto,'nodeName',function(){
			return this._nodeName;
		});

		/**同xml.toString()*/
		/**同xml.toString()*/
		__getset(0,__proto,'value',function(){
			return this._nodeValue;
			},function(str){
			this._nodeValue=str;
		});

		/*微端顶级节点的value*/
		__getset(0,__proto,'conchValue',function(){
			var temp="";
			if (this._childNodes){
				for (var i=0,len=this._childNodes.length;i < len;i++){
					temp+=this._childNodes[i].conchValue;
				}
				temp+=this.value;
			}
			else
			temp=this.value;
			return temp;
		});

		XMLElement.create=function(value,node){
			node=node ? node :new XMLElement();
			var xmld;
			if (false && !((typeof value=='string'))){
				xmld=value;
				xmld=xmld.childNodes[0];
				}else {
				xmld=(new DOMParser()).parseFromString(value,'text/xml');var t_i=0;var t_xmld=null;do{t_xmld=xmld.childNodes[t_i++];if(t_xmld.nodeName !='#comment' ){xmld=t_xmld;break;}}while(t_i<xmld.childNodes.length);;
			}
			XMLElement.cloneXmlFromData(node,xmld);
			return node;
		}

		XMLElement.cloneXmlFromData=function(xml,data){
			xml._nodeName=data.nodeName;
			xml._nodeValue=data.nodeValue==null ? data.textContent :data.nodeValue;
			var attribs=data.attributes;
			var len=attribs ? attribs.length :0;
			var attributes=xml._attributes;
			for (var j=0;j < len;j++){
				var attr=attribs[j];
				attributes.push({key:attr.nodeName,val:attr.nodeValue});
			};
			var nodes=data.childNodes;
			var child;
			for (var i=0;i < nodes.length;i++){
				var node=nodes[i];
				var nodeName=node.nodeName;
				if(nodeName=="#text"){
					if(node.parentNode&&node.parentNode.textContent!=node.textContent){
						var tValue;
						tValue=node.nodeValue.replace(/(^\s*)|(\s*$)/g,'');
						if(tValue.length>1){
							node.nodeValue=tValue;
							child=new XMLElement();
							XMLElement.cloneXmlFromData(child,node);
							xml.appendChild(child);
						}
					}
				}else
				if (nodeName !="#text" && nodeName !="#comment"){
					if (nodeName=="#cdata-section" || nodeName==""){
						xml._nodeValue=node.nodeValue==null ? node.textContent :node.nodeValue;
						continue ;
					}
					child=new XMLElement();
					XMLElement.cloneXmlFromData(child,node);
					xml.appendChild(child);
				}
			}
		}

		XMLElement.getStartEmpty=function(count){
			var str="";
			for (var j=0;j < count;j++){
				str+="   ";
			}
			return str;
		}

		XMLElement._callee=null
		return XMLElement;
	})()


	/**全局配置*/
	//class laya.editor.LayaConfig
	var LayaConfig=(function(){
		function LayaConfig(){};
		__class(LayaConfig,'laya.editor.LayaConfig');
		LayaConfig.GAME_FPS=50;
		LayaConfig.MOVIE_INTERVAL=100;
		LayaConfig.resPath="";
		LayaConfig.uiPath="";
		LayaConfig.tipDelay=200;
		LayaConfig.tipFollowMove=true;
		LayaConfig.touchScrollEnable=true;
		LayaConfig.mouseWheelEnable=true;
		LayaConfig.VER="0.9.7";
		LayaConfig.$HIDDEN="$HIDDEN";
		LayaConfig.$LOCKED="$LOCKED";
		return LayaConfig;
	})()


	/**代码管理类
	*@author yung
	*/
	//class laya.editor.manager.CodeManager
	var CodeManager=(function(){
		function CodeManager(){};
		__class(CodeManager,'laya.editor.manager.CodeManager');
		CodeManager.exportCode=function(){
			CodeManager.xmlMap={};
			CodeManager.createByDir(SystemSetting.pagesPath);
		}

		CodeManager.getCodePath=function(pagePath){
			var page1=FileManager.getRelativePath(SystemSetting.pagesPath,pagePath);
			var page2=FileManager.getWorkPath(ProjectSetting.codeExportPath+"/"+page1);
			var newNameSign;
			switch(Math.ceil(ProjectSetting.codeType)){
				case 0:
					newNameSign="UI.as";
					break ;
				case 2:
				case 2:
					newNameSign="UI.js";
					break ;
				case 1:
					newNameSign="UI.ts";
					break ;
				}
			return page2.replace(".ui",newNameSign);
		}

		CodeManager.createByDir=function(file){
			var fileList;
			fileList=FileTools.getFileList(file);
			var i=0,len=0;
			len=fileList.length;
			var tFile;
			var code;
			var obj;
			var codePath;
			var allInOneFile;
			switch(Math.ceil(ProjectSetting.codeType)){
				case 0:
					break ;
				case 2:
					CodeManager.allInOnePre=CodeManager.jsCodePre;
					allInOneFile=CodeManager.allInOnePre+"\n"+ProjectSetting.codeImportsJS;
					break ;
				case 1:
					CodeManager.allInOnePre=CodeManager.tsCodePre;
					allInOneFile=CodeManager.allInOnePre+"\n"+ProjectSetting.codeImportsTS;
					break ;
				}
			for(i=0;i<len;i++){
				console.log("exportFile:",fileList[i]);
				tFile=fileList[i];
				if(FileTools.isDirectory(tFile)){
					}else{
					if(TypeManager.getFileType(tFile)=="Page"){
						code=FileManager.readTxtFile(tFile);
						console.log("export Page:",code);
						obj=ObjectTools.getObj(code);
						code=CodeManager.objToUI(obj,tFile);
						console.log("adptCode:",code);
						codePath=CodeManager.getCodePath(tFile);
						console.log("save to:",codePath);
						if(ProjectSetting.codeType==2||ProjectSetting.codeType==1){
							allInOneFile+="\n"+code;
							}else{
							FileManager.createTxtFile(codePath,code);
						}
					}else
					if(TypeManager.getFileType(tFile)=="Particle"){
						var rPath;
						rPath=FileManager.getRelativePath(SystemSetting.pagesPath,tFile);
						var tarPath;
						tarPath=FileManager.getPath(FileManager.getWorkPath(ProjectSetting.resExportPath),rPath);
						FileTools.copyFile(tFile,tarPath);
						console.log("copyParticleFile:",tFile,tarPath);
						var tParticleConfig;
						tParticleConfig=FileManager.readJSONFile(tFile);
						var textureFile;
						textureFile=tParticleConfig.textureName;
						var texturePath;
						texturePath=FileManager.getResPath(textureFile);
						var tarTexturePath;
						tarTexturePath=FileManager.getPath(FileManager.getWorkPath(ProjectSetting.resExportPath),textureFile);
						FileTools.copyFile(texturePath,tarTexturePath);
					}
				}
			}
			if(ProjectSetting.codeType==2||ProjectSetting.codeType==1){
				var fileType;
				fileType=ProjectSetting.codeType==2?"js":"ts";
				codePath=CodeManager.getCodePath(FileManager.getPath(file,SystemSetting.projectName+".max.all."+fileType));
				FileManager.createTxtFile(codePath,allInOneFile);
				var tarFolder;
				tarFolder=codePath.replace(".ts",".js");
				if(ProjectSetting.codeType==1){
					var cmdTSC;
					cmdTSC="tsc --out \""+tarFolder+"\" \""+codePath+"\"";
					CMDShell.execute(cmdTSC);
				}
			}
		}

		CodeManager.objToUI=function(obj,pagePath){
			var className=FileManager.getFileName(pagePath)+"UI";
			var pack=CodeManager.getPackage(pagePath);
			var uiXml=Utils.clone(obj);
			var viewMap={};
			console.log("objToUI:",obj);
			CodeManager.parseUIobj(uiXml,viewMap);
			console.log("viewMap:",viewMap);
			console.log("objToUI after parse:",obj);
			var imports="";
			var temp=[];
			for (var key in viewMap){
				temp.push({name:key,lib:viewMap[key]});
			}
			temp.sort(MathUtil.SortByKey("name"));
			var viewClassMap="";
			var obj1;
			for(var $each_obj1 in temp){
				obj1=temp[$each_obj1];
				var lib=obj1.lib;
				imports+="	import "+lib+";\n";
				var libName=lib.substring(lib.lastIndexOf(".")+1,lib.length);
				viewClassMap+="			View.viewClassMap[\""+lib+"\"] = "+libName+";\n";
			};
			var str="";
			var baseName=obj.type;
			var uiObj;
			uiObj=Utils.clone(uiXml);
			CodeManager.cleanUIObj(uiObj);
			console.log("uiObj:",uiObj);
			var classObj;
			classObj={};
			classObj["className"]=className;
			classObj["classType"]=baseName;
			classObj["pack"]=pack;
			classObj["viewClassMap"]=viewClassMap;
			classObj["uiObj"]=JSON.stringify(uiObj);
			switch(Math.ceil(ProjectSetting.codeType)){
				case 0:
					classObj["vars"]=CodeManager.createVarByObj(uiXml,viewMap);
					break ;
				case 2:
				case 2:
					classObj["vars"]=CodeManager.createJSVarByObj(uiXml,viewMap);
					break ;
				case 1:
					classObj["vars"]=CodeManager.createTSVarByObj(uiXml,viewMap);
					break ;
				}
			classObj["imports"]=CodeManager.prefixStr(ProjectSetting.codeImports,"	")+"\n"+imports;
			var tplStr;
			switch(Math.ceil(ProjectSetting.codeType)){
				case 0:
					tplStr=CodeManager.asCodeTpl;
					break ;
				case 2:
				case 2:
					tplStr=CodeManager.jsCodeTpl;
					break ;
				case 1:
					tplStr=CodeManager.tsCodeTpl;
					break ;
				}
			str=CodeManager.createExportCode(tplStr,classObj);
			return str;
		}

		CodeManager.init=function(){
			CodeManager.jsCodeTpl=FileManager.readTxtFile(FileManager.getAppPath(Paths.JSCodeTemplate));
			CodeManager.jsCodePre=FileManager.readTxtFile(FileManager.getAppPath(Paths.JSCodePreTemplate));
			CodeManager.tsCodeTpl=FileManager.readTxtFile(FileManager.getAppPath(Paths.TSCodeTemplate));
			CodeManager.tsCodePre=FileManager.readTxtFile(FileManager.getAppPath(Paths.TSCodePreTemplate));
			CodeManager.asCodeTpl=FileManager.readTxtFile(FileManager.getAppPath(Paths.ASCodeTemplate));
		}

		CodeManager.createExportCode=function(tplStr,data){
			var rst;
			var key;
			rst=tplStr;
			for(key in data){
				rst=StringTool.getReplace(rst,"{!"+key+"!}",data[key]);
			}
			return rst;
		}

		CodeManager.cleanUIObj=function(node){
			var tkey;
			var childs;
			var i=0,len=0;
			if(!node.child)node.child=[];
			childs=node.child;
			len=childs.length;
			for(i=0;i<len;i++){
				CodeManager.cleanUIObj(childs[i]);
			}
			for(tkey in node){
				if(!CodeManager.keysNeeded.hasOwnProperty(tkey)){
					delete node[tkey];
				}
			}
			if(childs.length<1){
				delete node.child;
			}
		}

		CodeManager.createJSVarByObj=function(obj,viewMap){
			var arr=[];
			CodeManager.parseVarByObj(obj,arr);
			var str="";
			for(var i=0;i<arr.length;i++){
				var a=arr[i];
				var compType=a[1];
				if(viewMap[compType]==null){
					str+="		    this."+a[0]+";\n";
					}else{
					var lib=viewMap[compType];
					var libName=lib.substring(lib.lastIndexOf(".")+1,lib.length);
					str+="		    this."+a[0]+";\n";
				}
			}
			return str;
		}

		CodeManager.createVarByObj=function(obj,viewMap){
			var arr=[];
			CodeManager.parseVarByObj(obj,arr);
			var str="";
			for(var i=0;i<arr.length;i++){
				var a=arr[i];
				var compType=a[1];
				if(viewMap[compType]==null){
					str+="		public var "+a[0]+":"+compType+";\n";
					}else{
					var lib=viewMap[compType];
					var libName=lib.substring(lib.lastIndexOf(".")+1,lib.length);
					str+="		public var "+a[0]+":"+libName+";\n";
				}
			}
			return str;
		}

		CodeManager.createTSVarByObj=function(obj,viewMap){
			var arr=[];
			CodeManager.parseVarByObj(obj,arr);
			var str="";
			for(var i=0;i<arr.length;i++){
				var a=arr[i];
				var compType=a[1];
				if(viewMap[compType]==null){
					str+="		public "+a[0]+":"+CodeManager.getFullClassPath(compType)+";\n";
					}else{
					var lib=viewMap[compType];
					var libName=lib.substring(lib.lastIndexOf(".")+1,lib.length);
					str+="		public "+a[0]+":"+libName+";\n";
				}
			}
			return str;
		}

		CodeManager.getFullClassPath=function(className){
			var runClass;
			runClass=UIConfigManager.getCompProp(className,"runClass");
			if(!runClass)runClass="laya.ui."+className;
			return runClass;
		}

		CodeManager.parseVarByObj=function(obj,arr){
			if(obj.props["var"]){
				arr.push([String(obj.props["var"]),obj.props.runtime?String(obj.props.runtime):obj.type]);
			};
			var list=obj.child;
			if(list)
				for (var j=0,n=list.length;j < n;j++){
				CodeManager.parseVarByObj(list[j],arr);
			}
		}

		CodeManager.prefixStr=function(str,prefix){
			var arr=str.split("\n");
			for (var i=0,n=arr.length;i < n;i++){
				arr[i]=prefix+arr[i];
			}
			return arr.join("\n");
		}

		CodeManager.getPackage=function(path){
			if (path==null)
				return null;
			path=FileManager.getRelativePath(SystemSetting.pagesPath,path);
			path=FileManager.adptToCommonUrl(path);
			path=path.substring(0,path.lastIndexOf("\/")).replace(/\//g,".");
			var uiPath=ProjectSetting.codeExportPath;
			uiPath=FileManager.adptToCommonUrl(uiPath);
			if(uiPath.charAt(uiPath.length-1)!="\/"){
				uiPath=uiPath+"\/";
			};
			var startIndex=uiPath.indexOf("src/")>-1?(uiPath.indexOf("src/")+4):(uiPath.indexOf("/")+1);
			uiPath=uiPath.substring(startIndex,uiPath.length-1).replace(/\//g,".");
			var pack=uiPath+(path!=""?"."+path:"");
			return pack;
		}

		CodeManager.parseUIobj=function(obj,viewMap){
			var compType=obj.type;
			var runtime;
			if (compType=="UIView"){
				var source=obj.source;
				source=FileManager.getPath(SystemSetting.pagesPath,source);
				var viewName=FileManager.getFileName(source);
				obj.type=viewName;
				runtime=obj.props.runtime;
				if(!runtime){
					runtime=obj.props.runtime=CodeManager.getPackage(source)+"."+viewName+"UI";
				}
				viewMap[runtime]=runtime;
				}else{
				runtime=obj.props.runtime;
				if(runtime){
					viewMap[runtime]=runtime;
				}
			}
			if (compType !="View" && compType !="Dialog"){
				if (compType !="UIView"){
					var skinLabel=""
					skinLabel=UIConfigManager.getCompProp(compType,"skinLabel");
					skinLabel=skinLabel || "styleSkin";
					var skin=obj.props[skinLabel]||obj.props["skin"];
					console.log("setDefaultValue:",obj);
					if (Boolean(skin)){
						var defaultProps=ResStyleManager.getResProps(skin).split(" ");
						CodeManager.setObjDefaultValue(obj,defaultProps);
					}
					}else {
					var sourcePath=obj.source;
					if (Boolean(sourcePath)){
						defaultProps=PageStyleManager.getPageProps(sourcePath).split(" ");
						CodeManager.setObjDefaultValue(obj,defaultProps);
					}
				}
			}
			delete obj.props.layers;
			delete obj.props.layer;
			delete obj.props.sceneWidth;
			delete obj.props.sceneHeight;
			delete obj.props.sceneColor;
			delete obj.props.sceneBg;
			delete obj.props.styleSkin;
			var list=obj.child;
			if(list)
				for (var j=0,n=list.length;j < n;j++){
				CodeManager.parseUIobj(list[j],viewMap);
			}
		}

		CodeManager.setObjDefaultValue=function(obj,props){
			var prop;
			for(var $each_prop in props){
				prop=props[$each_prop];
				var a=prop.split("=");
				if (a.length==2){
					var key=a[0];
					var val=a[1];
					if (!obj.props.hasOwnProperty(key)){
						obj.props[key]=ObjectTools.getAutoValue(val);
					}
				}
			}
		}

		CodeManager.xmlMap=null
		CodeManager.CodeType_AS=0;
		CodeManager.CodeType_JS=2;
		CodeManager.CodeType_JSInOne=2;
		CodeManager.CodeType_TS=1;
		CodeManager.jsCodeTpl="";
		CodeManager.jsCodePre="";
		CodeManager.tsCodeTpl="";
		CodeManager.tsCodePre="";
		CodeManager.asCodeTpl="";
		CodeManager.allInOnePre="";
		__static(CodeManager,
		['keysNeeded',function(){return this.keysNeeded={
				"type":true,
				"props":true,
				"child":true
		};}

		]);
		return CodeManager;
	})()


	/**导出管理器
	*@author yung
	*/
	//class laya.editor.manager.ExportManager
	var ExportManager=(function(){
		function ExportManager(){};
		__class(ExportManager,'laya.editor.manager.ExportManager');
		ExportManager.release=function(){
			ExportManager.clear();
			ExportManager.export(true);
		}

		ExportManager.forceExport=function(){
			ExportManager.clear();
			ExportManager.export(false,null,true);
		}

		ExportManager.clear=function(){
			ExportManager.clearRes=true;
			FileManager.removeFile(SystemSetting.tempVerPath);
			FileManager.removeFile(SystemSetting.tempResPath);
			FileManager.createDirectory(SystemSetting.tempVerPath);
			FileManager.createDirectory(SystemSetting.tempResPath);
			var uiCodePath=FileManager.getWorkPath(ProjectSetting.codeExportPath);
			FileManager.removeFile(uiCodePath);
			FileManager.createDirectory(uiCodePath);
		}

		ExportManager.export=function(release,complete,force){
			(release===void 0)&& (release=false);
			(force===void 0)&& (force=false);
			ExportManager.clearRes=force;
			laya.editor.manager.ExportManager.complete=complete;
			if (UIPanel.instance.hasChange){
				Confirm.show("在发布代码之前，有页面还未保存，是否保存然后发布？","有页面未保存",ExportManager.confirmBack,[release]);
				}else {
				ExportManager.doExport(release);
			}
		}

		ExportManager.confirmBack=function(release,sure){
			if (sure){
				UIPanel.instance.saveAll();
			}
			ExportManager.doExport(release);
		}

		ExportManager.packingCallback=function(err,stdOut,stdErr){
			console.log("err:",err);
			console.log("stdErr:",stdErr);
			console.log("stdOut:",CMDShell.iconv.decode(stdOut,"gbk"));
			Waiting.hide();
			MessageManager.instance.show("发布成功");
		}

		ExportManager.doExport=function(release){
			var cmd="\""+FileManager.getAppPath("libs/TP/TileAtlasPacker")+"\""+
			" -maxAltasWidth="+ProjectSetting.textureWidth+" -maxAltasHeight="+ProjectSetting.textureHeight+
			" -tileWidthLimit="+ProjectSetting.picWidth+" -tileHeightLimit="+ProjectSetting.picHeight+
			" "+"\""+SystemSetting.assetsPath+"\""+
			" -outputDir="+"\""+FileManager.getWorkPath(ProjectSetting.resExportPath)+"\"";
			if(ExportManager.clearRes){
				cmd+=" -force=true";
			}
			if(ProjectSetting.power2=="true"){
				cmd+=" -powerOfTwo=true";
			}
			if(ProjectSetting.trimempty=="true"){
				cmd+=" -trim=true";
				}else{
				cmd+=" -trim=false";
			}
			console.log("exportPic:",cmd);
			CMDShell.execute(cmd,ExportManager.packingCallback);
			console.log(FileManager.getWorkPath(ProjectSetting.resExportPath));
			Waiting.show("发布中，请稍等。。","发布代码");
			FileManager.createDirectory(FileManager.getWorkPath(ProjectSetting.resExportPath));
			FileManager.createDirectory(FileManager.getWorkPath(ProjectSetting.codeExportPath));
			CodeManager.exportCode();
			if (release){
				ExportManager.fileUnUsed=ResManager.findFileUnUsed();
				}else {
				ExportManager.fileUnUsed={};
			}
		}

		ExportManager.swfMap=null
		ExportManager.createSwfQueue=null
		ExportManager.fileUnUsed={};
		ExportManager.complete=null
		ExportManager.clearRes=false;
		ExportManager.powerOfTwo=false;
		return ExportManager;
	})()


	/**文件管理类
	*@author yung
	*/
	//class laya.editor.manager.FileManager
	var FileManager=(function(){
		function FileManager(){};
		__class(FileManager,'laya.editor.manager.FileManager');
		FileManager.getPath=function(basePath,relativePath){
			return FileTools.getPath(basePath,relativePath);
		}

		FileManager.getRelativePath=function(basePath,targetPath){
			return FileTools.getRelativePath(basePath,targetPath);
		}

		FileManager.getAppPath=function(path){
			return FileManager.getPath(SystemSetting.appPath,path);
		}

		FileManager.getAppRelativePath=function(path){
			return FileManager.getRelativePath(SystemSetting.appPath,path);
		}

		FileManager.getWorkPath=function(path){
			return FileManager.getPath(SystemSetting.workPath,path);
		}

		FileManager.getWorkRelativePath=function(path){
			return FileManager.getRelativePath(SystemSetting.workPath,path);
		}

		FileManager.getResRelativePath=function(path){
			return FileManager.adptToCommonUrl(""+FileManager.getRelativePath(SystemSetting.assetsPath,path));
		}

		FileManager.adptToCommonUrl=function(url){
			return StringTool.getReplace(url,"\\\\","/");
		}

		FileManager.adptToLocalUrl=function(url){
			return FileTools.path.normalize(url);
		}

		FileManager.getResPath=function(path){
			return FileManager.getPath(SystemSetting.assetsPath,path);
		}

		FileManager.getFileName=function(path){
			return FileTools.path.basename(path).split(".")[0];
		}

		FileManager.createDirectory=function(path){
			try {
				FileTools.createDirectory(path);
				}catch (e){
				Sys.alert("Create folder failed:"+path);
			}
		}

		FileManager.createTxtFile=function(path,value){
			try {
				FileTools.createFile(path,value);
				}catch (e){
				Sys.alert("Create file failed:"+path);
			}
		}

		FileManager.createJSONFile=function(path,value){
			try {
				FileTools.createFile(path,JSON.stringify(value));
				}catch (e){
				Sys.alert("Create file failed:"+path);
			}
		}

		FileManager.createBytesFile=function(path,bytes){
			try {
				FileTools.createFile(path,bytes);
				}catch (e){
				Sys.alert("Create file failed:"+path);
			}
		}

		FileManager.removeFile=function(path){
			FileTools.removeE(path);
		}

		FileManager.copyFile=function(from,to){
			try {
				FileTools.copyE(from,to);
				}catch (e){
				Sys.alert("Copy file failed:(from:"+from+" to:"+to+")");
				console.log("Copy file failed:(from:"+from+" to:"+to+")");
			}
		}

		FileManager.readTxtFile=function(path,errorAlert){
			(errorAlert===void 0)&& (errorAlert=true);
			try {
				return FileTools.readFile(path);
				}catch (e){
				if (errorAlert)Sys.alert("Read file failed:"+path);
			}
			return null;
		}

		FileManager.readJSONFile=function(path,errorAlert){
			(errorAlert===void 0)&& (errorAlert=true);
			try {
				var str=laya.editor.manager.FileManager.readTxtFile(path);
				return JSON.parse(str);
				}catch (e){
				if (errorAlert)Sys.alert("Read file failed:"+path);
				debugger;
			}
			return null;
		}

		FileManager.readByteFile=function(path,errorAlert){
			(errorAlert===void 0)&& (errorAlert=true);
			try {
				return FileTools.readFile(path);
				}catch (e){
				if (errorAlert)Sys.alert("Read file failed:"+path);
			}
			return null;
		}

		FileManager.getFileList=function(path){
			return FileTools.getFileList(path);
		}

		FileManager.getFileTree=function(path,hasExtension){
			(hasExtension===void 0)&& (hasExtension=false);
			var xml=findFiles(path);
			function findFiles (path){
				var node;
				if (FileTools.exist(path)){
					var fileName=FileTools.getFileName(path);
					node=new XMLElement("<item label='"+fileName+"' path='"+path+"' isDirectory='true'/>");
					var a=FileTools.getDirFiles(path);
					var f;
					for(var $each_f in a){
						f=a[$each_f];
						f=FileTools.getPath(path,f);
						if (FileTools.isDirectory(f)&& f.indexOf(".svn")==-1){
							node.appendChild(findFiles(f));
						}
					}
					var $each_f;
					for($each_f in a){
						f=a[$each_f];
						f=FileTools.getPath(path,f);
						if (FileTools.isDirectory(f)==false){
							if (fileName.indexOf("$")==-1 && fileName.indexOf("@")==-1){
								node.appendChild(new XMLElement("<item label='"+fileName+"' path='"+f+"' isDirectory='false'/>"));
							}
						}
					}
				}
				return node;
			}
			return xml
		}

		FileManager.rename=function(oldPath,newPath){
			try {
				FileTools.rename(oldPath,newPath);
				}catch (e){
				Sys.alert("Rename file failed:(from:"+oldPath+" to:"+newPath+")");
			}
		}

		return FileManager;
	})()


	/**
	*
	*@author ww
	*@version 1.0
	*
	*@created 2015-12-25 上午10:19:18
	*/
	//class laya.editor.manager.LayerManager
	var LayerManager=(function(){
		function LayerManager(){}
		__class(LayerManager,'laya.editor.manager.LayerManager');
		LayerManager.init=function(){
			LayerManager.stage=new Box();
			LayerManager.stage.left=0;
			LayerManager.stage.right=0;
			LayerManager.stage.top=0;
			LayerManager.stage.bottom=0;
			LayerManager.stage.mouseEnabled=true;
			Laya.stage.addChild(LayerManager.stage);
		}

		LayerManager.stage=null
		return LayerManager;
	})()


	/**页面管理器
	*@author yung
	*/
	//class laya.editor.manager.PageManager
	var PageManager=(function(){
		function PageManager(){}
		__class(PageManager,'laya.editor.manager.PageManager');
		PageManager.copyPageBg=function(pagePath,bgImgPath){
			if (bgImgPath.indexOf(":")==-1){
				return bgImgPath;
			}
			if (Boolean(bgImgPath)){
				var file=new File(bgImgPath);
				if (file.exists){
					var f=FileTools.path.sep;
					var newPath=pagePath.replace("laya"+f+"pages"+f,"laya"+f+"views"+f).replace(".ui","."+file.extension);
					FileManager.copyFile(bgImgPath,newPath);
					return FileManager.getWorkRelativePath(newPath);
				}
			}
			return "";
		}

		PageManager.find=function(word){
			var pages=FileManager.getFileList(FileManager.getWorkPath("laya/pages/"));
			var arr=[];
			var a;
			for(var $each_a in pages){
				a=pages[$each_a];
				var path=a;
				if(FileTools.isDirectory(path))continue ;
				var txt=FileManager.readTxtFile(path);
				if(txt.indexOf(word)!=-1){
					arr.push({label:FileManager.getRelativePath(SystemSetting.pagesPath,path),path:path});
				}
			}
			return arr;
		}

		PageManager.replace=function(oldWord,newWord){
			Waiting.instance.start("替换中,请等待。。","替换中");
			var pages=FileManager.getFileList(FileManager.getWorkPath("laya/pages/"));
			var arr=[];
			var a;
			for(var $each_a in pages){
				a=pages[$each_a];
				var path=a;
				if(FileTools.isDirectory(path))continue ;
				var uiViewer=UIPanel.instance.getUIViewer(path);
				oldWord.lastIndex=0;
				if (uiViewer){
					var txt=JsonTool.getJsonString(uiViewer.design.xml);
					if(oldWord.test(txt)){
						txt=txt.replace(oldWord,newWord);
						uiViewer.design.changeXml(ObjectTools.getObj(txt));
						arr.push(path);
					}
					}else{
					txt=FileManager.readTxtFile(path);
					if(oldWord.test(txt)){
						txt=txt.replace(oldWord,newWord);
						FileManager.createTxtFile(path,txt);
						arr.push({label:FileManager.getRelativePath(SystemSetting.pagesPath,path),path:path});
					}
				}
			}
			Waiting.instance.close();
			return arr;
		}

		return PageManager;
	})()


	/**页面样式管理器
	*@author yung
	*/
	//class laya.editor.manager.PageStyleManager
	var PageStyleManager=(function(){
		function PageStyleManager(){};
		__class(PageStyleManager,'laya.editor.manager.PageStyleManager');
		PageStyleManager.init=function(){
			var txt=FileManager.readTxtFile(SystemSetting.pageStylePath);
			try {
				PageStyleManager.styleXML=new XMLElement(Boolean(txt)? txt :"<?xml version=\"1.0\" encoding=\"UTF-8\"?><page></page>");
				}catch (e){
				Alert.show(Sys.lang("读取文件{0}出错",SystemSetting.stylePath),"读取文件出错");
			}
			if (PageStyleManager.styleXML){
				PageStyleManager.styleMap={};
				var list=PageStyleManager.styleXML.children();
				var item;
				for(var $each_item in list){
					item=list[$each_item];
					PageStyleManager.styleMap[String(item.getAttribute('name'))]=item;
				}
			}
		}

		PageStyleManager.getPageProps=function(name){
			if (PageStyleManager.styleMap&&PageStyleManager.styleMap[name]){
				return String(PageStyleManager.styleMap[name].getAttribute('props'));
			}
			return "";
		}

		PageStyleManager.updatePageStyle=function(name,props){
			props=props.split("\n").join(" ");
			if (PageStyleManager.styleMap&&PageStyleManager.styleMap[name]){
				PageStyleManager.styleMap[name].setAttribute('props',props);
				}else {
				var xml=new XMLElement("<item name=\""+name+"\"/>");
				xml.setAttribute('props',props);
				PageStyleManager.styleXML.appendChild(xml);
				PageStyleManager.styleMap[name]=xml;
			}
			FileManager.createTxtFile(SystemSetting.pageStylePath,PageStyleManager.styleXML.toString());
		}

		PageStyleManager.styleXML=null
		PageStyleManager.styleMap=null
		return PageStyleManager;
	})()


	/**
	*
	*@author ww
	*@version 1.0
	*
	*@created 2016-1-20 下午5:52:11
	*/
	//class laya.editor.manager.ProjectConvertManager
	var ProjectConvertManager=(function(){
		function ProjectConvertManager(){}
		__class(ProjectConvertManager,'laya.editor.manager.ProjectConvertManager');
		ProjectConvertManager.convertProject=function(oPath,tarPath){
			console.log("convertProject: oPath:",oPath," newPath:",tarPath);
			var oBasePath;
			oBasePath=FileTools.getFileDir(oPath);
			var relativePath;
			relativePath=FileManager.getRelativePath(oBasePath,oPath);
			var tarProjectFile;
			tarProjectFile=FileManager.getPath(tarPath,ProjectConvertManager.getNewProjectRelativePath(relativePath));
			FileManager.copyFile(oPath,tarProjectFile);
			var pagesFolder;
			pagesFolder=FileManager.getPath(oBasePath,"morn/pages");
			var tFile;
			tFile=FileManager.getPath(oBasePath,"morn/assets");
			ProjectConvertManager.copyFileToTarFolder(tFile,oBasePath,tarPath);
			tFile=FileManager.getPath(oBasePath,"morn/styles.xml");
			ProjectConvertManager.copyFileToTarFolder(tFile,oBasePath,tarPath,true);
			tFile=FileManager.getPath(oBasePath,"morn/pageStyles.xml");
			ProjectConvertManager.copyFileToTarFolder(tFile,oBasePath,tarPath);
			ProjectConvertManager.createByDir(pagesFolder,oBasePath,tarPath);
			MessageManager.instance.show("转换成功");
		}

		ProjectConvertManager.getNewProjectRelativePath=function(path){
			return path.replace("morn","laya");
		}

		ProjectConvertManager.copyFileToTarFolder=function(file,oBase,tarFolder,adpt){
			(adpt===void 0)&& (adpt=false);
			if(!FileTools.exist(file))return;
			var tarFilePath;
			var tarFolderS;
			tarFolderS=ProjectConvertManager.getNewProjectRelativePath(FileManager.getRelativePath(oBase,file));
			tarFilePath=FileManager.getPath(tarFolder,tarFolderS);
			FileManager.copyFile(file,tarFilePath);
			if(adpt){
				ProjectConvertManager.adaptStyleXML(tarFilePath);
			}
		}

		ProjectConvertManager.adaptStyleXML=function(path){
			var str;
			str=FileManager.readTxtFile(path);
			var arr;
			arr=str.split("\"");
			var i=0,len=0;
			len=arr.length;
			for(i=0;i<len;i++){
				arr[i]=ProjectConvertManager.getAdptSkin(arr[i]);
			}
			FileManager.createTxtFile(path,arr.join("\""));
		}

		ProjectConvertManager.createByDir=function(file,basePath,tarPath){
			var fileList;
			fileList=FileTools.getFileList(file);
			var i=0,len=0;
			len=fileList.length;
			var tFile;
			var code;
			var obj;
			var codePath;
			for(i=0;i<len;i++){
				console.log("exportFile:",fileList[i]);
				tFile=fileList[i];
				if(FileTools.isDirectory(tFile)){
					}else{
					if(FileTools.getExtensionName(tFile)==ProjectConvertManager.oldUIExtension){
						code=FileManager.readTxtFile(tFile);
						console.log("export Page:",code);
						var uiObj;
						uiObj=DesignInfo.xmlStrToUIObj(code);
						console.log("uiObj:",uiObj);
						ProjectConvertManager.adptObj(uiObj);
						var tarFilePath;
						tarFilePath=FileManager.getPath(tarPath,ProjectConvertManager.getNewProjectRelativePath(FileManager.getRelativePath(basePath,tFile)));
						tarFilePath=tarFilePath.replace("."+ProjectConvertManager.oldUIExtension,"."+TypeManager.getExtension("Page"));
						FileManager.createJSONFile(tarFilePath,uiObj);
					}
				}
			}
		}

		ProjectConvertManager.adptObj=function(obj){
			ProjectConvertManager.adptType(obj);
			var key;
			if(obj.hasOwnProperty("scale")){
				obj["scaleX"]=obj["scaleY"]=obj["scale"];
				delete obj["scale"];
			}
			for(key in obj){
				if((typeof (obj[key])=='string')){
					var tStr;
					tStr=obj[key];
					if(tStr.indexOf("0x")>=0){
						tStr=tStr.replace("0x","#");
						obj[key]=tStr;
					}
					if(key=="skin"||1){
						obj[key]=ProjectConvertManager.getAdptSkin(tStr);
					}
				}else
				if((typeof (obj[key])=='object')){
					ProjectConvertManager.adptObj(obj[key]);
				}
			}
		}

		ProjectConvertManager.adptType=function(obj){
			if(ProjectConvertManager.typeConvertO[obj.type]){
				obj.type=ProjectConvertManager.typeConvertO[obj.type];
			}
			if(obj.url&&!obj.skin){
				obj.skin=obj.url;
			}
		}

		ProjectConvertManager.getAdptSkin=function(skin){
			var rst;
			if(skin.indexOf(".")<0)return skin;
			var arr;
			arr=skin.split(".");
			if(arr.length<3)return skin;
			var extension;
			extension=arr.shift();
			rst=arr.join("/")+"."+extension;
			return rst;
		}

		ProjectConvertManager.oldUIExtension="xml";
		__static(ProjectConvertManager,
		['typeConvertO',function(){return this.typeConvertO={
				"LinkButton":"Button",
				"Container":"Box",
				"FrameClip":"Box",
				"RadioButton":"Radio"
		};}

		]);
		return ProjectConvertManager;
	})()


	//class laya.editor.manager.ProjectManager
	var ProjectManager=(function(){
		function ProjectManager(){};
		__class(ProjectManager,'laya.editor.manager.ProjectManager');
		ProjectManager.loadProject=function(path,complete){
			if (Boolean(path)){
				if (ProjectManager.lastProjectPath !=path){
					ProjectManager.lastProjectPath=path;
					if (FileTools.exist(path)){
						ResManager.clear();
						StartPage.instance.close();
						SystemSetting.setProject(path);
						ProjectManager.xml=new XMLElement(FileManager.readTxtFile(path,true));
						var list=ProjectManager.xml.children();
						var child;
						for(var $each_child in list){
							child=list[$each_child];
							var name=child.name();
							if (ProjectSetting[name] !=null){
								ProjectSetting[name]=((ProjectSetting[name])instanceof Array)? StringTool.trimSide(String(child)).split(","):String(child);
								if(ProjectSetting[name].replace)
									ProjectSetting[name]=ProjectSetting[name].replace(/\\/g,FileTools.path.sep);
							}
						}
						ProjectSetting.adptPaths();
						ProjectManager.refreshProject(complete);
						ProjectManager.addProjectOpened(path);
						console.log("setRenderProps after project loaded");
						RenderManager.I.setRenderPropByFont(ProjectSetting.defaultFont);
					}
					else{
						Alert.show("项目不存在");
						ProjectManager.removeProjectOpened(path);
					}
				}
				return;
			}
			StartPage.instance.start();
			if (complete !=null){
				complete.run();
			}
		}

		ProjectManager.refreshProject=function(complete){
			ResStyleManager.init();
			PageStyleManager.init();
			PagePanel.instance.init(SystemSetting.pagesPath);
			ResPanel.instance.init(SystemSetting.assetsPath,complete);
		}

		ProjectManager.saveProject=function(){
			ProjectSetting.adptPaths();
			var i=0,len=0;
			var tKey;
			len=ProjectManager.keys.length;
			var tXml;
			for(i=0;i<len;i++){
				tKey=ProjectManager.keys[i];
				tXml=new XMLElement();
				tXml.setName(tKey);
				tXml.value=ProjectSetting[tKey];
				ProjectManager.xml.setChildByName(tKey,tXml);
			}
			tXml=new XMLElement();
			tXml.setName("ver");
			tXml.value="0.9.7";
			ProjectManager.xml.setChildByName("ver",tXml);
			FileManager.createTxtFile(SystemSetting.projectPath,ProjectManager.xml.toString());
		}

		ProjectManager.openProject=function(){
			DialogTools.showOpenFile("打开项目",ProjectManager.onFileSelect,DialogTools.getOpenProO());
		}

		ProjectManager.onFileSelect=function(files){
			if (!files || !files[0])
				return;
			ProjectManager.openProjectByPath(files[0]);
		}

		ProjectManager.openProjectDir=function(){
			if (Boolean(SystemSetting.workPath)){
				var file=new File(SystemSetting.workPath);
				if (file.exists){
					FileTools.openItem(SystemSetting.workPath);
				}
			}
		}

		ProjectManager.openProjectByPath=function(path){
			Dialog.manager.closeAll();
			UIPanel.instance.closeAll(ProjectManager.loadProject,[path]);
		}

		ProjectManager.setProjectOpened=function(projects){
			ProjectManager.projectOpened.length=0;
			if (!projects)return;
			var len=projects.length;
			for (var i=0;i < len;i++){
				ProjectManager.projectOpened.push(projects[i]);
			}
			MenuBar.instance.showProjectOpened(ProjectManager.projectOpened);
		}

		ProjectManager.addProjectOpened=function(path){
			var index=ProjectManager.projectOpened.indexOf(path);
			if (index !=-1){
				ProjectManager.projectOpened.splice(index,1);
			}
			ProjectManager.projectOpened.splice(0,0,path);
			MenuBar.instance.showProjectOpened(ProjectManager.projectOpened);
		}

		ProjectManager.removeProjectOpened=function(path){
			var index=ProjectManager.projectOpened.indexOf(path);
			if (index !=-1){
				ProjectManager.projectOpened.splice(index,1);
				MenuBar.instance.showProjectOpened(ProjectManager.projectOpened);
			}
		}

		ProjectManager.xml=null
		ProjectManager.lastProjectPath=null
		ProjectManager.projectOpened=[];
		__static(ProjectManager,
		['keys',function(){return this.keys=
			[
			"resTypes",
			"resExportPath",
			"resCanCompress",
			"resPublishQuality",
			"codeExportPath",
			"uiType",
			"codeType",
			"codeType",
			"defaultFont",
			"uiExportPath",
			"boxTypes",
			"pageTypes",
			"pageTypes",
			"codeImports",
			"codeImportsJS",
			"codeImportsTS",
			"shareResPath",
			"langPath",
			"textureWidth",
			"textureHeight",
			"picWidth",
			"picHeight",
			"power2",
			"trimempty"];}
		]);
		return ProjectManager;
	})()


	/**资源管理器
	*@author yung
	*/
	//class laya.editor.manager.ResManager
	var ResManager=(function(){
		function ResManager(){};
		__class(ResManager,'laya.editor.manager.ResManager');
		ResManager.refresh=function(complete){
			ResManager._complete=complete;
			ResManager._reses=[];
		}

		ResManager.clear=function(){
			ResManager._resVerMap={};
		}

		ResManager.removeRes=function(path){
			FileManager.removeFile(path);
		}

		ResManager.getResLinkName=function(f){
			var rootPath=SystemSetting.assetsPath;
			if (Boolean(ProjectSetting.shareResPath)){
				var sharePath=FileManager.getWorkPath(ProjectSetting.shareResPath);
				if (f.indexOf(sharePath)>-1){
					rootPath=sharePath;
				}
			}
			return FileManager.getRelativePath(rootPath,f).toString();
		}

		ResManager.findUnUsed=function(){
			var reses;
			reses=ResFileManager.getAllResLinkList();
			var pages=FileManager.getFileList(FileManager.getWorkPath("laya/pages/"));
			var i=0,len=0;
			var a;
			for(var $each_a in pages){
				a=pages[$each_a];
				var path=a;
				if(FileTools.isDirectory(path))continue ;
				var txt=FileManager.readTxtFile(path);
				for (i=reses.length-1;i >-1;i--){
					var item=reses[i];
					if(item.indexOf("@")>=0||item.indexOf("$")>=0){
						reses.splice(i,1);
						continue ;
					}
					if (txt.indexOf("\""+item+"\"")!=-1){
						reses.splice(i,1);
					}
				}
			};
			var rst;
			rst=[];
			len=reses.length;
			for(i=0;i<len;i++){
				rst.push({label:reses[i],path:FileManager.getResPath(reses[i])});
			}
			return rst;
		}

		ResManager.findResRefer=function(res){
			var pages=FileManager.getFileList(FileManager.getWorkPath("laya/pages/"));
			var i=0,len=0;
			var rst;
			rst=[];
			var a;
			for(var $each_a in pages){
				a=pages[$each_a];
				var path=a;
				if(FileTools.isDirectory(path))continue ;
				var txt=FileManager.readTxtFile(path);
				var item=res;
				if (txt.indexOf("\""+item+"\"")!=-1){
					rst.push({label:FileManager.getRelativePath(SystemSetting.pagesPath,path),path:path});
				}
			}
			return rst;
		}

		ResManager.findFileUnUsed=function(){
			var objs={};
			var arr=ResManager.findUnUsed();
			var obj;
			for(var $each_obj in arr){
				obj=arr[$each_obj];
				objs[obj.path]=1;
			}
			return objs;
		}

		ResManager._resVerMap={};
		ResManager._resNeedLoaded=null
		ResManager._complete=null
		ResManager._reses=null
		ResManager.timer=0;
		return ResManager;
	})()


	/**资源样式管理器
	*@author yung
	*/
	//class laya.editor.manager.ResStyleManager
	var ResStyleManager=(function(){
		function ResStyleManager(){};
		__class(ResStyleManager,'laya.editor.manager.ResStyleManager');
		ResStyleManager.init=function(){
			var txt=FileManager.readTxtFile(SystemSetting.stylePath);
			try {
				ResStyleManager.styleXML=new XMLElement(Boolean(txt)?txt:"<?xml version=\"1.0\" encoding=\"UTF-8\"?><res></res>");
				}catch (e){
				Alert.show(Sys.lang("读取文件{0}出错",SystemSetting.stylePath),"读取文件出错");
			}
			if (ResStyleManager.styleXML){
				ResStyleManager.styleMap={};
				var list=ResStyleManager.styleXML.children();
				var item;
				for(var $each_item in list){
					item=list[$each_item];
					ResStyleManager.styleMap[String(item.getAttribute('name'))]=item;
				}
			}
		}

		ResStyleManager.getResProps=function(asset){
			if(ResStyleManager.styleMap&&ResStyleManager.styleMap[asset]){
				return String(ResStyleManager.styleMap[asset].getAttribute('props'));
			}
			return "";
		}

		ResStyleManager.getResPropsObj=function(asset){
			var propStr;
			propStr=ResStyleManager.getResProps(asset);
			var rst;
			rst={};
			if(propStr.indexOf("=")>=0){
				var props;
				props=propStr.split(" ");
				for (var i=0,n=props.length;i < n;i++){
					var a=props[i].split("=");
					if (a.length==2){
						var key=a[0];
						var val=a[1];
						rst[key]=val;
					}
				}
			}
			return rst;
		}

		ResStyleManager.getResCompType=function(asset,isIcon){
			(isIcon===void 0)&& (isIcon=false);
			if (!asset){
				console.log("getResCompType:asset==null");
				return "Image";
			};
			var resPath;
			resPath=FileManager.adptToCommonUrl(asset);
			if (ResStyleManager.styleMap&&ResStyleManager.styleMap[resPath]){
				var compType=String(ResStyleManager.styleMap[resPath].getAttribute('type'));
			}
			if (!Boolean(compType)){
				var extension=FileTools.getExtensionName(asset);
				compType=UIConfigManager.getCompTypeByExtension(extension);
				if(compType)return compType;
				var fileName=FileTools.getFileName(asset);
				var res=fileName.split("_")[0];
				compType=UIConfigManager.getCompTypeByResName(res,isIcon);
			}
			return compType || "Image";
		}

		ResStyleManager.getResCanCompress=function(asset){
			if(ResStyleManager.styleMap&&ResStyleManager.styleMap[asset]){
				return ResStyleManager.styleMap[asset].getAttribute('compress')==1;
			}
			return ProjectSetting.resCanCompress==1;
		}

		ResStyleManager.getResQuality=function(asset){
			if(ResStyleManager.styleMap&&ResStyleManager.styleMap[asset]){
				return Laya.__parseInt(ResStyleManager.styleMap[asset].getAttribute('quality'));
			}
			return ProjectSetting.resPublishQuality;
		}

		ResStyleManager.updateResStyle=function(asset,type,compress,quality,props){
			props=props.split("\n").join(" ");
			if(ResStyleManager.styleMap&&ResStyleManager.styleMap[asset]){
				ResStyleManager.styleMap[asset].setAttribute('type',type);
				ResStyleManager.styleMap[asset].setAttribute('compress',compress);
				ResStyleManager.styleMap[asset].setAttribute('quality',quality);
				ResStyleManager.styleMap[asset].setAttribute('props',props);
				}else {
				var xml=new XMLElement("<item name=\""+asset+"\" type='"+type+"' compress=\""+compress+"\" quality=\""+quality+"\" />");
				xml.setAttribute('props',props);
				ResStyleManager.styleXML.appendChild(xml);
				ResStyleManager.styleMap[asset]=xml;
			}
			FileManager.createTxtFile(SystemSetting.stylePath,ResStyleManager.styleXML.toString());
		}

		ResStyleManager.styleXML=null
		ResStyleManager.styleMap=null
		return ResStyleManager;
	})()


	/**快捷键管理器
	*@author yung
	*/
	//class laya.editor.manager.ShortcutManager
	var ShortcutManager=(function(){
		function ShortcutManager(){};
		__class(ShortcutManager,'laya.editor.manager.ShortcutManager');
		ShortcutManager.init=function(){
			Laya.stage.on("keydown",ShortcutManager,ShortcutManager.onStageKeyDown);
		}

		ShortcutManager.onStageKeyDown=function(e){
			ShortcutManager.exeKey(e.keyCode,e.ctrlKey,e.shiftKey);
		}

		ShortcutManager.getKey=function(key,ctrl,shift){
			var str=""+key;
			str+=ctrl ? "_ctrl" :"";
			str+=shift ? "_shift" :"";
			return str;
		}

		ShortcutManager.addKey=function(key,ctrl,shift,handler,args,focusClass,name,_this){
			(name===void 0)&& (name="");
			var str=ShortcutManager.getKey(key,ctrl,shift);
			if (ShortcutManager.keyMap[str]==null || ShortcutManager.keyMap[str].focusClass !=focusClass){
				ShortcutManager.keyMap[str]={focusClass:focusClass,handler:handler,args:args,_this:_this};
				}else {
				Sys.warn(Sys.lang("快捷键冲突")+name,"key:"+key,"ctrl:"+ctrl,"shift:"+shift);
			}
		}

		ShortcutManager.addKeyE=function(key,ctrl,shift,notice,args,focusClass,name,_this){
			(name===void 0)&& (name="");
			var str=ShortcutManager.getKey(key,ctrl,shift);
			if (ShortcutManager.keyMapE[str]==null || ShortcutManager.keyMapE[str].focusClass !=focusClass){
				ShortcutManager.keyMapE[str]={focusClass:focusClass,notice:notice,args:args,_this:_this};
				}else {
				Sys.warn(Sys.lang("快捷键冲突")+name,"key:"+key,"ctrl:"+ctrl,"shift:"+shift);
			}
		}

		ShortcutManager.exeKey=function(key,ctrl,shift){
			(ctrl===void 0)&& (ctrl=false);
			(shift===void 0)&& (shift=false);
			var str=ShortcutManager.getKey(key,ctrl,shift);
			if (ShortcutManager.keyMap[str] !=null){
				var fClass;
				console.log("这里移除了 var fClass:Class = keyMap[str].focusClass");
				if (!fClass||(Laya.__typeof(Laya.stage.focus,fClass))){
					var fun=ShortcutManager.keyMap[str].handler;
					var args=ShortcutManager.keyMap[str].args;
					fun.apply(ShortcutManager.keyMap[str]._this,args);
				}
			}
			if (ShortcutManager.keyMapE[str] !=null){
				console.log("这里移除了 var fClass:Class = keyMapE[str].focusClass");
				if (!fClass||(Laya.__typeof(Laya.stage.focus,fClass))){
					Notice.notify(ShortcutManager.keyMapE[str].notice,ShortcutManager.keyMapE[str].args);
				}
			}
		}

		ShortcutManager.keyMap={};
		ShortcutManager.keyMapE={};
		return ShortcutManager;
	})()


	/**
	*...
	*@author ww
	*/
	//class laya.editor.manager.UIConfigManager
	var UIConfigManager=(function(){
		function UIConfigManager(){}
		__class(UIConfigManager,'laya.editor.manager.UIConfigManager');
		UIConfigManager.addNewConfig=function(data){
			if(!UIConfigManager.configMap){
				UIConfigManager.configMap=data;
				return;
			};
			var key;
			for(key in data){
				UIConfigManager.configMap[key]=data[key];
			}
		}

		UIConfigManager.getCompPropValueType=function(type,prop){
			var comp=UIConfigManager.getCompConfig(type);
			if(!comp||!comp.prop||!comp.prop[prop])return "unknow:"+type+","+prop;
			return comp.prop[prop].type;
		}

		UIConfigManager.getCompPropValueAccept=function(type,prop){
			var comp=UIConfigManager.getCompConfig(type);
			if(!comp||!comp.prop||!comp.prop[prop])return "";
			return comp.prop[prop].accept;
		}

		UIConfigManager.getCompConfig=function(type){
			return UIConfigManager.getFullConfig(type);
			return UIConfigManager.configMap[type];
		}

		UIConfigManager.getCompDefaultValueO=function(type){
			var configObj;
			var defaultObj;
			defaultObj=UIConfigManager.defaultPropDic[type];
			if(defaultObj)return defaultObj;
			defaultObj={};
			UIConfigManager.defaultPropDic[type]=configObj;
			configObj=laya.editor.manager.UIConfigManager.getCompConfig(type);
			if(!configObj)return defaultObj;
			var defaultStr;
			defaultStr=configObj.p.defaultValue;
			if(!defaultStr||defaultStr.length<1)return defaultObj;
			console.log("compConfig:",configObj);
			var keyValues;
			keyValues=defaultStr.split(" ");
			var tKValue;
			var i=0,len=0;
			len=keyValues.length;
			for(i=0;i<len;i++){
				tKValue=keyValues[i].split("=");
				defaultObj[tKValue[0]]=StringTool.getReplace(tKValue[1],"'","");
			}
			console.log("defaultObj :",type,defaultObj);
			return defaultObj;
		}

		UIConfigManager.inserDefaultValue=function(node){
			var defaultObj;
			defaultObj=UIConfigManager.getCompDefaultValueO(node.type);
			var key;
			var assetDefault;
			assetDefault=ResStyleManager.getResPropsObj(node.props[laya.editor.manager.UIConfigManager.getCompSkinLabel(node.type)]);
			for(key in defaultObj){
				if(assetDefault[key])continue ;
				node.props[key]=defaultObj[key];
			}
		}

		UIConfigManager.getFullConfig=function(type){
			var rst;
			rst=UIConfigManager.configMap[type];
			if (!rst)return null;
			rst=ObjectTools.copyObj(rst);
			if (!rst.c.prop)rst.c.prop=[];
			if (! (rst.c.prop instanceof Array))rst.c.prop=[rst.c.prop];
			if (rst.p.inherit){
				UIConfigManager.inherit(rst,UIConfigManager.getFullConfig(rst.p.inherit));
			}
			UIConfigManager.createPropDic(rst);
			return rst;
		}

		UIConfigManager.createPropDic=function(node){
			var props;
			props=node.c.prop;
			var propO;
			propO={};
			var i=0,len=0;
			len=props.length;
			var tProp;
			for(i=0;i<len;i++){
				tProp=props[i].p;
				propO[tProp.name]=tProp;
			}
			node.prop=propO;
		}

		UIConfigManager.getCompNames=function(){
			var rst=[];
			var key;
			for(key in UIConfigManager.configMap){
				rst.push(key);
			}
			return rst;
		}

		UIConfigManager.getCompProp=function(type,key){
			var dataO=UIConfigManager.getFullConfig(type);
			if(!dataO||!dataO.p)return null;
			return dataO.p[key];
		}

		UIConfigManager.getCompSkinLabel=function(type){
			var prop=laya.editor.manager.UIConfigManager.getCompProp(type,"skinLabel");
			prop=prop || "styleSkin";
			return prop;
		}

		UIConfigManager.getCompTypeByResName=function(res,isIcon){
			(isIcon===void 0)&& (isIcon=false);
			var type;
			for(type in UIConfigManager.configMap){
				if(UIConfigManager.configMap[type].p.resName==res||type.toLowerCase()==res){
					if(isIcon)return UIConfigManager.configMap[type].p.icon;
					return type;
				}
			}
			return "Image";
		}

		UIConfigManager.getCompTypeByExtension=function(extension,isIcon){
			(isIcon===void 0)&& (isIcon=false);
			var type;
			for(type in UIConfigManager.configMap){
				if(UIConfigManager.configMap[type].p.extension==extension){
					if(isIcon)return UIConfigManager.configMap[type].p.icon;
					return type;
				}
			}
			return null;
		}

		UIConfigManager.inherit=function(child,parent){
			if (!parent)return;
			var cClist;
			var pClist;
			cClist=child.c.prop;
			pClist=parent.c.prop;
			var keys={};
			var i=0;
			var len=0;
			len=cClist.length;
			for (i=0;i < len;i++){
				keys[cClist[i].p.name]=true;
			}
			len=pClist.length;
			for (i=0;i < len;i++){
				if (!keys[pClist[i].p.name]){
					cClist.push(pClist[i]);
				};
			}
		}

		UIConfigManager.configMap=null
		UIConfigManager.defaultPropDic={};
		return UIConfigManager;
	})()


	/**编辑器系统类，提供扩展插件使用
	*@author yung
	*/
	//class laya.editor.Sys
	var Sys1=(function(){
		function Sys(){};
		__class(Sys,'laya.editor.Sys',null,'Sys1');
		Sys.SetBmdVer=function(name){
			var obj=Sys.bmdMap[name];
			if (obj){
				obj.ver=Sys.bmdVer;
			}
		}

		Sys.init=function(main){
			laya.editor.Sys.main=main;
			laya.editor.Sys.stage=main.stage;
		}

		Sys.clearRes=function(){
			Sys.resDomainMap={};
		}

		Sys.loadRes=function(url,complete){}
		Sys.onResLoaded=function(loader,complete){
			if (complete !=null){
				complete();
			}
		}

		Sys.onBitmapDataLoaded=function(loader,assetName,complete,args){
			if (complete !=null){
				complete.apply(null,args);
			}
		}

		Sys.disposeBitmap=function(assetName){
			var obj=Sys.bmdMap[assetName];
			if (obj){
				obj.bmd.dispose();
				delete Sys.bmdMap[assetName];
			}
		}

		Sys.hasRes=function(name){
			if (name==null || name.indexOf(".png")>-1 || name.indexOf(".jpg")>-1){
				return true;
			}
			return false;
		}

		Sys.getResClass=function(name){
			return null;
		}

		Sys.getRes=function(name){
			var sp=new Sprite();
			return sp;
		}

		Sys.getResBitmapData=function(name){
			return null;
		}

		Sys.info=function(__args){
			var args=arguments;
			console.log("info",args,0x3EBDF4);
		}

		Sys.error=function(__args){
			var args=arguments;
			console.log("error",args,0xFF4646);
		}

		Sys.warn=function(__args){
			var args=arguments;
			console.log("warn",args,0xFFFF80);
		}

		Sys.plugin=function(__args){
			var args=arguments;
			console.log("plugin",args,0xFF0080);
		}

		Sys.log=function(__args){
			var args=arguments;
			console.log("swc",args,0xFF0080);
		}

		Sys.stage=null
		Sys.main=null
		Sys.resDomainMap=null
		Sys.bmdMap={};
		Sys.bmdVer=0;
		return Sys;
	})()


	/**工具类
	*@author yung
	*/
	//class laya.editor.utils.Utils
	var Utils=(function(){
		function Utils(){};
		__class(Utils,'laya.editor.utils.Utils');
		Utils.clone=function(source){
			return ObjectTools.copyObj(source);
		}

		Utils.createMaskArea=function(width,height,color,alpha){
			(color===void 0)&& (color="#ff0000");
			(alpha===void 0)&& (alpha=1);
			var sp=new Sprite();
			sp.graphics.drawRect(0,0,width,height,color);
			sp.alpha=alpha;
			return sp;
		}

		Utils.drawDashedRect=function(g,width,height,lineWidth,lineColor,lineAlpha,solidLen,brokenLen){
			(lineWidth===void 0)&& (lineWidth=1);
			(lineColor===void 0)&& (lineColor=0xff0000);
			(lineAlpha===void 0)&& (lineAlpha=1);
			(solidLen===void 0)&& (solidLen=5);
			(brokenLen===void 0)&& (brokenLen=2);
			g.clear();
			Utils.drawDashed(g,new Point(0,0),new Point(width,0),lineWidth,lineColor,lineAlpha,solidLen,brokenLen);
			Utils.drawDashed(g,new Point(width,0),new Point(width,height),lineWidth,lineColor,lineAlpha,solidLen,brokenLen);
			Utils.drawDashed(g,new Point(width,height),new Point(0,height),lineWidth,lineColor,lineAlpha,solidLen,brokenLen);
			Utils.drawDashed(g,new Point(0,height),new Point(0,0),lineWidth,lineColor,lineAlpha,solidLen,brokenLen);
		}

		Utils.drawDashed=function(g,p1,p2,lineWidth,lineColor,lineAlpha,solidLen,brokenLen){
			(lineWidth===void 0)&& (lineWidth=1);
			(lineColor===void 0)&& (lineColor=0xff0000);
			(lineAlpha===void 0)&& (lineAlpha=1);
			(solidLen===void 0)&& (solidLen=5);
			(brokenLen===void 0)&& (brokenLen=2);
			g.drawLine(p1.x,p1.y,p2.x,p2.y,"#"+lineColor.toString(16));
		}

		Utils.getPoint=function(from,x,y,to){
			var g=from.localToGlobal(new Point(x,y));
			var p=to.globalToLocal(g);
			return p;
		}

		Utils.xmlToMapByCompId=function(xml,map){
			map[xml.compId]=xml;
			var list=xml.child;
			if(!list)return;
			for (var j=0,n=list.length;j < n;j++){
				Utils.xmlToMapByCompId(list[j],map);
			}
		}

		Utils.getClass=function(classname){
			var arr=classname.split(".");
			var obj=Browser.window;
			for(var i=0,n=arr.length;i<n;i++){
				obj=obj[arr[i]];
			}
			return obj;
		}

		return Utils;
	})()


	/**帮助
	*@author yung
	*/
	//class laya.editor.view.other.Help
	var Help=(function(){
		function Help(){};
		__class(Help,'laya.editor.view.other.Help');
		var __proto=Help.prototype;
		__proto.start=function(){}
		__getset(1,Help,'instance',function(){
			return Help._instance ? Help._instance :Help._instance=new Help();
		});

		Help._instance=null
		return Help;
	})()


	/**感谢
	*@author yung
	*/
	//class laya.editor.view.other.Thank
	var Thank=(function(){
		function Thank(){};
		__class(Thank,'laya.editor.view.other.Thank');
		var __proto=Thank.prototype;
		__proto.start=function(){}
		__getset(1,Thank,'instance',function(){
			return Thank._instance ? Thank._instance :Thank._instance=new Thank();
		});

		Thank._instance=null
		return Thank;
	})()


	/**
	*时间轴帧数据
	*@author ww
	*@version 1.0
	*
	*@created 2015-12-5 下午1:55:45
	*/
	//class laya.editor.view.timeline.TimeFrameData
	var TimeFrameData=(function(){
		function TimeFrameData(){
			this.frame=0;
			this.type=0;
			this.props=null;
		}

		__class(TimeFrameData,'laya.editor.view.timeline.TimeFrameData');
		TimeFrameData.create=function(frame,props,type){
			(type===void 0)&& (type=1);
			var rst;
			rst=new TimeFrameData();
			rst.type=type;
			rst.frame=frame;
			rst.props=props;
			return rst;
		}

		return TimeFrameData;
	})()


	/**
	*时间轴相关的事件
	*@author WW
	*@version 1.0
	*
	*@created 2015-12-8 上午9:01:12
	*/
	//class laya.editor.view.timeline.TimeLineEvent
	var TimeLineEvent=(function(){
		function TimeLineEvent(){}
		__class(TimeLineEvent,'laya.editor.view.timeline.TimeLineEvent');
		TimeLineEvent.LIST_CHANGE="ListChange";
		TimeLineEvent.TIMELINE_CLICKFRAME="TIMELINE_CLICKFRAME";
		return TimeLineEvent;
	})()


	/**
	*
	*@author ww
	*@version 1.0
	*
	*@created 2015-12-7 下午7:47:46
	*/
	//class laya.editor.view.timeline.TimeLineUtils
	var TimeLineUtils=(function(){
		function TimeLineUtils(){}
		__class(TimeLineUtils,'laya.editor.view.timeline.TimeLineUtils');
		TimeLineUtils.fakeTimeLineTreeArrData=function(){
			var disTree;
			disTree=TimeLineUtils.fakeDisTreeData();
			var timeLineData;
			timeLineData=TimeLineUtils.fakeTimeLineData(disTree);
			var treeArr;
			treeArr=TimeLineUtils.fakeTreeArr(timeLineData);
			return treeArr;
		}

		TimeLineUtils.fakeDisTreeData=function(){
			var data;
			data=TimeLineUtils.getNodeData();
			var childNode;
			var i=0,len=0;
			len=5;
			for(i=0;i<len;i++){
				TimeLineUtils.addChildTo(TimeLineUtils.getNodeData(),data)
			}
			childNode=TimeLineUtils.getNodeData();
			len=3;
			for(i=0;i<len;i++){
				TimeLineUtils.addChildTo(TimeLineUtils.getNodeData(),childNode)
			}
			TimeLineUtils.addChildTo(childNode,data)
			return data;
		}

		TimeLineUtils.fakeTreeArr=function(treeO){
			var rst;
			rst=[];
			DisTools.getTreeArr(treeO,rst);
			return rst;
		}

		TimeLineUtils.fakeTimeLineData=function(treeData,parent){
			var rst;
			rst={};
			rst.nodeParent=parent;
			rst.name=treeData.name;
			rst.label=rst.name;
			var childs;
			childs=treeData.childs;
			var i=0,len=0;
			len=childs.length;
			var nChild;
			nChild=[];
			for(i=0;i<len;i++){
				nChild.push(TimeLineUtils.fakeTimeLineData(childs[i],rst));
			}
			rst.frames=TimeLineUtils.fakeFrameData();
			rst.childs=nChild;
			rst.isDirectory=nChild.length>0;
			rst.hasChild=nChild.length>0;
			return rst;
		}

		TimeLineUtils.fakeFrameData=function(){
			var frameList;
			frameList=[];
			var tFrameData;
			tFrameData=new TimeFrameData();
			tFrameData.frame=9;
			frameList.push(tFrameData);
			tFrameData=new TimeFrameData();
			tFrameData.frame=10;
			frameList.push(tFrameData);
			tFrameData=new TimeFrameData();
			tFrameData.frame=Math.floor(30*Math.random());
			frameList.push(tFrameData);
			tFrameData=new TimeFrameData();
			tFrameData.frame=Math.floor(30*Math.random());
			frameList.push(tFrameData);
			return frameList;
		}

		TimeLineUtils.getNodeData=function(){
			var rst;
			rst={};
			rst.nodeParent=null;
			rst.name="node";
			rst.data={};
			rst.childs=[];
			return rst;
		}

		TimeLineUtils.addChildTo=function(child,parent){
			parent.childs.push(child);
			child.nodeParent=parent;
		}

		return TimeLineUtils;
	})()


	/**
	*
	*@author ww
	*@version 1.0
	*
	*@created 2015-11-26 上午10:04:47
	*/
	//class laya.ide.consts.FilterFuns
	var FilterFuns=(function(){
		function FilterFuns(){}
		__class(FilterFuns,'laya.ide.consts.FilterFuns');
		FilterFuns.isEditorComp=function(comp){
			if (comp !=null && Laya.__typeof(comp,'laya.ui.IComponent')&& comp["comXml"]){
				if((comp.parent instanceof laya.ui.Button )){
				}
				if(Laya.__typeof(comp.parent,'laya.ui.IBox'))
					return true;
			}
			return false;
		}

		FilterFuns.isEditorBox=function(comp){
			if (comp !=null && Laya.__typeof(comp,'laya.ui.IComponent')&& comp["comXml"]){
				if(Laya.__typeof(comp,'laya.ui.IBox'))
					return true;
			}
			return false;
		}

		FilterFuns.isEditorSelectable=function(comp){
			if(!comp["visible"])return false;
			var data;
			data=comp["comXml"];
			if(comp.name=="panelContent")return true;
			if(!data)return true;
			if(data.hasOwnProperty(Signs.LockSign)&&data[Signs.LockSign])return false;
			return true;
		}

		FilterFuns.isEditorSelectableChain=function(comp){
			if(!FilterFuns.isEditorSelectable(comp))return false;
			if(!comp.parent)return true;
			return FilterFuns.isEditorSelectableChain(comp.parent);
		}

		FilterFuns.isSpecialRes=function(url){
			if(url.indexOf("$")>0){
				return true;
			}
			return false;
		}

		FilterFuns.isShowResFile=function(url){
			return !FilterFuns.isSpecialRes(url);
		}

		return FilterFuns;
	})()


	/**
	*...
	*@author ww
	*/
	//class laya.ide.consts.Paths
	var Paths=(function(){
		function Paths(){}
		__class(Paths,'laya.ide.consts.Paths');
		Paths.getLayoutFilePathByType=function(type){
			return "layout/"+type+".config";
		}

		Paths.ParticleTmpGravity="laya/default/particle.json";
		Paths.ParticleTmpRadial="laya/default/particle1.json";
		Paths.ParticleTmpTexture="laya/default/texture.png";
		Paths.ParticleDefaultTextureName="texture.png";
		Paths.CustomUIConfigPath="renders/";
		Paths.TemplateFolder="laya/template/";
		Paths.TemplateDefaultIcon="laya/default/templateIcon.png";
		Paths.CodeTemplatePath="codeTemplate/";
		Paths.AirTool="libs/LayaAirTool/LayaAirTool.exe";
		Paths.IDEConfigFile="builder.xml";
		Paths.LogFile="log.txt";
		Paths.LayoutFile_Default="layout/layout.config";
		Paths.LayoutFile_Static="layout/default.config";
		__static(Paths,
		['JSCodeTemplate',function(){return this.JSCodeTemplate="codeTemplate/"+"jsCodeTpl.txt";},'JSCodePreTemplate',function(){return this.JSCodePreTemplate="codeTemplate/"+"jsCodePre.txt";},'TSCodeTemplate',function(){return this.TSCodeTemplate="codeTemplate/"+"tsCodeTpl.txt";},'TSCodePreTemplate',function(){return this.TSCodePreTemplate="codeTemplate/"+"tsCodePre.txt";},'ASCodeTemplate',function(){return this.ASCodeTemplate="codeTemplate/"+"asCodeTpl.txt";}
		]);
		return Paths;
	})()


	/**
	*
	*@author ww
	*@version 1.0
	*
	*@created 2015-11-25 上午11:08:41
	*/
	//class laya.ide.consts.Signs
	var Signs=(function(){
		function Signs(){}
		__class(Signs,'laya.ide.consts.Signs');
		Signs.LockSign="$LOCKED";
		Signs.HideSign="$HIDDEN";
		return Signs;
	})()


	/**
	*...
	*@author ww
	*/
	//class laya.ide.consts.SkinDefines
	var SkinDefines=(function(){
		function SkinDefines(){}
		__class(SkinDefines,'laya.ide.consts.SkinDefines');
		SkinDefines.DisDragIcon="comp/clip_folder.png";
		SkinDefines.PageDragIcon="comp/clip_folder.png";
		SkinDefines.ResDragIcon="comp/clip_folder.png";
		SkinDefines.LayoutRecDragIcon="comp/clip_folder.png";
		SkinDefines.LayoutTabDragIcon="comp/clip_folder.png";
		return SkinDefines;
	})()


	/**
	*本地程序调用封装
	*@author ww
	*@version 1.0
	*
	*@created 2015-10-30 下午3:27:37
	*/
	//class laya.ide.devices.CMDShell
	var CMDShell=(function(){
		function CMDShell(){}
		__class(CMDShell,'laya.ide.devices.CMDShell');
		CMDShell.init=function(){
			CMDShell.childProcess=Device.requireRemote("child_process");
			CMDShell.iconv=Device.requireRemote('iconv-lite');
		}

		CMDShell.exeFile=function(fileName,param,callBack){
			CMDShell.childProcess.execFile(fileName,param,callBack);
		}

		CMDShell.execute=function(cmd,callBack){
			console.log("execute:",cmd);
			CMDShell.childProcess.exec(cmd,{encoding:"binary",maxBuffer:1024*1024*20},callBack);
		}

		CMDShell.callBackTmp=function(err,stdOut,stdErr){
			console.log("err:",err);
			console.log("stdErr:",stdErr);
			console.log("stdOut:",CMDShell.iconv.decode(stdOut,"gbk"));
		}

		CMDShell.executeExtra=function(cmd,callBack){
			CMDShell.childProcess.exec(cmd,{encoding:"binary",maxBuffer:1024*1024*20},callBackTmp=function(err,stdOut,stdErr){
				console.log("err:",err);
				console.log("stdErr:",stdErr);
				callBack(CMDShell.iconv.decode(stdOut,"gbk"));
			});
		}

		CMDShell.decode=function(data,type){
			return CMDShell.iconv.decode(data,type);
		}

		CMDShell.childProcess=null
		CMDShell.iconv=null
		return CMDShell;
	})()


	/**
	*封装所有驱动级接口
	*@author yung
	*/
	//class laya.ide.devices.Device
	var Device=(function(){
		function Device(){};
		__class(Device,'laya.ide.devices.Device');
		Device.init=function(){
			Device.electron=Device.require("electron");
			var sremote;
			sremote=require('remote');
			Device.remote=Device.electron.remote;
			Device.app=Device.requireRemote('app');
			Device.Buffer=Browser.window.Buffer;
			Device.appPath=Device.app.getPath("appData")+"/"+Device.appName;
			Device.tempPath=Device.app.getPath("temp")+"/"+Device.appName;
			Device.userHome=Device.app.getPath("home")+"/"+Device.appName;
			Sys.log("appPath:",Device.appPath);
			Device.app.on('quit',function(){
				console.log("quit from app");
			});
		}

		Device.winFun=function(fun){
			if(!Device.win){
				Device.win=Device.remote.getCurrentWindow();
			}
			Device.win[fun]();
		}

		Device.require=function(mod){
			var rst;
			rst=require(mod);
			return rst;
		}

		Device.requireRemote=function(mod){
			return Device.remote.require(mod);
		}

		Device.app=null
		Device.appName="LayaAir";
		Device.appPath=null
		Device.tempPath=null
		Device.workPath=null
		Device.userHome=null
		Device.remote=null
		Device.Buffer=null
		Device.electron=null
		Device.win=null
		return Device;
	})()


	/**
	*本类封装弹出本地对话框
	*@author ww
	*/
	//class laya.ide.devices.DialogTools
	var DialogTools=(function(){
		function DialogTools(){}
		__class(DialogTools,'laya.ide.devices.DialogTools');
		DialogTools.init=function(){
			DialogTools.dialog=Device.requireRemote("dialog");
		}

		DialogTools.showOpenDialog=function(win,options,callBack){
			DialogTools.dialog.showOpenDialog(win,options,callBack);
		}

		DialogTools.showSaveDialog=function(win,options,callBack){
			DialogTools.dialog.showSaveDialog(win,options,callBack);
		}

		DialogTools.showSave=function(title,fileName,callBack){
			var option={
				title:title,
				defaultPath:fileName,
				filters:[],
				properties:[]
			};
			DialogTools.showSaveDialog(null,option,callBack);
		}

		DialogTools.showMessageBox=function(win,options,callBack){
			DialogTools.dialog.showMessageBox(win,options,callBack);
		}

		DialogTools.showErrorBox=function(title,content){
			DialogTools.dialog.showErrorBox(title,content);
		}

		DialogTools.getOpenDirO=function(title,defaultPath){
			(title===void 0)&& (title="open Dir");
			var rst;
			rst={title:title,properties:["openDirectory"]};
			if(defaultPath!=null){
				rst.defaultPath=defaultPath;
			}
			return rst;
		}

		DialogTools.getOpenProO=function(title,extension){
			(title===void 0)&& (title="open Project");
			(extension===void 0)&& (extension="laya");
			return {title:title,filters:[{name:'*.'+extension,extensions:[extension]}]};
		}

		DialogTools.showOpenDir=function(title,callBack,defaultPath){
			(title===void 0)&& (title="open Dir");
			DialogTools.showOpenDialog(null,DialogTools.getOpenDirO(title,defaultPath),callBack);
		}

		DialogTools.showOpenFile=function(title,callBack,filter){
			(title===void 0)&& (title="open file");
			if (!filter)filter=DialogTools.filterO;
			filter.title=title;
			DialogTools.showOpenDialog(null,filter,callBack);
		}

		DialogTools.getOpenParticleO=function(title){
			(title===void 0)&& (title="open Particle");
			return {title:title,filters:[{name:'*.json',extensions:['json']}]};
		}

		DialogTools.dialog=null
		__static(DialogTools,
		['tempOptionO',function(){return this.tempOptionO={
				title:"",
				defaultPath:null,
				filters:[],
				properties:[]
		};},'imgFilterO',function(){return this.imgFilterO={title:"open Img",filters:[{name:'Images',extensions:['jpg','png']}]};},'filterO',function(){return this.filterO={title:"open file",filters:[{name:'Images',extensions:['jpg','png','gif']},{name:'Movies',extensions:['mkv','avi','mp4']},{name:'Custom File Type',extensions:['as']},{name:'All Files',extensions:['*']}]};}

		]);
		return DialogTools;
	})()


	/**
	*...
	*@author ww
	*/
	//class laya.ide.devices.File
	var File=(function(){
		function File(path){
			this.nativePath=null;
			this.nativePath=path;
		}

		__class(File,'laya.ide.devices.File');
		var __proto=File.prototype;
		__proto.copyTo=function(path,overwrite){
			(overwrite===void 0)&& (overwrite=false);
			FileTools.copyE(this.nativePath,path);
		}

		__proto.deleteFile=function(){
			FileTools.removeE(this.nativePath);
		}

		__proto.moveToTrash=function(){
			this.deleteFile();
		}

		__proto.getRelativePath=function(path){
			return FileTools.getRelativePath(this.nativePath,path);
		}

		__proto.moveTo=function(path,overwrite){
			(overwrite===void 0)&& (overwrite=false);
			FileTools.rename(this.nativePath,path);
		}

		__proto.resolvePath=function(path){
			return new File(FileTools.getPath(this.nativePath,path));
		}

		__getset(0,__proto,'extension',function(){
			return FileTools.getExtensionName(this.nativePath);
		});

		__getset(0,__proto,'isDirectory',function(){
			return FileTools.isDirectory(this.nativePath);
		});

		__getset(0,__proto,'exists',function(){
			return FileTools.exist(this.nativePath);
		});

		__getset(0,__proto,'name',function(){
			return FileTools.getFileNameWithExtension(this.nativePath);
		});

		__getset(0,__proto,'parent',function(){
			return new File(FileTools.getParent(this.nativePath));
		});

		__static(File,
		['applicationDirectory',function(){return this.applicationDirectory=new File("");},'applicationStorageDirectory',function(){return this.applicationStorageDirectory=new File("");},'userDirectory',function(){return this.userDirectory=new File("");}
		]);
		return File;
	})()


	/**
	*...
	*@author ww
	*/
	//class laya.ide.devices.FileTools
	var FileTools=(function(){
		function FileTools(){}
		__class(FileTools,'laya.ide.devices.FileTools');
		__getset(1,FileTools,'appPath',function(){
			var rst;
			var dirName;
			dirName=__dirname;;
			rst=FileTools.path.resolve(dirName,"../");
			return rst;
			var aPath;
			aPath=Browser.window.location.href;
			aPath=aPath.replace("file:///","");
			aPath=aPath.replace("/h5/index.html","");
			aPath=aPath.split("index.")[0];
			console.log("aPath:",aPath);
			aPath=decodeURI(aPath);
			return aPath;
		});

		__getset(1,FileTools,'workPath',function(){
			return "workPath";
		});

		FileTools.init=function(){
			FileTools.fs=Device.require("fs");
			FileTools.path=Device.require("path");
			FileTools.shell=Device.requireRemote("shell");
		}

		FileTools.getSep=function(){
			return FileTools.path.sep;
		}

		FileTools.getAbsPath=function(path){
			return path;
		}

		FileTools.isAbsPath=function(path){
			if(!path)return false;
			if(path.indexOf(":")>0)return true;
			if(path.substr(0,1)=="/")return true;
			return false;
		}

		FileTools.getPath=function(basePath,relativePath){
			return FileTools.path.join(basePath,relativePath);
		}

		FileTools.getRelativePath=function(basePath,targetPath){
			return FileTools.path.relative(basePath,targetPath);
		}

		FileTools.getAppPath=function(path){
			return FileTools.getPath(FileTools.appPath,path);
		}

		FileTools.getAppRelativePath=function(path){
			return FileTools.getRelativePath(FileTools.appPath,path);
		}

		FileTools.getWorkPath=function(path){
			return FileTools.getPath(FileTools.workPath,path);
		}

		FileTools.getWorkRelativePath=function(path){
			return FileTools.getRelativePath(FileTools.workPath,path);
		}

		FileTools.getFileDir=function(path){
			if (!path)return path;
			return laya.ide.devices.FileTools.path.dirname(path);
		}

		FileTools.getParent=function(path){
			if (!path)return path;
			var lasti=0;
			lasti=path.lastIndexOf(laya.ide.devices.FileTools.path.sep);
			return path.substring(0,lasti);
		}

		FileTools.getFileName=function(path){
			return FileManager.getFileName(path);
		}

		FileTools.getFileNameWithExtension=function(path){
			if (path==null)
				return null;
			var a=path.split(laya.ide.devices.FileTools.path.sep);
			var file=a[a.length-1];
			return file;
		}

		FileTools.getExtensionName=function(path){
			if (path==null)
				return null;
			var a=path.split(".");
			var file=a[a.length-1];
			return file;
		}

		FileTools.createDirectory=function(path){
			if (Boolean(path)){
				FileTools.ensurePath(path);
				if (!FileTools.fs.existsSync(path)){
					FileTools.fs.mkdirSync(path);
				}
			}
		}

		FileTools.ensurePath=function(pathStr){
			FileTools.mkdirsSync(pathStr,null);
			return;
			if (pathStr==null)return;
			var sep;
			sep=FileTools.path.sep;
			var a=pathStr.split(sep);
			var i=0,len=0;
			var tPath;
			tPath=a[0];
			len=a.length-1;
			for (i=1;i < len;i++){
				tPath+=sep+a[i];
				if (!FileTools.exist(tPath)){
					FileTools.createDirectory(tPath);
				}
			}
		}

		FileTools.mkdirsSync=function(dirpath,mode){
			if (!FileTools.fs.existsSync(dirpath)){
				var pathtmp;
				var pathParts=dirpath.split(FileTools.path.sep);
				pathParts.pop();
				var onWindows=Browser.userAgent.indexOf("Windows")>-1;
				if(!onWindows){
					pathtmp="/"+pathParts[1];
					pathParts.splice(0,2);
				}
				pathParts.forEach(function(dirname){
					if (pathtmp){
						pathtmp=FileTools.path.join(pathtmp,dirname);
					}
					else {
						pathtmp=dirname;
					}
					if (!FileTools.fs.existsSync(pathtmp)){
						if (!FileTools.fs.mkdirSync(pathtmp,mode)){
							return false;
						}
					}
				});
			}
			return true;
		}

		FileTools.createFile=function(path,value){
			FileTools.ensurePath(path);
			FileTools.fs.writeFileSync(path,value);
		}

		FileTools.readFile=function(path,encoding){
			(encoding===void 0)&& (encoding="utf8");
			if (FileTools.fs.existsSync(path)){
				var rst;
				rst=FileTools.fs.readFileSync(path,encoding);
				if(((typeof rst=='string'))&&rst.charCodeAt(0)==65279&&encoding=="utf8"){
					rst=rst.substr(1);
				}
				return rst;
			}
			return null;
		}

		FileTools.appendFile=function(path,data){
			FileTools.fs.appendFileSync(path,data);
		}

		FileTools.moveToTrash=function(path){
			if(FileTools.exist(path))
				FileTools.shell.moveItemToTrash(path);
		}

		FileTools.removeFile=function(path,toTrash){
			(toTrash===void 0)&& (toTrash=true);
			if (toTrash){
				FileTools.moveToTrash(path);
				return;
			}
			if (Boolean(path)){
				FileTools.fs.unlinkSync(path)
			}
		}

		FileTools.removeE=function(path,toTrash){
			(toTrash===void 0)&& (toTrash=true);
			if (!FileTools.exist(path))
				return;
			if (FileTools.isDirectory(path)){
				FileTools.removeDir(path,toTrash);
			}
			else{
				FileTools.removeFile(path,toTrash);
			}
		}

		FileTools.removeDir=function(path,toTrash){
			(toTrash===void 0)&& (toTrash=true);
			if (toTrash){
				FileTools.moveToTrash(path);
				return;
			};
			var files=[];
			if (FileTools.fs.existsSync(path)){
				files=FileTools.fs.readdirSync(path);
				files.forEach(function(file,index){
					var curPath=FileTools.getPath(path,file);
					if (FileTools.fs.statSync(curPath).isDirectory()){
						FileTools.removeDir(curPath);
					}
					else{
						FileTools.fs.unlinkSync(curPath);
					}
				});
				FileTools.fs.rmdirSync(path);
			}
		}

		FileTools.exist=function(path){
			return FileTools.fs.existsSync(path);
		}

		FileTools.isDirectory=function(path){
			return FileTools.fs.statSync(path).isDirectory();
		}

		FileTools.getStat=function(path){
			return FileTools.fs.statSync(path);
		}

		FileTools.getMTime=function(path){
			return FileTools.getStat(path).mtime;
		}

		FileTools.watch=function(path,callBack){
			FileTools.watcherDic[path]=FileTools.fs.watch(path,callBack);
			return FileTools.watcherDic[path];
		}

		FileTools.isDirWatched=function(path){
			return FileTools.watcherDic.hasOwnProperty(path);
		}

		FileTools.unwatch=function(path){
			if (FileTools.watcherDic[path]){
				FileTools.watcherDic[path].close();
				delete FileTools.watcherDic[path];
			}
		}

		FileTools.copyE=function(from,to){
			if (!FileTools.exist(from))
				return;
			if (FileTools.isDirectory(from)){
				FileTools.copyDir(from,to);
			}
			else{
				FileTools.copyFile(from,to);
			}
		}

		FileTools.copyFile=function(from,to){
			FileTools.createFile(to,FileTools.readFile(from,null));
		}

		FileTools.copyDir=function(from,to){
			var files=[];
			if (FileTools.fs.existsSync(from)){
				FileTools.createDirectory(to);
				files=FileTools.fs.readdirSync(from);
				files.forEach(function(file,index){
					var curPath=FileTools.getPath(from,file);
					var tPath=FileTools.getPath(to,file);
					if (FileTools.fs.statSync(curPath).isDirectory()){
						FileTools.copyDir(curPath,tPath);
					}
					else{
						FileTools.copyFile(curPath,tPath);
					}
				});
			}
		}

		FileTools.walk=function(path,floor,handleFile,self){
			(self===void 0)&& (self=false);
			if(self)
				handleFile(path,floor);
			floor++;
			var files=FileTools.fs.readdirSync(path);
			files.forEach(function(item){
				var tmpPath=FileTools.getPath(path,item);
				if (tmpPath.indexOf(".svn")>-1)
					return;
				var stats=FileTools.fs.statSync(tmpPath);
				if (stats.isDirectory()){
					FileTools.walk(tmpPath,floor,handleFile);
				}
				else{
					handleFile(tmpPath,floor);
				}
			});
		}

		FileTools.getFileList=function(path){
			var arr=[];
			FileTools.walk(path,0,findFiles);
			function findFiles (spath,floor){
				arr.push(spath);
			}
			return arr;
		}

		FileTools.getFileDesO=function(path){
			if (!FileTools.exist(path))
				return null;
			var rst={};
			rst.label=FileTools.getFileName(path);
			rst.path=path;
			if (FileTools.isDirectory(path)){
				rst.files=[];
				rst.dirs=[];
				rst.childs=[];
				rst.isDirectory=true;
				}else{
				rst.isDirectory=false;
			}
			return rst;
		}

		FileTools.getDirChildDirs=function(p){
			var files=laya.ide.devices.FileTools.getDirFiles(p);
			var i=0,len=0;
			var rst;
			rst=[];
			len=files.length;
			for(i=0;i<len;i++){
				files[i]=FileTools.path.join(p,files[i]);
				if(laya.ide.devices.FileTools.isDirectory(files[i])){
					rst.push(files[i]);
				}
			}
			return rst;
		}

		FileTools.getDirFiles=function(path){
			var rst;
			rst=FileTools.fs.readdirSync(path);
			rst.sort(FileTools.folderFirst);
			return rst;
		}

		FileTools.folderFirst=function(pathA,pathB){
			var isFolderA=false;
			isFolderA=pathA.indexOf(".")<0;
			var isFolderB=false;
			isFolderB=pathB.indexOf(".")<0;
			var right=-1;
			if(isFolderA){
				if(!isFolderB){
					return right;
				}
				return pathA<pathB?right:-right;
			}
			if(isFolderB){
				return-right;
			}
			return pathA<pathB?right:-right;
		}

		FileTools.getFileTreeArr=function(path){
			var tTreeO=FileTools.getFileTreeO(path);
			var rst=[];
			FileTools.getTreeArr(tTreeO,rst,false);
			return rst;
		}

		FileTools.getTreeArr=function(treeO,arr,add){
			(add===void 0)&& (add=true);
			if(add)
				arr.push(treeO);
			var tArr=treeO.childs;
			var i=0,len=tArr.length;
			for(i=0;i<len;i++){
				if(!add){
					tArr[i].nodeParent=null;
				}
				if(tArr[i].isDirectory){
					FileTools.getTreeArr(tArr[i],arr);
					}else{
					arr.push(tArr[i]);
				}
			}
		}

		FileTools.getFileTreeO=function(path){
			var rst=FileTools.getFileDesO(path);
			if (FileTools.fs.existsSync(path)){
				var files=FileTools.getDirFiles(path);
				var tO;
				files.forEach(function(file,index){
					var curPath=FileTools.getPath(path,file);
					if (FileTools.fs.statSync(curPath).isDirectory()){
						tO=FileTools.getFileTreeO(curPath);
						tO.nodeParent=rst;
						tO.hasChild=tO.childs.length > 0;
						rst.dirs.push(tO);
					}
					else{
						tO=FileTools.getFileDesO(curPath);
						tO.nodeParent=rst;
						tO.hasChild=false;
						rst.files.push(tO);
					}
					tO.label=file;
					rst.childs.push(tO);
				});
				rst.hasChild=rst.childs.length > 0;
			}
			return rst;
		}

		FileTools.rename=function(oldPath,newPath){
			if (!FileTools.exist(oldPath))
				return;
			FileTools.fs.renameSync(oldPath,newPath);
		}

		FileTools.openItem=function(path){
			FileTools.shell.openItem(path);
		}

		FileTools.win=null
		FileTools.fs=null
		FileTools.path=null
		FileTools.shell=null
		FileTools.watcherDic={};
		return FileTools;
	})()


	/**
	*本类用于和主进程通讯
	*@author ww
	*/
	//class laya.ide.devices.IPCTools
	var IPCTools=(function(){
		function IPCTools(){}
		__class(IPCTools,'laya.ide.devices.IPCTools');
		IPCTools.init=function(){
			IPCTools.ipc=Device.electron.ipcRenderer;
			IPCTools.ipc.on("message",function(__args){
				var args=arguments;
				console.log("message:",args);
			})
			IPCTools.ipc.on("tryOpen",function(__args){
				var args=arguments;
				var path;
				path=args[0];
				console.log("tryOpen:",path);
				if(FileTools.getExtensionName(path)=="laya"){
					Laya.timer.once(2000,null,ProjectManager.loadProject,[path]);
				}
			})
			IPCTools.ipc.on('openWork',function(event,message){
				SystemDragOverManager.handlerFile(message);
			})
		}

		IPCTools.send=function(type,data){
			IPCTools.ipc.send("message",type,data);
		}

		IPCTools.cmd=function(funName,param){
			var data={};
			data.type;
			data.funName=funName;
			data.param=param;
			IPCTools.send("cmd",data);
		}

		IPCTools.setWindow=function(){
			var data={};
			data.type="ccc";;
			IPCTools.send("window",Browser.window);
			console.log(data);
		}

		IPCTools.ipc=null
		return IPCTools;
	})()


	/**
	*本类集中定义IDE中的各种事件
	*@author ww
	*/
	//class laya.ide.event.IDEEvent
	var IDEEvent=(function(){
		function IDEEvent(){}
		__class(IDEEvent,'laya.ide.event.IDEEvent');
		IDEEvent.emitKeyEvent=function(keyCode,ctrl,shift){
			(ctrl===void 0)&& (ctrl=false);
			(shift===void 0)&& (shift=false);
			var evt;
			evt={};
			evt.keyCode=keyCode;
			evt.ctrlKey=ctrl;
			evt.shiftKey=ctrl;
			Notice.notify("IDEKey_Event",evt);
		}

		IDEEvent.RES_ITEM_CLICK="ResItemClick";
		IDEEvent.OPEN_ADDPARTICLE="open_AddParticle";
		IDEEvent.ADDPARTICLE="AddParticle";
		IDEEvent.OPEN_ADDPAGE="OPEN_ADDPage";
		IDEEvent.ADDPAGE="ADDPage";
		IDEEvent.OPEN_ADD_TIMELINE_ANIMATION="OPEN_ADD_TIMELINE_ANIMATION";
		IDEEvent.ADD_TIMELINE_ANIMATION="ADDTimeLineAnimation";
		IDEEvent.CLOSEPAGE="closePage";
		IDEEvent.OPENPAGE="openPAGE";
		IDEEvent.FOCUS_DESIGN="Focus_design";
		IDEEvent.FRESH_RES="FRESH_RES";
		IDEEvent.FRESH_PAGE="FRESH_Page";
		IDEEvent.FRESH_CURVIEW="FRESH_CurView";
		IDEEvent.OPEN_ADDDIR="open_adddir";
		IDEEvent.ADDDIR="adddir";
		IDEEvent.OPEN_ADDSCENE="OPEN_ADDSCENE";
		IDEEvent.ADDSCENE="ADDSCENE";
		IDEEvent.OPEN_MOVEPAGE="OPEN_MovePage";
		IDEEvent.MOVEPAGE="MovePage";
		IDEEvent.OPEN_RENAME="OPEN_RENAME";
		IDEEvent.RENAME="RENAME";
		IDEEvent.OPEN_SETPAGEPROP="OPEN_SEtPageProp";
		IDEEvent.PROPPANEL_SETBYOBJ="PropPanel_setByObj";
		IDEEvent.PROP_CHANGE="Prop_change";
		IDEEvent.PROP_CHANGEING="Prop_changeing";
		IDEEvent.DROP_RENDER="DROP_RENDER";
		IDEEvent.PAGE_CHANGED="pageChanged";
		IDEEvent.IDE_QUIT="IDE_QUIT";
		IDEEvent.RESFILE_CHANGE="RESFILE_CHANGE";
		IDEEvent.SHOW_DISPLAY_TREE="SHOW_DISPLAY_TREE";
		IDEEvent.DISPLAY_SELECTED="Display_selected";
		IDEEvent.DELETE_SELECTED="DELETE_SELECTED";
		IDEEvent.SET_DISPLAY_SELECTED="set_display_selected";
		IDEEvent.DISPLAY_VALUE_CHANGE="display_value_changes";
		IDEEvent.DISPLAY_TREE_CHANGE="Display_tree_change";
		IDEEvent.TIMELINE_FRAME_SELECTED="TimeLineFrameSelected";
		IDEEvent.DESIGN_ITEM_SELECTED="DesignItemSelected";
		IDEEvent.CLEAR_DESIGN_SELECT="ClearDesignSelect";
		IDEEvent.TIMELINE_CHANGED="TimeLine_changed";
		IDEEvent.PLAYCONTROL_TOBEGINPOS="PlayControl_ToBeginPos";
		IDEEvent.PLAYCONTROL_PRE="PLAYCONTROL_Pre";
		IDEEvent.PLAYCONTROL_PLAY="PLAYCONTROL_Play";
		IDEEvent.PLAYCONTROL_NEXT="PLAYCONTROL_Next";
		IDEEvent.PLAYCONTROL_TOENDPOS="PLAYCONTROL_TOEndPOS";
		IDEEvent.UIChange="UIChange";
		IDEEvent.FRESH_COMPPANEL="Fresh_CompPanel";
		IDEEvent.SHOW_RULE_RANGE="SHOW_RULE_RANGE";
		IDEEvent.CLEAR_RULE_RANGE="Clear_RULE_RANGE";
		IDEEvent.IDEKEY_EVENT="IDEKey_Event";
		IDEEvent.SELECTE_RES_FILE="SelecteResFile";
		IDEEvent.FIND_RES_REFER="findResRefer";
		IDEEvent.SELECTE_INPUT="SELECTE_INPUT";
		return IDEEvent;
	})()


	/**
	*
	*@author ww
	*@version 1.0
	*
	*@created 2016-3-22 下午7:37:47
	*/
	//class laya.ide.managers.CodeViewManager
	var CodeViewManager=(function(){
		function CodeViewManager(){
			if(!CodeViewManager.codeDiv){
				CodeViewManager.init();
			}
		}

		__class(CodeViewManager,'laya.ide.managers.CodeViewManager');
		var __proto=CodeViewManager.prototype;
		__proto.setZIndex=function(index){
			if(!CodeViewManager.style)return;
			CodeViewManager.style["z-index"]=index;
		}

		__proto.show=function(){
			this.setZIndex(9);
			CodeViewManager.showed=true;
		}

		__proto.hide=function(){
			this.setZIndex(-1);
			CodeViewManager.showed=false;
		}

		CodeViewManager.init=function(){
			CodeViewManager.codeDiv=Browser.window["layaEditor"];
			if(!CodeViewManager.codeDiv)return;
			CodeViewManager.style=CodeViewManager.codeDiv.style;
			CodeViewManager.style["z-index"]=9;
			CodeViewManager.style["position"]="absolute";
			CodeViewManager.adpt();
		}

		CodeViewManager.openFile=function(file){
			if(!CodeViewManager.codeDiv)return;
			Browser.window["openFile"](file);
		}

		CodeViewManager.sizeDiv=function(width,height){
			if(!CodeViewManager.codeDiv)return;
			Browser.window["windowLayout"](width,height);
		}

		CodeViewManager.adpt=function(){
			if(!CodeViewManager.codeDiv)return;
			var pos=new Point();
			pos=UIPanel.instance.localToGlobal(pos);
			var dLen=0;
			dLen=25;
			var tW=0;
			var tH=0;
			var dWidth=4;
			tW=UIPanel.instance.width-dWidth*2;
			tH=(UIPanel.instance.height-dLen);
			CodeViewManager.style.width=tW+"px";
			CodeViewManager.style.height=tH+"px";
			CodeViewManager.style.left=(pos.x+dWidth)+"px";
			CodeViewManager.style.top=pos.y+dLen+"px";
			CodeViewManager.sizeDiv(tW,tH);
		}

		CodeViewManager.codeDiv=null
		CodeViewManager.style=null
		CodeViewManager.showed=false;
		__static(CodeViewManager,
		['I',function(){return this.I=new CodeViewManager();}
		]);
		return CodeViewManager;
	})()


	/**
	*本类控制鼠标光标样式
	*@author ww
	*/
	//class laya.ide.managers.CursorManager
	var CursorManager=(function(){
		function CursorManager(){}
		__class(CursorManager,'laya.ide.managers.CursorManager');
		CursorManager.init=function(){
			CursorManager._style=Browser.document.body.style;
		}

		CursorManager.setType=function(type){
			CursorManager._style.cursor=type;
		}

		CursorManager.Auto="auto";
		CursorManager.HResize="e-resize";
		CursorManager.VResize="n-resize";
		CursorManager._style=null
		return CursorManager;
	})()


	/**
	*ide右上方拖动条
	*@author ww
	*/
	//class laya.ide.managers.DragBarManager
	var DragBarManager=(function(){
		function DragBarManager(){}
		__class(DragBarManager,'laya.ide.managers.DragBarManager');
		DragBarManager.init=function(){
			DragBarManager._drag=Browser.document.getElementById("_dragBar");
			DragBarManager._style=DragBarManager._drag.style;
			DragBarManager.adpt();
		}

		DragBarManager.adpt=function(){
			var menuWidth=580;
			DragBarManager._style.left=menuWidth+"px";
			DragBarManager._style.width=Browser.clientWidth-menuWidth-100;
		}

		DragBarManager._drag=null
		DragBarManager._style=null
		return DragBarManager;
	})()


	/**
	*文件夹监控
	*@author ww
	*@version 1.0
	*
	*@created 2015-11-17 下午5:16:45
	*/
	//class laya.ide.managers.file.DirWatcher
	var DirWatcher=(function(){
		function DirWatcher(){
			this.path=null;
			this._childs=[];
		}

		__class(DirWatcher,'laya.ide.managers.file.DirWatcher');
		var __proto=DirWatcher.prototype;
		__proto.clear=function(){
			FileTools.unwatch(this.path);
			var i=0,len=0;
			len=this._childs.length;
			var tChild;
			for(i=0;i<len;i++){
				tChild=this._childs[i];
				tChild.clear();
			}
			this._childs.length=0;
		}

		__proto.setPath=function(path){
			this.clear();
			this.path=path;
			if(!FileTools.exist(path))return;
			if(FileTools.isDirectory(path)){
				var childs;
				childs=FileTools.getDirChildDirs(path);
				var i=0,len=0;
				len=childs.length;
				var tChild;
				for(i=0;i<len;i++){
					tChild=new DirWatcher();
					tChild.setPath(childs[i]);
					this._childs.push(tChild);
				}
				}else{
			}
			FileTools.watch(path,Utils1.bind(this.changeHandler,this));
		}

		__proto.changeHandler=function(event,filename){
			if(!filename)return;
			filename=CMDShell.decode(filename,"utf8");
			var filePath;
			filePath=FileTools.path.join(this.path,filename);
			if(!FileTools.exist(filePath))return;
			if(FileTools.isDirectory(filePath))return;
			Laya.timer.once(500,Notice,Notice.notify,["RESFILE_CHANGE",filePath],true);
		}

		return DirWatcher;
	})()


	/**
	*用于在对象上显示焦点框的工具类
	*@author ww
	*/
	//class laya.ide.managers.FocusManager
	var FocusManager=(function(){
		function FocusManager(){}
		__class(FocusManager,'laya.ide.managers.FocusManager');
		FocusManager.showFocus=function(tar,width,clearPre){
			(width===void 0)&& (width=5);
			(clearPre===void 0)&& (clearPre=true);
			console.log("showFocus");
			var bounds;
			bounds=FocusManager.getTarBounds(tar);
			FocusManager.showBorder(tar,"up",clearPre,bounds,width);
			FocusManager.showBorder(tar,"down",false,bounds,width);
			FocusManager.showBorder(tar,"left",false,bounds,width);
			FocusManager.showBorder(tar,"right",false,bounds,width);
		}

		FocusManager.getTarBounds=function(tar){
			if(FocusManager.useGetBounds){
				return tar.getSelfBounds();
				}else{
				return new Rectangle().setTo(0,0,tar.width,tar.height);
			}
		}

		FocusManager.showBorder=function(tar,type,clearPre,rec,width){
			(clearPre===void 0)&& (clearPre=true);
			(width===void 0)&& (width=5);
			if (clearPre==true){
				FocusManager.clearFocus();
			};
			var bounds;
			bounds=rec?rec:FocusManager.getTarBounds(tar);
			var tFocus;
			tFocus=DisPool.getDis(FocusItem);
			switch (type){
				case "left":
					tFocus.width=width;
					tFocus.height=bounds.height;
					tFocus.x=bounds.x;
					tFocus.y=bounds.y;
					break ;
				case "right":
					tFocus.width=width;
					tFocus.height=bounds.height;
					tFocus.x=bounds.x+bounds.width-width;
					tFocus.y=bounds.y;
					break ;
				case "up":
					tFocus.width=bounds.width;
					tFocus.height=width;
					tFocus.x=bounds.x;
					tFocus.y=bounds.y;
					break ;
				case "down":
					tFocus.width=bounds.width;
					tFocus.height=width;
					tFocus.x=bounds.x;
					tFocus.y=bounds.y+bounds.height-width;
					break ;
				}
			FocusManager.showFocusToTar(tar,tFocus);
		}

		FocusManager.showFocusToTar=function(tar,focus){
			FocusManager._focusList.push(focus);
			tar.addChild(focus);
		}

		FocusManager.clearFocus=function(tar){
			var i=0,len=0;
			len=FocusManager._focusList.length;
			if (tar){
				for (i=len-1;i >=0;i--){
					if (FocusManager._focusList[i].parent==tar){
						(FocusManager._focusList [i]).removeSelf();
						FocusManager._focusList.splice(i,1);
					}
				}
			}
			else{
				for (i=0;i < len;i++){
					(FocusManager._focusList [i]).removeSelf();
				}
				FocusManager._focusList.length=0;
			}
		}

		FocusManager.focusWidth=5;
		FocusManager.useGetBounds=false;
		FocusManager._focusList=[];
		return FocusManager;
	})()


	/**
	*
	*@author ww
	*@version 1.0
	*
	*@created 2016-3-23 下午9:19:23
	*/
	//class laya.ide.managers.HtmlLayerManager
	var HtmlLayerManager=(function(){
		function HtmlLayerManager(){
			HtmlLayerManager.init();
		}

		__class(HtmlLayerManager,'laya.ide.managers.HtmlLayerManager');
		HtmlLayerManager.init=function(){
			HtmlLayerManager.CanvasStyle=Render._mainCanvas.source["style"];
			Dialog.manager.on("open",null,HtmlLayerManager.openDialog);
			Dialog.manager.on("close",null,HtmlLayerManager.closeDialog);
		}

		HtmlLayerManager.setCanvasIndex=function(index){
			if(!HtmlLayerManager.CanvasStyle)HtmlLayerManager.init();
			HtmlLayerManager.CanvasStyle["z-index"]=index;
		}

		HtmlLayerManager.update=function(){
			if(HtmlLayerManager.hasPops()){
				HtmlLayerManager.switchToTop();
				}else{
				HtmlLayerManager.switchToBack();
			}
		}

		HtmlLayerManager.hasPops=function(){
			return HtmlLayerManager.hasMenu||HtmlLayerManager.hasDialog||HtmlLayerManager.hasTip;
		}

		HtmlLayerManager.switchToTop=function(){
			console.log("switchToTop");
			HtmlLayerManager.setCanvasIndex(99);
		}

		HtmlLayerManager.switchToBack=function(){
			console.log("switchToBack");
			HtmlLayerManager.setCanvasIndex(1);
		}

		HtmlLayerManager.openDialog=function(){
			HtmlLayerManager.hasDialog=true;
			HtmlLayerManager.update();
		}

		HtmlLayerManager.closeDialog=function(){
			HtmlLayerManager.hasDialog=false;
			HtmlLayerManager.update();
		}

		HtmlLayerManager.openMenu=function(){
			HtmlLayerManager.hasMenu=true;
			HtmlLayerManager.update();
		}

		HtmlLayerManager.closeMenu=function(){
			HtmlLayerManager.hasMenu=false;
			HtmlLayerManager.update();
		}

		HtmlLayerManager.openTip=function(){
			HtmlLayerManager.hasTip=true;
			HtmlLayerManager.update();
		}

		HtmlLayerManager.closeTip=function(){
			HtmlLayerManager.hasTip=false;
			HtmlLayerManager.update();
		}

		HtmlLayerManager.CanvasStyle=null
		HtmlLayerManager.hasDialog=false;
		HtmlLayerManager.hasMenu=false;
		HtmlLayerManager.hasTip=false;
		return HtmlLayerManager;
	})()


	/**
	*本类用于处理对象之间的排版关系
	*@author ww
	*/
	//class laya.ide.managers.layout.RelativePos
	var RelativePos=(function(){
		function RelativePos(fun,tar,to,d){
			this.tar=null;
			this.to=null;
			this.d=NaN;
			this._fun=null;
			this.tar=tar;
			this.to=to;
			this.d=d;
			this._fun=fun;
		}

		__class(RelativePos,'laya.ide.managers.layout.RelativePos');
		var __proto=RelativePos.prototype;
		/**
		*更新排版
		*
		*/
		__proto.update=function(){
			this._fun(this.tar,this.to,this.d);
		}

		RelativePos.getDisMouseRelativePos=function(tTarget,edgePercent){
			(edgePercent===void 0)&& (edgePercent=0.1);
			var pos;
			pos=DisControlTool.getMousePoint(tTarget);
			if (pos.x < 0 || pos.x > tTarget.width || pos.y < 0 || pos.y > tTarget.height)return "out";
			if (pos.y < tTarget.height *edgePercent){
				return "up";
			}
			else if (pos.y > tTarget.height *(1-edgePercent)){
				return "down";
			}
			else if (pos.x > tTarget.width *(1-edgePercent)){
				return "right";
				}else if (pos.x < tTarget.width *edgePercent){
				return "left";
				}else{
				return "center";
			}
			return "center";
		}

		RelativePos.rightTo=function(tar,to,d){
			(d===void 0)&& (d=0);
			if (!to.parent)
				return;
			tar.right=(to.parent).width-to.x+d;
		}

		RelativePos.leftTo=function(tar,to,d){
			(d===void 0)&& (d=0);
			tar.left=to.x+to.width+d;
		}

		RelativePos.downTo=function(tar,to,d){
			(d===void 0)&& (d=0);
			if (!to.parent)
				return;
			tar.bottom=(to.parent).height-to.y+d;
		}

		RelativePos.upTo=function(tar,to,d){
			(d===void 0)&& (d=0);
			tar.top=to.y+to.height+d;
		}

		RelativePos.saveRelative=function(tar){
			var relativeO;
			relativeO=tar["relativeO"];
			if (!relativeO)
				return {};
			var key;
			var rst={};
			for (key in relativeO){
				rst[key]=IDTools.getObjID(relativeO[key]);
			}
			return rst;
		}

		RelativePos.getTypeByFun=function(fun){
			var key;
			for (key in RelativePos.typeToFunO){
				if (RelativePos.typeToFunO[key]==fun)
					return key;
			}
			return null;
		}

		RelativePos.getOtherSide=function(type){
			return RelativePos.otherSideO[type];
		}

		RelativePos.getOnlySide=function(o){
			var relativeO;
			relativeO=o["relativeO"];
			if (!relativeO)
				return null;
			var type;
			var tBar;
			var tRst;
			var tArea=0;
			var tRstBar;
			console.log("finding only side");
			for (type in relativeO){
				tBar=relativeO[type];
				if (tBar){
					console.log("has side:",type);
					if (tBar.isOnly(o)){
						console.log("onlySide:",type," value:",RelativePos.getBarWeight(tBar));
						if (!tRst || RelativePos.getBarWeight(tBar)> tArea){
							tRst=type;
							tRstBar=tBar;
							tArea=RelativePos.getBarWeight(tBar);
							console.log("tArea:",tArea);
						}
					}
				}
			}
			return tRst;
		}

		RelativePos.getBarWeight=function(bar){
			var tRec;
			tRec=bar.getDragArea();
			return tRec.width+tRec.height;
		}

		RelativePos.addRelative=function(o,dragBar,type,d){
			(d===void 0)&& (d=0);
			if (!dragBar)
				return;
			RelativePos.cancelRelative(o,type);
			dragBar.addItem(o,RelativePos.typeToFunO[type]);
			var relativeO;
			if (!o["relativeO"])
				o["relativeO"]={};
			relativeO=o["relativeO"];
			relativeO[type]=dragBar;
		}

		RelativePos.copyRelative=function(o,tar,type){
			RelativePos.addRelative(o,RelativePos.getBar(tar,type),type);
		}

		RelativePos.cancelRelative=function(o,sign){
			var relativeO;
			relativeO=o["relativeO"];
			if (!relativeO)
				return;
			if (relativeO[sign]){
				(relativeO [sign]).removeTarget(o);
			}
			delete relativeO[sign];
		}

		RelativePos.getBar=function(o,sign){
			var relativeO;
			relativeO=o["relativeO"];
			if (!relativeO)
				return null;
			return relativeO[sign];
		}

		RelativePos.clearBar=function(o){
			RelativePos.cancelRelative(o,"left");
			RelativePos.cancelRelative(o,"right");
			RelativePos.cancelRelative(o,"up");
			RelativePos.cancelRelative(o,"down");
		}

		RelativePos.Right="right";
		RelativePos.Left="left";
		RelativePos.Down="down";
		RelativePos.Up="up";
		RelativePos.Center="center";
		RelativePos.Out="out";
		RelativePos.EdgePercent=0.1;
		__static(RelativePos,
		['typeToFunO',function(){return this.typeToFunO={"right":RelativePos.rightTo,"left":RelativePos.leftTo,"up":RelativePos.upTo,"down":RelativePos.downTo};},'otherSideO',function(){return this.otherSideO={"right":"left","left":"right","up":"down","down":"up"};}
		]);
		return RelativePos;
	})()


	/**
	*...
	*@author ww
	*/
	//class laya.ide.managers.layout.Updater
	var Updater=(function(){
		function Updater(tar,tarSign,src,srcSign,dValue){
			this.tar=null;
			this.tarSign=null;
			this.src=null;
			this.srcSign=null;
			this.dValue=0;
			(dValue===void 0)&& (dValue=0);
			this.tar=tar;
			this.tarSign=tarSign;
			this.src=src;
			this.srcSign=srcSign;
			this.dValue=dValue;
		}

		__class(Updater,'laya.ide.managers.layout.Updater');
		var __proto=Updater.prototype;
		__proto.update=function(){
			console.log("update:",this.tarSign,this.srcSign,this.dValue+this.src[this.srcSign]);
			this.tar[this.tarSign]=this.dValue+this.src[this.srcSign];
		}

		__proto.clear=function(){
			this.tar=null;
			this.src=null;
		}

		return Updater;
	})()


	/**
	*布局管理类
	*@author ww
	*/
	//class laya.ide.managers.LayoutRecManager
	var LayoutRecManager=(function(){
		function LayoutRecManager(){}
		__class(LayoutRecManager,'laya.ide.managers.LayoutRecManager');
		var __proto=LayoutRecManager.prototype;
		__proto.saveDragBarInfo=function(dragBar){}
		__getset(1,LayoutRecManager,'tLayoutFile',function(){
			return LayoutRecManager._layoutFile?LayoutRecManager._layoutFile:"layout/layout.config";
		});

		LayoutRecManager.popLocked=function(){
			return CodeViewManager.showed;
			return false;
		}

		LayoutRecManager.onMouseDown=function(e){
			LayoutRecManager.target=e.currentTarget;
			LayoutRecManager.dragItem(LayoutRecManager.target,LayoutRecManager.target["type"]);
			LayerManager.stage.on("mouseup",null,LayoutRecManager.onMouseUp);
			LayerManager.stage.on("mousemove",null,LayoutRecManager.onMouseMove);
		}

		LayoutRecManager.dragItem=function(target,type){
			(type===void 0)&& (type=0);
			var option={};
			var area=new Rectangle();
			if (type==0){
				area=(target).getDragArea();
			}
			else if (type==1){
				area=(target).getDragArea();
			}
			else{
				return;
			}
			option.area=area;
			DisControlTool.setTop(target);
			target.startDrag(area);
		}

		LayoutRecManager.onMouseUp=function(e){
			LayerManager.stage.off("mouseup",null,LayoutRecManager.onMouseUp);
			LayerManager.stage.off("mousemove",null,LayoutRecManager.onMouseMove);
			LayoutRecManager.doLayOut();
			LayoutRecManager.target.stopDrag();
			LayoutRecManager.target.left=LayoutRecManager.target.x;
			LayoutRecManager.target.top=LayoutRecManager.target.y;
		}

		LayoutRecManager.onMouseMove=function(e){
			LayoutRecManager.doLayOut();
		}

		LayoutRecManager.doLayOut=function(){
			(LayoutRecManager.target).updates();
		}

		LayoutRecManager.init=function(){
			LayoutRecManager._ct=new Box();
			LayoutRecManager._ct.mouseEnabled=true;
			LayoutRecManager._ct.name="LayoutRecManager_Container";
			LayoutRecManager._ct.width=0;
			LayoutRecManager._ct.height=0;
			LayerManager.stage.addChild(LayoutRecManager._ct);
			LayerManager.stage.on("resize",null,LayoutRecManager.resizeWork);
			LayoutRecManager._ct.on("dragDrop",null,LayoutRecManager.onDragDrop);
			LayerManager.stage.addChild(MenuBar.instance);
			LayerManager.stage.addChild(QuickTool.instance);
			MenuBar.instance.pos(1,1);
			QuickTool.instance.pos(1,35);
			LayoutRecManager.recoverLayoutInfo();
		}

		LayoutRecManager.resizeWork=function(e){
			LayoutRecManager._ct.x=0;
			LayoutRecManager._ct.y=67;
			LayoutRecManager.tryResizeNoScale();
			return;
		}

		LayoutRecManager.scaleResize=function(){
			console.log("scaleResize");
			var nW=LayerManager.stage.width;
			var nH=LayerManager.stage.height-30;
			if ((nW *nH *LayoutRecManager._ct.width *LayoutRecManager._ct.height)!=0){
				var scaleX=nW / LayoutRecManager._ct.width;
				var scaleY=nH / LayoutRecManager._ct.height;
				LayoutRecManager.adptScales(scaleX,scaleY);
			}
			LayoutRecManager._ct.width=LayerManager.stage.width;
			LayoutRecManager._ct.height=LayerManager.stage.height-67;
			Laya.timer.once(100,null,LayoutRecManager.adptAll);
		}

		LayoutRecManager.tryResizeNoScale=function(){
			var items;
			items=DisControlTool.getAllChild(LayoutRecManager._ct);
			var i=0,len=0;
			len=items.length;
			var tRec;
			for (i=0;i < len;i++){
				tRec=items[i];
				if ((tRec instanceof laya.editor.view.LayoutRec )){
					if(tRec.sizeFree){
						break ;
					}
				}
			}
			if(!tRec||!tRec.sizeFree){
				console.log("no size Free rec try scale method");
				LayoutRecManager.scaleResize();
				return;
				}else{
				console.log("find size free rec:",tRec);
			};
			var nW=LayerManager.stage.width;
			var nH=LayerManager.stage.height-67;
			var pW=LayoutRecManager._ct.width;
			var pH=LayoutRecManager._ct.height;
			var dW=NaN;
			var dH=NaN;
			dW=nW-pW;
			dH=nH-pH;
			if ((nW *nH *pW *pH)!=0){
				if(dW+tRec.width<0){
					console.log("width not availeble");
					LayoutRecManager.scaleResize();
					return;
				}
				if(dH+tRec.height<0){
					console.log("height not availeble");
					LayoutRecManager.scaleResize();
					return;
				}
				}else{
				console.log("wrong size");
				LayoutRecManager.scaleResize();
				return;
			};
			var tDragBar;
			var barList;
			barList=[];
			for (i=0;i < len;i++){
				tDragBar=items[i];
				if ((tDragBar instanceof laya.editor.comonents.LayoutDragBar )){
					if(tDragBar.cusorType=="e-resize"){
						if(tDragBar.x>=tRec.x+tRec.width){
							barList.push(tDragBar);
							tDragBar.left+=dW;
						}
					}
				}
			}
			barList=[];
			for (i=0;i < len;i++){
				tDragBar=items[i];
				if ((tDragBar instanceof laya.editor.comonents.LayoutDragBar )){
					if(tDragBar.cusorType=="n-resize"){
						if(tDragBar.y>=tRec.y+tRec.height){
							barList.push(tDragBar);
							tDragBar.top+=dH;
						}
					}
				}
			}
			LayoutRecManager._ct.width=nW;
			LayoutRecManager._ct.height=nH;
			Laya.timer.once(100,null,LayoutRecManager.adptAll);
			MenuBar.instance.width=LayerManager.stage.width-2;
			QuickTool.instance.width=LayerManager.stage.width-2;
		}

		LayoutRecManager.adptDis=function(dis,scaleX,scaleY){
			dis.left *=scaleX;
			dis.right *=scaleX;
			dis.top *=scaleY;
			dis.bottom *=scaleY;
		}

		LayoutRecManager.adptScales=function(scaleX,scaleY){
			var items;
			items=DisControlTool.getAllChild(LayoutRecManager._ct);
			var i=0,len=0;
			len=items.length;
			var tDragBar;
			for (i=0;i < len;i++){
				tDragBar=items[i];
				if ((tDragBar instanceof laya.editor.comonents.LayoutDragBar )){
					LayoutRecManager.adptDis(tDragBar,scaleX,scaleY);
				}
			}
		}

		LayoutRecManager.adptAll=function(){
			var items;
			items=DisControlTool.getAllChild(LayoutRecManager._ct);
			var i=0,len=0;
			len=items.length;
			var tDragBar;
			for (i=0;i < len;i++){
				tDragBar=items[i];
				if ((tDragBar instanceof laya.editor.comonents.LayoutDragBar )){
					tDragBar.updates();
				}
			}
		}

		LayoutRecManager.saveLayoutInfo=function(){
			var items;
			items=DisControlTool.getAllChild(LayoutRecManager._ct);
			var i=0,len=0;
			len=items.length;
			for (i=0;i < len;i++){
				IDTools.idObj(items[i]);
			};
			var rst=[];
			var tDis;
			for (i=0;i < len;i++){
				tDis=items[i];
				if ((tDis instanceof laya.editor.comonents.LayoutDragBar )){
					rst.push(LayoutRecManager.getInfoO(tDis));
				}
				else if ((tDis instanceof laya.editor.view.LayoutRec )){
					rst.push(LayoutRecManager.saveRecInfo(tDis));
				}
			}
			console.log("save rst:",rst);
			var saveO;
			saveO={};
			saveO.width=LayoutRecManager._ct.width;
			saveO.height=LayoutRecManager._ct.height;
			saveO.items=rst;
			FileManager.createTxtFile(FileManager.getAppPath(LayoutRecManager.tLayoutFile),ObjectTools.getJsonString(saveO));
		}

		LayoutRecManager.showPanelByClassName=function(className){
			if(LayoutRecManager.popLocked())return;
			LayoutRecManager.initClassToUIO();
			var tPanel;
			tPanel=LayoutRecManager.classToUIO[className];
			if (!tPanel)
				return;
			if (LayoutRecManager.isPanelInStage(tPanel))
				return;
			var rec=new LayoutRec();
			if (tPanel.width > 0 && tPanel.height > 0 && 0){
				rec.width=tPanel.width+5;
				rec.height=tPanel.height+20;
			}
			else{
				rec.width=tPanel["minWidth"]? tPanel["minWidth"]:200;
				if(rec.width<200)rec.width=200;
				rec.height=300;
			}
			LayoutRecManager.addPanelToRec(tPanel,rec);
			DisTools.showToCenter(rec,LayerManager.stage);
		}

		LayoutRecManager.isPanelInStage=function(panel){
			var i=0,len=0;
			var childs;
			var layouts;
			layouts=[];
			childs=DisControlTool.getAllChild(LayoutRecManager._ct);
			len=childs.length;
			for (i=0;i < len;i++){
				if (((childs[i])instanceof laya.editor.view.LayoutRec )){
					Utils1.concatArr(layouts,childs[i].getUIs());
				}
			}
			childs=DisControlTool.getAllChild(LayerManager.stage);
			len=childs.length;
			for (i=0;i < len;i++){
				if (((childs[i])instanceof laya.editor.view.LayoutRec )){
					Utils1.concatArr(layouts,childs[i].getUIs());
				}
			}
			len=layouts.length;
			for (i=0;i < len;i++){
				if (layouts[i]==panel)
					return true;
			}
			return false;
		}

		LayoutRecManager.initClassToUIO=function(){
			if (!LayoutRecManager.classToUIO){
				LayoutRecManager.classToUIO={};
				LayoutRecManager.classToUIO["ResPanel"]=ResPanel.instance;
				LayoutRecManager.classToUIO["PagePanel"]=PagePanel.instance;
				LayoutRecManager.classToUIO["UIPanel"]=UIPanel.instance;
				LayoutRecManager.classToUIO["PropPanel"]=PropPanel.instance;
				LayoutRecManager.classToUIO["DisplayTreePanel"]=DisplayTreePanel.instance;
				LayoutRecManager.classToUIO["TimeLinePanel"]=TimeLinePanel.instance;
				LayoutRecManager.classToUIO["CompPanel"]=CompPanel.instance;
			}
		}

		LayoutRecManager.layoutByPagePath=function(pagePath){
			LayoutRecManager.layoutToPageType(TypeManager.getFileType(pagePath));
		}

		LayoutRecManager.layoutToPageType=function(type){
			LayoutRecManager.recoverLayoutInfo(Paths.getLayoutFilePathByType(type));
		}

		LayoutRecManager.recoverLayoutInfo=function(layoutFile){
			(layoutFile===void 0)&& (layoutFile="layout/layout.config");
			console.log("recoverLayoutInfo:",layoutFile);
			if(LayoutRecManager._layoutFile==layoutFile)return;
			if(LayoutRecManager._layoutFile){
				LayoutRecManager.saveLayoutInfo();
			}
			LayoutRecManager.clearAll();
			LayoutRecManager.initClassToUIO();
			LayoutRecManager._layoutFile=layoutFile;
			var path;
			path=FileManager.getAppPath(LayoutRecManager.tLayoutFile);
			if (!FileTools.exist(path)){
				LayoutRecManager.createDefault();
				return;
			}
			LayoutRecManager.layoutByLayoutFile(path);
		}

		LayoutRecManager.layoutByLayoutFile=function(path){
			var layoutO;
			layoutO=ObjectTools.getObj(FileManager.readTxtFile(path));
			LayoutRecManager._ct.width=layoutO.width;
			LayoutRecManager._ct.height=layoutO.height;
			var itemList;
			itemList=layoutO.items;
			var i=0,len=0;
			len=itemList.length;
			var tO;
			var tDis;
			var tClass;
			var objDic={};
			for (i=0;i < len;i++){
				tO=itemList[i];
				tClass=LayoutRecManager.itemClassO[tO.className];
				if (!tClass)
					continue ;
				if (tClass==LayoutDragBar){
					var type=tO.width < tO.height ? "R" :"T";
					tDis=LayoutRecManager.getADragBar(type);
				}
				else{
					tDis=new tClass();
				}
				ObjectTools.copyValueByArr(tDis,tO,LayoutRecManager.sizeInfos);
				objDic[tO.id]=tDis;
				if ((tDis instanceof laya.editor.comonents.LayoutDragBar )){
				}
				if ((tDis instanceof laya.editor.view.LayoutRec )){
					LayoutRecManager.recoverLayoutRec(tDis,tO);
				}
				LayoutRecManager._ct.addChild(tDis);
			};
			var key;
			var tar;
			var relativeO;
			for (i=0;i < len;i++){
				tO=itemList[i];
				tDis=objDic[tO.id];
				relativeO=tO.relativeO;
				if (relativeO){
					for (key in relativeO){
						tar=objDic[relativeO[key]];
						if (tar){
							RelativePos.addRelative(tDis,tar,key);
						}
						else{
							console.log("tar not find");
						}
					}
				}
				else{
					console.log("relativeO not find");
				}
				ObjectTools.copyValueByArr(tDis,tO,LayoutRecManager.sizeInfos);
			}
			LayoutRecManager.adptAll();
			LayoutRecManager.resizeWork();
		}

		LayoutRecManager.recoverLayoutRec=function(rec,data){
			var i=0,len=0;
			var uiList;
			uiList=data.uiList;
			len=uiList.length;
			var tUI;
			for (i=0;i < len;i++){
				tUI=LayoutRecManager.classToUIO[uiList[i]];
				if (tUI){
					LayoutRecManager.addPanelToRec(tUI,rec);
				}
			}
		}

		LayoutRecManager.saveRecInfo=function(rec){
			console.log("saveRecInfo");
			var rst;
			rst=LayoutRecManager.getInfoO(rec);
			var uiList;
			var i=0,len=0;
			uiList=rec.tab.items;
			var saveList;
			len=uiList.length;
			var tab;
			saveList=[];
			for (i=0;i < len;i++){
				tab=uiList[i];
				saveList.push(ClassTool.getClassName(tab.ui));
			}
			rst.uiList=saveList;
			return rst;
		}

		LayoutRecManager.getInfoO=function(obj){
			var rst;
			rst={};
			ObjectTools.copyValueByArr(rst,obj,LayoutRecManager.sizeInfos);
			rst.className=ClassTool.getClassName(obj);
			rst.id=IDTools.getObjID(obj);
			rst.relativeO=RelativePos.saveRelative(obj);
			return rst;
		}

		LayoutRecManager.onDragDrop=function(e){
			console.log("onDragDrop",e);
			console.log("drag target:",e.target);
			if (!e.data)
				return;
			var tType;
			tType=e.data.type;
			console.log("dropType:",tType);
			if (tType !="LayoutRec" && tType !="LayoutTab")
				return;
			var src;
			src=e.data.target;
			if (!src)
				return;
			var hitList;
			hitList=e.hitList;
			var i=0,len=0;
			len=hitList.length;
			var tTarget;
			if (hitList.indexOf(src)>=0){
				tTarget=src;
				if (tType !="LayoutTab"){
					if (tType=="LayoutRec"){
						LayoutRecManager.popRec(src);
						return;
					}
				}
			}
			else{
				for (i=0;i < len;i++){
					tTarget=hitList[i];
					if ((tTarget instanceof laya.editor.view.LayoutRec )){
						if(RelativePos.getDisMouseRelativePos(tTarget)!="out"){
							break ;
						}
					}
				}
			}
			if (!((tTarget instanceof laya.editor.view.LayoutRec )))
				return;
			if(tTarget.parent!=LayoutRecManager._ct)return;
			if (src !=tTarget || tType=="LayoutTab"){
				var posType;
				posType=RelativePos.getDisMouseRelativePos(tTarget);
				if (tType=="LayoutRec"){
					switch (posType){
						case "up":
							LayoutRecManager.removeRec(src);
							LayoutRecManager.insetToBarV(RelativePos.getBar(tTarget,"up"),src);
							break ;
						case "down":
							LayoutRecManager.removeRec(src);
							LayoutRecManager.insertV(tTarget,src);
							break ;
						case "left":
							LayoutRecManager.removeRec(src);
							LayoutRecManager.insertL(tTarget,src);
							break ;
						case "center":
							if(src.parent==LayerManager.stage)return;
						case "right":
							LayoutRecManager.removeRec(src);
							LayoutRecManager.insert(tTarget,src);
							break ;
						default :
							return;
						}
				}
				else if (tType=="LayoutTab"){
					var tTab;
					tTab=e.dragInitiator;
					var tRec;
					tRec=tTarget;
					if (src==tTarget){
						if (src.tab.items.length <=1){
							LayoutRecManager.popRec(src);
							return;
						}
						else{
							if (posType=="center"){
								src.removeTab(tTab);
								tRec=new LayoutRec();
								tRec.pos(src.x,src.y);
								src.parent.addChild(tRec);
								tRec.addTab(tTab);
								LayoutRecManager.popRec(tRec);
								return;
							}
						}
					}
					switch (posType){
						case "down":
							src.removeTab(tTab);
							tRec=new LayoutRec();
							tRec.addTab(tTab);
							LayoutRecManager.insertV(tTarget,tRec);
							break ;
						case "right":
							src.removeTab(tTab);
							tRec=new LayoutRec();
							tRec.addTab(tTab);
							LayoutRecManager.insert(tTarget,tRec);
							break ;
						case "left":
							src.removeTab(tTab);
							tRec=new LayoutRec();
							tRec.addTab(tTab);
							LayoutRecManager.insertL(tTarget,tRec);
							break ;
						case "center":
						case "up":
							if(!tRec.canAddTab)return;
							if (src !=tRec){
								src.removeTab(tTab);
								tRec.addTab(tTab);
							}
							else{
								return;
								src.removeTab(tTab);
								tRec=new LayoutRec();
								tRec.addTab(tTab);
								LayoutRecManager.popRec(tRec);
							}
							break ;
						default :
							return;
						}
					if (src.tab.items.length < 1){
						LayoutRecManager.removeRec(src);
					}
				}
			}
		}

		LayoutRecManager.test=function(){
			var _leftBar;
			var _rightBar;
			var _upBar;
			var _downBar;
			_leftBar=LayoutRecManager.getADragBar("R");
			_leftBar.width=5;
			_leftBar.left=0;
			_leftBar.top=0;
			_leftBar.bottom=0;
			_leftBar.type=2;
			LayoutRecManager._ct.addChild(_leftBar);
			_rightBar=LayoutRecManager.getADragBar("R");
			_rightBar.width=5;
			_rightBar.right=0;
			_rightBar.top=0;
			_rightBar.bottom=0;
			_rightBar.type=2;
			LayoutRecManager._ct.addChild(_rightBar);
			_upBar=LayoutRecManager.getADragBar("T");
			_upBar.height=5;
			_upBar.left=0;
			_upBar.top=0;
			_upBar.right=0;
			_upBar.type=2;
			LayoutRecManager._ct.addChild(_upBar);
			_downBar=LayoutRecManager.getADragBar("T");
			_downBar.height=5;
			_downBar.left=0;
			_downBar.bottom=0;
			_downBar.right=0;
			_downBar.type=2;
			LayoutRecManager._ct.addChild(_downBar);
			var rec=LayoutRecManager.getARec();
			LayoutRecManager._ct.addChild(rec);
			rec.left=0;
			rec.right=0;
			rec.top=0;
			rec.bottom=0;
			RelativePos.addRelative(rec,_leftBar,"left");
			RelativePos.addRelative(rec,_rightBar,"right");
			RelativePos.addRelative(rec,_upBar,"up");
			RelativePos.addRelative(rec,_downBar,"down");
			LayoutRecManager.insert(rec,LayoutRecManager.getARec());
			var tRec;
			tRec=LayoutRecManager.getARec();
			LayoutRecManager.insertV(rec,tRec);
			LayoutRecManager.insert(tRec,LayoutRecManager.getARec());
			console.log("onlySide:",RelativePos.getOnlySide(tRec));
			LayoutRecManager.insertV(tRec,LayoutRecManager.getARec());
			console.log("onlySide:",RelativePos.getOnlySide(tRec));
		}

		LayoutRecManager.clearAll=function(){
			LayoutRecManager.clearLayoutsOfContainer(LayoutRecManager._ct);
			LayoutRecManager.clearLayoutsOfContainer(LayerManager.stage);
		}

		LayoutRecManager.clearLayoutsOfContainer=function(_ct){
			var items;
			items=DisControlTool.getAllChild(_ct);
			var i=0,len=0;
			len=items.length;
			var tDis;
			for (i=0;i < len;i++){
				tDis=items[i];
				if ((tDis instanceof laya.editor.comonents.LayoutDragBar )){
					(tDis).clears();
					tDis.removeSelf();
				}
				else if ((tDis instanceof laya.editor.view.LayoutRec )){
					(tDis).clears();
					tDis.removeSelf();
				}
			}
		}

		LayoutRecManager.createDefault=function(){
			LayoutRecManager.clearAll();
			LayoutRecManager.resizeWork();
			var path;
			path=FileManager.getAppPath("layout/default.config");
			if(FileTools.exist(path)){
				LayoutRecManager.layoutByLayoutFile(path);
				return;
			};
			var _leftBar;
			var _rightBar;
			var _upBar;
			var _downBar;
			_leftBar=LayoutRecManager.getADragBar("R");
			_leftBar.width=5;
			_leftBar.left=0;
			_leftBar.top=0;
			_leftBar.bottom=0;
			_leftBar.type=2;
			LayoutRecManager._ct.addChild(_leftBar);
			_rightBar=LayoutRecManager.getADragBar("R");
			_rightBar.width=5;
			_rightBar.right=0;
			_rightBar.top=0;
			_rightBar.bottom=0;
			_rightBar.type=2;
			LayoutRecManager._ct.addChild(_rightBar);
			_upBar=LayoutRecManager.getADragBar("T");
			_upBar.height=5;
			_upBar.left=0;
			_upBar.top=0;
			_upBar.right=0;
			_upBar.type=2;
			LayoutRecManager._ct.addChild(_upBar);
			_downBar=LayoutRecManager.getADragBar("T");
			_downBar.height=5;
			_downBar.left=0;
			_downBar.bottom=0;
			_downBar.right=0;
			_downBar.type=2;
			LayoutRecManager._ct.addChild(_downBar);
			RelativePos.addRelative(_upBar,_leftBar,"left");
			RelativePos.addRelative(_upBar,_rightBar,"right");
			RelativePos.addRelative(_downBar,_leftBar,"left");
			RelativePos.addRelative(_downBar,_rightBar,"right");
			RelativePos.addRelative(_leftBar,_upBar,"up");
			RelativePos.addRelative(_leftBar,_downBar,"down");
			RelativePos.addRelative(_rightBar,_upBar,"up");
			RelativePos.addRelative(_rightBar,_downBar,"down");
			var rec=new LayoutRec();
			LayoutRecManager._ct.addChild(rec);
			rec.left=0;
			rec.right=0;
			rec.top=0;
			rec.bottom=0;
			RelativePos.addRelative(rec,_leftBar,"left");
			RelativePos.addRelative(rec,_rightBar,"right");
			RelativePos.addRelative(rec,_upBar,"up");
			RelativePos.addRelative(rec,_downBar,"down");
			LayoutRecManager.addPanelToRec(PagePanel.instance,rec);
			var uiRec;
			uiRec=new LayoutRec();
			LayoutRecManager.insert(rec,uiRec,0.8);
			LayoutRecManager.addPanelToRec(UIPanel.instance,uiRec);
			var resRec;
			resRec=new LayoutRec();
			LayoutRecManager.insertV(rec,resRec);
			LayoutRecManager.addPanelToRec(CompPanel.instance,resRec);
			LayoutRecManager.addPanelToRec(ResPanel.instance,resRec);
			var propRec;
			propRec=new LayoutRec();
			LayoutRecManager.insert(uiRec,propRec,0.3);
			LayoutRecManager.addPanelToRec(PropPanel.instance,propRec);
			var disTreeRec;
			disTreeRec=new LayoutRec();
			LayoutRecManager.insertV(propRec,disTreeRec);
			LayoutRecManager.addPanelToRec(DisplayTreePanel.instance,disTreeRec);
		}

		LayoutRecManager.popRec=function(tar){
			if (tar.parent==LayerManager.stage)
				return;
			var point;
			point=new Point();
			point=tar.localToGlobal(point);
			console.log("pPos:",point.x,point.y);
			point=LayerManager.stage.globalToLocal(point);
			console.log("pPos:",point.x,point.y);
			var posInfo={};
			ObjectTools.copyValueByArr(posInfo,tar,LayoutRecManager.sizePosKeys);
			posInfo.x=point.x+DragManager.dPos.x;
			posInfo.y=point.y+DragManager.dPos.y;
			console.log("dPos:",DragManager.dPos.x,DragManager.dPos.y);
			console.log("tar size:",tar.width,tar.height);
			LayoutRecManager.removeRec(tar);
			DisControlTool.clearItemRelativeInfo(tar);
			console.log("tar size:",tar.width,tar.height);
			LayoutRecManager.addToStageLater(tar,posInfo);
		}

		LayoutRecManager.addToStageLater=function(tar,posInfo){
			console.log("tar size:",tar.width,tar.height);
			console.log("tar size:",tar.width,tar.height);
			LayerManager.stage.addChild(tar);
			if(posInfo.height<200)posInfo.height=200;
			tar.x=posInfo.x-10;
			tar.y=posInfo.y-10;
			tar.width=posInfo.width+20;
			tar.height=posInfo.height+20;
			console.log("posInfo:",posInfo.width,posInfo.height);
		}

		LayoutRecManager.clearRelativePosition=function(tar){
			tar.top=NaN;
			tar.bottom=NaN;
			tar.left=NaN;
			tar.right=NaN;
		}

		LayoutRecManager.removeRec=function(tar){
			console.log("removeRec");
			var onlySide;
			onlySide=RelativePos.getOnlySide(tar);
			if (!onlySide){
				console.log("无可拖动条");
				tar.removeSelf();
				RelativePos.clearBar(tar);
				return;
			};
			var onlyBar;
			onlyBar=RelativePos.getBar(tar,onlySide);
			var otherSide;
			otherSide=RelativePos.getOtherSide(onlySide);
			var otherBar;
			otherBar=RelativePos.getBar(tar,otherSide);
			console.log("onlySide:",onlySide,"otherSide:",otherSide);
			if (onlyBar && otherBar){
				otherBar.mergeUpdates(onlyBar);
				onlyBar.removeSelf();
				onlyBar.clears();
				RelativePos.clearBar(onlyBar);
				tar.removeSelf();
				RelativePos.clearBar(tar);
			}
			LayoutRecManager.adptAll();
		}

		LayoutRecManager.minRec=function(tar){
			console.log("minRec");
			var onlySide;
			onlySide=RelativePos.getOnlySide(tar);
			if (!onlySide)
				return;
			var onlyBar;
			onlyBar=RelativePos.getBar(tar,onlySide);
			var otherSide;
			otherSide=RelativePos.getOtherSide(onlySide);
			var otherBar;
			otherBar=RelativePos.getBar(tar,otherSide);
			console.log("onlySide:",onlySide,"otherSide:",otherSide);
			if (onlyBar && otherBar){
				switch (onlySide){
					case "right":
						onlyBar.left-=tar.width-4;
						break ;
					case "left":
						onlyBar.left+=tar.width-4;
						break ;
					case "up":
						onlyBar.top+=tar.height-4;
						break ;
					case "down":
						onlyBar.top-=tar.height-4;
						break ;
					}
			}
			onlyBar.updates();
		}

		LayoutRecManager.recoverRec=function(tar){
			console.log("minRec");
			var onlySide;
			onlySide=RelativePos.getOnlySide(tar);
			if (!onlySide)
				return;
			var onlyBar;
			onlyBar=RelativePos.getBar(tar,onlySide);
			var otherSide;
			otherSide=RelativePos.getOtherSide(onlySide);
			var otherBar;
			otherBar=RelativePos.getBar(tar,otherSide);
			console.log("onlySide:",onlySide,"otherSide:",otherSide);
			if (onlyBar && otherBar){
				switch (onlySide){
					case "right":
						onlyBar.left-=tar.width-tar.preWidth;
						break ;
					case "left":
						onlyBar.left+=tar.width-tar.preWidth;
						break ;
					case "up":
						onlyBar.top+=tar.height-tar.preHeight;
						break ;
					case "down":
						onlyBar.top-=tar.height-tar.preHeight;
						break ;
					}
			}
			onlyBar.updates();
		}

		LayoutRecManager.adptTo=function(tar){
			var onlySide;
			onlySide=RelativePos.getOnlySide(tar);
			if (!onlySide)
				return;
			var onlyBar;
			onlyBar=RelativePos.getBar(tar,onlySide);
			var otherSide;
			otherSide=RelativePos.getOtherSide(onlySide);
			var otherBar;
			otherBar=RelativePos.getBar(tar,otherSide);
			console.log("onlySide:",onlySide,"otherSide:",otherSide);
			if (onlyBar && otherBar){
				switch (onlySide){
					case "right":
						onlyBar.left=tar.left+tar.width;
						break ;
					case "left":
						onlyBar.left=tar.left-onlyBar.width;
						break ;
					case "up":
						onlyBar.top=tar.top-onlyBar.height;
						break ;
					case "down":
						onlyBar.top=tar.top+tar.height;
						break ;
					}
			}
			onlyBar.updates();
		}

		LayoutRecManager.insetToBar=function(tar,insert,rate){
			(rate===void 0)&& (rate=0.4);
			var rec;
			rec=tar.getDragArea();
			rec.width=200;
			if (rec.width < 20)
				return;
			var tLen=0;
			tLen=rec.width;
			var dragBar;
			dragBar=LayoutRecManager.getADragBar("R");
			dragBar.size(5,tar.height);
			dragBar.right=tar.right;
			dragBar.left=tar.left
			dragBar.top=tar.top;
			dragBar.bottom=tar.bottom;
			dragBar.type=0;
			dragBar.mergeUpdates(tar);
			tar.clear();
			dragBar.left+=rate *tLen;
			RelativePos.clearBar(insert);
			insert.left=tar.left
			insert.top=tar.top;
			insert.bottom=tar.bottom;
			if (RelativePos.getBar(tar,"right")){
				RelativePos.copyRelative(dragBar,tar,"right");
			}
			RelativePos.addRelative(insert,tar,"left");
			RelativePos.addRelative(insert,dragBar,"right");
			RelativePos.copyRelative(insert,tar,"down");
			RelativePos.copyRelative(dragBar,tar,"down");
			RelativePos.copyRelative(insert,tar,"up");
			RelativePos.copyRelative(dragBar,tar,"up");
			LayoutRecManager._ct.addChild(dragBar);
			LayoutRecManager._ct.addChild(insert);
			LayoutRecManager.adptAll();
		}

		LayoutRecManager.insetToBarV=function(tar,insert,rate){
			(rate===void 0)&& (rate=0.4);
			var rec;
			rec=tar.getDragArea();
			rec.height=200;
			if (rec.height < 20)
				return;
			var tLen=0;
			tLen=rec.height;
			var dragBar;
			dragBar=LayoutRecManager.getADragBar("T");
			dragBar.size(tar.width,5);
			dragBar.right=tar.right;
			dragBar.left=tar.left
			dragBar.top=tar.top;
			dragBar.bottom=tar.bottom;
			dragBar.type=1;
			dragBar.copyUpdates(tar,"up");
			dragBar.top+=rate *tLen;
			RelativePos.clearBar(insert);
			insert.right=tar.right;
			insert.left=tar.left
			insert.top=tar.top;
			insert.bottom=tar.bottom;
			if (RelativePos.getBar(tar,"down")){
				RelativePos.copyRelative(dragBar,tar,"down");
				RelativePos.cancelRelative(tar,"down");
			}
			RelativePos.addRelative(insert,tar,"up");
			RelativePos.addRelative(insert,dragBar,"down");
			RelativePos.copyRelative(insert,tar,"right");
			RelativePos.copyRelative(dragBar,tar,"right");
			RelativePos.copyRelative(insert,tar,"left");
			RelativePos.copyRelative(dragBar,tar,"left");
			LayoutRecManager._ct.addChild(dragBar);
			LayoutRecManager._ct.addChild(insert);
			LayoutRecManager.adptAll();
		}

		LayoutRecManager.insert=function(tar,insert,rate){
			(rate===void 0)&& (rate=0.4);
			var tLen=0;
			tLen=tar.width;
			insert.right=tar.right;
			tar.right+=tLen *rate;
			insert.left=tar.x+tar.width;
			insert.top=tar.top;
			insert.bottom=tar.bottom;
			var dragBar;
			dragBar=LayoutRecManager.getADragBar("R");
			dragBar.size(5,tar.height);
			dragBar.left=tar.x+tar.width;
			dragBar.top=tar.top;
			dragBar.bottom=tar.bottom;
			if (RelativePos.getBar(tar,"right")){
				RelativePos.copyRelative(insert,tar,"right");
				RelativePos.cancelRelative(tar,"right");
			}
			RelativePos.addRelative(tar,dragBar,"right");
			RelativePos.addRelative(insert,dragBar,"left");
			RelativePos.copyRelative(insert,tar,"down");
			RelativePos.copyRelative(dragBar,tar,"down");
			RelativePos.copyRelative(insert,tar,"up");
			RelativePos.copyRelative(dragBar,tar,"up");
			tar.parent.addChild(dragBar);
			tar.parent.addChild(insert);
			DisControlTool.setTop(dragBar);
			dragBar.type=0;
			LayoutRecManager.adptAll();
		}

		LayoutRecManager.insertL=function(tar,insert,rate){
			(rate===void 0)&& (rate=0.4);
			var tLen=0;
			tLen=tar.width;
			insert.right=tar.right;
			insert.left=tar.left;
			tar.left+=tLen *rate;
			insert.top=tar.top;
			insert.bottom=tar.bottom;
			var dragBar;
			dragBar=LayoutRecManager.getADragBar("R");
			dragBar.size(5,tar.height);
			dragBar.left=tar.x;
			dragBar.top=tar.top;
			dragBar.bottom=tar.bottom;
			if (RelativePos.getBar(tar,"left")){
				RelativePos.copyRelative(insert,tar,"left");
				RelativePos.cancelRelative(tar,"left");
			}
			RelativePos.addRelative(tar,dragBar,"left");
			RelativePos.addRelative(insert,dragBar,"right");
			RelativePos.copyRelative(insert,tar,"down");
			RelativePos.copyRelative(dragBar,tar,"down");
			RelativePos.copyRelative(insert,tar,"up");
			RelativePos.copyRelative(dragBar,tar,"up");
			tar.parent.addChild(dragBar);
			tar.parent.addChild(insert);
			DisControlTool.setTop(dragBar);
			dragBar.type=0;
			LayoutRecManager.adptAll();
		}

		LayoutRecManager.insertV=function(tar,insert,rate){
			(rate===void 0)&& (rate=0.4);
			if(tar.height<150){
				var downBar;
				downBar=RelativePos.getBar(tar,"down");
				if(downBar.type!=2){
					LayoutRecManager.insetToBarV(downBar,insert);
					return;
				}
			};
			var tLen=0;
			tLen=tar.height;
			insert.right=tar.right;
			insert.bottom=tar.bottom;
			tar.bottom+=tLen *rate;
			insert.left=tar.left;
			insert.top=tar.y+tar.height;
			var dragBar;
			dragBar=LayoutRecManager.getADragBar("T");
			dragBar.size(tar.width,5);
			dragBar.left=tar.x;
			dragBar.top=tar.y+tar.height;
			if (RelativePos.getBar(tar,"down")){
				RelativePos.copyRelative(insert,tar,"down");
				RelativePos.cancelRelative(tar,"down");
			}
			RelativePos.addRelative(tar,dragBar,"down");
			RelativePos.addRelative(insert,dragBar,"up");
			RelativePos.copyRelative(insert,tar,"right");
			RelativePos.copyRelative(dragBar,tar,"right");
			RelativePos.copyRelative(insert,tar,"left");
			RelativePos.copyRelative(dragBar,tar,"left");
			tar.parent.addChild(dragBar);
			tar.parent.addChild(insert);
			DisControlTool.setTop(dragBar);
			dragBar.type=1;
			LayoutRecManager.adptAll();
		}

		LayoutRecManager.getADragBar=function(type){
			var dragBar=new LayoutDragBar(type);
			dragBar.on("mousedown",null,LayoutRecManager.onMouseDown);
			return dragBar;
		}

		LayoutRecManager.addPanelToRec=function(panel,rec){
			panel.top=20;
			panel.left=0;
			panel.right=0;
			panel.bottom=0;
			rec.addUI(panel);
		}

		LayoutRecManager.getARec=function(){
			var rec=new LayoutRec();
			rec.addUI(LayoutRecManager.getAUI("#ff00ff"));
			rec.addUI(LayoutRecManager.getAUI("#ff000f"));
			return rec;
		}

		LayoutRecManager.getAUI=function(color){
			(color===void 0)&& (color="#ff00ff");
			var box=new Box();
			box.graphics.drawRect(0,0,20,20,color);
			box.width=20;
			box.height=20;
			box.left=5;
			box.right=5;
			box["title"]="tt:"+Math.ceil(Math.random()*10);
			return box;
		}

		LayoutRecManager.target=null
		LayoutRecManager.Side=2;
		LayoutRecManager.Vertical=1;
		LayoutRecManager.Horizon=0;
		LayoutRecManager._ct=null
		LayoutRecManager.classToUIO=null
		LayoutRecManager._layoutFile=null;
		LayoutRecManager.minRecLen=4;
		LayoutRecManager.DragBarWidth=5;
		__static(LayoutRecManager,
		['itemClassO',function(){return this.itemClassO={"LayoutDragBar":LayoutDragBar,"LayoutRec":LayoutRec};},'sizeInfos',function(){return this.sizeInfos=["height","width","left","right","bottom","top","x","y","type"];},'sizePosKeys',function(){return this.sizePosKeys=["x","y","width","height"];},'emptyLayoutO',function(){return this.emptyLayoutO={"top":NaN,"bottom":NaN,"left":NaN,"right":NaN};}
		]);
		return LayoutRecManager;
	})()


	/**
	*本类集中初始化各个模块监听的消息
	*@author ww
	*@version 1.0
	*
	*@created 2015-10-26 上午10:39:45
	*/
	//class laya.ide.managers.NoticeRouter
	var NoticeRouter=(function(){
		function NoticeRouter(){}
		__class(NoticeRouter,'laya.ide.managers.NoticeRouter');
		NoticeRouter.init=function(){
			NoticeRouter._initsList=[];
			NoticeRouter._initsList.push(AddDocument.instance);
			NoticeRouter._initsList.push(AddParticle.instance);
			NoticeRouter._initsList.push(AddAnimation.instance);
			NoticeRouter._initsList.push(AddScene.instance);
			NoticeRouter._initsList.push(PagePanel.instance);
			NoticeRouter._initsList.push(UIPanel.instance);
			NoticeRouter._initsList.push(ResPanel.instance);
			NoticeRouter._initsList.push(AddDirectory.instance);
			NoticeRouter._initsList.push(MovePage.instance);
			NoticeRouter._initsList.push(RenamePage.instance);
			NoticeRouter._initsList.push(SetPageProp.instance);
			NoticeRouter._initsList.push(PropPanel.instance);
			NoticeRouter._initsList.push(DisplayTreePanel.instance);
			NoticeRouter._initsList.push(FindAndReplace.instance);
			var i=0,len=NoticeRouter._initsList.length;
			for (i=0;i < len;i++){
				NoticeRouter._initsList[i].initListener();
			}
		}

		NoticeRouter._initsList=null
		return NoticeRouter;
	})()


	/**
	*
	*@author ww
	*@version 1.0
	*
	*@created 2016-3-5 上午11:00:22
	*/
	//class laya.ide.managers.RenderManager
	var RenderManager=(function(){
		function RenderManager(){
			this.param=null;
			this.initors=[];
		}

		__class(RenderManager,'laya.ide.managers.RenderManager');
		var __proto=RenderManager.prototype;
		__proto.initCustomUIConfig=function(path){
			var bPath;
			bPath=FileManager.getAppPath(path);
			if(!FileTools.exist(bPath))return;
			var fileList;
			fileList=FileTools.getDirFiles(bPath);
			console.log("customFiles:",fileList);
			var i=0,len=0;
			len=fileList.length;
			var tFile;
			for(i=0;i<len;i++){
				tFile=fileList[i];
				if(tFile.indexOf(".xml")>=0){
					this.addCustomUIConfig(FileTools.getPath(bPath,tFile));
				}
			}
		}

		__proto.addCustomUIConfig=function(path){
			console.log("addCustomFile",path);
			var jsFile;
			jsFile=path.replace(".xml",".js");
			console.log("jsFile:",jsFile);
			var xmlFile;
			xmlFile=FileTools.readFile(path);
			var xml;
			xml=Utils1.parseXMLFromString(xmlFile);
			var obj;
			obj=XML2Object.parse(xml);
			UIConfigManager.addNewConfig(obj.c.uiComp.c);
			var jsStrs;
			jsStrs=FileTools.readFile(jsFile);
			eval(jsStrs);
			var initor;
			initor=laya.ide.Initiator;
			console.log("initor:",initor);
			if(initor){
				this.initors.push(initor);
			}
		}

		__proto.setRenderProp=function(param){
			var i=0,len=0;
			len=this.initors.length;
			var initor;
			for(i=0;i<len;i++){
				initor=this.initors[i];
				if(initor&&initor["init"]){
					initor["init"](param);
				}
			}
		}

		__proto.setRenderPropByFont=function(font){
			if(!this.param){
				this.param={};
				this.param.createComp=UIView.createCompS;
			}
			if(font&&font.length>0){
				this.param.font=font;
				}else{
				delete this.param["font"];
			}
			this.setRenderProp(this.param);
		}

		__proto.initRenders=function(){
			this.initCustomUIConfig("renders/");
			this.initCustomUIConfig("renders/"+"/custom");
			this.setRenderPropByFont(null);
		}

		__static(RenderManager,
		['I',function(){return this.I=new RenderManager();}
		]);
		return RenderManager;
	})()


	/**
	*...
	*@author ww
	*/
	//class laya.ide.managers.ResFileManager
	var ResFileManager=(function(){
		function ResFileManager(){}
		__class(ResFileManager,'laya.ide.managers.ResFileManager');
		ResFileManager.setPath=function(path){
			if(!FileTools.exist(path))return;
			ResFileManager._prePath=path;
			ResFileManager.basePath=FileTools.getAbsPath(path);
			if(!ResFileManager._watcher){
				ResFileManager._watcher=new DirWatcher();
			}
			ResFileManager._watcher.setPath(path);
			ResFileManager.getAllResFiles(path);
			Notice.listen("RESFILE_CHANGE",null,ResFileManager.resFileChange,null,true);
		}

		ResFileManager.resFileChange=function(file){
			console.log("fileChange:",file);
			if(!file)return;
			if(!FileTools.exist(file))return;
			if(!ResFileManager.isResFile(file))return;
			file=FileTools.getAbsPath(file);
			ResFileManager.clearRes(file);
			console.log("reloadFile:",file);
			Laya.loader.load([file],new Handler(null,ResFileManager.resLoaded));
		}

		ResFileManager.getAllResFiles=function(path){
			path=path?path:ResFileManager._prePath;
			if(!FileTools.exist(path))return;
			var arr;
			arr=FileTools.getFileList(path);
			var i=0,len=0;
			len=arr.length;
			var loadList;
			loadList=[];
			for(i=0;i<len;i++){
				if (ResFileManager.isResFile(arr[i])){
					arr[i]=FileTools.getAbsPath(arr[i]);
					ResFileManager.clearRes(arr[i]);
					loadList.push(arr[i]);
				}
			}
			Laya.loader.load(loadList,new Handler(null,ResFileManager.resLoaded));
		}

		ResFileManager.getAllResFileList=function(path){
			path=path?path:ResFileManager._prePath;
			if(!FileTools.exist(path))return [];
			var arr;
			arr=FileTools.getFileList(path);
			var i=0,len=0;
			len=arr.length;
			var loadList;
			loadList=[];
			for(i=0;i<len;i++){
				if (ResFileManager.isResFile(arr[i])){
					loadList.push(arr[i]);
				}
			}
			return loadList;
		}

		ResFileManager.getAllResLinkList=function(path){
			path=path?path:ResFileManager._prePath;
			var resList;
			resList=ResFileManager.getAllResFileList(path);
			var i=0,len=0;
			var rst;
			rst=[];
			len=resList.length;
			for(i=0;i<len;i++){
				rst.push(FileManager.adptToCommonUrl(FileManager.getRelativePath(SystemSetting.assetsPath,resList[i])));
			}
			return rst;
		}

		ResFileManager.resLoaded=function(){
			console.log("resLoaded");
			if(ResFileManager.resLoadCompleteHandler){
				ResFileManager.resLoadCompleteHandler.run();
				ResFileManager.resLoadCompleteHandler=null;
			}
		}

		ResFileManager.isResFile=function(path){
			if (FileTools.isDirectory(path))return false;
			var exName;
			exName=FileTools.getExtensionName(path);
			if (exName=="png" || exName=="jpg")return true;
			return false;
		}

		ResFileManager.clearRes=function(url){
			var fmtUrl;
			fmtUrl=ResFileManager.formatURL(url);
			Loader.clearRes(fmtUrl);
			URL.version[fmtUrl]=Math.random();
		}

		ResFileManager.getRes=function(url){
			return Loader.getRes(ResFileManager.formatURL(url));
		}

		ResFileManager.cacheRes=function(url,data){
			Loader.cacheRes(ResFileManager.formatURL(url),data);
		}

		ResFileManager.formatURL=function(url){
			if (!url)return url;
			if(FileTools.isAbsPath(url))return url;
			var rst;
			rst=(url.indexOf(":/")> 0)?url:ResFileManager.basePath+FileTools.path.sep+FileManager.adptToLocalUrl(url);
			return rst;
		}

		ResFileManager._prePath=null
		ResFileManager._watcher=null
		ResFileManager.resLoadCompleteHandler=null
		ResFileManager.basePath="";
		return ResFileManager;
	})()


	/**
	*本类用于调整对象的宽高以及坐标
	*@author ww
	*/
	//class laya.ide.managers.resizer.DisResizer
	var DisResizer=(function(){
		function DisResizer(){}
		__class(DisResizer,'laya.ide.managers.resizer.DisResizer');
		DisResizer.init=function(){
			if (DisResizer._up)return;
			DisResizer._up=new AutoFillRec("T");
			DisResizer._up.height=2;
			DisResizer._up.type=0;
			DisResizer._down=new AutoFillRec("T");
			DisResizer._down.height=2;
			DisResizer._down.type=0;
			DisResizer._left=new AutoFillRec("R");
			DisResizer._left.width=2;
			DisResizer._left.type=1;
			DisResizer._right=new AutoFillRec("R");
			DisResizer._right.width=2;
			DisResizer._right.type=1;
			DisResizer._barList=[DisResizer._up,DisResizer._down,DisResizer._left,DisResizer._right];
			DisResizer.addEvent();
		}

		DisResizer.stageDown=function(e){
			var target;
			target=e.target;
			if (DisResizer._tar && DisControlTool.isInTree(DisResizer._tar,target)){
				return;
			}
			DisResizer.clear();
		}

		DisResizer.clear=function(){
			DisResizer._tar=null;
			Laya.stage.off("mouseup",null,DisResizer.stageDown);
			DisControlTool.removeItems(DisResizer._barList);
			DisResizer.clearDragEvents();
		}

		DisResizer.addEvent=function(){
			var i=0,len=0;
			var tBar;
			len=DisResizer._barList.length;
			for (i=0;i < len;i++){
				tBar=DisResizer._barList[i];
				tBar.on("mousedown",null,DisResizer.barDown);
			}
		}

		DisResizer.barDown=function(e){
			DisResizer.clearDragEvents();
			DisResizer.tBar=e.target;
			if (!DisResizer.tBar)return;
			var area;
			area=new Rectangle();
			if (DisResizer.tBar.type==0){
				area.x=DisResizer.tBar.x;
				area.width=0;
				area.y=DisResizer.tBar.y-200;
				area.height=400;
				}else{
				area.x=DisResizer.tBar.x-200;
				area.width=400;
				area.y=0;
				area.height=0;
			};
			var option;
			option={};
			option.area=area;
			DisResizer.tBar.record();
			DisResizer.tBar.startDrag(area);
			DisResizer.tBar.on("dragmove",null,DisResizer.draging);
			DisResizer.tBar.on("dragend",null,DisResizer.dragEnd);
		}

		DisResizer.draging=function(e){
			console.log("draging");
			if (!DisResizer.tBar)return;
			if (!DisResizer._tar)return;
			switch(DisResizer.tBar){
				case DisResizer._left:
					DisResizer._tar.x+=DisResizer.tBar.getDx();
					DisResizer._tar.width-=DisResizer.tBar.getDx();
					DisResizer._up.width-=DisResizer.tBar.getDx();
					DisResizer._down.width-=DisResizer.tBar.getDx();
					DisResizer._right.x-=DisResizer.tBar.getDx();
					DisResizer.tBar.x-=DisResizer.tBar.getDx();
					break ;
				case DisResizer._right:
					DisResizer._tar.width+=DisResizer.tBar.getDx();
					DisResizer._up.width+=DisResizer.tBar.getDx();
					DisResizer._down.width+=DisResizer.tBar.getDx();
					break ;
				case DisResizer._up:
					DisResizer._tar.y+=DisResizer.tBar.getDy();
					DisResizer._tar.height-=DisResizer.tBar.getDy();
					DisResizer._right.height-=DisResizer.tBar.getDy();
					DisResizer._left.height-=DisResizer.tBar.getDy();
					DisResizer._down.y-=DisResizer.tBar.getDy();
					DisResizer.tBar.y-=DisResizer.tBar.getDy();
					break ;
				case DisResizer._down:
					DisResizer._tar.height+=DisResizer.tBar.getDy();
					DisResizer._right.height+=DisResizer.tBar.getDy();
					DisResizer._left.height+=DisResizer.tBar.getDy();
					break ;
				}
			DisResizer.tBar.record();
		}

		DisResizer.dragEnd=function(e){
			console.log("dragEnd");
			DisResizer.clearDragEvents();
			DisResizer.updates();
		}

		DisResizer.clearDragEvents=function(){
			if (!DisResizer.tBar)return;
			DisResizer.tBar.off("dragmove",null,DisResizer.draging);
			DisResizer.tBar.off("dragend",null,DisResizer.dragEnd);
		}

		DisResizer.setUp=function(dis,force){
			(force===void 0)&& (force=false);
			if (force && dis==DisResizer._tar){
				return;
			};
			DisControlTool.removeItems(DisResizer._barList);
			if (DisResizer._tar==dis){
				DisResizer._tar=null;
				DisResizer.clearDragEvents();
				if(!force)
					return;
			}
			DisResizer._tar=dis;
			DisResizer.updates();
			DisControlTool.addItems(DisResizer._barList,dis);
			Laya.stage.off("mouseup",null,DisResizer.stageDown);
			Laya.stage.on("mouseup",null,DisResizer.stageDown);
		}

		DisResizer.updates=function(){
			var dis;
			dis=DisResizer._tar;
			if(!dis)return;
			var bounds;
			bounds=new Rectangle(0,0,dis.width,dis.height);
			DisResizer._up.x=bounds.x;
			DisResizer._up.y=bounds.y;
			DisResizer._up.width=bounds.width;
			DisResizer._down.x=bounds.x;
			DisResizer._down.y=bounds.y+bounds.height-2;
			DisResizer._down.width=bounds.width;
			DisResizer._left.x=bounds.x;
			DisResizer._left.y=bounds.y;
			DisResizer._left.height=bounds.height;
			DisResizer._right.x=bounds.x+bounds.width-2;
			DisResizer._right.y=bounds.y;
			DisResizer._right.height=bounds.height;
		}

		DisResizer._up=null
		DisResizer._down=null
		DisResizer._left=null
		DisResizer._right=null
		DisResizer._barList=null
		DisResizer._tar=null
		DisResizer.barWidth=2;
		DisResizer.useGetBounds=false;
		DisResizer.tBar=null
		return DisResizer;
	})()


	/**
	*
	*@author ww
	*@version 1.0
	*
	*@created 2015-10-21 下午7:53:19
	*/
	//class laya.ide.managers.SceneManager
	var SceneManager=(function(){
		function SceneManager(){}
		__class(SceneManager,'laya.ide.managers.SceneManager');
		SceneManager.init=function(){
			SceneManager.sceneO["PARTICLE"]=new ParticleScene();
		}

		SceneManager.changeTo=function(scene){
			if(!SceneManager.sceneO[scene])return;
			SceneManager.tScene=SceneManager.sceneO[scene];
			SceneManager.tScene.setUp();
		}

		SceneManager.save=function(){
			if(SceneManager.tScene){
				SceneManager.tScene.save();
			}
		}

		SceneManager.open=function(){
			if(SceneManager.tScene){
				SceneManager.tScene.open();
			}
		}

		SceneManager.PARTICLE="PARTICLE";
		SceneManager.sceneO={};
		SceneManager.tScene=null
		return SceneManager;
	})()


	/**
	*历史状态管理类
	*@author ww
	*/
	//class laya.ide.managers.state.State
	var State=(function(){
		function State(){
			this._stateList=[];
			this._tI=-1;
		}

		__class(State,'laya.ide.managers.state.State');
		var __proto=State.prototype;
		/**
		*添加状态 ，直接使用传入的状态值
		*@param data
		*
		*/
		__proto.add=function(data){
			console.log("before add");
			this.traceState();
			if(this._tI!=this._stateList.length-1){
				this._stateList.length=this._tI+1;
			}
			this._stateList.push(data);
			this._tI=this._stateList.length-1;
			console.log("after add");
			this.traceState();
		}

		__proto.traceState=function(){
			console.log("state:",this._tI+"/"+this._stateList.length);
		}

		/**
		*添加状态 ，会拷贝一个副本数据存入
		*@param data
		*
		*/
		__proto.addE=function(data){
			this.add(ObjectTools.copyObj(data));
		}

		/**
		*获取当前状态
		*@return
		*
		*/
		__proto.now=function(){
			return ObjectTools.copyObj(this._stateList[this._tI]);
		}

		/**
		*向后回退
		*@return
		*
		*/
		__proto.back=function(){
			if(this._tI<=0)return null;
			this._tI--;
			this.traceState();
			return this.now();
		}

		/**
		*向前重做
		*@return
		*
		*/
		__proto.forward=function(){
			if(this._tI>=this._stateList.length-1)return null;
			this._tI++;
			this.traceState();
			return this.now();
		}

		return State;
	})()


	/**
	*状态管理类
	*@author ww
	*@version 1.0
	*
	*@created 2015-10-22 下午7:45:51
	*/
	//class laya.ide.managers.StateManager
	var StateManager=(function(){
		function StateManager(){}
		__class(StateManager,'laya.ide.managers.StateManager');
		StateManager.has=function(sign){
			return StateManager._stateDic.hasOwnProperty(sign);
		}

		StateManager.getState=function(sign){
			if(!StateManager._stateDic[sign])StateManager._stateDic[sign]=new State();
			return StateManager._stateDic[sign];
		}

		StateManager.updateState=function(sign,data){
			StateManager.setChangeState(sign,StateManager.has(sign));
			StateManager.getState(sign).addE(data);
		}

		StateManager.removeState=function(sign){
			delete StateManager._stateDic[sign];
		}

		StateManager.hasChange=function(sign){
			return StateManager._changeDic[sign];
		}

		StateManager.setChangeState=function(sign,changed){
			StateManager._changeDic[sign]=changed;
		}

		StateManager._stateDic={};
		StateManager._changeDic={};
		return StateManager;
	})()


	/**
	*本地文件日志类
	*@author ww
	*@version 1.0
	*
	*@created 2015-12-2 上午9:14:31
	*/
	//class laya.ide.managers.SysLog
	var SysLog=(function(){
		function SysLog(){}
		__class(SysLog,'laya.ide.managers.SysLog');
		SysLog.log=function(msg,type){
			(type===void 0)&& (type="log");
			var str;
			str=(Browser.now)+":"+type+":"+msg;
			console.log(str);
			if(SysLog.fileLogEnabled){
				FileTools.appendFile(FileManager.getAppPath("log.txt"),"\n"+str);
			}
		}

		SysLog.fileLogEnabled=true;
		return SysLog;
	})()


	/**
	*...
	*@author ww
	*/
	//class laya.ide.managers.SystemDragOverManager
	var SystemDragOverManager=(function(){
		function SystemDragOverManager(){}
		__class(SystemDragOverManager,'laya.ide.managers.SystemDragOverManager');
		SystemDragOverManager.init=function(){
			var canvas=Render.canvas.source;
			Browser.window.document.ondrop=SystemDragOverManager.dragOver;
		}

		SystemDragOverManager.dragOver=function(e){
			console.log("system dragover",e);
			var file;
			file=e.dataTransfer.files[0];
			SystemDragOverManager.handlerFile(file.path);
			e.preventDefault();
			return false;
		}

		SystemDragOverManager.handlerFile=function(path){
			console.log("handlerFIle:",path);
			if (path){
				var extension;
				extension=FileTools.getExtensionName(path);
				switch(extension){
					case "laya":
						ProjectManager.loadProject(path);
						break ;
					default :
						Notice.notify("openPAGE",[path]);
						break ;
					}
			}
		}

		return SystemDragOverManager;
	})()


	/**
	*
	*@author ww
	*@version 1.0
	*
	*@created 2016-1-4 上午10:30:59
	*/
	//class laya.ide.managers.TemplateManager
	var TemplateManager=(function(){
		function TemplateManager(){}
		__class(TemplateManager,'laya.ide.managers.TemplateManager');
		TemplateManager.getRootPath=function(){
			return FileManager.getAppPath("laya/template/");
		}

		TemplateManager.getDefaultFolder=function(){
			return TemplateManager.getTypedFolder("常用模板");
		}

		TemplateManager.getTypedFolder=function(type){
			return FileManager.getPath(TemplateManager.getRootPath(),type);
		}

		TemplateManager.getTemplateFolderPath=function(templateName,type){
			(type===void 0)&& (type="自定义模板");
			return FileManager.getPath(TemplateManager.getTypedFolder(type),templateName);
		}

		TemplateManager.getTemplateUIFilePath=function(templateName,type){
			(type===void 0)&& (type="自定义模板");
			return FileManager.getPath(TemplateManager.getTypedFolder(type),templateName+"/"+"UI"+"."+TypeManager.getExtension("UITemplate"));
		}

		TemplateManager.getTemplateUIResPath=function(templateName,type){
			(type===void 0)&& (type="自定义模板");
			return FileManager.getPath(TemplateManager.getTypedFolder(type),templateName+"/"+"res");
		}

		TemplateManager.getUIFilePath=function(templateFolder){
			return FileManager.getPath(templateFolder,"UI"+"."+TypeManager.getExtension("UITemplate"));
		}

		TemplateManager.getUIResPath=function(templateFolder){
			return FileManager.getPath(templateFolder,"res");
		}

		TemplateManager.init=function(){
			FileTools.ensurePath(TemplateManager.getRootPath());
		}

		TemplateManager.getTemplatePanelData=function(){
			var rst;
			var folders;
			folders=FileTools.getDirChildDirs(TemplateManager.getRootPath());
			var i=0,len=0;
			len=folders.length;
			var groupDatas;
			groupDatas=[];
			for(i=0;i<len;i++){
				groupDatas.push(TemplateManager.getTypedTemplateData(folders[i]));
			}
			rst={};
			rst.groups=groupDatas;
			return rst;
		}

		TemplateManager.getTypedTemplateData=function(path){
			var templates;
			templates=FileTools.getDirChildDirs(path);
			var typeName;
			typeName=FileTools.getFileName(path);
			var i=0,len=0;
			len=templates.length;
			var items;
			items=[];
			for(i=0;i<len;i++){
				items.push(TemplateManager.getTemplateFileData(templates[i],typeName));
			};
			var rst;
			rst={};
			rst.name=typeName;
			rst.items=items;
			return rst;
		}

		TemplateManager.getTemplateFileData=function(path,type){
			var templateName;
			templateName=FileTools.getFileName(path);
			var rst;
			rst={};
			rst.icon=FileTools.getAbsPath(FileManager.getPath(path,"icon.png"));
			rst.image=rst.icon;
			rst.title=templateName;
			rst.path=path;
			return rst;
		}

		TemplateManager.changeToTemplate=function(fileName){
			if(TypeManager.getFileType(fileName)!="Page"){
				Alert.show("UI文件才能转换为模板文件","提示");
				return;
			};
			var folderName;
			folderName=FileTools.getFileName(fileName);
			AddTemplate.instance.start(fileName,folderName);
		}

		TemplateManager.convertUIFileByPaths=function(srcFile,templateName,folderName){
			var tarFolder;
			tarFolder=TemplateManager.getTemplateFolderPath(templateName,folderName);
			if(FileTools.exist(tarFolder)){
				Confirm.show("目标文件已存在，是否覆盖？","提示",Utils1.bind(TemplateManager.convertUIFileToTemplate,null),[srcFile,tarFolder,templateName,folderName]);
				}else{
				TemplateManager.convertUIFileToTemplate(srcFile,tarFolder,templateName,folderName);
			}
		}

		TemplateManager.convertUIFileToTemplate=function(oldFile,tarFolder,templateName,folderName){
			console.log("convertUIFileToTemplate:",oldFile,tarFolder);
			var xml=FileManager.readJSONFile(oldFile);
			var view=new UIView();
			view.createView(xml);
			var tarFile;
			tarFile=TemplateManager.getTemplateUIFilePath(templateName,folderName);
			var resFolder;
			resFolder=TemplateManager.getTemplateUIResPath(templateName,folderName);
			var tarData;
			tarData=FileManager.readJSONFile(oldFile);
			var resUsed;
			resUsed=TemplateManager.findAllResUsed(tarData,resUsed);
			var resNameDic;
			resNameDic=TemplateManager.getAdptSkins(resUsed);
			var oldTxt;
			oldTxt=FileManager.readTxtFile(oldFile);
			var key;
			var newPath;
			var uiO;
			uiO=ObjectTools.getObj(oldTxt);
			for(key in resNameDic){
				TemplateManager.copySkinRes(key,resFolder,resNameDic[key]);
				resNameDic[key]="template"+"/"+templateName+"/"+resNameDic[key];
			}
			ObjectTools.replaceValue(uiO,resNameDic);
			FileManager.createTxtFile(tarFile,ObjectTools.getJsonString(uiO));
			URL.version[FileTools.getAbsPath(FileManager.getPath(tarFolder,"icon.png"))]=Math.random();
			Laya.timer.once(200,null,TemplateManager.createLittlePic,[view,tarFolder]);
		}

		TemplateManager.copySkinRes=function(skinPath,resFolder,resName){
			var srcP;
			srcP=FileManager.getResPath(skinPath);
			var tarP;
			tarP=FileTools.getPath(resFolder,resName);
			var i=0,len=0;
			len=TemplateManager.specialFiles.length;
			for(i=0;i<len;i++){
				TemplateManager.copyIfExists(StringTool.getReplace(srcP,".png",TemplateManager.specialFiles[i]),StringTool.getReplace(tarP,".png",TemplateManager.specialFiles[i]));
			}
		}

		TemplateManager.copyIfExists=function(src,tar){
			if(FileTools.exist(src)){
				FileTools.copyFile(src,tar);
			}
		}

		TemplateManager.createLittlePic=function(view,tarFolder){
			console.log("createLittlePic");
			var pic;
			var bounds;
			bounds=view.getSelfBounds();
			pic=view.drawToCanvas(bounds.width+bounds.x,bounds.height+bounds.y,0 ,0).source;
			console.log("viewBounds:",bounds.toString());
			console.log("pic:",pic);
			var baseStr;
			baseStr=pic.toDataURL("image/png");
			console.log("baseStr:",baseStr);
			baseStr=baseStr.replace(/^data:image\/\w+;base64,/,"");
			var bf;
			bf=new Device.Buffer(baseStr,'base64');
			FileManager.createBytesFile(FileManager.getPath(tarFolder,"icon.png"),bf);
			MessageManager.instance.show("转换成模板成功");
			Laya.timer.once(10,null,TemplateManager.freshCompPanel);
		}

		TemplateManager.freshCompPanel=function(){
			Notice.notify("Fresh_CompPanel");
		}

		TemplateManager.getAdptSkins=function(skinList){
			var renameDic;
			var i=0,len=0;
			len=skinList.length;
			renameDic={};
			for(i=0;i<len;i++){
				renameDic[skinList[i]]=true;
			};
			var tSkin;
			var usedNameDic;
			usedNameDic={};
			var tName;
			for(tSkin in renameDic){
				tName=FileTools.getFileNameWithExtension(tSkin);
				if(usedNameDic.hasOwnProperty(tName)){
					i=0;
					while(usedNameDic.hasOwnProperty(tName.replace(".",i+"."))){
						i++;
					}
					tName=tName.replace(".",i+".");
					}else{
				}
				usedNameDic[tName]=true;
				renameDic[tSkin]=tName;
			}
			return renameDic;
		}

		TemplateManager.renamePageSkins=function(pageFile,reNameDic){
			var oldTxt;
			oldTxt=pageFile;
			var key;
			var newPath;
			for(key in reNameDic){
				newPath=reNameDic[key];
				oldTxt=StringTool.getReplace(oldTxt,"\""+key+"\"","\""+newPath+"\"");
			}
			return oldTxt;
		}

		TemplateManager.findAllResUsedDic=function(pageData){
			var skinList;
			skinList=TemplateManager.findAllResUsed(pageData,[]);
			var renameDic;
			var i=0,len=0;
			len=skinList.length;
			renameDic={};
			for(i=0;i<len;i++){
				renameDic[skinList[i]]=true;
			}
			return renameDic;
		}

		TemplateManager.findAllResUsed=function(pageData,rst){
			if(!rst)rst=[];
			TemplateManager.getNodeSkin(pageData,rst);
			var i=0,len=0;
			var childList;
			var tChild;
			childList=pageData.child;
			len=childList.length;
			for(i=0;i<len;i++){
				tChild=childList[i];
				TemplateManager.findAllResUsed(tChild,rst);
			}
			return rst;
		}

		TemplateManager.getNodeSkin=function(node,rst){
			if(!rst)rst=[];
			var i=0,len=0;
			var tFrame;
			var frames;
			frames=TreeData.getNodeFrames(node);
			len=frames.length;
			for(i=0;i<len;i++){
				tFrame=frames[i];
				TemplateManager.getResByProps(tFrame.props,rst);
			}
			TemplateManager.getResByProps(node.props,rst);
			return rst;
		}

		TemplateManager.getResByProps=function(props,rst){
			if(!rst)rst=[];
			var key;
			for(key in props){
				if(TemplateManager.isResRefer(props[key])){
					rst.push(props[key]);
				}
			}
			return rst;
		}

		TemplateManager.isResRefer=function(value){
			if(!((typeof value=='string')))return false;
			if(ResFileManager.getRes(value))return true;
			return false;
		}

		TemplateManager.DefaultFolder="常用模板";
		TemplateManager.CustomFolder="自定义模板";
		TemplateManager.TemplateResFolder="template";
		__static(TemplateManager,
		['specialFiles',function(){return this.specialFiles=[".png","$down.png","$bar.png","$up.png"];}
		]);
		return TemplateManager;
	})()


	/**
	*本类定义不同的页面类型
	*@author ww
	*/
	//class laya.ide.managers.TypeManager
	var TypeManager=(function(){
		function TypeManager(){}
		__class(TypeManager,'laya.ide.managers.TypeManager');
		TypeManager.getExtension=function(type){
			var key;
			var tO=TypeManager.TypeO;
			for(key in tO){
				if(tO[key]==type){
					return key;
				}
			}
			console.log("未知type:",type);
			return "unKnow";
		}

		TypeManager.getFileType=function(path){
			var extention=FileTools.getExtensionName(path);
			if(!TypeManager.TypeO[extention])return "unKnow";
			return TypeManager.TypeO[extention];
		}

		TypeManager.Particle="Particle";
		TypeManager.Page="Page";
		TypeManager.Animation="Animation";
		TypeManager.UITemplate="UITemplate";
		TypeManager.Scene="Scene";
		__static(TypeManager,
		['TypeO',function(){return this.TypeO={
				"part":"Particle",
				"ui":"Page",
				"ani":"Animation",
				"scene":"Scene",
				"temp":"UITemplate"
		};}

		]);
		return TypeManager;
	})()


	/**
	*本类用于在ide中显示iframe
	*@author ww
	*@version 1.0
	*
	*@created 2015-10-21 上午11:23:12
	*/
	//class laya.ide.managers.ViewRenderManager
	var ViewRenderManager=(function(){
		function ViewRenderManager(){}
		__class(ViewRenderManager,'laya.ide.managers.ViewRenderManager');
		ViewRenderManager.init=function(){
			if (ViewRenderManager.renderFrame)return;
			ViewRenderManager.renderHit.name="renderHit";
			ViewRenderManager.renderHit.mouseEnabled=true;
			ViewRenderManager.renderHit.on("dragDrop",null,ViewRenderManager.renderDragDrop);
			ViewRenderManager.renderFrame=Browser.createElement("iframe");
			ViewRenderManager.renderFrame.id="viewrender";
			ViewRenderManager.renderFrame.width="400";
			ViewRenderManager.renderFrame.height="300";
			ViewRenderManager.renderFrame.left="400";
			ViewRenderManager.renderFrame.top="400";
			ViewRenderManager.style=ViewRenderManager.renderFrame.style;
			ViewRenderManager.style.position="absolute";
			ViewRenderManager.style.top="100px";
			ViewRenderManager.style.left="220px";
			ViewRenderManager.style["z-index"]="-1";
			ViewRenderManager.style.border="0";
			ViewRenderManager.render=ViewRenderManager.renderFrame.contentWindow;
			ViewRenderManager.renderFrame.addEventListener("load",function(){
				ViewRenderManager.render=ViewRenderManager.renderFrame.contentWindow.renderBinds;
				ViewRenderManager.window=ViewRenderManager.renderFrame.contentWindow;
				console.log("renderFrame loaded");
				Laya.timer.once(200,null,ViewRenderManager.loaded);
			},false)
		}

		ViewRenderManager.renderDragDrop=function(e){
			console.log("renderDragDrop");
			var point=DisControlTool.getMousePoint(ViewRenderManager.renderHit);
			console.log("render mouse:",point.x,point.y);
			e.data.dropX=point.x;
			e.data.dropY=point.y;
			Notice.notify("DROP_RENDER",[e]);
		}

		ViewRenderManager.renderMouseHandler=function(e){
			if(!ViewRenderManager.window)return;
			var point;
			point=DisControlTool.getMousePoint(ViewRenderManager.renderHit);
			var evt;
			evt=Browser.document.createEvent("MouseEvents");
			evt.initMouseEvent(
			e.type,
			true,
			true,
			Browser.document.defaultView,
			0,
			point.x,
			point.y,
			point.x,
			point.y);
			ViewRenderManager.window.dispatchEvent(evt);
			console.log("re patch event:",evt,point.x,point.y);
		}

		ViewRenderManager.loaded=function(){
			Notice.listen("RenderInited",null,ViewRenderManager.renderInited);
			if(ViewRenderManager.render)
				ViewRenderManager.render.setNotice(Notice.I);
			ViewRenderManager.eDispatcher.event("complete");
			ViewRenderManager.adpt();
		}

		ViewRenderManager.renderInited=function(){
			console.log("renderInited");
		}

		ViewRenderManager.adpt=function(){
			if (laya.ide.managers.ViewRenderManager.renderFrame){
				var pos=new Point();
				pos=UIPanel.instance.localToGlobal(pos);
				var dLen=0;
				dLen=25;
				ViewRenderManager.renderHit.width=UIPanel.instance.width;
				ViewRenderManager.renderHit.height=UIPanel.instance.height-dLen;
				ViewRenderManager.renderHit.x=UIPanel.instance.x;
				ViewRenderManager.renderHit.y=UIPanel.instance.y+dLen;
				laya.ide.managers.ViewRenderManager.style.top=pos.y+dLen;
				laya.ide.managers.ViewRenderManager.style.left=pos.x;
				laya.ide.managers.ViewRenderManager.renderFrame.width=ViewRenderManager.renderHit.width;
				laya.ide.managers.ViewRenderManager.renderFrame.height=ViewRenderManager.renderHit.height;
				ViewRenderManager.hitBounds.width=ViewRenderManager.renderHit.width;
				ViewRenderManager.hitBounds.height=ViewRenderManager.renderHit.height;
				ViewRenderManager.hitBounds.x=0;
				ViewRenderManager.hitBounds.y=0;
				ViewRenderManager.renderHit.setBounds(ViewRenderManager.hitBounds);
			}
		}

		ViewRenderManager.setRender=function(url){
			ViewRenderManager.renderFrame.src=url;
		}

		ViewRenderManager.show=function(){
			Browser.document.body.appendChild(ViewRenderManager.renderFrame);
			UIPanel.instance.parent.addChild(ViewRenderManager.renderHit);
		}

		ViewRenderManager.hide=function(){
			Browser.removeElement(ViewRenderManager.renderFrame);
			ViewRenderManager.renderFrame.src="";
			ViewRenderManager.renderHit.removeSelf();
		}

		ViewRenderManager.renderFrame=null
		ViewRenderManager.render=null
		ViewRenderManager.style=null
		ViewRenderManager.window=null
		__static(ViewRenderManager,
		['eDispatcher',function(){return this.eDispatcher=new EventDispatcher();},'renderHit',function(){return this.renderHit=new Sprite();},'hitBounds',function(){return this.hitBounds=new Rectangle(0,0);}
		]);
		return ViewRenderManager;
	})()


	/**
	*显示对象常用的工具类
	*@author ww
	*/
	//class laya.ide.utils.DisTools
	var DisTools=(function(){
		function DisTools(){}
		__class(DisTools,'laya.ide.utils.DisTools');
		DisTools.showToStage=function(dis,offX,offY){
			(offX===void 0)&& (offX=0);
			(offY===void 0)&& (offY=0);
			var rec=dis.getBounds();
			dis.x=Laya.stage.mouseX+offX;
			dis.y=Laya.stage.mouseY+offY;
			if (dis.x+rec.width > Laya.stage.width){
				dis.x-=rec.width+offX;
			}
			if (dis.y+rec.height > Laya.stage.height){
				dis.y-=rec.height+offY;
			}
		}

		DisTools.showToCenter=function(dis,parent){
			dis.x=0.5 *(parent.width-dis.width);
			dis.y=0.5 *(parent.height-dis.height);
			parent.addChild(dis);
		}

		DisTools.getDisDesO=function(dis){
			if (!dis)
				return null;
			var rst={};
			if(dis.name){
				rst.label=TraceTool.getClassName(dis)+"("+dis.name+")";
				}else{
				rst.label=TraceTool.getClassName(dis);
			}
			if(dis["comXml"]){
				rst.compId=dis["comXml"]["compId"];
			}
			rst.path=dis;
			rst.files=[];
			rst.dirs=[];
			rst.childs=[];
			rst.isDirectory=true;
			return rst;
		}

		DisTools.getDisTreeArr=function(sp,filterFun){
			var tTreeO=DisTools.getDisTreeO(sp,filterFun);
			var rst=[];
			DisTools.getTreeArr(tTreeO,rst);
			return rst;
		}

		DisTools.getTreeArr=function(treeO,arr,filterFun){
			arr.push(treeO);
			var tArr=treeO.childs||treeO.child;
			var i=0,len=tArr.length;
			for (i=0;i < len;i++){
				if (tArr[i].isDirectory){
					DisTools.getTreeArr(tArr[i],arr);
				}
				else{
					arr.push(tArr[i]);
				}
			}
		}

		DisTools.getDisTreeO=function(dis,filterFun){
			var rst=DisTools.getDisDesO(dis);
			var i=0,len=0;
			var tChild;
			var tO;
			len=dis.numChildren;
			for (i=0;i < len;i++){
				tChild=dis.getChildAt(i);
				if(filterFun!=null&&!filterFun(tChild)){
					continue ;
				}
				tO=DisTools.getDisTreeO(tChild,filterFun);
				tO.nodeParent=rst;
				tO.hasChild=tO.childs.length > 0;
				tO.isDirectory=tO.hasChild;
				rst.dirs.push(tO);
				rst.childs.push(tO);
			}
			rst.hasChild=rst.childs.length > 0;
			return rst;
		}

		return DisTools;
	})()


	/**
	*编辑页基类
	*@author ww
	*/
	//class laya.ide.viewer.SceneBase
	var SceneBase=(function(){
		function SceneBase(){
			this.data=null;
			this._path=null;
			this._title=null;
			this._changed=false;
		}

		__class(SceneBase,'laya.ide.viewer.SceneBase');
		var __proto=SceneBase.prototype;
		Laya.imps(__proto,{"laya.ide.viewer.IViewer":true})
		__proto.setUp=function(parent){}
		//trace("SceneBase setUp");
		__proto.save=function(){}
		__proto.open=function(){}
		__proto.removeSelf=function(){
			ViewRenderManager.hide();
			Notice.cancel("ResItemClick",this,this.onResClick);
			Notice.cancel("Prop_change",this,this.propChange);
			Notice.cancel("DROP_RENDER",this,this.renderDragDrop);
		}

		__proto.dealAction=function(funName,param){
			if ((typeof (this[funName])=='function')){
				this[funName].apply(this,param);
			}
		}

		__proto.show=function(){
			ViewRenderManager.show();
			Notice.listen("ResItemClick",this,this.onResClick,null,true);
			Notice.listen("Prop_change",this,this.propChange,null,true);
			Notice.listen("DROP_RENDER",this,this.renderDragDrop,null,true);
		}

		__proto.renderDragDrop=function(e){}
		__proto.propChange=function(key,data){}
		__proto.onResClick=function(data){}
		__proto.goBack=function(){}
		__proto.goForward=function(){}
		__getset(0,__proto,'pagePath',function(){
			return this._path;
			},function(path){
			this._path=path;
			this._title=FileTools.getFileName(this._path);
		});

		__getset(0,__proto,'title',function(){
			return this._title;
		});

		__getset(0,__proto,'hasChange',function(){
			return this._changed;
		});

		__getset(0,__proto,'design',function(){
			return this;
		});

		return SceneBase;
	})()


	/**
	*...
	*@author ww
	*/
	//class laya.test.TempData
	var TempData=(function(){
		function TempData(){}
		__class(TempData,'laya.test.TempData');
		TempData.temTreeData=null
		return TempData;
	})()


	/**
	*编辑器全局静态入口
	*@author yung
	*/
	//class Sys
	var Sys=(function(){
		function Sys(){};
		__class(Sys,'Sys');
		Sys.log=function(__args){
			var args=arguments;
			Sys.print("log",args,"#0080C0");
		}

		Sys.error=function(__args){
			var args=arguments;
			Sys.print("error",args,"#FF0000");
		}

		Sys.warn=function(__args){
			var args=arguments;
			Sys.print("warn",args,"#9B9B00");
		}

		Sys.plugin=function(__args){
			var args=arguments;
			Sys.print("plugin",args,"#007300");
		}

		Sys.print=function(type,args,color){
			var msg="";
			for (var i=0;i < args.length;i++){
				msg+=args[i]+" ";
			}
			console.log("%c ["+type+"]"+msg,"color: "+color+"");
		}

		Sys.alert=function(msg){
			alert(msg);
			SysLog.log(msg,"alert");
		}

		Sys.lang=function(body,__args){
			var args=[];for(var i=1,sz=arguments.length;i<sz;i++)args.push(arguments[i]);
			var i=0,len=0;
			len=args.length;
			for (i=0;i < len;i++){
				body=body.replace("{"+i+"}",args[i]);
			}
			return body;
		}

		return Sys;
	})()


	/**
	*...
	*@author ww
	*/
	//class tools.PreLoads
	var PreLoads=(function(){
		function PreLoads(){
			this.handler=null;
			this.mXML=null;
			this.mData=null;
		}

		__class(PreLoads,'tools.PreLoads');
		var __proto=PreLoads.prototype;
		__proto.loadRes=function(){
			Laya.loader.load([{url:"view.json",type:"atlas"},{url:"comp.json",type:"atlas"},{url:"components.json",type:"atlas"},{url:"play.json",type:"atlas"}],Handler.create(this,this.loadXMLFile),Handler.create(this,this.progressFun));
		}

		__proto.progressFun=function(){
			console.log("load progress:");
		}

		__proto.loadXMLFile=function(){
			console.log("loadXMLFile");
			this.xmlLoaded(null);
		}

		__proto.xmlLoaded=function(data){
			RenderManager.I.initRenders();
			this.handler.run();
		}

		PreLoads.TestMode=false;
		return PreLoads;
	})()


	/**
	*
	*@author ww
	*@version 1.0
	*
	*@created 2015-11-16 下午1:26:53
	*/
	//class ide.event.Notices
	var Notices=(function(){
		function Notices(){}
		__class(Notices,'ide.event.Notices');
		Notices.RENDER_INITED="RenderInited";
		return Notices;
	})()


	/**
	*...
	*@author WW
	*/
	//class viewRender.ViewRenderBase
	var ViewRenderBase=(function(){
		function ViewRenderBase(){
			this.initFuns();
		}

		__class(ViewRenderBase,'viewRender.ViewRenderBase');
		var __proto=ViewRenderBase.prototype;
		__proto.initFuns=function(){
			Browser.window.renderBinds={};
			Browser.window.renderBinds.setData=Utils1.bind(this.setData,this);
			Browser.window.renderBinds.updateData=Utils1.bind(this.updateData,this);
			Browser.window.renderBinds.clearRender=Utils1.bind(this.clearRender,this);
			Browser.window.renderBinds.sizeRender=Utils1.bind(this.sizeRender,this);
			Browser.window.renderBinds.posRender=Utils1.bind(this.posRender,this);
			Browser.window.renderBinds.getRenderData=Utils1.bind(this.getRenderData,this);
			Browser.window.renderBinds.getStage=Utils1.bind(this.getStage,this);
			Browser.window.renderBinds.setNotice=Utils1.bind(this.setNotice,this);
		}

		__proto.getRenderData=function(){
			return null;
		}

		__proto.setData=function(data){}
		__proto.updateData=function(data){}
		__proto.clearRender=function(){}
		__proto.sizeRender=function(width,height){}
		__proto.posRender=function(x,y){}
		__proto.getStage=function(){
			return Laya.stage;
		}

		__proto.setNotice=function(notice){
			Notice.I=notice;
			Notice.notify("RenderInited");
		}

		return ViewRenderBase;
	})()


	/**
	*...
	*@author laya
	*/
	//class Config
	var Config=(function(){
		function Config(){};
		__class(Config,'Config');
		Config.showLog=false;
		Config.atlasEnable=false;
		Config.atlasLimitWidth=0;
		Config.atlasLimitHeight=0;
		Config.showCanvasMark=false;
		Config.CPUMemoryLimit=120 *1024 *1024;
		Config.GPUMemoryLimit=160 *1024 *1024;
		Config.animationInterval=30;
		return Config;
	})()


	/**
	*...
	*@author laya
	*/
	//class laya.asyn.Asyn
	var Asyn=(function(){
		function Asyn(){};
		__class(Asyn,'laya.asyn.Asyn');
		Asyn.wait=function(conditions){
			var d=new Deferred();
			if (conditions.indexOf("event:")==0){
				Asyn.onceEvent(conditions.substr(8),function(){
					d.callback();
				});
				return null;
			}
			d.loopIndex=Asyn._loopCount;
			return Asyn._Deferreds[conditions]=d;
		}

		Asyn.callLater=function(d){
			Asyn._callLater.push(d);
		}

		Asyn.notify=function(conditions,value){
			var o=Asyn._Deferreds[conditions];
			if (o){
				Asyn._Deferreds[conditions]=null;
				o.callback(value);
			}
		}

		Asyn.load=function(url,type){
			return Asyn.loadDo(url,type,new Deferred());
		}

		Asyn.sleep=function(delay){
			if (delay < 1){
				if (Asyn._loopsCount >=Asyn.loops[Asyn._loopsIndex].length){
					Asyn._loopsCount++;
					Asyn.loops[Asyn._loopsIndex].push(new Deferred());
					}else {
					var d=Asyn.loops[Asyn._loopsIndex][Asyn._loopsCount];
					d._reset();
					Asyn._loopsCount++;
				}
				return;
			}
			Asyn.onceTimer(delay,new Deferred());
		}

		Asyn._loop_=function(){
			Deferred._TIMECOUNT_++;
			Asyn._loopCount++;
			var sz=0;
			if ((sz=Asyn._loopsCount)> 0){
				var _loops=Asyn.loops[Asyn._loopsIndex];
				Asyn._loopsCount=0;
				Asyn._loopsIndex=(Asyn._loopsIndex+1)% 2;
				for (var i=0;i < sz;i++)
				_loops[i].callback();
			}
			if ((sz=Asyn._callLater.length)> 0){
				var accept=Asyn._callLater;
				Asyn._callLater=[];
				for (i=0,sz=accept.length;i < sz;i++){
					var d=accept[i];
					d.callback();
				}
			}
		}

		Asyn._Deferreds={};
		Asyn.loops=[[],[]];
		Asyn._loopsIndex=0;
		Asyn._loopCount=0;
		Asyn._loopsCount=0;
		Asyn._callLater=[];
		Asyn._waitFunctionId=0;
		Asyn.loadDo=null
		Asyn.onceEvent=null
		Asyn.onceTimer=null
		Asyn._caller_=null
		Asyn._callback_=null
		Asyn._nextLine_=0;
		return Asyn;
	})()


	/**
	*...
	*@author laya
	*/
	//class laya.asyn.Deferred
	var Deferred=(function(){
		function Deferred(){
			this._caller=null;
			this._callback=null;
			this._nextLine=0;
			this._value=null;
			this._createTime=0;
			this._reset();
		}

		__class(Deferred,'laya.asyn.Deferred');
		var __proto=Deferred.prototype;
		__proto.setValue=function(v){
			this._value=v;
		}

		__proto.getValue=function(){
			return this._value;
		}

		__proto._reset=function(){
			this._caller=Asyn._caller_;
			this._callback=Asyn._callback_;
			this._nextLine=Asyn._nextLine_;
			this._createTime=Deferred._TIMECOUNT_;
		}

		__proto.callback=function(value){
			(arguments.length > 0)&& (this._value=value);
			if (this._createTime==Deferred._TIMECOUNT_)
				Asyn.callLater(this);
			else this._callback && this._callback.call(this._caller,this._nextLine);
		}

		__proto.errback=function(value){
			(arguments.length > 0)&& (this._value=value);
			this._callback && this._callback.call(this._caller,this._nextLine);
		}

		Deferred._TIMECOUNT_=0;
		return Deferred;
	})()


	/**
	*位图字体，用于定义位图字体信息
	*/
	//class laya.display.BitmapFont
	var BitmapFont=(function(){
		function BitmapFont(){
			this.fontSize=12;
			this.autoScaleSize=false;
			this._texture=null;
			this._fontCharDic={};
			this._complete=null;
			this._path=null;
			this._maxHeight=0;
			this._maxWidth=0;
			this._spaceWidth=10;
		}

		__class(BitmapFont,'laya.display.BitmapFont');
		var __proto=BitmapFont.prototype;
		/**
		*通过指定位图字体文件路径，加载位图字体文件
		*@param path 位图字体文件的路径
		*@param complete 加载完成的回调，通知上层字体文件已经完成加载并解析
		*/
		__proto.loadFont=function(path,complete){
			this._path=path;
			this._complete=complete;
			Laya.loader.load([{url:this._path,type:"xml"},{url:this._path.replace(".fnt",".png"),type:"image"}],Handler.create(this,this.onLoaded));
		}

		__proto.onLoaded=function(){
			this.parseFont(Loader.getRes(this._path),Loader.getRes(this._path.replace(".fnt",".png")));
			this._complete && this._complete.run();
		}

		/**
		*解析字体文件
		*@param xml 字体文件XML
		*@param texture 字体的纹理
		*/
		__proto.parseFont=function(xml,texture){
			this._texture=texture;
			var tX=0;
			var tScale=1;
			var tInfo=xml.getElementsByTagName("info");
			this.fontSize=Laya.__parseInt(tInfo[0].attributes["size"].nodeValue);
			var chars=xml.getElementsByTagName("char");
			var i=0;
			for (i=0;i < chars.length;i++){
				var tAttribute=chars[i].attributes;
				var tId=Laya.__parseInt(tAttribute["id"].nodeValue);
				var xOffset=Laya.__parseInt(tAttribute["xoffset"].nodeValue)/ tScale;
				var yOffset=Laya.__parseInt(tAttribute["yoffset"].nodeValue)/ tScale;
				var xAdvance=Laya.__parseInt(tAttribute["xadvance"].nodeValue)/ tScale;
				var region=new Rectangle();
				region.x=Laya.__parseInt(tAttribute["x"].nodeValue);
				region.y=Laya.__parseInt(tAttribute["y"].nodeValue);
				region.width=Laya.__parseInt(tAttribute["width"].nodeValue);
				region.height=Laya.__parseInt(tAttribute["height"].nodeValue);
				var tTexture=Texture.create(texture,region.x,region.y,region.width,region.height,xOffset,yOffset);
				this._maxHeight=Math.max(this._maxHeight,tTexture.height);
				this._maxWidth=Math.max(this._maxWidth,tTexture.width);
				this._fontCharDic[tId]=tTexture;
			}
			if (this.getCharTexture(" "))this.setSpaceWidth(this.getCharWidth(" "));
		}

		/**
		*通过字符找到相对应的字体纹理
		*/
		__proto.getCharTexture=function(char){
			return this._fontCharDic[char.charCodeAt(0)];
		}

		/**
		*销毁位图字体，调用Text.unregisterBitmapFont时，默认会销毁
		*/
		__proto.destory=function(){
			var tTexture=null;
			for (var p in this._fontCharDic){
				tTexture=this._fontCharDic[p];
				if (tTexture)tTexture.destroy();
				delete this._fontCharDic[p];
			}
			this._texture.destroy();
		}

		/**
		*设置空格的宽（如果有字体库有空格，这里就可以不用设置了）
		*@param spaceWidth 宽度，单位为像素
		*/
		__proto.setSpaceWidth=function(spaceWidth){
			this._spaceWidth=spaceWidth;
		}

		/**
		*得到单个字符的宽度
		*/
		__proto.getCharWidth=function(char){
			if (char==" ")return this._spaceWidth;
			var tTexture=this.getCharTexture(char)
			if (tTexture)return tTexture.width+tTexture.offsetX *2;
			return 0;
		}

		/**
		*得到一段文本的宽度
		*/
		__proto.getTextWidth=function(text){
			var tWidth=0;
			for (var i=0,n=text.length;i < n;i++){
				tWidth+=this.getCharWidth(text[i]);
			}
			return tWidth;
		}

		/**
		*得到最大字符的宽
		*/
		__proto.getMaxWidth=function(){
			return this._maxWidth;
		}

		/**
		*得到最大字符高度
		*/
		__proto.getMaxHeight=function(){
			return this._maxHeight;
		}

		/**
		*@private
		*画一段文字
		*/
		__proto.drawText=function(text,sprite,drawX,drawY,align,width){
			var tWidth=0;
			var tTexture;
			for (var i=0,n=text.length;i < n;i++){
				tWidth+=this.getCharWidth(text[i]);
			};
			var dx=0;
			align==="center" && (dx=(width-tWidth)/ 2);
			align==="right" && (dx=(width-tWidth));
			var tX=0;
			for (i=0,n=text.length;i < n;i++){
				tTexture=this.getCharTexture(text[i]);
				if (tTexture)sprite.graphics.drawTexture(tTexture,drawX+tX+dx,drawY,tTexture.width,tTexture.height);
				tX+=this.getCharWidth(text[i]);
			}
		}

		return BitmapFont;
	})()


	/**
	*<code>Style</code> 类是元素样式定义类。
	*/
	//class laya.display.css.Style
	var Style=(function(){
		function Style(){
			this.alpha=1;
			this.visible=true;
			this.scrollRect=null;
			this.blendMode=null;
			this._type=0;
			this._tf=Style._TF_EMPTY;
		}

		__class(Style,'laya.display.css.Style');
		var __proto=Style.prototype;
		/**销毁此对象。*/
		__proto.destroy=function(){
			this.scrollRect=null;
		}

		/**@private */
		__proto.render=function(sprite,context,x,y){}
		/**@private */
		__proto.getCSSStyle=function(){
			return CSSStyle.EMPTY;
		}

		/**@private */
		__proto._enableLayout=function(){
			return false;
		}

		/**表示元素是否显示为块级元素。*/
		__getset(0,__proto,'block',function(){
			return (this._type & 0x1)!=0;
		});

		/**表示元素的上内边距。*/
		__getset(0,__proto,'paddingTop',function(){
			return 0;
		});

		/**X 轴缩放值。*/
		__getset(0,__proto,'scaleX',function(){
			return this._tf.scaleX;
			},function(value){
			this._tf===Style._TF_EMPTY && (this._tf=Style._createTransform());
			this._tf.scaleX=value;
		});

		/**Y 轴缩放值。*/
		__getset(0,__proto,'scaleY',function(){
			return this._tf.scaleY;
			},function(value){
			this._tf===Style._TF_EMPTY && (this._tf=Style._createTransform());
			this._tf.scaleY=value;
		});

		/**元素应用的 2D 或 3D 转换的值。该属性允许我们对元素进行旋转、缩放、移动或倾斜。*/
		__getset(0,__proto,'transform',function(){
			return this._tf;
			},function(value){
			this._tf=value==='none' || !value ? Style._TF_EMPTY :value;
		});

		/**定义转换，只是用 X 轴的值。*/
		__getset(0,__proto,'translateX',function(){
			return this._tf.translateX;
			},function(value){
			this._tf===Style._TF_EMPTY && (this._tf=Style._createTransform());
			this._tf.translateX=value;
		});

		/**定义转换，只是用 Y 轴的值。*/
		__getset(0,__proto,'translateY',function(){
			return this._tf.translateY;
			},function(value){
			this._tf===Style._TF_EMPTY && (this._tf=Style._createTransform());
			this._tf.translateY=value;
		});

		/**定义旋转角度。*/
		__getset(0,__proto,'rotate',function(){
			return this._tf.rotate;
			},function(value){
			this._tf===Style._TF_EMPTY && (this._tf=Style._createTransform());
			this._tf.rotate=value;
		});

		/**定义沿着 X 轴的 2D 倾斜转换。*/
		__getset(0,__proto,'skewX',function(){
			return this._tf.skewX;
			},function(value){
			this._tf===Style._TF_EMPTY && (this._tf=Style._createTransform());
			this._tf.skewX=value;
		});

		/**定义沿着 Y 轴的 2D 倾斜转换。*/
		__getset(0,__proto,'skewY',function(){
			return this._tf.skewY;
			},function(value){
			this._tf===Style._TF_EMPTY && (this._tf=Style._createTransform());
			this._tf.skewY=value;
		});

		/**是否为绝对定位。*/
		__getset(0,__proto,'absolute',function(){
			return true;
		});

		/**表示元素的左内边距。*/
		__getset(0,__proto,'paddingLeft',function(){
			return 0;
		});

		Style.__init__=function(){
			Style._TF_EMPTY=Style._createTransform();
			Style.EMPTY=new Style();
		}

		Style._createTransform=function(){
			return {translateX:0,translateY:0,scaleX:1,scaleY:1,rotate:0,skewX:0,skewY:0};
		}

		Style.EMPTY=null
		Style._TF_EMPTY=null
		return Style;
	})()


	/**
	*<code>Font</code> 类是字体显示定义类。
	*@author laya
	*/
	//class laya.display.css.Font
	var Font=(function(){
		function Font(src){
			this._type=0;
			this._weight=0;
			this._decoration=null;
			this._text=null;
			this.indent=0;
			this._color=Color.create(Font.defaultColor);
			this.family=Font.defaultFamily;
			this.stroke=Font._STROKE;
			this.size=Font.defaultSize;
			src && src!==Font.EMPTY && src.copyTo(this);
		}

		__class(Font,'laya.display.css.Font');
		var __proto=Font.prototype;
		/**
		*设置字体样式字符串。
		*@param value
		*/
		__proto.set=function(value){
			this._text=null;
			var strs=value.split(' ');
			for (var i=0,n=strs.length;i < n;i++){
				var str=strs[i];
				switch (str){
					case 'italic':
						this.italic=true;
						continue ;
					case 'bold':
						this.bold=true;
						continue ;
					}
				if (str.indexOf('px')> 0){
					this.size=Laya.__parseInt(str);
					this.family=strs[i+1];
					i++;
					continue ;
				}
			}
		}

		/**
		*返回字体样式字符串。
		*@return
		*/
		__proto.toString=function(){
			this._text=""
			this.italic && (this._text+="italic ");
			this.bold && (this._text+="bold ");
			return this._text+=this.size+"px "+this.family;
		}

		/**
		*将当前的属性值复制到传入的 <code>Font</code> 对象。
		*@param dec
		*/
		__proto.copyTo=function(dec){
			dec._type=this._type;
			dec._text=this._text;
			dec._weight=this._weight;
			dec._color=this._color;
			dec.family=this.family;
			dec.stroke=this.stroke !=Font._STROKE ? this.stroke.slice():Font._STROKE;
			dec.indent=this.indent;
			dec.size=this.size;
		}

		/**
		*表示颜色字符串。
		*/
		__getset(0,__proto,'color',function(){
			return this._color.strColor;
			},function(value){
			this._color=Color.create(value);
		});

		/**
		*规定添加到文本的修饰。
		*/
		__getset(0,__proto,'decoration',function(){
			return this._decoration ? this._decoration.value :"none";
			},function(value){
			var strs=value.split(' ');
			this._decoration || (this._decoration={});
			switch (strs[0]){
				case '_':
					this._decoration.type='underline'
					break ;
				case '-':
					this._decoration.type='line-through'
					break ;
				case 'overline':
					this._decoration.type='overline'
					break ;
				default :
					this._decoration.type=strs[0];
				}
			strs[1] && (this._decoration.color=Color.create(strs));
			this._decoration.value=value;
		});

		/**
		*表示是否为斜体。
		*/
		__getset(0,__proto,'italic',function(){
			return (this._type & 0x200)!==0;
			},function(value){
			value ? (this._type |=0x200):(this._type &=~0x200);
		});

		/**
		*表示是否为粗体。
		*/
		__getset(0,__proto,'bold',function(){
			return (this._type & 0x800)!==0;
			},function(value){
			value ? (this._type |=0x800):(this._type &=~0x800);
		});

		/**
		*表示是否为密码格式。
		*/
		__getset(0,__proto,'password',function(){
			return (this._type & 0x400)!==0;
			},function(value){
			value ? (this._type |=0x400):(this._type &=~0x400);
		});

		/**
		*文本的粗细。
		*/
		__getset(0,__proto,'weight',function(){
			return ""+this._weight;
			},function(value){
			var weight=0;
			switch (value){
				case 'normal':
					break ;
				case 'bold':
					this.bold=true;
					weight=700;
					break ;
				case 'bolder':
					weight=800;
					break ;
				case 'lighter':
					weight=100;
					break ;
				default :
					weight=Laya.__parseInt(value);
				}
			this._weight=weight;
			this._text=null;
		});

		Font.__init__=function(){
			Font.EMPTY=new Font(null);
		}

		Font.EMPTY=null
		Font.defaultColor="#000000";
		Font.defaultSize=12;
		Font.defaultFamily="Arial";
		Font.defaultFont="12px Arial";
		Font._STROKE=[0,"#000000"];
		Font._ITALIC=0x200;
		Font._PASSWORD=0x400;
		Font._BOLD=0x800;
		return Font;
	})()


	/**
	*<code>Graphics</code> 类用于创建绘图显示对象。
	*@see laya.display.Sprite#graphics
	*/
	//class laya.display.Graphics
	var Graphics=(function(){
		function Graphics(){
			//this._sp=null;
			this._one=null;
			this._cmds=null;
			//this._temp=null;
			//this._bounds=null;
			//this._rstBoundPoints=null;
			this._render=this._renderEmpty;
			this._render=this._renderEmpty;
		}

		__class(Graphics,'laya.display.Graphics');
		var __proto=Graphics.prototype;
		/**
		*<p>销毁此对象。</p>
		*/
		__proto.destroy=function(){
			this.clear();
			this._temp=null;
			this._bounds=null;
			this._rstBoundPoints=null;
			this._sp && (this._sp._renderType=0);
			this._sp=null;
		}

		/**
		*<p>清理此对象。</p>
		*/
		__proto.clear=function(){
			this._one=null;
			this._render=this._renderEmpty;
			this._cmds=null;
			this._temp && (this._temp.length=0);
			this._sp._renderType &=~0x01;
			this._repaint();
		}

		/**
		*返回命令是否为空
		*/
		__proto.empty=function(){
			return this._one===null && (!this._cmds || this._cmds.length===0);
		}

		/**
		*@private
		*重绘此对象。
		*/
		__proto._repaint=function(){
			this._temp && (this._temp.length=0);
			this._sp && this._sp.repaint();
		}

		/**@private */
		__proto._isOnlyOne=function(){
			return !this._cmds || this._cmds.length===0;
		}

		/**
		*获取位置及宽高信息矩阵(比较耗，尽量少用)。
		*/
		__proto.getBounds=function(){
			if (!this._bounds || !this._temp || this._temp.length < 1){
				this._bounds=Rectangle._getWrapRec(this.getBoundPoints(),this._bounds)
			}
			return this._bounds;
		}

		/**
		*@private
		*获取端点列表。
		*@return
		*/
		__proto.getBoundPoints=function(){
			if (!this._temp || this._temp.length < 1)
				this._temp=this.getCmdPoints();
			return this._rstBoundPoints=Utils1.setValueArr(this._rstBoundPoints,this._temp);
		}

		__proto.getCmdPoints=function(){
			var context=Render.context;
			var cmds=this._cmds;
			var rst;
			rst=this._temp || (this._temp=[]);
			rst.length=0;
			if (!cmds && this._one !=null){
				cmds=[this._one];
			}
			if (!cmds)
				return [];
			var matrixs;
			matrixs=[];
			var tMatrix=new Matrix();
			var tempMatrix=Graphics._tempMatrix;
			var cmd;
			for (var i=0,n=cmds.length;i < n;i++){
				cmd=cmds[i];
				switch (cmd.callee){
					case context.save:
						matrixs.push(tMatrix);
						tMatrix=tMatrix.clone();
						break ;
					case context.restore:
						tMatrix=matrixs.pop();
						break ;
					case context._scale:
						tempMatrix.identity();
						tempMatrix.translate(-cmd[2],-cmd[3]);
						tempMatrix.scale(cmd[0],cmd[1]);
						tempMatrix.translate(cmd[2],cmd[3]);
						this.switchMatrix(tMatrix,tempMatrix);
						break ;
					case context._rotate:
						tempMatrix.identity();
						tempMatrix.translate(-cmd[1],-cmd[2]);
						tempMatrix.rotate(cmd[0]);
						tempMatrix.translate(cmd[1],cmd[2]);
						this.switchMatrix(tMatrix,tempMatrix);
						break ;
					case context._translate:
						tempMatrix.identity();
						tempMatrix.translate(cmd[0],cmd[1]);
						this.switchMatrix(tMatrix,tempMatrix);
						break ;
					case context._transform:
						tempMatrix.identity();
						tempMatrix.translate(-cmd[1],-cmd[2]);
						tempMatrix.concat(cmd[0]);
						tempMatrix.translate(cmd[1],cmd[2]);
						this.switchMatrix(tMatrix,tempMatrix);
						break ;
					case context._drawTexture:
						if (cmd[3] && cmd[4]){
							Graphics.addPointArrToRst(rst,Rectangle._getBoundPointS(cmd[1],cmd[2],cmd[3],cmd[4]),tMatrix);
							}else {
							var tex=cmd[0];
							Graphics.addPointArrToRst(rst,Rectangle._getBoundPointS(cmd[1],cmd[2],tex.width,tex.height),tMatrix);
						}
						break ;
					case context._drawRect:
					case context._fillRect:
						Graphics.addPointArrToRst(rst,Rectangle._getBoundPointS(cmd[0],cmd[1],cmd[2],cmd[3]),tMatrix);
						break ;
					case context._drawCircle:
					case context._fillCircle:
						Graphics.addPointArrToRst(rst,Rectangle._getBoundPointS(cmd[0]-cmd[2],cmd[1]-cmd[2],cmd[2]+cmd[2],cmd[2]+cmd[2]),tMatrix);
						break ;
					case context._drawLine:
						Graphics.addPointArrToRst(rst,[cmd[0],cmd[1],cmd[2],cmd[3]],tMatrix);
						break ;
					case context.drawCurves:
						Graphics.addPointArrToRst(rst,Bezier.I.getBezierPoints(cmd[2]),tMatrix,cmd[0],cmd[1]);
						break ;
					case context._drawPoly:
						Graphics.addPointArrToRst(rst,cmd[2],tMatrix,cmd[0],cmd[1]);
						break ;
					case context._drawPath:
						Graphics.addPointArrToRst(rst,this.getPathPoints(cmd[2]),tMatrix,cmd[0],cmd[1]);
						break ;
					case context._drawPie:
					case context._drawPieWebGL:
						Graphics.addPointArrToRst(rst,this.getPiePoints(cmd[0],cmd[1],cmd[2],cmd[3],cmd[4]),tMatrix);
						break ;
					}
			}
			if (rst.length > 200){
				rst=Utils1.setValueArr(rst,Rectangle._getWrapRec(rst)._getBoundPoints());
			}else if (rst.length > 8)
			rst=GrahamScan.scanPList(rst);
			return rst;
		}

		__proto.switchMatrix=function(tMatix,tempMatrix){
			tempMatrix.concat(tMatix);
			tempMatrix.copy(tMatix);
		}

		/**
		*绘制纹理。
		*@param tex 纹理。
		*@param x X轴偏移量。
		*@param y Y轴偏移量。
		*@param width 宽度。
		*@param height 高度。
		*@param m 矩阵信息。
		*/
		__proto.drawTexture=function(tex,x,y,width,height,m){
			(width===void 0)&& (width=0);
			(height===void 0)&& (height=0);
			if (!width)width=tex.width;
			if (!height)height=tex.height;
			var args=[tex,x,y,width,height,m];
			if (this._one==null){
				this._one=args;
				this._render=this._renderOneImg;
				}else {
				this._render=this._renderAll;
				(this._cmds || (this._cmds=[])).length===0 && this._cmds.push(this._one);
				this._cmds.push(args);
			}
			args.callee=m ? Render.context._drawTextureWithTransform :Render.context._drawTexture;
			this._repaint();
		}

		__proto.textureLoaded=function(tex,param){
			tex.off("loaded",this,this.textureLoaded);
			param[3]=tex.width;
			param[4]=tex.height;
			this._repaint();
		}

		/**
		*绘制纹理对象。
		*@param tex
		*@param x
		*@param y
		*@param width
		*@param height
		*/
		__proto.drawRenderTarget=function(tex,x,y,width,height){
			var mat=new Matrix(1,0,0,-1,0,height);
			this.drawTexture(tex,x,y,width,height,mat);
		}

		/**
		*@private
		*保存到命令流。
		*@param fun
		*@param args
		*@return
		*/
		__proto._saveToCmd=function(fun,args){
			if (this._one==null){
				this._one=args;
				this._render=this._renderOne;
				}else {
				this._sp._renderType &=~0x01;
				this._render=this._renderAll;
				(this._cmds || (this._cmds=[])).length===0 && this._cmds.push(this._one);
				this._cmds.push(args);
			}
			args.callee=fun;
			this._temp && (this._temp.length=0);
			this._repaint();
			return args;
		}

		/**
		*画布的剪裁区域,超出剪裁区域的坐标可以画图,但不能显示。
		*@param x X轴偏移量。
		*@param y Y轴偏移量。
		*@param width 宽度。
		*@param height 高度。
		*/
		__proto.clipRect=function(x,y,width,height){
			this._saveToCmd(Render.context._clipRect,arguments);
		}

		/**
		*在画布上绘制“被填充的”文本。
		*@param text 在画布上输出的文本。
		*@param x 开始绘制文本的 x 坐标位置（相对于画布）。
		*@param y 开始绘制文本的 y 坐标位置（相对于画布）。
		*@param font 定义字体和字号。
		*@param color 定义文本颜色。
		*@param textAlign 文本对齐反式。
		*/
		__proto.fillText=function(text,x,y,font,color,textAlign){
			this._saveToCmd(Render.context._fillText,[text,x,y,font || Font.defaultFont,color,textAlign]);
		}

		/**
		*在画布上绘制“被填充且镶边的”文本。
		*@param text 在画布上输出的文本。
		*@param x 开始绘制文本的 x 坐标位置（相对于画布）。
		*@param y 开始绘制文本的 y 坐标位置（相对于画布）。
		*@param font 定义字体和字号。
		*@param fillColor 定义文本颜色。
		*@param borderColor 定义镶边文本颜色。
		*@param lineWidth 镶边线条宽度。
		*@param textAlign 文本对齐方式。
		*/
		__proto.fillBorderText=function(text,x,y,font,fillColor,borderColor,lineWidth,textAlign){
			this._saveToCmd(Render.context._fillBorderText,[text,x,y,font || Font.defaultFont,fillColor,borderColor,lineWidth,textAlign]);
		}

		/**
		*在画布上绘制文本（没有填色）。文本的默认颜色是黑色。
		*@param text 在画布上输出的文本。
		*@param x 开始绘制文本的 x 坐标位置（相对于画布）。
		*@param y 开始绘制文本的 y 坐标位置（相对于画布）。
		*@param font 定义字体和字号。
		*@param color 定义文本颜色。
		*@param lineWidth 线条宽度。
		*@param textAlign 文本对齐方式。
		*/
		__proto.strokeText=function(text,x,y,font,color,lineWidth,textAlign){
			this._saveToCmd(Render.context._strokeText,[text,x,y,font || Font.defaultFont,color,lineWidth,textAlign]);
		}

		/**
		*设置透明度。
		*@param value
		*/
		__proto.alpha=function(value){
			this._saveToCmd(Render.context._alpha,arguments);
		}

		/**
		*设置混合模式。
		*@param value
		*/
		__proto.blendMode=function(value){
			this._saveToCmd(Render.context._blendMode,arguments);
		}

		/**
		*替换绘图的当前转换矩阵。
		*@param mat 矩阵。
		*@param pivotX 水平方向轴心点坐标。
		*@param pivotY 垂直方向轴心点坐标。
		*/
		__proto.transform=function(mat,pivotX,pivotY){
			(pivotX===void 0)&& (pivotX=0);
			(pivotY===void 0)&& (pivotY=0);
			this._saveToCmd(Render.context._transform,[mat,pivotX,pivotY]);
		}

		/**
		*旋转当前绘图。
		*@param angle 旋转角度，以弧度计。
		*@param pivotX 水平方向轴心点坐标。
		*@param pivotY 垂直方向轴心点坐标。
		*/
		__proto.rotate=function(angle,pivotX,pivotY){
			(pivotX===void 0)&& (pivotX=0);
			(pivotY===void 0)&& (pivotY=0);
			this._saveToCmd(Render.context._rotate,[angle,pivotX,pivotY]);
		}

		/**
		*缩放当前绘图至更大或更小。
		*@param scaleX 水平方向缩放值。
		*@param scaleY 垂直方向缩放值。
		*@param pivotX 水平方向轴心点坐标。
		*@param pivotY 垂直方向轴心点坐标。
		*/
		__proto.scale=function(scaleX,scaleY,pivotX,pivotY){
			(pivotX===void 0)&& (pivotX=0);
			(pivotY===void 0)&& (pivotY=0);
			this._saveToCmd(Render.context._scale,[scaleX,scaleY,pivotX,pivotY]);
		}

		/**
		*重新映射画布上的 (0,0)位置。
		*@param x 添加到水平坐标（x）上的值。
		*@param y 添加到垂直坐标（y）上的值。
		*/
		__proto.translate=function(x,y){
			this._saveToCmd(Render.context._translate,[x,y]);
		}

		/**
		*保存当前环境的状态。
		*/
		__proto.save=function(){
			this._saveToCmd(Render.context.save,arguments);
		}

		/**
		*返回之前保存过的路径状态和属性。
		*/
		__proto.restore=function(){
			this._saveToCmd(Render.context.restore,arguments);
		}

		/**
		*替换文本内容。
		*@param text 文本内容。
		*@return
		*/
		__proto.replaceText=function(text){
			this._repaint();
			var cmds=this._cmds;
			if (!cmds){
				return this._one && this._one.callee===Render.context._fillText && (this._one[0]=text,true);
			}
			for (var i=cmds.length-1;i >-1;i--){
				if (cmds[i].callee===Render.context._fillText){
					cmds[i][0]=text;
					return true;
				}
			}
			return false;
		}

		/**
		*替换文本颜色。
		*@param color 颜色。
		*@return
		*/
		__proto.replaceTextColor=function(color){
			this._repaint();
			var cmds=this._cmds;
			if (!cmds){
				return this._one && (this._one.callee===Render.context._fillBorderText || this._one.callee===Render.context._fillText)&& (this._one[4]=color,true);
			}
			for (var i=cmds.length-1;i >-1;i--){
				if (cmds[i].callee===Render.context._fillText){
					cmds[i][4]=color;
					return true;
				}
			}
			return false;
		}

		/**
		*加载并显示一个图片。
		*@param url 图片地址。
		*@param x 显示图片的x位置
		*@param y 显示图片的y位置
		*@param width 显示图片的宽度，设置为0表示使用图片默认宽度
		*@param height 显示图片的高度，设置为0表示使用图片默认高度
		*@param complete 加载完成回调
		*/
		__proto.loadImage=function(url,x,y,width,height,complete){
			var _$this=this;
			(x===void 0)&& (x=0);
			(y===void 0)&& (y=0);
			(width===void 0)&& (width=0);
			(height===void 0)&& (height=0);
			var tex=Loader.getRes(url);
			if (tex)onloaded(tex);
			else Laya.loader.load(url,Handler.create(null,onloaded));
			function onloaded (tex){
				if (tex){
					_$this.drawTexture(tex,x,y,width,height);
					if (complete !=null)complete.call(_$this._sp,tex);
				}
			}
		}

		/**
		*@private
		*@param sprite
		*@param context
		*@param x
		*@param y
		*/
		__proto._renderEmpty=function(sprite,context,x,y){}
		/**
		*@private
		*@param sprite
		*@param context
		*@param x
		*@param y
		*/
		__proto._renderAll=function(sprite,context,x,y){
			var cmds=this._cmds,cmd;
			for (var i=0,n=cmds.length;i < n;i++){
				(cmd=cmds[i]).callee.call(context,x,y,cmd);
			}
		}

		/**
		*@private
		*@param sprite
		*@param context
		*@param x
		*@param y
		*/
		__proto._renderOne=function(sprite,context,x,y){
			this._one.callee.call(context,x,y,this._one);
		}

		/**
		*@private
		*@param sprite
		*@param context
		*@param x
		*@param y
		*/
		__proto._renderOneImg=function(sprite,context,x,y){
			this._one.callee.call(context,x,y,this._one);
			sprite._renderType |=0x01;
		}

		/**
		*绘制一条线。
		*@param fromX X开始位置。
		*@param fromY Y开始位置。
		*@param toX X结束位置。
		*@param toY Y结束位置。
		*@param lineColor 颜色。
		*@param lineWidth 线条宽度。
		*/
		__proto.drawLine=function(fromX,fromY,toX,toY,lineColor,lineWidth){
			(lineWidth===void 0)&& (lineWidth=1);
			var arr=[fromX+0.5,fromY+0.5,toX+0.5,toY+0.5,lineColor,lineWidth];
			this._saveToCmd(Render.context._drawLine,arr);
		}

		/**
		*绘制一系列线段。
		*@param points 线段的点集合，格式[x,y,x,y,x,y...]。
		*@param lineColor 线段颜色，或者填充绘图的渐变对象。
		*@param lineWidth 线段宽度。
		*/
		__proto.drawLines=function(x,y,points,lineColor,lineWidth){
			(lineWidth===void 0)&& (lineWidth=1);
			var arr=[x+0.5,y+0.5,points,lineColor,lineWidth];
			if (Render.isWebGl)
				arr[3]=Color.create(lineColor).numColor;
			this._saveToCmd(Render.isWebGl ? Render.context.drawLinesWebGL :Render.context.drawLines,arr);
		}

		/**
		*绘制一系列曲线。
		*@param points 线段的点集合，格式[startx,starty,ctrx,ctry,startx,starty...]。
		*@param lineColor 线段颜色，或者填充绘图的渐变对象。
		*@param lineWidth 线段宽度。
		*/
		__proto.drawCurves=function(x,y,points,lineColor,lineWidth){
			(lineWidth===void 0)&& (lineWidth=1);
			var arr=[x+0.5,y+0.5,points,lineColor,lineWidth];
			this._saveToCmd(Render.context.drawCurves,arr);
		}

		/**
		*绘制矩形。
		*@param x 开始绘制的x位置。
		*@param y 开始绘制的y位置。
		*@param width 矩形宽度。
		*@param height 矩形高度。
		*@param fillColor 填充颜色，或者填充绘图的渐变对象。
		*@param lineColor 边框颜色，或者填充绘图的渐变对象。
		*@param lineWidth 边框宽度。
		*/
		__proto.drawRect=function(x,y,width,height,fillColor,lineColor,lineWidth){
			(lineWidth===void 0)&& (lineWidth=1);
			var offset=lineColor ? 0.5 :0;
			var arr=[x+offset,y+offset,width,height,fillColor,lineColor,lineWidth];
			this._saveToCmd(Render.context._drawRect,arr);
		}

		/**
		*绘制圆形。
		*@param x 圆点x位置。
		*@param y 圆点y位置。
		*@param radius 半径。
		*@param fillColor 填充颜色，或者填充绘图的渐变对象。
		*@param lineColor 边框颜色，或者填充绘图的渐变对象。
		*@param lineWidth 边框宽度。
		*/
		__proto.drawCircle=function(x,y,radius,fillColor,lineColor,lineWidth){
			(lineWidth===void 0)&& (lineWidth=1);
			var offset=lineColor ? 0.5 :0;
			var arr=[x+offset,y+offset,radius,fillColor,lineColor,lineWidth];
			if (Render.isWebGl){
				arr[3]=fillColor ? Color.create(fillColor).numColor :fillColor;
				arr[4]=lineColor ? Color.create(lineColor).numColor :lineColor;
			}
			this._saveToCmd(Render.isWebGl ? Render.context._drawCircleWebGL :Render.context._drawCircle,arr);
		}

		/**
		*绘制扇形。
		*@param x 开始绘制的x位置。
		*@param y 开始绘制的y位置。
		*@param radius 扇形半径。
		*@param startAngle 开始角度。
		*@param endAngle 结束角度。
		*@param fillColor 填充颜色，或者填充绘图的渐变对象。
		*@param lineColor 边框颜色，或者填充绘图的渐变对象。
		*@param lineWidth 边框宽度。
		*/
		__proto.drawPie=function(x,y,radius,startAngle,endAngle,fillColor,lineColor,lineWidth){
			(lineWidth===void 0)&& (lineWidth=1);
			var offset=lineColor ? 0.5 :0;
			var arr=[x+offset,y+offset,radius,startAngle,endAngle,fillColor,lineColor,lineWidth];
			if (Render.isWebGl){
				startAngle=90-startAngle;
				endAngle=90-endAngle;
				arr[5]=fillColor ? Color.create(fillColor).numColor :fillColor;
				arr[6]=lineColor ? Color.create(lineColor).numColor :lineColor;
			}
			arr[3]=Utils1.toRadian(startAngle);
			arr[4]=Utils1.toRadian(endAngle);
			this._saveToCmd(Render.isWebGl ? Render.context._drawPieWebGL :Render.context._drawPie,arr);
		}

		__proto.getPiePoints=function(x,y,radius,startAngle,endAngle){
			var rst;
			rst=[x,y];
			var dP=Math.PI / 10;
			var i=NaN;
			for (i=startAngle;i < endAngle;i+=dP){
				rst.push(x+radius *Math.cos(i),y+radius *Math.sin(i));
			}
			if (endAngle !=i){
				rst.push(x+radius *Math.cos(endAngle),y+radius *Math.sin(endAngle));
			}
			return rst;
		}

		/**
		*绘制多边形。
		*@param points 多边形的点集合。
		*@param fillColor 填充颜色，或者填充绘图的渐变对象。
		*@param lineColor 边框颜色，或者填充绘图的渐变对象。
		*@param lineWidth 边框宽度。
		*/
		__proto.drawPoly=function(x,y,points,fillColor,lineColor,lineWidth){
			(lineWidth===void 0)&& (lineWidth=1);
			var offset=lineColor ? 0.5 :0;
			var arr=[x+offset,y+offset,points,fillColor,lineColor,lineWidth];
			this._saveToCmd(Render.context._drawPoly,arr);
		}

		__proto.getPathPoints=function(paths){
			var i=0,len=0;
			var rst=[];
			len=paths.length;
			var tCMD;
			for (i=0;i < len;i++){
				tCMD=paths[i];
				if (tCMD.length > 1){
					rst.push(tCMD[1],tCMD[2]);
					if (tCMD.length > 3){
						rst.push(tCMD[3],tCMD[4]);
					}
				}
			}
			return rst;
		}

		/**
		*绘制路径。
		*@param x 开始绘制的x位置。
		*@param y 开始绘制的y位置。
		*@param paths 路径集合，路径支持以下格式：[["moveTo",x,y],["lineTo",x,y],["arcTo",x1,y1,x2,y2,r],["closePath"]]。
		*@param brush 刷子定义，支持以下设置{fillStyle}。
		*@param pen 画笔定义，支持以下设置{strokeStyle,lineWidth,lineJoin,lineCap,miterLimit}。
		*/
		__proto.drawPath=function(x,y,paths,brush,pen){
			var arr=[x+0.5,y+0.5,paths,brush,pen];
			this._saveToCmd(Render.context._drawPath,arr);
		}

		/**@private */
		/**
		*命令流。
		*@private
		*/
		__getset(0,__proto,'cmds',function(){
			return this._cmds;
			},function(value){
			this._cmds=value;
			this._render=this._renderAll;
			this._repaint();
		});

		Graphics.addPointArrToRst=function(rst,points,matrix,dx,dy){
			(dx===void 0)&& (dx=0);
			(dy===void 0)&& (dy=0);
			var i=0,len=0;
			len=points.length;
			for (i=0;i < len;i+=2){
				Graphics.addPointToRst(rst,points[i]+dx,points[i+1]+dy,matrix);
			}
		}

		Graphics.addPointToRst=function(rst,x,y,matrix){
			var _tempPoint=Point.TEMP;
			x=x ? x :0;
			y=y ? y :0;
			_tempPoint.setTo(x,y);
			matrix.transformPoint(x,y,_tempPoint);
			rst.push(_tempPoint.x,_tempPoint.y);
		}

		__static(Graphics,
		['_tempMatrix',function(){return this._tempMatrix=new Matrix();}
		]);
		return Graphics;
	})()


	/**
	*键盘code对应表
	*@author
	*/
	//class laya.events.Keyboard
	var Keyboard1=(function(){
		function Keyboard(){};
		__class(Keyboard,'laya.events.Keyboard',null,'Keyboard1');
		Keyboard.NUMBER_0=48;
		Keyboard.NUMBER_1=49;
		Keyboard.NUMBER_2=50;
		Keyboard.NUMBER_3=51;
		Keyboard.NUMBER_4=52;
		Keyboard.NUMBER_5=53;
		Keyboard.NUMBER_6=54;
		Keyboard.NUMBER_7=55;
		Keyboard.NUMBER_8=56;
		Keyboard.NUMBER_9=57;
		Keyboard.A=65;
		Keyboard.B=66;
		Keyboard.C=67;
		Keyboard.D=68;
		Keyboard.E=69;
		Keyboard.F=70;
		Keyboard.G=71;
		Keyboard.H=72;
		Keyboard.I=73;
		Keyboard.J=74;
		Keyboard.K=75;
		Keyboard.L=76;
		Keyboard.M=77;
		Keyboard.N=78;
		Keyboard.O=79;
		Keyboard.P=80;
		Keyboard.Q=81;
		Keyboard.R=82;
		Keyboard.S=83;
		Keyboard.T=84;
		Keyboard.U=85;
		Keyboard.V=86;
		Keyboard.W=87;
		Keyboard.X=88;
		Keyboard.Y=89;
		Keyboard.Z=90;
		Keyboard.SEMICOLON=186;
		Keyboard.EQUAL=187;
		Keyboard.COMMA=188;
		Keyboard.MINUS=189;
		Keyboard.PERIOD=190;
		Keyboard.SLASH=191;
		Keyboard.BACKQUOTE=192;
		Keyboard.LEFTBRACKET=219;
		Keyboard.BACKSLASH=220;
		Keyboard.RIGHTBRACKET=221;
		Keyboard.QUOTE=222;
		Keyboard.ALTERNATE=18;
		Keyboard.BACKSPACE=8;
		Keyboard.CAPS_LOCK=20;
		Keyboard.COMMAND=15;
		Keyboard.CONTROL=17;
		Keyboard.DELETE=46;
		Keyboard.DOWN=40;
		Keyboard.END=35;
		Keyboard.ENTER=13;
		Keyboard.ESCAPE=27;
		Keyboard.F1=112;
		Keyboard.F2=113;
		Keyboard.F3=114;
		Keyboard.F4=115;
		Keyboard.F5=116;
		Keyboard.F6=117;
		Keyboard.F7=118;
		Keyboard.F8=119;
		Keyboard.F9=120;
		Keyboard.F10=121;
		Keyboard.F11=122;
		Keyboard.F12=123;
		Keyboard.F13=124;
		Keyboard.F14=125;
		Keyboard.F15=126;
		Keyboard.HOME=36;
		Keyboard.INSERT=45;
		Keyboard.LEFT=37;
		Keyboard.NUMPAD=21;
		Keyboard.NUMPAD_0=96;
		Keyboard.NUMPAD_1=97;
		Keyboard.NUMPAD_2=98;
		Keyboard.NUMPAD_3=99;
		Keyboard.NUMPAD_4=100;
		Keyboard.NUMPAD_5=101;
		Keyboard.NUMPAD_6=102;
		Keyboard.NUMPAD_7=103;
		Keyboard.NUMPAD_8=104;
		Keyboard.NUMPAD_9=105;
		Keyboard.NUMPAD_ADD=107;
		Keyboard.NUMPAD_DECIMAL=110;
		Keyboard.NUMPAD_DIVIDE=111;
		Keyboard.NUMPAD_ENTER=108;
		Keyboard.NUMPAD_MULTIPLY=106;
		Keyboard.NUMPAD_SUBTRACT=109;
		Keyboard.PAGE_DOWN=34;
		Keyboard.PAGE_UP=33;
		Keyboard.RIGHT=39;
		Keyboard.SHIFT=16;
		Keyboard.SPACE=32;
		Keyboard.TAB=9;
		Keyboard.UP=38;
		return Keyboard;
	})()


	/**
	*键盘事件管理类
	*该类从浏览器中接收键盘事件，并转发该事件
	*转发事件时若Stage.focus为空则只从Stage上派发该事件，不然将从Stage.focus对象开始一直冒泡派发该事件
	*所以在Laya.stage上监听键盘事件一定能够收到，如果在其他地方监听，则必须处在Stage.focus的冒泡链上才能收到该事件
	*用户可以通过代码Laya.stage.focus=someNode的方式来设置focus对象
	*用户可统一的根据事件对象中 e.keyCode来判断按键类型，该属性兼容了不同浏览器的实现
	*其他事件属性可自行从 e 中获取
	*@author ww
	*@version 1.0
	*@created 2015-9-23 上午10:57:26
	*/
	//class laya.events.KeyBoardManager
	var KeyBoardManager=(function(){
		function KeyBoardManager(){};
		__class(KeyBoardManager,'laya.events.KeyBoardManager');
		KeyBoardManager.__init__=function(){
			KeyBoardManager.addEvent("keydown");
			KeyBoardManager.addEvent("keypress");
			KeyBoardManager.addEvent("keyup");
		}

		KeyBoardManager.addEvent=function(type){
			Browser.document.addEventListener(type,function(e){
				laya.events.KeyBoardManager.dispatch(e,type);
			},true);
		}

		KeyBoardManager.dispatch=function(e,type){
			e.keyCode=e.keyCode || e.which || e.charCode;
			if (type==="keydown")KeyBoardManager.pressKeys[e.keyCode]=true;
			else if (type==="keyup")KeyBoardManager.pressKeys[e.keyCode]=null;
			var tar=(Laya.stage.focus && (Laya.stage.focus.event !=null))? Laya.stage.focus :Laya.stage;
			while (tar){
				tar.event(type,e);
				tar=tar.parent;
			}
		}

		KeyBoardManager.hasKeyDown=function(key){
			return KeyBoardManager.pressKeys[key];
		}

		KeyBoardManager.pressKeys={};
		return KeyBoardManager;
	})()


	/**
	*鼠标交互管理器
	*@author yung
	*/
	//class laya.events.MouseManager
	var MouseManager=(function(){
		function MouseManager(){
			this.mouseX=0;
			this.mouseY=0;
			this.disableMouseEvent=false;
			this.mouseDownTime=0;
			this._stage=null;
			this._target=null;
			this._lastOvers=[];
			this._currOvers=[];
			this._lastClickTimer=0;
			this._lastMoveTimer=0;
			this._isDoubleClick=false;
			this._isLeftMouse=false;
			this._eventList=[];
			this._event=new Event();
			this._matrix=new Matrix();
			this._point=new Point();
			this._rect=new Rectangle();
		}

		__class(MouseManager,'laya.events.MouseManager');
		var __proto=MouseManager.prototype;
		__proto.__init__=function(){
			var _$this=this;
			this._stage=Laya.stage;
			var _this=this;
			var canvas=Render.canvas.source;
			var list=this._eventList;
			Browser.document.oncontextmenu=function (e){
				return false;
			}
			canvas.addEventListener('mousedown',function(e){
				e.preventDefault();
				list.push(e);
				_$this.mouseDownTime=Browser.now();
			});
			canvas.addEventListener('mouseup',function(e){
				e.preventDefault();
				list.push(e);
				_$this.mouseDownTime=-Browser.now();
			},true);
			Browser.document.addEventListener('mousemove',function(e){
				var now=Browser.now();
				if (now-_this._lastMoveTimer < 10)return;
				_this._lastMoveTimer=now;
				list.push(e);
			},true);
			canvas.addEventListener("mouseout",function(e){
				list.push(e);
			})
			canvas.addEventListener("mouseover",function(e){
				list.push(e);
			})
			canvas.addEventListener("touchstart",function(e){
				e.preventDefault();
				list.push(e);
				_$this.mouseDownTime=Browser.now();
			});
			canvas.addEventListener("touchend",function(e){
				e.preventDefault();
				list.push(e);
				_$this.mouseDownTime=-Browser.now();
			},true);
			canvas.addEventListener("touchmove",function(e){
				e.preventDefault();
				list.push(e);
			},true);
			canvas.addEventListener('mousewheel',function(e){
				list.push(e);
			});
			canvas.addEventListener('DOMMouseScroll',function(e){
				list.push(e);
			});
		}

		__proto.initEvent=function(e,nativeEvent){
			var _this=laya.events.MouseManager.instance;
			_this._event._stoped=false;
			_this._event.nativeEvent=nativeEvent || e;
			_this._target=null;
			this._point.setTo(e.clientX,e.clientY);
			this._stage._canvasTransform.invertTransformPoint(this._point);
			e.stageX=_this.mouseX=this._point.x;
			e.stageY=_this.mouseY=this._point.y;
			_this._event.touchId=e.identifier;
		}

		__proto.checkMouseWheel=function(e){
			this._event.delta=e.wheelDelta ? e.wheelDelta *0.025 :-e.detail;
			for (var i=0,n=this._lastOvers.length;i < n;i++){
				var ele=this._lastOvers[i];
				ele.event("mousewheel",this._event.setTo("mousewheel",ele,this._target));
			}
		}

		__proto.checkMouseOut=function(){
			if (this.disableMouseEvent)return;
			for (var i=0,n=this._lastOvers.length;i < n;i++){
				var ele=this._lastOvers[i];
				if (this._currOvers.indexOf(ele)< 0){
					ele.$_MOUSEOVER=false;
					ele.event("mouseout",this._event.setTo("mouseout",ele,this._target));
				}
			};
			var temp=this._lastOvers;
			this._lastOvers=this._currOvers;
			this._currOvers=temp;
			this._currOvers.length=0;
		}

		__proto.onMouseMove=function(ele){
			this.sendMouseMove(ele);
			this._event._stoped=false;
			this.sendMouseOver(this._target);
		}

		__proto.sendMouseMove=function(ele){
			ele.event("mousemove",this._event.setTo("mousemove",ele,this._target));
			!this._event._stoped && ele.parent && this.sendMouseMove(ele.parent);
		}

		__proto.sendMouseOver=function(ele){
			if (ele.parent){
				if (!ele.$_MOUSEOVER){
					ele.$_MOUSEOVER=true;
					ele.event("mouseover",this._event.setTo("mouseover",ele,this._target));
				}
				this._currOvers.push(ele);
			}
			!this._event._stoped && ele.parent && this.sendMouseOver(ele.parent);
		}

		__proto.onMouseDown=function(ele){
			if (this._isLeftMouse){
				ele.$_MOUSEDOWN=true;
				ele.event("mousedown",this._event.setTo("mousedown",ele,this._target));
				}else {
				ele.$_RIGHTMOUSEDOWN=true;
				ele.event("rightmousedown",this._event.setTo("rightmousedown",ele,this._target));
			}
			!this._event._stoped && ele.parent && this.onMouseDown(ele.parent);
		}

		__proto.onMouseUp=function(ele){
			var type=this._isLeftMouse ? "mouseup" :"rightmouseup";
			this.sendMouseUp(ele,type);
			this._event._stoped=false;
			this.sendClick(this._target,type);
		}

		__proto.sendMouseUp=function(ele,type){
			ele.event(type,this._event.setTo(type,ele,this._target));
			!this._event._stoped && ele.parent && this.sendMouseUp(ele.parent,type);
		}

		__proto.sendClick=function(ele,type){
			if (type==="mouseup" && ele.$_MOUSEDOWN){
				ele.$_MOUSEDOWN=false;
				ele.event("click",this._event.setTo("click",ele,this._target));
				this._isDoubleClick && ele.event("doubleclick",this._event.setTo("doubleclick",ele,this._target));
				}else if (type==="rightmouseup" && ele.$_RIGHTMOUSEDOWN){
				ele.$_RIGHTMOUSEDOWN=false;
				ele.event("rightclick",this._event.setTo("rightclick",ele,this._target));
			}
			!this._event._stoped && ele.parent && this.sendClick(ele.parent,type);
		}

		__proto.check=function(sp,mouseX,mouseY,callBack){
			var transform=sp.transform || this._matrix;
			var pivotX=sp.pivotX;
			var pivotY=sp.pivotY;
			if (pivotX===0 && pivotY===0){
				transform.setTranslate(sp.x,sp.y);
				}else {
				if (transform===this._matrix){
					transform.setTranslate(sp.x-pivotX,sp.y-pivotY);
					}else {
					var cos=transform.cos;
					var sin=transform.sin;
					transform.setTranslate(sp.x-(pivotX *cos-pivotY *sin)*sp.scaleX,sp.y-(pivotX *sin+pivotY *cos)*sp.scaleY);
				}
			}
			transform.invertTransformPoint(this._point.setTo(mouseX,mouseY));
			transform.setTranslate(0,0);
			mouseX=this._point.x;
			mouseY=this._point.y;
			var scrollRect=sp.scrollRect;
			if (scrollRect){
				this._rect.setTo(0,0,scrollRect.width,scrollRect.height);
				var isHit=this._rect.contains(mouseX,mouseY);
				if (!isHit)return false;
			}
			if (!this.disableMouseEvent){
				var flag=false;
				for (var i=sp._childs.length-1;i >-1;i--){
					var child=sp._childs[i];
					if (child.mouseEnabled && child.visible){
						flag=this.check(child,mouseX+(scrollRect ? scrollRect.x :0),mouseY+(scrollRect ? scrollRect.y :0),callBack);
						if (flag)return true;
					}
				}
			}
			if (sp.width > 0 && sp.height > 0){
				var graphicHit=false;
				var hitRect=this._rect;
				if (!sp.mouseThrough){
					if (sp.hitArea)hitRect=sp.hitArea;
					else hitRect.setTo(0,0,sp.width,sp.height);
					isHit=hitRect.contains(mouseX,mouseY);
					}else {
					isHit=sp.getGraphicBounds().contains(mouseX,mouseY);
				}
				if (isHit){
					this._target=sp;
					callBack.call(this,sp);
				}
			}
			return isHit;
		}

		__proto.runEvent=function(){
			var len=this._eventList.length;
			if (!len)return;
			var _this=this;
			var i=0;
			while (i < len){
				var evt=this._eventList[i];
				switch (evt.type){
					case 'mousedown':
						_this._isLeftMouse=evt.button===0;
						_this.initEvent(evt);
						_this.check(_this._stage,_this.mouseX,_this.mouseY,_this.onMouseDown);
						break ;
					case 'mouseup':
						_this._isLeftMouse=evt.button===0;
						var now=Browser.now();
						_this._isDoubleClick=(now-_this._lastClickTimer)< 300;
						_this._lastClickTimer=now;
						_this.initEvent(evt);
						_this.check(_this._stage,_this.mouseX,_this.mouseY,_this.onMouseUp);
						break ;
					case 'mousemove':
						_this.initEvent(evt);
						_this.check(_this._stage,_this.mouseX,_this.mouseY,_this.onMouseMove);
						_this.checkMouseOut();
						break ;
					case "touchstart":
						_this._isLeftMouse=true;
						var touches=evt.changedTouches;
						for (var j=0,n=touches.length;j < n;j++){
							_this.initEvent(touches[j],evt);
							_this.check(_this._stage,_this.mouseX,_this.mouseY,_this.onMouseDown);
						}
						break ;
					case "touchend":
						_this._isLeftMouse=true;
						var touchends=evt.changedTouches;
						for (j=0,n=touchends.length;j < n;j++){
							_this.initEvent(touchends[j],evt);
							_this.check(_this._stage,_this.mouseX,_this.mouseY,_this.onMouseUp);
						}
						break ;
					case "touchmove":;
						var touchemoves=evt.changedTouches;
						for (j=0,n=touchemoves.length;j < n;j++){
							_this.initEvent(touchemoves[j],evt);
							_this.check(_this._stage,_this.mouseX,_this.mouseY,_this.onMouseMove);
						}
						_this.checkMouseOut();
						break ;
					case "wheel":
					case "mousewheel":
					case "DOMMouseScroll":
						_this.checkMouseWheel(evt);
						break ;
					case "mouseout":
						_this._stage.event("mouseout",_this._event.setTo("mouseout",_this._stage,_this._stage));
						break ;
					case "mouseover":
						_this._stage.event("mouseover",_this._event.setTo("mouseover",_this._stage,_this._stage));
						break ;
					}
				i++;
			}
			this._eventList.length=0;
		}

		__static(MouseManager,
		['instance',function(){return this.instance=new MouseManager();}
		]);
		return MouseManager;
	})()


	/**
	*...
	*@author wk
	*/
	//class laya.filters.Filter
	var Filter=(function(){
		function Filter(){
			this._action=null;
		}

		__class(Filter,'laya.filters.Filter');
		var __proto=Filter.prototype;
		Laya.imps(__proto,{"laya.filters.IFilter":true})
		__getset(0,__proto,'type',function(){return-1});
		__getset(0,__proto,'action',function(){return this._action});
		Filter.BLUR=0x10;
		Filter.COLOR=0x20;
		Filter.GLOW=0x08;
		Filter._filterStart=null
		Filter._filterEnd=null
		Filter._EndTarget=null
		Filter._recycleScope=null
		Filter._filter=null
		return Filter;
	})()


	//class laya.filters.ColorFilterAction
	var ColorFilterAction=(function(){
		function ColorFilterAction(){
			this.data
		}

		__class(ColorFilterAction,'laya.filters.ColorFilterAction');
		var __proto=ColorFilterAction.prototype;
		Laya.imps(__proto,{"laya.filters.IFilterAction":true})
		__proto.apply=function(srcCanvas){
			var ctx=srcCanvas.ctx.ctx;
			var canvas=srcCanvas.ctx.ctx.canvas;
			if (canvas.width==0 || canvas.height==0)return canvas;
			var imgdata=ctx.getImageData(0,0,canvas.width,canvas.height);
			var data=imgdata.data;
			var nData;
			for (var i=0,n=data.length;i < n;i+=4){
				nData=this.getColor(data[i],data[i+1],data[i+2],data[i+3]);
				if (data[i+3]==0)continue ;
				data[i]=nData[0];
				data[i+1]=nData[1];
				data[i+2]=nData[2];
				data[i+3]=nData[3];
			}
			ctx.putImageData(imgdata,0,0);
			return srcCanvas;
		}

		__proto.getColor=function(red,green,blue,alpha){
			var rst=[];
			if (this.data._elements){
				var a=this.data._elements;
				rst[0]=a[0] *red+a[1] *green+a[2] *blue+a[3] *alpha+a[4];
				rst[1]=a[5] *red+a[6] *green+a[7] *blue+a[8] *alpha+a[9];
				rst[2]=a[10] *red+a[11] *green+a[12] *blue+a[13] *alpha+a[14];
				rst[3]=a[15] *red+a[16] *green+a[17] *blue+a[18] *alpha+a[19];
			}
			return rst;
		}

		return ColorFilterAction;
	})()


	//class laya.maths.Arith
	var Arith=(function(){
		function Arith(){};
		__class(Arith,'laya.maths.Arith');
		Arith.formatR=function(r){
			if (r > Math.PI)r-=Math.PI *2;
			if (r <-Math.PI)r+=Math.PI *2;
			return r;
		}

		Arith.isPOT=function(w,h){
			return (w > 0 && (w & (w-1))===0 && h > 0 && (h & (h-1))===0);
		}

		Arith.setMatToArray=function(mat,array){
			mat.a,mat.b,0,0,mat.c,mat.d,0,0,0,0,1,0,mat.tx+20,mat.ty+20,0,1
			array[0]=mat.a;
			array[1]=mat.b;
			array[4]=mat.c;
			array[5]=mat.d;
			array[12]=mat.tx;
			array[13]=mat.ty;
		}

		return Arith;
	})()


	/**
	*计算贝塞尔曲线的工具类
	*...
	*@author ww
	*/
	//class laya.maths.Bezier
	var Bezier=(function(){
		function Bezier(){
			this.controlPoints=[new Point(),new Point(),new Point()];
			this._calFun=this.getPoint2;
		}

		__class(Bezier,'laya.maths.Bezier');
		var __proto=Bezier.prototype;
		__proto.switchPoint=function(x,y){
			var tPoint=this.controlPoints.shift();
			tPoint.setTo(x,y);
			this.controlPoints.push(tPoint);
		}

		/**
		*计算二次贝塞尔点
		*@param t
		*@param rst
		*
		*/
		__proto.getPoint2=function(t,rst){
			var p1=this.controlPoints[0];
			var p2=this.controlPoints[1];
			var p3=this.controlPoints[2];
			var lineX=Math.pow((1-t),2)*p1.x+2 *t *(1-t)*p2.x+Math.pow(t,2)*p3.x;
			var lineY=Math.pow((1-t),2)*p1.y+2 *t *(1-t)*p2.y+Math.pow(t,2)*p3.y;
			rst.push(lineX,lineY);
		}

		/**
		*计算三次贝塞尔点
		*@param t
		*@param rst
		*
		*/
		__proto.getPoint3=function(t,rst){
			var p1=this.controlPoints[0];
			var p2=this.controlPoints[1];
			var p3=this.controlPoints[2];
			var p4=this.controlPoints[3];
			var lineX=Math.pow((1-t),3)*p1.x+3 *p2.x *t *(1-t)*(1-t)+3 *p3.x *t *t *(1-t)+p4.x *Math.pow(t,3);
			var lineY=Math.pow((1-t),3)*p1.y+3 *p2.y *t *(1-t)*(1-t)+3 *p3.y *t *t *(1-t)+p4.y *Math.pow(t,3);
			rst.push(lineX,lineY);
		}

		/**
		*计算贝塞尔点序列
		*@param count
		*@param rst
		*
		*/
		__proto.insertPoints=function(count,rst){
			var i=0,len=0;
			count=count > 0 ? count :5;
			len=count;
			var dLen=NaN;
			dLen=1 / count;
			for (i=0;i <=1;i+=dLen){
				this._calFun(i,rst);
			}
		}

		/**
		*获取贝塞尔曲线上的点
		*@param pList 控制点[x0,y0,x1,y1...]
		*@param inSertCount 每次曲线的插值数量
		*@return
		*
		*/
		__proto.getBezierPoints=function(pList,inSertCount,count){
			(inSertCount===void 0)&& (inSertCount=5);
			(count===void 0)&& (count=2);
			var i=0,len=0;
			len=pList.length;
			if (len < (count+1)*2)return [];
			var rst;
			rst=[];
			switch (count){
				case 2:
					this._calFun=this.getPoint2;
					break ;
				case 3:
					this._calFun=this.getPoint3;
					break ;
				default :
					return [];
				}
			for (i=0;i < count *2;i+=2){
				this.switchPoint(pList[i],pList[i+1]);
			}
			for (i=count *2;i < len;i+=2){
				this.switchPoint(pList[i],pList[i+1]);
				if ((i / 2)% count==0)
					this.insertPoints(inSertCount,rst);
			}
			return rst;
		}

		__static(Bezier,
		['I',function(){return this.I=new Bezier();}
		]);
		return Bezier;
	})()


	/**
	*凸包算法
	*@author ww
	*@version 1.0
	*
	*@created 2015-9-22 下午4:16:41
	*/
	//class laya.maths.GrahamScan
	var GrahamScan=(function(){
		function GrahamScan(){};
		__class(GrahamScan,'laya.maths.GrahamScan');
		GrahamScan.multiply=function(p1,p2,p0){
			return ((p1.x-p0.x)*(p2.y-p0.y)-(p2.x-p0.x)*(p1.y-p0.y));
		}

		GrahamScan.dis=function(p1,p2){
			return (p1.x-p2.x)*(p1.x-p2.x)+(p1.y-p2.y)*(p1.y-p2.y);
		}

		GrahamScan.getPoints=function(count,tempUse,rst){
			(tempUse===void 0)&& (tempUse=false);
			if (!GrahamScan._mPointList)GrahamScan._mPointList=[];
			while (GrahamScan._mPointList.length < count)GrahamScan._mPointList.push(new Point());
			if (!rst)rst=[];
			rst.length=0;
			if (tempUse){
				Utils1.getFrom(rst,GrahamScan._mPointList,count);
				}else {
				Utils1.getFromR(rst,GrahamScan._mPointList,count);
			}
			return rst;
		}

		GrahamScan.pListToPointList=function(pList,tempUse){
			(tempUse===void 0)&& (tempUse=false);
			var i=0,len=pList.length / 2,rst=GrahamScan.getPoints(len,tempUse,GrahamScan._tempPointList);
			for (i=0;i < len;i++){
				rst[i].setTo(pList[i+i],pList[i+i+1]);
			}
			return rst;
		}

		GrahamScan.pointListToPlist=function(pointList){
			var i=0,len=pointList.length,rst=GrahamScan._temPList,tPoint;
			rst.length=0;
			for (i=0;i < len;i++){
				tPoint=pointList[i];
				rst.push(tPoint.x,tPoint.y);
			}
			return rst;
		}

		GrahamScan.scanPList=function(pList){
			return Utils1.setValueArr(pList,GrahamScan.pointListToPlist(GrahamScan.scan(GrahamScan.pListToPointList(pList,true))));
		}

		GrahamScan.scan=function(PointSet){
			var i=0,j=0,k=0,top=2,tmp,n=PointSet.length,ch;
			var _tmpDic={};
			var key;
			ch=GrahamScan._temArr;
			ch.length=0;
			n=PointSet.length;
			for (i=n-1;i >=0;i--){
				tmp=PointSet[i];
				key=tmp.x+"_"+tmp.y;
				if (!_tmpDic.hasOwnProperty(key)){
					_tmpDic[key]=true;
					ch.push(tmp);
				}
			}
			n=ch.length;
			Utils1.setValueArr(PointSet,ch);
			for (i=1;i < n;i++)
			if ((PointSet[i].y < PointSet[k].y)|| ((PointSet[i].y==PointSet[k].y)&& (PointSet[i].x < PointSet[k].x)))
				k=i;
			tmp=PointSet[0];
			PointSet[0]=PointSet[k];
			PointSet[k]=tmp;
			for (i=1;i < n-1;i++){
				k=i;
				for (j=i+1;j < n;j++)
				if ((GrahamScan.multiply(PointSet[j],PointSet[k],PointSet[0])> 0)|| ((GrahamScan.multiply(PointSet[j],PointSet[k],PointSet[0])==0)&& (GrahamScan.dis(PointSet[0],PointSet[j])< GrahamScan.dis(PointSet[0],PointSet[k]))))
					k=j;
				tmp=PointSet[i];
				PointSet[i]=PointSet[k];
				PointSet[k]=tmp;
			}
			ch=GrahamScan._temArr;
			ch.length=0;
			if (PointSet.length < 3){
				return Utils1.setValueArr(ch,PointSet);
			}
			ch.push(PointSet[0],PointSet[1],PointSet[2]);
			for (i=3;i < n;i++){
				while (ch.length >=2 && GrahamScan.multiply(PointSet[i],ch[ch.length-1],ch[ch.length-2])>=0)ch.pop();
				PointSet[i] && ch.push(PointSet[i]);
			}
			return ch;
		}

		GrahamScan._mPointList=null
		GrahamScan._tempPointList=[];
		GrahamScan._temPList=[];
		GrahamScan._temArr=[];
		return GrahamScan;
	})()


	/**
	*数据工具类
	*/
	//class laya.maths.MathUtil
	var MathUtil=(function(){
		function MathUtil(){};
		__class(MathUtil,'laya.maths.MathUtil');
		MathUtil.subtractVector3=function(l,r,o){
			o[0]=l[0]-r[0];
			o[1]=l[1]-r[1];
			o[2]=l[2]-r[2];
		}

		MathUtil.lerp=function(left,right,amount){
			return left *(1-amount)+right *amount;
		}

		MathUtil.scaleVector3=function(f,b,e){
			e[0]=f[0] *b;
			e[1]=f[1] *b;
			e[2]=f[2] *b;
		}

		MathUtil.lerpVector3=function(l,r,t,o){
			var ax=l[0],ay=l[1],az=l[2];
			o[0]=ax+t *(r[0]-ax);
			o[1]=ay+t *(r[1]-ay);
			o[2]=az+t *(r[2]-az);
		}

		MathUtil.lerpVector4=function(l,r,t,o){
			var ax=l[0],ay=l[1],az=l[2],aw=l[3];
			o[0]=ax+t *(r[0]-ax);
			o[1]=ay+t *(r[1]-ay);
			o[2]=az+t *(r[2]-az);
			o[3]=aw+t *(r[3]-aw);
		}

		MathUtil.slerpQuaternionArray=function(a,Offset1,b,Offset2,t,out,Offset3){
			var ax=a[Offset1+0],ay=a[Offset1+1],az=a[Offset1+2],aw=a[Offset1+3],bx=b[Offset2+0],by=b[Offset2+1],bz=b[Offset2+2],bw=b[Offset2+3];
			var omega,cosom,sinom,scale0,scale1;
			cosom=ax *bx+ay *by+az *bz+aw *bw;
			if (cosom < 0.0){
				cosom=-cosom;
				bx=-bx;
				by=-by;
				bz=-bz;
				bw=-bw;
			}
			if ((1.0-cosom)> 0.000001){
				omega=Math.acos(cosom);
				sinom=Math.sin(omega);
				scale0=Math.sin((1.0-t)*omega)/ sinom;
				scale1=Math.sin(t *omega)/ sinom;
				}else {
				scale0=1.0-t;
				scale1=t;
			}
			out[Offset3+0]=scale0 *ax+scale1 *bx;
			out[Offset3+1]=scale0 *ay+scale1 *by;
			out[Offset3+2]=scale0 *az+scale1 *bz;
			out[Offset3+3]=scale0 *aw+scale1 *bw;
			return out;
		}

		MathUtil.getRotation=function(x0,y0,x1,y1){
			return Math.atan2(x1-x0,y1-y0)/ Math.PI *180;
		}

		MathUtil.SortBigFirst=function(a,b){
			if (a==b)
				return 0;
			return b > a ? 1 :-1;
		}

		MathUtil.SortSmallFirst=function(a,b){
			if (a==b)
				return 0;
			return b > a ?-1 :1;
		}

		MathUtil.SortNumBigFirst=function(a,b){
			return parseFloat(b)-parseFloat(a);
		}

		MathUtil.SortNumSmallFirst=function(a,b){
			return parseFloat(a)-parseFloat(b);
		}

		MathUtil.SortByKey=function(key,bigFirst,forceNum){
			(bigFirst===void 0)&& (bigFirst=false);
			(forceNum===void 0)&& (forceNum=true);
			var _sortFun;
			if (bigFirst){
				_sortFun=forceNum ? MathUtil.SortNumBigFirst :MathUtil.SortBigFirst;
				}else {
				_sortFun=forceNum ? MathUtil.SortNumSmallFirst :MathUtil.SortSmallFirst;
			}
			return function (a,b){
				return _sortFun(a[key],b[key]);
			};
		}

		return MathUtil;
	})()


	/**
	*矩阵
	*@author yung
	*/
	//class laya.maths.Matrix
	var Matrix=(function(){
		function Matrix(a,b,c,d,tx,ty){
			this.cos=1;
			this.sin=0;
			//this.a=NaN;
			//this.b=NaN;
			//this.c=NaN;
			//this.d=NaN;
			//this.tx=NaN;
			//this.ty=NaN;
			this.bTransform=false;
			this.inPool=false;
			(a===void 0)&& (a=1);
			(b===void 0)&& (b=0);
			(c===void 0)&& (c=0);
			(d===void 0)&& (d=1);
			(tx===void 0)&& (tx=0);
			(ty===void 0)&& (ty=0);
			this.a=a;
			this.b=b;
			this.c=c;
			this.d=d;
			this.tx=tx;
			this.ty=ty;
			this._checkTransform();
		}

		__class(Matrix,'laya.maths.Matrix');
		var __proto=Matrix.prototype;
		__proto.identity=function(){
			this.a=this.d=1;
			this.b=this.tx=this.ty=this.c=0;
			this.bTransform=false;
			return this;
		}

		__proto._checkTransform=function(){
			return this.bTransform=(this.a!==1 || this.b!==0 || this.c!==0 || this.d!==1);
		}

		__proto.setTranslate=function(x,y){
			this.tx=x;
			this.ty=y;
		}

		__proto.translate=function(x,y){
			this.tx+=x;
			this.ty+=y;
			return this;
		}

		__proto.scale=function(x,y){
			this.a *=x;
			this.d *=y;
			this.c *=x;
			this.b *=y;
			this.tx *=x;
			this.ty *=y;
			this.bTransform=true;
		}

		__proto.rotate=function(angle){
			var cos=this.cos=Math.cos(angle);
			var sin=this.sin=Math.sin(angle);
			var a1=this.a;
			var c1=this.c;
			var tx1=this.tx;
			this.a=a1 *cos-this.b *sin;
			this.b=a1 *sin+this.b *cos;
			this.c=c1 *cos-this.d *sin;
			this.d=c1 *sin+this.d *cos;
			this.tx=tx1 *cos-this.ty *sin;
			this.ty=tx1 *sin+this.ty *cos;
			this.bTransform=true;
		}

		__proto.skew=function(x,y){
			var tanX=Math.tan(x);
			var tanY=Math.tan(y);
			var a1=this.a;
			var b1=this.b;
			this.a+=tanY *this.c;
			this.b+=tanY *this.d;
			this.c+=tanX *a1;
			this.d+=tanX *b1;
			return this;
		}

		__proto.invertTransformPoint=function(out){
			var a1=this.a;
			var b1=this.b;
			var c1=this.c;
			var d1=this.d;
			var tx1=this.tx;
			var n=a1 *d1-b1 *c1;
			var a2=d1 / n;
			var b2=-b1 / n;
			var c2=-c1 / n;
			var d2=a1 / n;
			var tx2=(c1 *this.ty-d1 *tx1)/ n;
			var ty2=-(a1 *this.ty-b1 *tx1)/ n;
			out.setTo(a2 *out.x+c2 *out.y+tx2,b2 *out.x+d2 *out.y+ty2);
		}

		__proto.transformPoint=function(x,y,out){
			out.setTo(this.a *x+this.c *y+this.tx,this.b *x+this.d *y+this.ty);
		}

		__proto.transformPointArray=function(data,out){
			var len=data.length;
			for (var i=0;i < len;i+=2){
				var x=data[i],y=data[i+1];
				out[i]=this.a *x+this.c *y+this.tx;
				out[i+1]=this.b *x+this.d *y+this.ty;
			}
		}

		__proto.transformPointArrayScale=function(data,out){
			var len=data.length;
			for (var i=0;i < len;i+=2){
				var x=data[i],y=data[i+1];
				out[i]=this.a *x+this.c *y;
				out[i+1]=this.b *x+this.d *y;
			}
		}

		__proto.getScaleX=function(){
			return this.b===0 ? this.a :Math.sqrt(this.a *this.a+this.b *this.b);
		}

		__proto.getScaleY=function(){
			return this.c===0 ? this.d :Math.sqrt(this.c *this.c+this.d *this.d);
		}

		__proto.invert=function(){
			var a1=this.a;
			var b1=this.b;
			var c1=this.c;
			var d1=this.d;
			var tx1=this.tx;
			var n=a1 *d1-b1 *c1;
			this.a=d1 / n;
			this.b=-b1 / n;
			this.c=-c1 / n;
			this.d=a1 / n;
			this.tx=(c1 *this.ty-d1 *tx1)/ n;
			this.ty=-(a1 *this.ty-b1 *tx1)/ n;
			return this;
		}

		__proto.setTo=function(a,b,c,d,tx,ty){
			this.a=a,this.b=b,this.c=c,this.d=d,this.tx=tx,this.ty=ty;
			return this;
		}

		__proto.concat=function(mtx){
			var a=this.a;
			var c=this.c;
			var tx=this.tx;
			this.a=a *mtx.a+this.b *mtx.c;
			this.b=a *mtx.b+this.b *mtx.d;
			this.c=c *mtx.a+this.d *mtx.c;
			this.d=c *mtx.b+this.d *mtx.d;
			this.tx=tx *mtx.a+this.ty *mtx.c+mtx.tx;
			this.ty=tx *mtx.b+this.ty *mtx.d+mtx.ty;
			return this;
		}

		__proto.clone=function(){
			var no=Matrix._cache;
			var dec=!no._length ? (new Matrix()):no[--no._length];
			dec.a=this.a;
			dec.b=this.b;
			dec.c=this.c;
			dec.d=this.d;
			dec.tx=this.tx;
			dec.ty=this.ty;
			dec.bTransform=this.bTransform;
			return dec;
		}

		__proto.copy=function(dec){
			dec.a=this.a;
			dec.b=this.b;
			dec.c=this.c;
			dec.d=this.d;
			dec.tx=this.tx;
			dec.ty=this.ty;
			dec.bTransform=this.bTransform;
			return dec;
		}

		__proto.toString=function(){
			return this.a+","+this.b+","+this.c+","+this.d+","+this.tx+","+this.ty;
		}

		//内存管理应该是数学计算以外的事情不能放到这里哎
		__proto.destroy=function(){
			if (this.inPool)return;
			var cache=Matrix._cache;
			this.inPool=true;
			cache._length || (cache._length=0);
			cache[cache._length++]=this;
			this.a=this.d=1;
			this.b=this.c=this.tx=this.ty=0;
			this.bTransform=false;
		}

		Matrix.mul=function(m1,m2,out){
			var aa=m1.a,ab=m1.b,ac=m1.c,ad=m1.d,atx=m1.tx,aty=m1.ty;
			var ba=m2.a,bb=m2.b,bc=m2.c,bd=m2.d,btx=m2.tx,bty=m2.ty;
			if (bb!==0 || bc!==0){
				out.a=aa *ba+ab *bc;
				out.b=aa *bb+ab *bd;
				out.c=ac *ba+ad *bc;
				out.d=ac *bb+ad *bd;
				out.tx=ba *atx+bc *aty+btx;
				out.ty=bb *atx+bd *aty+bty;
				}else {
				out.a=aa *ba;
				out.b=ab *bd;
				out.c=ac *ba;
				out.d=ad *bd;
				out.tx=ba *atx+btx;
				out.ty=bd *aty+bty;
			}
			return out;
		}

		Matrix.mulPre=function(m1,ba,bb,bc,bd,btx,bty,out){
			var aa=m1.a,ab=m1.b,ac=m1.c,ad=m1.d,atx=m1.tx,aty=m1.ty;
			if (bb!==0 || bc!==0){
				out.a=aa *ba+ab *bc;
				out.b=aa *bb+ab *bd;
				out.c=ac *ba+ad *bc;
				out.d=ac *bb+ad *bd;
				out.tx=ba *atx+bc *aty+btx;
				out.ty=bb *atx+bd *aty+bty;
				}else {
				out.a=aa *ba;
				out.b=ab *bd;
				out.c=ac *ba;
				out.d=ad *bd;
				out.tx=ba *atx+btx;
				out.ty=bd *aty+bty;
			}
			return out;
		}

		Matrix.mulPos=function(m1,aa,ab,ac,ad,atx,aty,out){
			var ba=m1.a,bb=m1.b,bc=m1.c,bd=m1.d,btx=m1.tx,bty=m1.ty;
			if (bb!==0 || bc!==0){
				out.a=aa *ba+ab *bc;
				out.b=aa *bb+ab *bd;
				out.c=ac *ba+ad *bc;
				out.d=ac *bb+ad *bd;
				out.tx=ba *atx+bc *aty+btx;
				out.ty=bb *atx+bd *aty+bty;
				}else {
				out.a=aa *ba;
				out.b=ab *bd;
				out.c=ac *ba;
				out.d=ad *bd;
				out.tx=ba *atx+btx;
				out.ty=bd *aty+bty;
			}
			return out;
		}

		Matrix.preMul=function(parent,self,out){
			var pa=parent.a,pb=parent.b,pc=parent.c,pd=parent.d;
			var na=self.a,nb=self.b,nc=self.c,nd=self.d,ntx=self.tx,nty=self.ty;
			out.a=na *pa;
			out.b=out.c=0;
			out.d=nd *pd;
			out.tx=ntx *pa+parent.tx;
			out.ty=nty *pd+parent.ty;
			if (nb!==0 || nc!==0 || pb!==0 || pc!==0){
				out.a+=nb *pc;
				out.d+=nc *pb;
				out.b+=na *pb+nb *pd;
				out.c+=nc *pa+nd *pc;
				out.tx+=nty *pc;
				out.ty+=ntx *pb;
			}
			return out;
		}

		Matrix.preMulXY=function(parent,x,y,out){
			var pa=parent.a,pb=parent.b,pc=parent.c,pd=parent.d;
			out.a=pa;
			out.b=pb;
			out.c=pc;
			out.d=pd;
			out.tx=x *pa+parent.tx+y *pc;
			out.ty=y *pd+parent.ty+x *pb;
			return out;
		}

		Matrix.create=function(){
			var cache=Matrix._cache;
			var mat=!cache._length ? (new Matrix()):cache[--cache._length];
			mat.inPool=false;
			return mat;
		}

		Matrix.EMPTY=new Matrix();
		Matrix.TEMP=new Matrix();
		Matrix._cache=[];
		return Matrix;
	})()


	/**
	*Point类
	*@author yung
	*/
	//class laya.maths.Point
	var Point=(function(){
		function Point(x,y){
			//this.x=NaN;
			//this.y=NaN;
			(x===void 0)&& (x=0);
			(y===void 0)&& (y=0);
			this.x=x;
			this.y=y;
		}

		__class(Point,'laya.maths.Point');
		var __proto=Point.prototype;
		__proto.setTo=function(x,y){
			this.x=x;
			this.y=y;
			return this;
		}

		Point.TEMP=new Point();
		Point.EMPTY=new Point();
		return Point;
	})()


	/**
	*矩形
	*@author yung
	*/
	//class laya.maths.Rectangle
	var Rectangle=(function(){
		function Rectangle(x,y,width,height){
			//this.x=NaN;
			//this.y=NaN;
			//this.width=NaN;
			//this.height=NaN;
			(x===void 0)&& (x=0);
			(y===void 0)&& (y=0);
			(width===void 0)&& (width=0);
			(height===void 0)&& (height=0);
			this.x=x;
			this.y=y;
			this.width=width;
			this.height=height;
		}

		__class(Rectangle,'laya.maths.Rectangle');
		var __proto=Rectangle.prototype;
		/**
		*将 Rectangle 的成员设置为指定值
		*@param x 矩形左上角的 x 坐标。
		*@param y 矩形左上角的 y 坐标。
		*@param width 矩形的宽度。
		*@param height 矩形的高。
		*@return 返回矩形对象本身
		*/
		__proto.setTo=function(x,y,width,height){
			this.x=x;
			this.y=y;
			this.width=width;
			this.height=height;
			return this;
		}

		/**
		*复制 source 对象的值到此矩形对象中。
		*@param sourceRect 源 Rectangle 对象
		*@return 返回对象本身
		*/
		__proto.copyFrom=function(source){
			this.x=source.x;
			this.y=source.y;
			this.width=source.width;
			this.height=source.height;
			return this;
		}

		/**
		*确定此矩形对象是否包含指定的点。
		*@param x 点的 x 坐标（水平位置）。
		*@param y 点的 y 坐标（垂直位置）。
		*@return 如果 Rectangle 对象包含指定的点，则值为 true；否则为 false。
		*/
		__proto.contains=function(x,y){
			if (this.width <=0 || this.height <=0)return false;
			if (x >=this.x && x < this.right){
				if (y >=this.y && y < this.bottom){
					return true;
				}
			}
			return false;
		}

		/**
		*确定在 rect 参数中指定的对象是否与此 Rectangle 对象相交。
		*@param rect 要与此 Rectangle 对象比较的 Rectangle 对象
		*@return 如果相交，则返回 true 值，否则返回 false
		*/
		__proto.intersects=function(rect){
			return !(rect.x > this.right || rect.right < this.x || rect.y > this.bottom || rect.bottom < this.y);
		}

		/**
		*获取和某个矩形区域相交的区域
		*@param rect 比较的矩形区域
		*@param out 输出的矩形区域，尽量用此对象复用对象，减少对象创建消耗
		*@return 返回相交的矩形区域
		*/
		__proto.intersection=function(rect,out){
			if (!this.intersects(rect))return null;
			out || (out=new Rectangle());
			out.x=Math.max(this.x,rect.x);
			out.y=Math.max(this.y,rect.y);
			out.width=Math.min(this.right,rect.right)-out.x;
			out.height=Math.min(this.bottom,rect.bottom)-out.y;
			return out;
		}

		/**
		*通过填充两个矩形之间的水平和垂直空间，将这两个矩形组合在一起以创建一个新的 Rectangle 对象
		*@param 目标矩形对象
		*@param out 输出的矩形区域，尽量用此对象复用对象，减少对象创建消耗
		*@return 充当两个矩形的联合的新 Rectangle 对象
		*/
		__proto.union=function(source,out){
			out || (out=new Rectangle());
			this.clone(out);
			if (source.width <=0 || source.height <=0)return out;
			out.addPoint(source.x,source.y);
			out.addPoint(source.right,source.bottom);
			return this;
		}

		/**
		*返回一个新的 Rectangle 对象，其 x、y、width 和 height 属性的值与原始 Rectangle 对象的对应值相同。
		*@param out 输出的矩形区域，尽量用此对象复用对象，减少对象创建消耗
		*@return 新的 Rectangle 对象，其 x、y、width 和 height 属性的值与原始 Rectangle 对象的对应值相同。
		*/
		__proto.clone=function(out){
			out || (out=new Rectangle());
			out.x=this.x;
			out.y=this.y;
			out.width=this.width;
			out.height=this.height;
			return out;
		}

		/**
		*生成并返回一个字符串，该字符串列出 Rectangle 对象的水平位置和垂直位置以及高度和宽度。
		*/
		__proto.toString=function(){
			return this.x+","+this.y+","+this.width+","+this.height;
		}

		/**
		*确定在 rect 参数中指定的对象是否等于此 Rectangle 对象。
		*@param rect 要与此 Rectangle 对象进行比较的矩形
		*@return 如果对象具有与此 Rectangle 对象完全相同的 x、y、width 和 height 属性值，则返回 true 值，否则返回 false
		*/
		__proto.equal=function(rect){
			if (!rect || rect.x!==this.x || rect.y!==this.y || rect.width!==this.width || rect.height!==this.height)return false;
			return true;
		}

		/**
		*在矩形区域中加一个点
		*@param x x坐标
		*@param y y坐标
		*@return 返回此对象
		*/
		__proto.addPoint=function(x,y){
			this.x > x && (this.width+=this.x-x,this.x=x);
			this.y > y && (this.height+=this.y-y,this.y=y);
			if (this.width < x-this.x)this.width=x-this.x;
			if (this.height < y-this.y)this.height=y-this.y;
			return this;
		}

		/**
		*返回代表当前矩形的顶点数据
		*@return 顶点数据
		*@private
		*/
		__proto._getBoundPoints=function(){
			var rst=Rectangle._temB;
			rst.length=0;
			if (this.width==0 || this.height==0)return rst;
			rst.push(this.x,this.y,this.x+this.width,this.y,this.x,this.y+this.height,this.x+this.width,this.y+this.height);
			return rst;
		}

		/**x 和 width 属性的和。*/
		__getset(0,__proto,'right',function(){
			return this.x+this.width;
		});

		/**y 和 height 属性的和。*/
		__getset(0,__proto,'bottom',function(){
			return this.y+this.height;
		});

		Rectangle._getBoundPointS=function(x,y,width,height){
			var rst=Rectangle._temA;
			rst.length=0;
			if (width==0 || height==0)return rst;
			rst.push(x,y,x+width,y,x,y+height,x+width,y+height);
			return rst;
		}

		Rectangle._getWrapRec=function(pointList,rst){
			if (!pointList || pointList.length < 1)return rst ? rst.setTo(0,0,0,0):Rectangle.EMPTY;
			rst=rst ? rst :new Rectangle();
			var i,len=pointList.length,minX,maxX,minY,maxY,tPoint=Point.TEMP;
			minX=minY=99999;
			maxX=maxY=-minX;
			for (i=0;i < len;i+=2){
				tPoint.x=pointList[i];
				tPoint.y=pointList[i+1];
				minX=minX < tPoint.x ? minX :tPoint.x;
				minY=minY < tPoint.y ? minY :tPoint.y;
				maxX=maxX > tPoint.x ? maxX :tPoint.x;
				maxY=maxY > tPoint.y ? maxY :tPoint.y;
			}
			return rst.setTo(minX,minY,maxX-minX,maxY-minY);
		}

		Rectangle.EMPTY=new Rectangle();
		Rectangle.TEMP=new Rectangle();
		Rectangle._temB=[];
		Rectangle._temA=[];
		return Rectangle;
	})()


	/**
	*声音管理类
	*@author ww
	*@version 1.0
	*@created 2015-9-10 下午2:35:21
	*/
	//class laya.media.SoundManager
	var SoundManager=(function(){
		function SoundManager(){};
		__class(SoundManager,'laya.media.SoundManager');
		/**
		*是否失去焦点后自动停止背景音乐
		*@param v
		*
		*/
		/**
		*是否失去焦点后自动停止背景音乐
		*@return
		*
		*/
		__getset(1,SoundManager,'autoStopMusic',function(){
			return SoundManager._autoStopMusic;
			},function(v){
			Laya.stage.off("blur",null,SoundManager.stageOnBlur);
			Laya.stage.off("focus",null,SoundManager.stageOnFocus);
			SoundManager._autoStopMusic=v;
			if (v){
				Laya.stage.on("blur",null,SoundManager.stageOnBlur);
				Laya.stage.on("focus",null,SoundManager.stageOnFocus);
			}
		});

		/**是否静音*/
		__getset(1,SoundManager,'muted',function(){
			return SoundManager._muted;
			},function(value){
			if (value){
				if (SoundManager._tMusic)
					SoundManager.stopSound(SoundManager._tMusic);
			}
			SoundManager._muted=value;
		});

		/**是否音效静音*/
		__getset(1,SoundManager,'soundMuted',function(){
			return SoundManager._soundMuted;
			},function(value){
			SoundManager._soundMuted=value;
		});

		/**是否背景音乐静音*/
		__getset(1,SoundManager,'musicMuted',function(){
			return SoundManager._musicMuted;
			},function(value){
			if (value){
				if (SoundManager._tMusic)
					SoundManager.stopSound(SoundManager._tMusic);
			}
			SoundManager._musicMuted=value;
		});

		SoundManager.addChannel=function(channel){
			SoundManager._channels.push(channel);
		}

		SoundManager.removeChannel=function(channel){
			var i=0;
			for (i=SoundManager._channels.length-1;i >=0;i--){
				if (SoundManager._channels[i]==channel){
					SoundManager._channels.splice(i,1);
				}
			}
		}

		SoundManager.stageOnBlur=function(){
			if (SoundManager._musicChannel){
				if (!SoundManager._musicChannel.isStopped){
					SoundManager._blurPaused=true;
					SoundManager._musicChannel.stop();
				}
			}
		}

		SoundManager.stageOnFocus=function(){
			if (SoundManager._blurPaused){
				SoundManager.playMusic(SoundManager._tMusic);
				SoundManager._blurPaused=false;
			}
		}

		SoundManager.playSound=function(url,loops,complete){
			(loops===void 0)&& (loops=1);
			if (SoundManager._muted)
				return null;
			var tSound=Laya.loader.getRes(url);
			if (!tSound){
				tSound=new Sound();
				tSound.load(url);
				Loader.cacheRes(url,tSound);
			};
			var channel;
			channel=tSound.play(0,loops);
			channel.volume=(url==SoundManager._tMusic)? SoundManager.musicVolume :SoundManager.soundVolume;
			channel.completeHandler=complete;
			return channel;
		}

		SoundManager.destroySound=function(url){
			var tSound=Laya.loader.getRes(url);
			if (tSound){
				Loader.clearRes(url);
				tSound.dispose();
			}
		}

		SoundManager.playMusic=function(url,loops,complete){
			(loops===void 0)&& (loops=0);
			SoundManager._tMusic=url;
			if (SoundManager._musicChannel)
				SoundManager._musicChannel.stop();
			return SoundManager._musicChannel=SoundManager.playSound(url,loops,complete);
		}

		SoundManager.stopSound=function(url){
			var i=0;
			var channel;
			for (i=SoundManager._channels.length-1;i >=0;i--){
				channel=SoundManager._channels[i];
				if (channel.url==url){
					channel.stop();
				}
			}
		}

		SoundManager.stopMusic=function(){
			if (SoundManager._musicChannel)
				SoundManager._musicChannel.stop();
		}

		SoundManager.setSoundVolume=function(volume,url){
			if (url){
				SoundManager._setVolume(url,volume);
			}
			else{
				SoundManager.soundVolume=volume;
			}
		}

		SoundManager.setMusicVolume=function(volume){
			SoundManager.musicVolume=volume;
			SoundManager._setVolume(SoundManager._tMusic,volume);
		}

		SoundManager._setVolume=function(url,volume){
			var i=0;
			var channel;
			for (i=SoundManager._channels.length-1;i >=0;i--){
				channel=SoundManager._channels[i];
				if (channel.url==url){
					channel.volume=volume;
				}
			}
		}

		SoundManager.musicVolume=1;
		SoundManager.soundVolume=1;
		SoundManager._muted=false;
		SoundManager._soundMuted=false;
		SoundManager._musicMuted=false;
		SoundManager._tMusic=null;
		SoundManager._musicChannel=null;
		SoundManager._channels=[];
		SoundManager._autoStopMusic=false;
		SoundManager._blurPaused=false;
		return SoundManager;
	})()


	/**
	*<p> <code>URL</code> 类用于定义地址信息。</p>
	*@author laya
	*/
	//class laya.net.URL
	var URL=(function(){
		function URL(url){
			this._url=null;
			this._path=null;
			this._url=URL.formatURL(url);
			this._path=URL.getPath(url);
		}

		__class(URL,'laya.net.URL');
		var __proto=URL.prototype;
		__getset(0,__proto,'url',function(){
			return this._url;
		});

		__getset(0,__proto,'path',function(){
			return this._path;
		});

		URL.formatURL=function(url,_basePath){
			if (URL.customFormat !=null)url=URL.customFormat(url,_basePath);
			if (!url)return "null path";
			URL.version[url] && (url+="?v="+URL.version[url]);
			if(url.indexOf(":")>0||url.charAt(0)=='/')return url;
			return (_basePath || URL.rootPath)+url;
		}

		URL.getPath=function(url){
			var ofs=url.lastIndexOf('/');
			return ofs > 0 ? url.substr(0,ofs+1):"";
		}

		URL.getName=function(url){
			var ofs=url.lastIndexOf('/');
			return ofs > 0 ? url.substr(ofs+1):url;
		}

		URL.version={};
		URL.basePath="";
		URL.rootPath="";
		URL.customFormat=null
		return URL;
	})()


	/**
	*Render管理类，单例，可以通过Laya.render访问
	*@author yung
	*/
	//class laya.renders.Render
	var Render=(function(){
		/**
		*初始化引擎
		*@param width 游戏窗口宽度
		*@param height 游戏窗口高度
		*@param renderType 渲染类型(auto,canvas,webgl)默认为auto，优先用webgl渲染，如果webgl不可用，则用canvas渲染
		*/
		function Render(width,height){
			Render._mainCanvas=new HTMLCanvas('2D');
			var style=Render._mainCanvas.source.style;
			style.position='absolute';
			style.top=style.left="0px";
			style.background="#000000";
			var isWebGl=Render.WebGL !=null;
			isWebGl && Render.WebGL.init(Render.canvas,width,height);
			Browser.document.body.appendChild(Render._mainCanvas.source);
			Render._context=new RenderContext(width,height,isWebGl ? null :Render._mainCanvas);
			Browser.window.requestAnimationFrame(loop);
			function loop (){
				Laya.stage._loop();
				Browser.window.requestAnimationFrame(loop);
			}
		}

		__class(Render,'laya.renders.Render');
		/**目前使用的渲染器*/
		__getset(1,Render,'context',function(){
			return Render._context;
		});

		/**是否是WebGl模式*/
		__getset(1,Render,'isWebGl',function(){
			return Render.WebGL !=null;
		});

		/**渲染使用的画布*/
		__getset(1,Render,'canvas',function(){
			return Render._mainCanvas;
		});

		Render._context=null
		Render._mainCanvas=null
		Render.WebGL=null
		Render.clear=function(value){
			Render._context.ctx.clear();
		}

		Render.clearAtlas=function(value){
		};

		Render.finish=function(){};
		return Render;
	})()


	/**
	*@private
	*渲染环境
	*/
	//class laya.renders.RenderContext
	var RenderContext=(function(){
		function RenderContext(width,height,canvas){
			this.x=0;
			this.y=0;
			//this.canvas=null;
			//this.ctx=null;
			if (canvas){
				this.ctx=canvas.getContext('2d');
				}else {
				canvas=new HTMLCanvas("3D");
				this.ctx=System.createWebGLContext2D(canvas);
				canvas._setContext(this.ctx);
			}
			canvas.size(width,height);
			this.canvas=canvas;
		}

		__class(RenderContext,'laya.renders.RenderContext');
		var __proto=RenderContext.prototype;
		/**销毁当前渲染环境*/
		__proto.destroy=function(){
			if (this.canvas){
				this.canvas.destroy();
				this.canvas=null;
			}
			if (this.ctx){
				this.ctx.destroy();
				this.ctx=null;
			}
		}

		__proto.drawTexture=function(tex,x,y,width,height){
			tex.loaded ? this.ctx.drawTexture(tex,x,y,width,height,this.x,this.y):(this.ctx._repaint=true);
		}

		__proto._drawTexture=function(x,y,args){
			args[0].loaded ? this.ctx.drawTexture(args[0],args[1],args[2],args[3],args[4],x,y):(this.ctx._repaint=true);
		}

		__proto.drawTextureWithTransform=function(tex,x,y,width,height,m){
			tex.loaded ? this.ctx.drawTextureWithTransform(tex,x,y,width,height,m,this.x,this.y):(this.ctx._repaint=true);
		}

		__proto._drawTextureWithTransform=function(x,y,args){
			args[0].loaded ? this.ctx.drawTextureWithTransform(args[0],args[1],args[2],args[3],args[4],args[5],x,y):(this.ctx._repaint=true);
		}

		__proto.fillQuadrangle=function(tex,x,y,point4,m){
			this.ctx.fillQuadrangle(tex,x,y,point4,m);
		}

		__proto._fillQuadrangle=function(x,y,args){
			this.ctx.fillQuadrangle(args[0],args[1],args[2],args[3],args[4]);
		}

		__proto.drawCanvas=function(canvas,x,y,width,height){
			this.ctx.drawCanvas(canvas,x+this.x,y+this.y,width,height);
		}

		__proto.drawRect=function(x,y,width,height,color,lineWidth){
			(lineWidth===void 0)&& (lineWidth=1);
			var ctx=this.ctx;
			ctx.strokeStyle=color;
			ctx.lineWidth=lineWidth;
			ctx.strokeRect(x+this.x,y+this.y,width,height);
		}

		__proto._drawRect=function(x,y,args){
			var ctx=this.ctx;
			if (args[4] !=null){
				ctx.fillStyle=args[4];
				ctx.fillRect(x+args[0],y+args[1],args[2],args[3]);
			}
			if (args[5] !=null){
				ctx.strokeStyle=args[5];
				ctx.lineWidth=args[6];
				ctx.strokeRect(x+args[0],y+args[1],args[2],args[3]);
			}
		}

		//x:Number,y:Number,points:Array,fillColor:String,lineColor:String=null,lineWidth:Number=1
		__proto._drawPoly=function(x,y,args){
			var ctx=this.ctx;
			ctx.beginPath();
			var points=args[2];
			x+=args[0],y+=args[1];
			ctx.moveTo(x+points[0],y+points[1]);
			var i=2,n=points.length;
			while (i < n){
				ctx.lineTo(x+points[i++],y+points[i++]);
			}
			ctx.closePath();
			this.fillAndStroke(args[3],args[4],args[5]);
		}

		//x:Number,y:Number,paths:Array,brush:Object=null,pen:Object=null
		__proto._drawPath=function(x,y,args){
			var ctx=this.ctx;
			ctx.beginPath();
			x+=args[0],y+=args[1];
			var paths=args[2];
			for (var i=0,n=paths.length;i < n;i++){
				var path=paths[i];
				switch (path[0]){
					case "moveTo":
						ctx.moveTo(x+path[1],y+path[2]);
						break ;
					case "lineTo":
						ctx.lineTo(x+path[1],y+path[2]);
						break ;
					case "arcTo":
						ctx.arcTo(x+path[1],y+path[2],x+path[3],y+path[4],path[5]);
						break ;
					case "closePath":
						ctx.closePath();
						break ;
					}
			};
			var brush=args[3];
			if (brush !=null){
				ctx.fillStyle=brush.fillStyle;
				ctx.fill();
			};
			var pen=args[4];
			if (pen !=null){
				ctx.strokeStyle=pen.strokeStyle;
				ctx.lineWidth=pen.lineWidth || 1;
				ctx.lineJoin=pen.lineJoin;
				ctx.lineCap=pen.lineCap;
				ctx.miterLimit=pen.miterLimit;
				ctx.stroke();
			}
		}

		__proto.fillAndStroke=function(fillColor,strokeColor,lineWidth){
			if (fillColor !=null){
				this.ctx.fillStyle=fillColor;
				this.ctx.fill();
			}
			if (strokeColor !=null){
				this.ctx.strokeStyle=strokeColor;
				this.ctx.lineWidth=lineWidth;
				this.ctx.stroke();
			}
		}

		//矢量方法
		__proto._drawPie=function(x,y,args){
			var ctx=this.ctx;
			ctx.translate(x+args[0],y+args[1]);
			ctx.beginPath();
			ctx.moveTo(0,0);
			ctx.arc(0,0,args[2],args[3],args[4]);
			ctx.closePath();
			this.fillAndStroke(args[5],args[6],args[7]);
			ctx.translate(-x-args[0],-y-args[1]);
		}

		__proto._drawPieWebGL=function(x,y,args){
			var ctx=this.ctx;
			ctx.lineWidth=args[7];
			ctx.fan(x+this.x+args[0],y+this.y+args[1],args[2],args[3],args[4],args[5],args[6]);
		}

		__proto.clipRect=function(x,y,width,height){
			this.ctx.clipRect(x+this.x,y+this.y,width,height);
		}

		__proto._clipRect=function(x,y,args){
			this.ctx.clipRect(x+args[0],y+args[1],args[2],args[3]);
		}

		__proto.fillRect=function(x,y,width,height,fillStyle){
			this.ctx.fillRect(x+this.x,y+this.y,width,height,fillStyle);
		}

		__proto._fillRect=function(x,y,args){
			this.ctx.fillRect(x+args[0],y+args[1],args[2],args[3],args[4]);
		}

		__proto.drawCircle=function(x,y,radius,color,lineWidth){
			(lineWidth===void 0)&& (lineWidth=1);
			var ctx=this.ctx;
			ctx.beginPath();
			ctx.strokeStyle=color;
			ctx.lineWidth=lineWidth;
			ctx.arc(x+this.x,y+this.y,radius,0,RenderContext.PI2);
			ctx.stroke();
		}

		__proto._drawCircle=function(x,y,args){
			var ctx=this.ctx;
			ctx.beginPath();
			ctx.arc(args[0]+x,args[1]+y,args[2],0,RenderContext.PI2);
			this.fillAndStroke(args[3],args[4],args[5]);
		}

		__proto._drawCircleWebGL=function(x,y,args){
			this.ctx.drawPoly(x+this.x+args[0],y+this.y+args[1],args[2],40,args[4],args[5],args[3]);
		}

		__proto.fillCircle=function(x,y,radius,color){
			var ctx=this.ctx;
			ctx.beginPath();
			ctx.fillStyle=color;
			ctx.arc(x+this.x,y+this.y,radius,0,RenderContext.PI2);
			ctx.fill();
		}

		__proto._fillCircle=function(x,y,args){
			var ctx=this.ctx;
			ctx.beginPath();
			ctx.fillStyle=args[3];
			ctx.arc(args[0]+x,args[1]+y,args[2],0,RenderContext.PI2);
			ctx.fill();
		}

		__proto.setShader=function(shader){
			this.ctx.setShader(shader);
		}

		__proto._setShader=function(x,y,args){
			this.ctx.setShader(args[0]);
		}

		__proto.drawLine=function(fromX,fromY,toX,toY,color,lineWidth){
			(lineWidth===void 0)&& (lineWidth=1);
			var ctx=this.ctx;
			ctx.beginPath();
			ctx.strokeStyle=color;
			ctx.lineWidth=lineWidth;
			ctx.moveTo(this.x+fromX,this.y+fromY);
			ctx.lineTo(this.x+toX,this.y+toY);
			ctx.stroke();
		}

		__proto.drawLinesWebGL=function(x,y,args){
			this.ctx.drawLines(x+this.x+args[0],y+this.y+args[1],args[2],args[3],args[4]);
		}

		__proto._drawLine=function(x,y,args){
			var ctx=this.ctx;
			ctx.beginPath();
			ctx.strokeStyle=args[4];
			ctx.lineWidth=args[5];
			ctx.moveTo(x+args[0],y+args[1]);
			ctx.lineTo(x+args[2],y+args[3]);
			ctx.stroke();
		}

		__proto.drawLines=function(x,y,args){
			var ctx=this.ctx;
			ctx.beginPath();
			ctx.strokeStyle=args[3];
			ctx.lineWidth=args[4];
			var points=args[2];
			x+=args[0],y+=args[1];
			ctx.moveTo(x+points[0],y+points[1]);
			var i=2,n=points.length;
			while (i < n){
				ctx.lineTo(x+points[i++],y+points[i++]);
			}
			ctx.stroke();
		}

		//x:Number,y:Number,points:Array,lineColor:String,lineWidth:Number=1
		__proto.drawCurves=function(x,y,args){
			var ctx=this.ctx;
			ctx.beginPath();
			ctx.strokeStyle=args[3];
			ctx.lineWidth=args[4];
			var points=args[2];
			x+=args[0],y+=args[1];
			ctx.moveTo(x+points[0],y+points[1]);
			var i=2,n=points.length;
			while (i < n){
				ctx.quadraticCurveTo(x+points[i++],y+points[i++],x+points[i++],y+points[i++]);
			}
			ctx.stroke();
		}

		__proto.draw=function(x,y,args){
			args[0].call(null,this,x,y);
		}

		__proto.clear=function(){
			this.ctx.clear();
		}

		__proto.transform=function(a,b,c,d,tx,ty){
			this.ctx.transform(a,b,c,d,tx,ty);
		}

		__proto.transformByMatrix=function(value){
			this.ctx.transformByMatrix(value);
		}

		__proto._transformByMatrix=function(x,y,args){
			this.ctx.transformByMatrix(args[0]);
		}

		__proto.setTransform=function(a,b,c,d,tx,ty){
			this.ctx.setTransform(a,b,c,d,tx,ty);
		}

		__proto._setTransform=function(x,y,args){
			this.ctx.setTransform(args[0],args[1],args[2],args[3],args[4],args[5]);
		}

		__proto.setTransformByMatrix=function(value){
			this.ctx.setTransformByMatrix(value);
		}

		__proto._setTransformByMatrix=function(x,y,args){
			this.ctx.setTransformByMatrix(args[0]);
		}

		__proto.save=function(){
			this.ctx.save();
		}

		__proto.restore=function(){
			this.ctx.restore();
		}

		__proto.translate=function(x,y){
			this.ctx.translate(x,y);
		}

		__proto._translate=function(x,y,args){
			this.ctx.translate(args[0],args[1]);
		}

		__proto.rotate=function(angle){
			this.ctx.rotate(angle);
		}

		__proto._transform=function(x,y,args){
			this.ctx.translate(args[1]+x,args[2]+y);
			var mat=args[0];
			this.ctx.transform(mat.a,mat.b,mat.c,mat.d,mat.tx,mat.ty);
			this.ctx.translate(-x-args[1],-y-args[2]);
		}

		__proto._rotate=function(x,y,args){
			this.ctx.translate(args[1]+x,args[2]+y);
			this.ctx.rotate(args[0]);
			this.ctx.translate(-x-args[1],-y-args[2]);
		}

		__proto._scale=function(x,y,args){
			this.ctx.translate(args[2]+x,args[3]+y);
			this.ctx.scale(args[0],args[1]);
			this.ctx.translate(-x-args[2],-y-args[3]);
		}

		__proto.scale=function(scaleX,scaleY){
			this.ctx.scale(scaleX,scaleY);
		}

		__proto.alpha=function(value){
			this.ctx.globalAlpha=value;
		}

		__proto._alpha=function(x,y,args){
			this.ctx.globalAlpha=args[0];
		}

		__proto.setAlpha=function(value){
			this.ctx.globalAlpha=value;
		}

		__proto._setAlpha=function(x,y,args){
			this.ctx.globalAlpha=args[0];
		}

		__proto.fillWords=function(words,x,y,font,color){
			this.ctx.fillWords(words,x,y,font,color);
		}

		__proto.fillText=function(text,x,y,font,color,textAlign){
			this.ctx.fillText(text,x+this.x,y+this.y,font,color,textAlign);
		}

		__proto._fillText=function(x,y,args){
			this.ctx.fillText(args[0],args[1]+x,args[2]+y,args[3],args[4],args[5]);
		}

		__proto.strokeText=function(text,x,y,font,color,lineWidth,textAlign){
			this.ctx.strokeText(text,x+this.x,y+this.y,font,color,lineWidth,textAlign);
		}

		__proto._strokeText=function(x,y,args){
			this.ctx.strokeText(args[0],args[1]+x,args[2]+y,args[3],args[4],args[5],args[6]);
		}

		__proto._fillBorderText=function(x,y,args){
			this.ctx.fillBorderText(args[0],args[1]+x,args[2]+y,args[3],args[4],args[5],args[6],args[7]);
		}

		__proto.blendMode=function(type){
			this.ctx.globalCompositeOperation=type;
		}

		__proto._blendMode=function(x,y,args){
			this.ctx.globalCompositeOperation=args[0];
		}

		__proto.flush=function(){
			this.ctx.flush && this.ctx.flush();
		}

		__proto.addRenderObject=function(o){
			this.ctx.addRenderObject(o);
		}

		__proto.beginClip=function(x,y,w,h){
			this.ctx.beginClip && this.ctx.beginClip(x,y,w,h);
		}

		__proto._beginClip=function(x,y,args){
			this.ctx.beginClip && this.ctx.beginClip(x+args[0],y+args[1],args[2],args[3]);
		}

		__proto.endClip=function(){
			this.ctx.endClip && this.ctx.endClip();
		}

		__proto._setIBVB=function(x,y,args){
			this.ctx.setIBVB(args[0]+x,args[1]+y,args[2],args[3],args[4],args[5],args[6],args[7]);
		}

		__proto.fillTrangles=function(x,y,args){
			this.ctx.fillTrangles(args[0],args[1],args[2],args[3],args.length > 4 ? args[4] :null);
		}

		__proto._fillTrangles=function(x,y,args){
			this.ctx.fillTrangles(args[0],args[1]+x,args[2]+y,args[3],args[4]);
		}

		__proto.drawPath=function(x,y,args){
			this.ctx.drawPath(x+this.x+args[0],y+this.y+args[1],args[2],args[3],args[4]);
		}

		// polygon(x:Number,y:Number,r:Number,edges:Number,color:uint,borderWidth:int=2,borderColor:uint=0)
		__proto.drawPoly=function(x,y,args){
			this.ctx.drawPoly(x+this.x+args[0],y+this.y+args[1],args[2],args[3],args[4],args[5],args[6]);
		}

		__proto.drawParticle=function(x,y,args){
			this.ctx.drawParticle(x+this.x,y+this.y,args[0]);
		}

		__getset(0,__proto,'enableMerge',null,function(value){
			this.ctx.enableMerge=value;
		});

		RenderContext.PI2=2 *Math.PI;
		return RenderContext;
	})()


	/**
	*...
	*@author laya
	*/
	//class laya.renders.RenderSprite
	var RenderSprite=(function(){
		function RenderSprite(type,next){
			//this._next=null;
			//this._fun=null;
			this._next=next || RenderSprite.NORENDER;
			switch (type){
				case 0:
					this._fun=this._no;
					return;
				case 0x01:
					this._fun=this._image;
					return;
				case 0x04:
					this._fun=this._alpha;
					return;
				case 0x08:
					this._fun=this._transform;
					return;
				case 0x20:
					this._fun=this._blend;
					return;
				case 0x10:
					this._fun=this._canvas;
					return;
				case 0x40:
					this._fun=this._clip;
					return;
				case 0x80:
					this._fun=this._style;
					return;
				case 0x100:
					this._fun=this._graphics;
					return;
				case 0x400:
					this._fun=this._enableRenderMerge;
					return;
				case 0x800:
					this._fun=this._childs;
					return;
				case 0x200:
					this._fun=this._custom;
					return;
				case 0x01 | 0x100:
					this._fun=this._image2;
					return;
				case 0x01 | 0x08 | 0x100:
					this._fun=this._image2;
					return;
				case 0x02:
					this._fun=Filter._filter;
					return;
				case 0x11111:
					this._fun=RenderSprite._initRenderFun;
					return;
				}
			this.onCreate(type);
		}

		__class(RenderSprite,'laya.renders.RenderSprite');
		var __proto=RenderSprite.prototype;
		__proto.onCreate=function(type){}
		__proto._style=function(sprite,context,x,y){
			sprite._style.render(sprite,context,x,y);
			var next=this._next;
			next._fun.call(next,sprite,context,x,y);
		}

		__proto._no=function(sprite,context,x,y){}
		__proto._custom=function(sprite,context,x,y){
			sprite.customRender(context,x,y);
			var style=sprite._style;
			this._next._fun.call(this._next,sprite,context,x-style.translateX,y-style.translateY);
		}

		__proto._clip=function(sprite,context,x,y){
			var next=this._next;
			if (next==RenderSprite.NORENDER)return;
			var r=sprite._style.scrollRect;
			context.ctx.save();
			context.ctx.clipRect(x,y,r.width,r.height);
			next._fun.call(next,sprite,context,x-r.x,y-r.y);
			context.ctx.restore();
		}

		__proto._enableRenderMerge=function(sprite,context,x,y){
			var next=this._next;
			if (next==RenderSprite.NORENDER)return;
			context.ctx.save();
			context.ctx.enableMerge=true;
			next._fun.call(next,sprite,context,x,y);
			context.ctx.restore();
		}

		__proto._blend=function(sprite,context,x,y){
			var style=sprite._style;
			if (style.blendMode){
				context.ctx.globalCompositeOperation=style.blendMode;
			};
			var next=this._next;
			next._fun.call(next,sprite,context,x,y);
			var mask=sprite.mask;
			if (mask){
				context.ctx.globalCompositeOperation="destination-in";
				if (mask.numChildren > 0 || !mask.graphics._isOnlyOne()){
					mask.cacheAsBitmap=true;
				}
				mask.render(context,x,y);
			}
			context.ctx.globalCompositeOperation="source-over";
		}

		__proto._graphics=function(sprite,context,x,y){
			var style=sprite._style;
			sprite._graphics && sprite._graphics._render(sprite,context,x-style.translateX,y-style.translateY);
			var next=this._next;
			next._fun.call(next,sprite,context,x,y);
		}

		__proto._image=function(sprite,context,x,y){
			if (sprite._graphics._isOnlyOne()){
				var style=sprite._style;
				context.ctx.drawTexture2(x,y,style.translateX,style.translateY,sprite.transform,style.alpha,style.blendMode,sprite._graphics._one);
				}else {
				this._graphics(sprite,context,x,y);
				sprite._renderType &=~ 0x01;
			}
		}

		__proto._image2=function(sprite,context,x,y){
			if (sprite._graphics._isOnlyOne()){
				var style=sprite._style;
				context.ctx.drawTexture2(x,y,style.translateX,style.translateY,sprite.transform,1,null,sprite._graphics._one);
				}else {
				this._graphics(sprite,context,x,y);
				sprite._renderType &=~ 0x01;
			}
		}

		__proto._alpha=function(sprite,context,x,y){
			var style=sprite._style;
			var alpha;
			if ((alpha=style.alpha)> 0.01){
				var temp=context.ctx.globalAlpha;
				context.ctx.globalAlpha *=alpha;
				var next=this._next;
				next._fun.call(next,sprite,context,x,y);
				context.ctx.globalAlpha=temp;
			}
		}

		__proto._transform=function(sprite,context,x,y){
			var transform=sprite.transform,_next=this._next;
			if (transform && _next !=RenderSprite.NORENDER){
				context.save();
				context.transform(transform.a,transform.b,transform.c,transform.d,transform.tx+x,transform.ty+y);
				_next._fun.call(_next,sprite,context,0,0);
				context.restore();
			}else
			_next._fun.call(_next,sprite,context,x,y);
		}

		__proto._childs=function(sprite,context,x,y){
			var style=sprite._style;
			x+=-style.translateX+style.paddingLeft;
			y+=-style.translateY+style.paddingTop;
			var words=sprite._getWords();
			words && context.fillWords(words,x,y,(style).font,(style).color);
			var childs=sprite._childs,n=childs.length,ele;
			if (!sprite.optimizeFloat || sprite.scrollRect==null){
				for (var i=0;i < n;++i)
				(ele=(childs [i]))._style.visible && ele.render(context,x,y);
			}
			else{
				var rect=sprite.scrollRect;
				for (i=0;i < n;++i){
					ele=childs [i];
					if (ele._style.visible && rect.intersects(Rectangle.TEMP.setTo(ele.x,ele.y,ele.width,ele.height)))
						ele.render(context,x,y);
				}
			}
		}

		__proto._canvas=function(sprite,context,x,y){
			var _cacheCanvas=sprite._$P.cacheCanvas;
			var _next=this._next;
			if (!_cacheCanvas){
				_next._fun.call(_next,sprite,tx,x,y);
				return;
			};
			var tx=_cacheCanvas.ctx;
			var _repaint=sprite.isRepaint()|| (!tx)|| tx.ctx._repaint;
			var canvas;
			var left;
			var top;
			var tRec;
			_cacheCanvas.type==='bitmap'?(Stat.canvasBitmap++):(Stat.canvasNormal++);
			if (_repaint){
				left=-sprite.pivotX;
				top=-sprite.pivotY;
				if (!_cacheCanvas._cacheRec)
					_cacheCanvas._cacheRec=new Rectangle();
				var w=sprite.width,h=sprite.height;
				if (sprite.autoSize || w===0 || h===0){
					tRec=sprite.getSelfBounds();
					tRec.x-=sprite.pivotX;
					tRec.y-=sprite.pivotY;
					tRec.width+=20;
					tRec.height+=20;
					_cacheCanvas._cacheRec.copyFrom(tRec);
					tRec=_cacheCanvas._cacheRec;
					}else{
					tRec=_cacheCanvas._cacheRec.setTo(left,top,w,h);
				}
				w=tRec.width;
				h=tRec.height;
				left=tRec.x;
				top=tRec.y;
				if (!tx){
					tx=_cacheCanvas.ctx=new RenderContext(w,h,new HTMLCanvas("AUTO"));
				}
				canvas=tx.canvas;
				if (_cacheCanvas.type==='bitmap')canvas.asBitmap=true;
				canvas.clear();
				(canvas.width !=w || canvas.height !=h)&& canvas.size(w,h);
				_next._fun.call(_next,sprite,tx,-left,-top);
				sprite.applyFilters();
				if (sprite._$P.isStatic)_cacheCanvas.reCache=false;
				Stat.canvasReCache++;
				}else{
				tRec=_cacheCanvas._cacheRec;
				left=tRec.x;
				top=tRec.y;
				canvas=tx.canvas;
			}
			context.drawCanvas(canvas,x+left,y+top,canvas.width,canvas.height);
		}

		RenderSprite.__init__=function(){
			var i=0,len=0;
			var initRender;
			initRender=System.createRenderSprite(0x11111,null);
			len=RenderSprite.renders.length=0x800 *2;
			for (i=0;i < len;i++)
			RenderSprite.renders[i]=initRender;
			RenderSprite.renders[0]=System.createRenderSprite(0,null);
			function _initSame (value,o){
				var n=0;
				for (var i=0;i < value.length;i++){
					n |=value[i];
					RenderSprite.renders[n]=o;
				}
			}
			_initSame([0x01,0x100,0x08,0x04],new RenderSprite(0x01,null));
			RenderSprite.renders[0x01 | 0x100]=System.createRenderSprite(0x01 | 0x100,null);
			RenderSprite.renders[0x01 | 0x08 | 0x100]=new RenderSprite(0x01 | 0x08 | 0x100,null);
		}

		RenderSprite._initRenderFun=function(sprite,context,x,y){
			var type=sprite._renderType;
			var r=RenderSprite.renders[type]=RenderSprite._getTypeRender(type);
			r._fun(sprite,context,x,y);
		}

		RenderSprite._getTypeRender=function(type){
			var rst=null;
			var tType=0x800;
			while (tType > 1){
				if (tType & type)
					rst=System.createRenderSprite(tType,rst);
				tType=tType >> 1;
			}
			return rst;
		}

		RenderSprite.IMAGE=0x01;
		RenderSprite.FILTERS=0x02;
		RenderSprite.ALPHA=0x04;
		RenderSprite.TRANSFORM=0x08;
		RenderSprite.CANVAS=0x10;
		RenderSprite.BLEND=0x20;
		RenderSprite.CLIP=0x40;
		RenderSprite.STYLE=0x80;
		RenderSprite.GRAPHICS=0x100;
		RenderSprite.CUSTOM=0x200;
		RenderSprite.ENABLERENDERMERGE=0x400;
		RenderSprite.CHILDS=0x800;
		RenderSprite.INIT=0x11111;
		RenderSprite.renders=[];
		RenderSprite.NORENDER=new RenderSprite(0,null);
		return RenderSprite;
	})()


	/**
	*@private
	*Context扩展类
	*/
	//class laya.resource.Context
	var Context=(function(){
		function Context(){
			//this._canvas=null;
			this._repaint=false;
		}

		__class(Context,'laya.resource.Context');
		var __proto=Context.prototype;
		/***@private */
		__proto.drawCanvas=function(canvas,x,y,width,height){
			Stat.drawCall++;
			this.drawImage(canvas.source,x,y,width,height);
		}

		/***@private */
		__proto.fillRect=function(x,y,width,height,style){
			Stat.drawCall++;
			style && (this.fillStyle=style);
			this.__fillRect(x,y,width,height);
		}

		/***@private */
		__proto.fillText=function(text,x,y,font,color,textAlign){
			Stat.drawCall++;
			if (arguments.length > 3 && font !=null){
				this.font=font;
				this.fillStyle=color;
				this.textAlign=textAlign;
				this.textBaseline="top";
			}
			this.__fillText(text,x,y);
		}

		/***@private */
		__proto.fillBorderText=function(text,x,y,font,fillColor,borderColor,lineWidth,textAlign){
			Stat.drawCall++;
			this.font=font;
			this.fillStyle=fillColor;
			this.textBaseline="top";
			this.strokeStyle=borderColor;
			this.lineWidth=lineWidth;
			this.textAlign=textAlign;
			this.__strokeText(text,x,y);
			this.__fillText(text,x,y);
		}

		/***@private */
		__proto.strokeText=function(text,x,y,font,color,lineWidth,textAlign){
			Stat.drawCall++;
			if (arguments.length > 3 && font !=null){
				this.font=font;
				this.strokeStyle=color;
				this.lineWidth=lineWidth;
				this.textAlign=textAlign;
				this.textBaseline="top";
			}
			this.__strokeText(text,x,y);
		}

		/***@private */
		__proto.transformByMatrix=function(value){
			this.transform(value.a,value.b,value.c,value.d,value.tx,value.ty);
		}

		/***@private */
		__proto.setTransformByMatrix=function(value){
			this.setTransform(value.a,value.b,value.c,value.d,value.tx,value.ty);
		}

		/***@private */
		__proto.clipRect=function(x,y,width,height){
			Stat.drawCall++;
			this.beginPath();
			this.rect(x,y,width,height);
			this.clip();
		}

		/***@private */
		__proto.drawTexture=function(tex,x,y,width,height,tx,ty){
			Stat.drawCall++;
			var uv=tex.uv,w=tex.bitmap.width,h=tex.bitmap.height;
			this.drawImage(tex.bitmap.source,uv[0] *w,uv[1] *h,(uv[2]-uv[0])*w,(uv[5]-uv[3])*h,x+tex.offsetX+tx,y+tex.offsetY+ty,width,height);
		}

		/***@private */
		__proto.drawTextureWithTransform=function(tex,x,y,width,height,m,tx,ty){
			Stat.drawCall++;
			var uv=tex.uv,w=tex.bitmap.width,h=tex.bitmap.height;
			this.save();
			this.transform(m.a,m.b,m.c,m.d,m.tx+tx,m.ty+ty);
			this.drawImage(tex.bitmap.source,uv[0] *w,uv[1] *h,(uv[2]-uv[0])*w,(uv[5]-uv[3])*h,x+tex.offsetX,y+tex.offsetY,width,height);
			this.restore();
		}

		/***@private */
		__proto.drawTexture2=function(x,y,pivotX,pivotY,m,alpha,blendMode,args2){
			'use strict';
			Stat.drawCall++;
			var alphaChanged=alpha!==1;
			if (alphaChanged){
				var temp=this.globalAlpha;
				this.globalAlpha *=alpha;
			};
			var tex=args2[0];
			var uv=tex.uv,w=tex.bitmap.width,h=tex.bitmap.height;
			if (m){
				this.save();
				this.transform(m.a,m.b,m.c,m.d,m.tx+x,m.ty+y);
				this.drawImage(tex.bitmap.source,uv[0] *w,uv[1] *h,(uv[2]-uv[0])*w,(uv[5]-uv[3])*h,args2[1]-pivotX+tex.offsetX,args2[2]-pivotY+tex.offsetY,args2[3],args2[4]);
				this.restore();
				}else {
				this.drawImage(tex.bitmap.source,uv[0] *w,uv[1] *h,(uv[2]-uv[0])*w,(uv[5]-uv[3])*h,args2[1]-pivotX+x+tex.offsetX,args2[2]-pivotY+y+tex.offsetY,args2[3],args2[4]);
			}
			if(alphaChanged)this.globalAlpha=temp;
		}

		/***@private */
		__proto.flush=function(){
			return 0;
		}

		/***@private */
		__proto.fillWords=function(words,x,y,font,color){
			font && (this.font=font);
			color && (this.fillStyle=color);
			var _this=this;
			this.textBaseline="top";
			this.textAlign='left';
			for (var i=0,n=words.length;i < n;i++){
				var a=words[i];
				this.__fillText(a.char,a.x+x,a.y+y);
			}
		}

		/***@private */
		__proto.destroy=function(){
			this.canvas.width=this.canvas.height=0;
		}

		/***@private */
		__proto.clear=function(){
			this.clearRect(0,0,this._canvas.width,this._canvas.height);
			this._repaint=false;
		}

		/***@private */
		__getset(0,__proto,'enableMerge',function(){
			return false;
			},function(value){
		});

		Context._init=function(canvas,ctx){
			ctx.__fillText=ctx.fillText;
			ctx.__fillRect=ctx.fillRect;
			ctx.__strokeText=ctx.strokeText;
			var funs=['fillWords','fillRect','strokeText','fillText','transformByMatrix','setTransformByMatrix','clipRect','drawTexture','drawTexture2','drawTextureWithTransform','flush','clear','destroy','drawCanvas','fillBorderText'];
			funs.forEach(function(i){
				ctx[i]=Context._default[i];
			});
		}

		Context._default=new Context();
		return Context;
	})()


	/**
	*...
	*@author
	*/
	//class laya.resource.ResourceManager
	var ResourceManager=(function(){
		function ResourceManager(){
			this._id=0;
			this._name=null;
			this._resources=null;
			this._memorySize=0;
			this._garbageCollectionRate=NaN;
			this._isOverflow=false;
			this.autoRelease=false;
			this.autoReleaseMaxSize=0;
			this._id=ResourceManager._uniqueIDCounter;
			ResourceManager._uniqueIDCounter++;
			this._name="Content Manager";
			ResourceManager._isResourceManagersSorted=false;
			this._memorySize=0;
			this._isOverflow=false;
			this.autoRelease=false;
			this.autoReleaseMaxSize=1024 *1024 *512;
			this._garbageCollectionRate=0.2;
			ResourceManager._resourceManagers.push(this);
			this._resources=[];
		}

		__class(ResourceManager,'laya.resource.ResourceManager');
		var __proto=ResourceManager.prototype;
		Laya.imps(__proto,{"laya.resource.IDispose":true})
		/**
		*通过索引获取资源
		*@param 索引
		*@return 资源
		*/
		__proto.getResourceByIndex=function(index){
			return this._resources[index];
		}

		/**
		*获取资源长度
		*@return 资源
		*/
		__proto.getResourcesLength=function(){
			return this._resources.length;
		}

		/**
		*添加资源
		*@param 资源
		*@return 是否成功
		*/
		__proto.addResource=function(resource){
			if (resource.resourceManager)
				resource.resourceManager.removeResource(resource);
			var index=this._resources.indexOf(resource);
			if (index===-1){
				resource._resourceManager=this;
				this._resources.push(resource);
				this.addSize(resource.memorySize);
				resource.on("memorychanged",this,this.addSize);
				return true;
			}
			return false;
		}

		/**
		*移除资源
		*@param 资源
		*@return 是否成功
		*/
		__proto.removeResource=function(resource){
			var index=this._resources.indexOf(resource);
			if (index!==-1){
				this._resources.splice(index,1);
				resource._resourceManager=null;
				this._memorySize-=resource.memorySize;
				resource.off("memorychanged",this,this.addSize);
				return true;
			}
			return false;
		}

		/**卸载所有被本资源管理员载入的资源*/
		__proto.unload=function(){
			if (this===ResourceManager._systemResourceManager)
				throw new Error("systemResourceManager不能被释放！");
			var tempResources=this._resources.slice(0,this._resources.length);
			for (var i=0;i < tempResources.length;i++){
				var resource=tempResources[i];
				resource._resourceManager=null;
				resource.dispose();
			}
			tempResources.length=0;
		}

		/**
		*设置唯一名字
		*@param newName 名字,如果名字重复则自动加上“-copy”
		*/
		__proto.setUniqueName=function(newName){
			var isUnique=true;
			for (var i=0;i < ResourceManager._resourceManagers.length;i++){
				if (ResourceManager._resourceManagers[i]._name!==newName || ResourceManager._resourceManagers[i]===this)
					continue ;
				isUnique=false;
				return;
			}
			if (isUnique){
				if (this.name !=newName){
					this.name=newName;
					ResourceManager._isResourceManagersSorted=false;
				}
				}else{
				this.setUniqueName(newName.concat("-copy"));
			}
		}

		/**释放资源*/
		__proto.dispose=function(){
			if (this===ResourceManager._systemResourceManager)
				throw new Error("systemResourceManager不能被释放！");
			ResourceManager._resourceManagers.splice(ResourceManager._resourceManagers.indexOf(this),1);
			ResourceManager._isResourceManagersSorted=false;
			for (var i=0;i < this._resources.length;i++){
				var resource=this._resources[i];
				resource._resourceManager=null;
				resource.dispose();
			}
		}

		/**
		*增加内存
		*@param add 添加尺寸
		*/
		__proto.addSize=function(add){
			if (add){
				if (this.autoRelease && add > 0)
					((this._memorySize+add)> this.autoReleaseMaxSize)&& (this.garbageCollection((1-this._garbageCollectionRate)*this.autoReleaseMaxSize));
				this._memorySize+=add;
			}
		}

		/**
		*垃圾回收
		*@param reserveSize 保留尺寸
		*/
		__proto.garbageCollection=function(reserveSize){
			var all=this._resources;
			all=all.slice();
			all.sort(function(a,b){
				if (!a || !b)
					throw new Error("a或b不能为空！");
				if (a.released && b.released)
					return 0;
				else if (a.released)
				return 1;
				else if (b.released)
				return-1;
				return a.lastUseFrameCount-b.lastUseFrameCount;
			});
			var currentFrameCount=Stat.loopCount;
			for (var i=0,n=all.length;i < n;i++){
				var resou=all[i];
				if (currentFrameCount-resou.lastUseFrameCount > 1){
					resou.releaseResource();
					}else {
					if (this._memorySize >=reserveSize)
						this._isOverflow=true;
					return;
				}
				if (this._memorySize < reserveSize){
					this._isOverflow=false;
					return;
				}
			}
		}

		/**
		*获取唯一标识ID
		*@return 编号
		*/
		__getset(0,__proto,'id',function(){
			return this._id;
		});

		/**
		*设置名字
		*@param value 名字
		*/
		/**
		*获取名字
		*@return 名字
		*/
		__getset(0,__proto,'name',function(){
			return this._name;
			},function(value){
			if ((value || value!=="")&& this._name!==value){
				this._name=value;
				ResourceManager._isResourceManagersSorted=false;
			}
		});

		/**
		*获取所管理资源的累计内存,以字节为单位
		*@return 内存尺寸
		*/
		__getset(0,__proto,'memorySize',function(){
			return this._memorySize;
		});

		/**
		*获取排序后资源管理器列表
		*@return 排序后资源管理器列表
		*/
		__getset(1,ResourceManager,'sortedResourceManagersByName',function(){
			if (!ResourceManager._isResourceManagersSorted){
				ResourceManager._isResourceManagersSorted=true;
				ResourceManager._resourceManagers.sort(ResourceManager.compareResourceManagersByName);
			}
			return ResourceManager._resourceManagers;
		});

		/**
		*返回本类型排序后的已载入资源
		*@return 本类型排序后的已载入资源
		*/
		__getset(1,ResourceManager,'systemResourceManager',function(){
			(ResourceManager._systemResourceManager===null)&& (ResourceManager._systemResourceManager=new ResourceManager(),ResourceManager._systemResourceManager._name="System Resource Manager");
			return ResourceManager._systemResourceManager;
		});

		ResourceManager.__init__=function(){
			ResourceManager.currentResourceManager=ResourceManager.systemResourceManager;
		}

		ResourceManager.getLoadedResourceManagerByIndex=function(index){
			return ResourceManager._resourceManagers[index];
		}

		ResourceManager.getLoadedResourceManagersCount=function(){
			return ResourceManager._resourceManagers.length;
		}

		ResourceManager.recreateContentManagers=function(){
			var temp=ResourceManager.currentResourceManager;
			for (var i=0;i < ResourceManager._resourceManagers.length;i++){
				ResourceManager.currentResourceManager=ResourceManager._resourceManagers[i];
				for (var j=0;j < ResourceManager.currentResourceManager._resources.length;j++){
					ResourceManager.currentResourceManager._resources[i].activeResource(true);
				}
			}
			ResourceManager.currentResourceManager=temp;
		}

		ResourceManager.compareResourceManagersByName=function(left,right){
			if (left==right)
				return 0;
			var x=left._name;
			var y=right._name;
			if (x==null){
				if (y==null)
					return 0;
				else
				return-1;
				}else {
				if (y==null)
					return 1;
				else {
					var retval=x.localeCompare(y);
					if (retval !=0)
						return retval;
					else {
						right.setUniqueName(y);
						y=right._name;
						return x.localeCompare(y);
					}
				}
			}
		}

		ResourceManager._uniqueIDCounter=-2147483648;
		ResourceManager._systemResourceManager=null
		ResourceManager._isResourceManagersSorted=false;
		ResourceManager._resourceManagers=[];
		ResourceManager.currentResourceManager=null
		ResourceManager.resourcesDirectory="";
		return ResourceManager;
	})()


	/**
	*...
	*@author laya
	*/
	//class laya.system.System
	var System=(function(){
		function System(){};
		__class(System,'laya.system.System');
		System.changeDefinition=function(name,classObj){
			Laya[name]=classObj;
			var str=name+"=classObj";
			eval(str);
		}

		System.__init__=function(){
			System.isConchApp=window.conch ? true :false;;
		}

		System.isConchApp=false;
		System.FILTER_ACTIONS=[];
		System.createRenderSprite=function(type,next){
			return new RenderSprite(type,next);
		}

		System.createGLTextur=null;
		System.createWebGLContext2D=null;
		System.changeWebGLSize=function(w,h){
		};

		System.createGraphics=function(){
			return new Graphics();
		}

		System.createFilterAction=function(type){
			return new ColorFilterAction();
		}

		System.drawToCanvas=function(sprite,_renderType,canvasWidth,canvasHeight,offsetX,offsetY){
			var canvas=new HTMLCanvas("2D");
			var context=new RenderContext(canvasWidth,canvasHeight,canvas);
			RenderSprite.renders[_renderType]._fun(sprite,context,offsetX,offsetY);
			return canvas;
		}

		System.addToAtlas=null
		System.createParticleTemplate2D=null
		return System;
	})()


	/**
	*浏览器代理类，封装浏览器及原生js提供的一些功能
	*@author yung
	*/
	//class laya.utils.Browser
	var Browser=(function(){
		function Browser(){};
		__class(Browser,'laya.utils.Browser');
		/**浏览器可视宽度*/
		__getset(1,Browser,'clientWidth',function(){
			return Browser.document.body.clientWidth;
		});

		/**浏览器可视高度*/
		__getset(1,Browser,'clientHeight',function(){
			return Browser.document.body.clientHeight || Browser.document.documentElement.clientHeight;
		});

		/**设备像素比*/
		__getset(1,Browser,'pixelRatio',function(){
			if (Browser._pixelRatio < 0){
				var ctx=laya.utils.Browser.ctx;
				var backingStore=ctx.backingStorePixelRatio || ctx.webkitBackingStorePixelRatio || ctx.mozBackingStorePixelRatio || ctx.msBackingStorePixelRatio || ctx.oBackingStorePixelRatio || ctx.backingStorePixelRatio || 1;
				Browser._pixelRatio=(laya.utils.Browser.window.devicePixelRatio || 1)/ backingStore;
			}
			return Browser._pixelRatio;
		});

		/**浏览器物理宽度*/
		__getset(1,Browser,'width',function(){
			return ((Laya.stage && Laya.stage.canvasRotation)? Browser.clientHeight :Browser.clientWidth)*Browser.pixelRatio;
		});

		/**浏览器物理高度*/
		__getset(1,Browser,'height',function(){
			return ((Laya.stage && Laya.stage.canvasRotation)? Browser.clientWidth :Browser.clientHeight)*Browser.pixelRatio;
		});

		Browser.createElement=function(type){
			return Browser.document.__createElement(type);
		}

		Browser.getElementById=function(type){
			return Browser.document.getElementById(type);
		}

		Browser.removeElement=function(ele){
			if(ele&&ele.parentNode)ele.parentNode.removeChild(ele);
		}

		Browser.now=function(){
			return Date.now();
		}

		Browser.window=null
		Browser.document=null
		Browser.userAgent=navigator.userAgent;
		Browser.u=Browser.userAgent;
		Browser.onIOS=!!Browser.u.match(/\(i[^;]+;(U;)? CPU.+Mac OS X/);
		Browser.onMobile=!!Browser.u.match(/AppleWebKit.*Mobile.*/);
		Browser.onIPhone=Browser.u.indexOf("iPhone")>-1;
		Browser.onIPad=Browser.u.indexOf("iPad")>-1;
		Browser.onAndriod=Browser.u.indexOf('Android')>-1 || Browser.u.indexOf('Adr')>-1;
		Browser.onWP=Browser.u.indexOf("Windows Phone")>-1;
		Browser.onQQBrowser=Browser.u.indexOf("QQBrowser")>-1;
		Browser.onMQQBrowser=Browser.u.indexOf("MQQBrowser")>-1;
		Browser.onWeiXin=Browser.u.indexOf('MicroMessenger')>-1;
		Browser.onPC=!Browser.onMobile;
		Browser.webAudioOK=false;
		Browser.soundType=null
		Browser._pixelRatio=-1;
		__static(Browser,
		['canvas',function(){return this.canvas=new HTMLCanvas('2D');},'ctx',function(){return this.ctx=Browser.canvas.getContext('2d');}
		]);
		Browser.__init$=function(){
			AudioSound;
			WebAudioSound;
			Browser.window=window;
			Browser.document=window.document;
			Browser.document.__createElement=Browser.document.createElement;
			window.requestAnimationFrame=(function(){return window.requestAnimationFrame || window.webkitRequestAnimationFrame ||window.mozRequestAnimationFrame || window.oRequestAnimationFrame ||function (c){return window.setTimeout(c,1000 / 60);};})();
			Browser.webAudioOK=Browser.window["AudioContext"] || Browser.window["webkitAudioContext"] || Browser.window["mozAudioContext"] ? true :false;
			Browser.soundType=Browser.webAudioOK ? "WEBAUDIOSOUND" :"AUDIOSOUND";
			Sound=Browser.webAudioOK?WebAudioSound:AudioSound;;
		}

		return Browser;
	})()


	//class laya.utils.Byte
	var Byte=(function(){
		function Byte(d){
			this._xd_=true;
			this._allocated_=8;
			//this._d_=null;
			//this._u8d_=null;
			this._pos_=0;
			this._length=0;
			if (d){
				this._u8d_=new Uint8Array(d);
				this._d_=new DataView(this._u8d_.buffer);
				this._length=this._d_.byteLength;
				}else {
				this.___resizeBuffer(this._allocated_);
			}
		}

		__class(Byte,'laya.utils.Byte');
		var __proto=Byte.prototype;
		__proto.___resizeBuffer=function(len){
			try {
				var newByteView=new Uint8Array(len);
				if (this._u8d_ !=null){
					if (this._u8d_.length <=len)newByteView.set(this._u8d_);
					else newByteView.set(this._u8d_.subarray(0,len));
				}
				this._u8d_=newByteView;
				this._d_=new DataView(newByteView.buffer);
				}catch (err){
				throw "___resizeBuffer err:"+len;
			}
		}

		__proto.getString=function(){
			return this.rUTF(this.getUint16());
		}

		//LITTLE_ENDIAN only now;
		__proto.getFloat32Array=function(start,len){
			var v=new Float32Array(this._d_.buffer.slice(start,start+len));
			this._pos_+=len;
			return v;
		}

		__proto.getUint8Array=function(start,len){
			var v=new Uint8Array(this._d_.buffer.slice(start,start+len));
			this._pos_+=len;
			return v;
		}

		__proto.getInt16Array=function(start,len){
			var v=new Int16Array(this._d_.buffer.slice(start,start+len));
			this._pos_+=len;
			return v;
		}

		__proto.getFloat32=function(){
			var v=this._d_.getFloat32(this._pos_,this._xd_);
			this._pos_+=4;
			return v;
		}

		__proto.writeFloat32=function(value){
			this.ensureWrite(this._pos_+4);
			this._d_.setFloat32(this._pos_,value,this._xd_);
			this._pos_+=4;
		}

		__proto.getInt32=function(){
			var float=this._d_.getInt32(this._pos_,this._xd_);
			this._pos_+=4;
			return float;
		}

		__proto.getUint32=function(){
			var v=this._d_.getUint32(this._pos_,this._xd_);
			this._pos_+=4;
			return v;
		}

		__proto.writeInt32=function(value){
			this.ensureWrite(this._pos_+4);
			this._d_.setInt32(this._pos_,value,this._xd_);
			this._pos_+=4;
		}

		__proto.writeUint32=function(value){
			this.ensureWrite(this._pos_+4);
			this._d_.setUint32(this._pos_,value,this._xd_);
			this._pos_+=4;
		}

		__proto.getInt16=function(){
			var us=this._d_.getInt16(this._pos_,this._xd_);
			this._pos_+=2;
			return us;
		}

		__proto.getUint16=function(){
			var us=this._d_.getUint16(this._pos_,this._xd_);
			this._pos_+=2;
			return us;
		}

		__proto.writeUint16=function(value){
			this.ensureWrite(this._pos_+2);
			this._d_.setUint16(this._pos_,value,this._xd_);
			this._pos_+=2;
		}

		__proto.writeInt16=function(value){
			this.ensureWrite(this._pos_+2);
			this._d_.setInt16(this._pos_,value,this._xd_);
			this._pos_+=2;
		}

		__proto.getUint8=function(){
			return this._d_.getUint8(this._pos_++);
		}

		__proto.writeUint8=function(value){
			this.ensureWrite(this._pos_+1);
			this._d_.setUint8(this._pos_,value,this._xd_);
			this._pos_++;
		}

		__proto._getUInt8=function(pos){
			return this._d_.getUint8(pos);
		}

		__proto._getUint16=function(pos){
			return this._d_.getUint16(pos,this._xd_);
		}

		__proto._getMatrix=function(){
			var rst=new Matrix(this.getFloat32(),this.getFloat32(),this.getFloat32(),this.getFloat32(),this.getFloat32(),this.getFloat32());
			return rst;
		}

		__proto.rUTF=function(len){
			var v="",max=this._pos_+len,c=0,c2=0,c3=0,f=String.fromCharCode;
			var u=this._u8d_,i=0;
			while (this._pos_ < max){
				c=u[this._pos_++];
				if (c < 0x80){
					if (c !=0){
						v+=f(c);
					}
					}else if (c < 0xE0){
					v+=f(((c & 0x3F)<< 6)| (u[this._pos_++] & 0x7F));
					}else if (c < 0xF0){
					c2=u[this._pos_++];
					v+=f(((c & 0x1F)<< 12)| ((c2 & 0x7F)<< 6)| (u[this._pos_++] & 0x7F));
					}else {
					c2=u[this._pos_++];
					c3=u[this._pos_++];
					v+=f(((c & 0x0F)<< 18)| ((c2 & 0x7F)<< 12)| ((c3 << 6)& 0x7F)| (u[this._pos_++] & 0x7F));
				}
				i++;
			}
			return v;
		}

		// River:自定义的字符串读取,项目相关的内容
		__proto.getCustomString=function(len){
			var v="",ulen=0,c=0,c2=0,f=String.fromCharCode;
			var u=this._u8d_,i=0;
			while (len > 0){
				c=u[this._pos_];
				if (c < 0x80){
					v+=f(c);
					this._pos_++;
					len--;
					}else {
					ulen=c-0x80;
					this._pos_++;
					len-=ulen;
					while (ulen > 0){
						c=u[this._pos_++];
						c2=u[this._pos_++];
						v+=f((c2 << 8)| c);
						ulen--;
					}
				}
			}
			return v;
		}

		__proto.clear=function(){
			this._pos_=0;
			this.length=0;
		}

		__proto.__getBuffer=function(){
			return this._d_.buffer;
		}

		/**
		*写字符串，该方法写的字符串要使用 readUTFBytes方法读
		*@param value 要写入的字符串
		*/
		__proto.writeUTFBytes=function(value){
			value=value+"";
			for (var i=0,sz=value.length;i < sz;i++){
				var c=value.charCodeAt(i);
				if (c <=0x7F){
					this.writeByte(c);
					}else if (c <=0x7FF){
					this.writeByte(0xC0 | (c >> 6));
					this.writeByte(0x80 | (c & 63));
					}else if (c <=0xFFFF){
					this.writeByte(0xE0 | (c >> 12));
					this.writeByte(0x80 | ((c >> 6)& 63));
					this.writeByte(0x80 | (c & 63));
					}else {
					this.writeByte(0xF0 | (c >> 18));
					this.writeByte(0x80 | ((c >> 12)& 63));
					this.writeByte(0x80 | ((c >> 6)& 63));
					this.writeByte(0x80 | (c & 63));
				}
			}
		}

		__proto.writeUTFString=function(value){
			var tPos=0;
			tPos=this.pos;
			this.writeInt16(1);
			this.writeUTFBytes(value);
			var dPos=0;
			dPos=this.pos-tPos-2;
			this._d_.setInt16(tPos,dPos,this._xd_);
		}

		__proto.readUTFString=function(){
			var tPos=0;
			tPos=this.pos;
			var len=0;
			len=this.getInt16();
			return this.readUTFBytes(len);
		}

		/**
		*读字符串，必须是 writeUTFBytes方法写入的字符串
		*@param len 要读的buffer长度,默认将读取缓冲区全部数据
		*@return 读取的字符串
		*/
		__proto.readUTFBytes=function(len){
			(len===void 0)&& (len=-1);
			len=len > 0 ? len :this.bytesAvailable;
			return this.rUTF(len);
		}

		__proto.writeByte=function(value){
			this.ensureWrite(this._pos_+1);
			this._d_.setInt8(this._pos_,value);
			this._pos_+=1;
		}

		__proto.ensureWrite=function(lengthToEnsure){
			if (this._length < lengthToEnsure)this.length=lengthToEnsure;
		}

		__proto.writeArrayBuffer=function(arraybuffer,offset,length){
			(offset===void 0)&& (offset=0);
			(length===void 0)&& (length=0);
			if (offset < 0 || length < 0)throw "writeArrayBuffer error - Out of bounds";
			if (length==0)length=arraybuffer.byteLength-offset;
			this.ensureWrite(this._pos_+length);
			var uint8array=new Uint8Array(arraybuffer);
			this._u8d_.set(uint8array.subarray(offset,offset+length),this._pos_);
			this._pos_+=length;
		}

		__getset(0,__proto,'buffer',function(){
			return this._u8d_.buffer;
		});

		__getset(0,__proto,'endian',function(){
			return this._xd_ ? "littleEndian" :"bigEndian";
			},function(endianStr){
			this._xd_=(endianStr=="littleEndian");
		});

		__getset(0,__proto,'bytesAvailable',function(){
			return this.length-this._pos_;
		});

		__getset(0,__proto,'length',function(){
			return this._length;
			},function(value){
			if (this._allocated_ < value)
				this.___resizeBuffer(this._allocated_=Math.floor(Math.max(value,this._allocated_ *2)));
			else if (this._allocated_ > value)
			this.___resizeBuffer(this._allocated_=value);
			this._length=value;
		});

		__getset(0,__proto,'pos',function(){
			return this._pos_;
			},function(value){
			this._pos_=value;
			this._d_.byteOffset=value;
		});

		Byte.getSystemEndian=function(){
			if (!Byte._sysEndian){
				var buffer=new ArrayBuffer(2);
				new DataView(buffer).setInt16(0,256,true);
				Byte._sysEndian=(new Int16Array(buffer))[0]===256 ? "littleEndian" :"bigEndian";
			}
			return Byte._sysEndian;
		}

		Byte.BIG_ENDIAN="bigEndian";
		Byte.LITTLE_ENDIAN="littleEndian";
		Byte._sysEndian=null;
		return Byte;
	})()


	/**
	*...
	*@author laya
	*/
	//class laya.utils.Color
	var Color=(function(){
		function Color(str){
			this._color=[];
			//this.strColor=null;
			//this.numColor=0;
			if ((typeof str=='string')){
				this.strColor=str;
				if (str===null)str="#000000";
				str.charAt(0)=='#' && (str=str.substr(1));
				var color=this.numColor=parseInt(str,16);
				var flag=(str.length==8);
				if (flag){
					this._color=[parseInt(str.substr(0,2),16)/ 255,((0x00FF0000 & color)>> 16)/ 255,((0x0000FF00 & color)>> 8)/ 255,(0x000000FF & color)/ 255];
					return;
				}
				}else {
				color=this.numColor=str;
				this.strColor=Utils1.toHexColor(color);
			}
			this._color=[((0xFF0000 & color)>> 16)/ 255,((0xFF00 & color)>> 8)/ 255,(0xFF & color)/ 255,1];
			(this._color).__id=++Color._COLODID;
		}

		__class(Color,'laya.utils.Color');
		Color._initDefault=function(){
			Color._DEFAULT={};
			for (var i in Color._COLOR_MAP)Color._SAVE[i]=Color._DEFAULT[i]=new Color(Color._COLOR_MAP[i]);
			return Color._DEFAULT;
		}

		Color._initSaveMap=function(){
			Color._SAVE_SIZE=0;
			Color._SAVE={};
			for (var i in Color._DEFAULT)Color._SAVE[i]=Color._DEFAULT[i];
		}

		Color.create=function(str){
			var color=Color._SAVE[str+""];
			if (color !=null)return color;
			(Color._SAVE_SIZE < 1000)|| Color._initSaveMap();
			return Color._SAVE[str+""]=new Color(str);
		}

		Color._SAVE={};
		Color._SAVE_SIZE=0;
		Color._COLOR_MAP={"white":'#FFFFFF',"red":'#FF0000',"green":'#00FF00',"blue":'#0000FF',"black":'#000000',"yellow":'#FFFF00','gray':'#AAAAAA'};
		Color._DEFAULT=Color._initDefault();
		Color._COLODID=1;
		return Color;
	})()


	/**
	*触摸滑动控件
	*@author yung
	*/
	//class laya.utils.Dragging
	var Dragging=(function(){
		function Dragging(){
			//this.target=null;
			this.ratio=0.92;
			this.maxOffset=60;
			//this.area=null;
			//this.hasInertia=false;
			//this.elasticDistance=NaN;
			//this.elasticBackTime=NaN;
			//this.data=null;
			this._dragging=false;
			this._clickOnly=true;
			//this._elasticRateX=NaN;
			//this._elasticRateY=NaN;
			//this._lastX=NaN;
			//this._lastY=NaN;
			//this._offsetX=NaN;
			//this._offsetY=NaN;
			//this._offsets=null;
			//this._disableMouseEvent=false;
			//this._tween=null;
		}

		__class(Dragging,'laya.utils.Dragging');
		var __proto=Dragging.prototype;
		__proto.start=function(target,area,hasInertia,elasticDistance,elasticBackTime,data,disableMouseEvent){
			this.clearTimer();
			this.target=target;
			this.area=area;
			this.hasInertia=hasInertia;
			this.elasticDistance=elasticDistance;
			this.elasticBackTime=elasticBackTime;
			this.data=data;
			this._disableMouseEvent=disableMouseEvent;
			this._clickOnly=true;
			this._dragging=true;
			this._elasticRateX=this._elasticRateY=1;
			this._lastX=Laya.stage.mouseX;
			this._lastY=Laya.stage.mouseY;
			Laya.stage.on("mouseup",this,this.onStageMouseUp);
			Laya.stage.on("mouseout",this,this.onStageMouseUp);
			Laya.timer.frameLoop(1,this,this.loop);
		}

		__proto.clearTimer=function(){
			Laya.timer.clear(this,this.loop);
			Laya.timer.clear(this,this.tweenMove);
			if (this._tween){
				this._tween.recover();
				this._tween=null;
			}
		}

		__proto.stop=function(){
			if (this._dragging){
				MouseManager.instance.disableMouseEvent=false;
				Laya.stage.off("mouseup",this,this.onStageMouseUp);
				Laya.stage.off("mouseout",this,this.onStageMouseUp);
				this._dragging=false;
				this.target && this.area && this.backToArea();
				this.clear();
			}
		}

		__proto.loop=function(){
			var mouseX=Laya.stage.mouseX;
			var mouseY=Laya.stage.mouseY;
			var offsetX=mouseX-this._lastX;
			var offsetY=mouseY-this._lastY;
			if (this._clickOnly){
				if (Math.abs(offsetX *Laya.stage._canvasTransform.getScaleX())> 1 || Math.abs(offsetY *Laya.stage._canvasTransform.getScaleY())> 1){
					this._clickOnly=false;
					this._offsets || (this._offsets=[]);
					this._offsets.length=0;
					this.target.event("dragstart",this.data);
					MouseManager.instance.disableMouseEvent=this._disableMouseEvent;
					this.target["$_MOUSEDOWN"]=false;
				}else return;
				}else {
				this._offsets.push(offsetX,offsetY);
				this._lastX=mouseX;
				this._lastY=mouseY;
			}
			if (offsetX===0 && offsetY===0)return;
			this.target.x+=offsetX *this._elasticRateX;
			this.target.y+=offsetY *this._elasticRateY;
			this.area && this.checkArea();
			this.target.event("dragmove",this.data);
		}

		__proto.checkArea=function(){
			if (this.elasticDistance <=0){
				this.backToArea();
				}else {
				if (this.target.x < this.area.x){
					var offsetX=this.area.x-this.target.x;
					}else if (this.target.x > this.area.x+this.area.width){
					offsetX=this.target.x-this.area.x-this.area.width;
					}else {
					offsetX=0;
				}
				this._elasticRateX=Math.max(0,1-(offsetX / this.elasticDistance));
				if (this.target.y < this.area.y){
					var offsetY=this.area.y-this.target.y;
					}else if (this.target.y > this.area.y+this.area.height){
					offsetY=this.target.y-this.area.y-this.area.height;
					}else {
					offsetY=0;
				}
				this._elasticRateY=Math.max(0,1-(offsetY / this.elasticDistance));
			}
		}

		__proto.backToArea=function(){
			this.target.x=Math.min(Math.max(this.target.x,this.area.x),this.area.x+this.area.width);
			this.target.y=Math.min(Math.max(this.target.y,this.area.y),this.area.y+this.area.height);
		}

		__proto.onStageMouseUp=function(e){
			MouseManager.instance.disableMouseEvent=false;
			Laya.stage.off("mouseup",this,this.onStageMouseUp);
			Laya.stage.off("mouseout",this,this.onStageMouseUp);
			Laya.timer.clear(this,this.loop);
			if (this._clickOnly || !this.target)return;
			if (this.hasInertia){
				if (this._offsets.length < 1){
					this._offsets.push(Laya.stage.mouseX-this._lastX,Laya.stage.mouseY-this._lastY);
				}
				this._offsetX=this._offsetY=0;
				var len=this._offsets.length;
				var n=Math.min(len,6);
				var m=this._offsets.length-n;
				for (var i=len-1;i > m;i--){
					this._offsetY+=this._offsets[i--];
					this._offsetX+=this._offsets[i];
				}
				this._offsetX=this._offsetX / n *2;
				this._offsetY=this._offsetY / n *2;
				if (Math.abs(this._offsetX)> this.maxOffset)this._offsetX=this._offsetX > 0 ? this.maxOffset :-this.maxOffset;
				if (Math.abs(this._offsetY)> this.maxOffset)this._offsetY=this._offsetY > 0 ? this.maxOffset :-this.maxOffset;
				Laya.timer.frameLoop(1,this,this.tweenMove);
				}else if (this.elasticDistance > 0){
				this.checkElastic();
				}else {
				this.clear();
			}
		}

		__proto.checkElastic=function(){
			var tx=NaN;
			var ty=NaN;
			if (this.target.x < this.area.x)tx=this.area.x;
			else if (this.target.x > this.area.x+this.area.width)tx=this.area.x+this.area.width;
			if (this.target.y < this.area.y)ty=this.area.y;
			else if (this.target.y > this.area.y+this.area.height)ty=this.area.y+this.area.height;
			if (!isNaN(tx)|| !isNaN(ty)){
				var obj={};
				if (!isNaN(tx))obj.x=tx;
				if (!isNaN(ty))obj.y=ty;
				this._tween=Tween.to(this.target,obj,this.elasticBackTime,Ease.sineOut,Handler.create(this,this.clear),0,false,false);
				}else {
				this.clear();
			}
		}

		__proto.tweenMove=function(){
			this._offsetX *=this.ratio *this._elasticRateX;
			this._offsetY *=this.ratio *this._elasticRateY;
			this.target.x+=this._offsetX;
			this.target.y+=this._offsetY;
			this.area && this.checkArea();
			this.target.event("dragmove",this.data);
			if ((Math.abs(this._offsetX)< 1 && Math.abs(this._offsetY)< 1)|| this._elasticRateX < 0.5 || this._elasticRateY < 0.5){
				Laya.timer.clear(this,this.tweenMove);
				if (this.elasticDistance > 0)this.checkElastic();
				else this.clear();
			}
		}

		__proto.clear=function(){
			if (this.target){
				this.clearTimer();
				var sp=this.target;
				this.target=null;
				sp.event("dragend",this.data);
			}
		}

		return Dragging;
	})()


	/**
	*Ease
	*@author yung
	*/
	//class laya.utils.Ease
	var Ease=(function(){
		function Ease(){};
		__class(Ease,'laya.utils.Ease');
		Ease.strongIn=function(t,b,c,d){
			return c *(t /=d)*t *t *t *t+b;
		}

		Ease.strongOut=function(t,b,c,d){
			return c *((t=t / d-1)*t *t *t *t+1)+b;
		}

		Ease.strongInOut=function(t,b,c,d){
			if ((t /=d *0.5)< 1)return c *0.5 *t *t *t *t *t+b;
			return c *0.5 *((t-=2)*t *t *t *t+2)+b;
		}

		Ease.sineIn=function(t,b,c,d){
			return-c *Math.cos(t / d *Ease.HALF_PI)+c+b;
		}

		Ease.sineOut=function(t,b,c,d){
			return c *Math.sin(t / d *Ease.HALF_PI)+b;
		}

		Ease.sineInOut=function(t,b,c,d){
			return-c *0.5 *(Math.cos(Math.PI *t / d)-1)+b;
		}

		Ease.quintIn=function(t,b,c,d){
			return c *(t /=d)*t *t *t *t+b;
		}

		Ease.quintOut=function(t,b,c,d){
			return c *((t=t / d-1)*t *t *t *t+1)+b;
		}

		Ease.quintInOut=function(t,b,c,d){
			if ((t /=d *0.5)< 1)return c *0.5 *t *t *t *t *t+b;
			return c *0.5 *((t-=2)*t *t *t *t+2)+b;
		}

		Ease.quartIn=function(t,b,c,d){
			return c *(t /=d)*t *t *t+b;
		}

		Ease.quartOut=function(t,b,c,d){
			return-c *((t=t / d-1)*t *t *t-1)+b;
		}

		Ease.quartInOut=function(t,b,c,d){
			if ((t /=d *0.5)< 1)return c *0.5 *t *t *t *t+b;
			return-c *0.5 *((t-=2)*t *t *t-2)+b;
		}

		Ease.QuadIn=function(t,b,c,d){
			return c *(t /=d)*t+b;
		}

		Ease.QuadOut=function(t,b,c,d){
			return-c *(t /=d)*(t-2)+b;
		}

		Ease.QuadInOut=function(t,b,c,d){
			if ((t /=d *0.5)< 1)return c *0.5 *t *t+b;
			return-c *0.5 *((--t)*(t-2)-1)+b;
		}

		Ease.linearNone=function(t,b,c,d){
			return c *t / d+b;
		}

		Ease.linearIn=function(t,b,c,d){
			return c *t / d+b;
		}

		Ease.linearOut=function(t,b,c,d){
			return c *t / d+b;
		}

		Ease.linearInOut=function(t,b,c,d){
			return c *t / d+b;
		}

		Ease.expoIn=function(t,b,c,d){
			return (t==0)? b :c *Math.pow(2,10 *(t / d-1))+b-c *0.001;
		}

		Ease.expoOut=function(t,b,c,d){
			return (t==d)? b+c :c *(-Math.pow(2,-10 *t / d)+1)+b;
		}

		Ease.expoInOut=function(t,b,c,d){
			if (t==0)return b;
			if (t==d)return b+c;
			if ((t /=d *0.5)< 1)return c *0.5 *Math.pow(2,10 *(t-1))+b;
			return c *0.5 *(-Math.pow(2,-10 *--t)+2)+b;
		}

		Ease.elasticIn=function(t,b,c,d,a,p){
			(a===void 0)&& (a=0);
			(p===void 0)&& (p=0);
			var s;
			if (t==0)return b;
			if ((t /=d)==1)return b+c;
			if (!p)p=d *.3;
			if (!a || (c > 0 && a < c)|| (c < 0 && a <-c)){
				a=c;
				s=p / 4;
			}else s=p / Ease.PI2 *Math.asin(c / a);
			return-(a *Math.pow(2,10 *(t-=1))*Math.sin((t *d-s)*Ease.PI2 / p))+b;
		}

		Ease.elasticOut=function(t,b,c,d,a,p){
			(a===void 0)&& (a=0);
			(p===void 0)&& (p=0);
			var s;
			if (t==0)return b;
			if ((t /=d)==1)return b+c;
			if (!p)p=d *.3;
			if (!a || (c > 0 && a < c)|| (c < 0 && a <-c)){
				a=c;
				s=p / 4;
			}else s=p / Ease.PI2 *Math.asin(c / a);
			return (a *Math.pow(2,-10 *t)*Math.sin((t *d-s)*Ease.PI2 / p)+c+b);
		}

		Ease.elasticInOut=function(t,b,c,d,a,p){
			(a===void 0)&& (a=0);
			(p===void 0)&& (p=0);
			var s;
			if (t==0)return b;
			if ((t /=d *0.5)==2)return b+c;
			if (!p)p=d *(.3 *1.5);
			if (!a || (c > 0 && a < c)|| (c < 0 && a <-c)){
				a=c;
				s=p / 4;
			}else s=p / Ease.PI2 *Math.asin(c / a);
			if (t < 1)return-.5 *(a *Math.pow(2,10 *(t-=1))*Math.sin((t *d-s)*Ease.PI2 / p))+b;
			return a *Math.pow(2,-10 *(t-=1))*Math.sin((t *d-s)*Ease.PI2 / p)*.5+c+b;
		}

		Ease.cubicIn=function(t,b,c,d){
			return c *(t /=d)*t *t+b;
		}

		Ease.cubicOut=function(t,b,c,d){
			return c *((t=t / d-1)*t *t+1)+b;
		}

		Ease.cubicInOut=function(t,b,c,d){
			if ((t /=d *0.5)< 1)return c *0.5 *t *t *t+b;
			return c *0.5 *((t-=2)*t *t+2)+b;
		}

		Ease.circIn=function(t,b,c,d){
			return-c *(Math.sqrt(1-(t /=d)*t)-1)+b;
		}

		Ease.circOut=function(t,b,c,d){
			return c *Math.sqrt(1-(t=t / d-1)*t)+b;
		}

		Ease.circInOut=function(t,b,c,d){
			if ((t /=d *0.5)< 1)return-c *0.5 *(Math.sqrt(1-t *t)-1)+b;
			return c *0.5 *(Math.sqrt(1-(t-=2)*t)+1)+b;
		}

		Ease.bounceOut=function(t,b,c,d){
			if ((t /=d)< (1 / 2.75))return c *(7.5625 *t *t)+b;
			else if (t < (2 / 2.75))return c *(7.5625 *(t-=(1.5 / 2.75))*t+.75)+b;
			else if (t < (2.5 / 2.75))return c *(7.5625 *(t-=(2.25 / 2.75))*t+.9375)+b;
			else return c *(7.5625 *(t-=(2.625 / 2.75))*t+.984375)+b;
		}

		Ease.bounceIn=function(t,b,c,d){
			return c-Ease.bounceOut(d-t,0,c,d)+b;
		}

		Ease.bounceInOut=function(t,b,c,d){
			if (t < d *0.5)return Ease.bounceIn(t *2,0,c,d)*.5+b;
			else return Ease.bounceOut(t *2-d,0,c,d)*.5+c *.5+b;
		}

		Ease.backIn=function(t,b,c,d,s){
			(s===void 0)&& (s=1.70158);
			return c *(t /=d)*t *((s+1)*t-s)+b;
		}

		Ease.backOut=function(t,b,c,d,s){
			(s===void 0)&& (s=1.70158);
			return c *((t=t / d-1)*t *((s+1)*t+s)+1)+b;
		}

		Ease.backInOut=function(t,b,c,d,s){
			(s===void 0)&& (s=1.70158);
			if ((t /=d *0.5)< 1)return c *0.5 *(t *t *(((s *=(1.525))+1)*t-s))+b;
			return c / 2 *((t-=2)*t *(((s *=(1.525))+1)*t+s)+2)+b;
		}

		Ease.HALF_PI=Math.PI *0.5;
		Ease.PI2=Math.PI *2;
		return Ease;
	})()


	/**
	*...
	*@author laya
	*/
	//class laya.utils.HTMLChar
	var HTMLChar=(function(){
		function HTMLChar(char,w,h,style){
			//this._x=NaN;
			//this._y=NaN;
			//this._w=NaN;
			//this._h=NaN;
			//this.isWord=false;
			//this.char=null;
			//this.charNum=NaN;
			//this.style=null;
			//this._sprite=null;
			this.char=char;
			this.charNum=char.charCodeAt(0);
			this._x=this._y=0;
			this.width=w;
			this.height=h;
			this.style=style;
			this.isWord=!HTMLChar._isWordRegExp.test(char);
		}

		__class(HTMLChar,'laya.utils.HTMLChar');
		var __proto=HTMLChar.prototype;
		Laya.imps(__proto,{"laya.display.ILayout":true})
		__proto.setSprite=function(sprite){
			this._sprite=sprite;
		}

		__proto.getSprite=function(){
			return this._sprite;
		}

		__proto._isChar=function(){
			return true;
		}

		__proto._getCSSStyle=function(){
			return this.style;
		}

		__getset(0,__proto,'x',function(){
			return this._x;
			},function(value){
			if (this._sprite){
				this._sprite.x=value;
			}
			this._x=value;
		});

		__getset(0,__proto,'y',function(){
			return this._y;
			},function(value){
			if (this._sprite){
				this._sprite.y=value;
			}
			this._y=value;
		});

		__getset(0,__proto,'width',function(){
			return this._w;
			},function(value){
			this._w=value;
		});

		__getset(0,__proto,'height',function(){
			return this._h;
			},function(value){
			this._h=value;
		});

		HTMLChar._isWordRegExp=new RegExp("[\\w\.]","");
		return HTMLChar;
	})()


	/**
	*...
	*@author laya
	*/
	//class laya.utils.Log
	var Log=(function(){
		function Log(){};
		__class(Log,'laya.utils.Log');
		Log.start=function(){
			Log._logdiv=Browser.window.document.createElement('div');
			Browser.window.document.body.appendChild(Log._logdiv);
			Log._logdiv.style.cssText="border:white;overflow:scroll;z-index:1000000;background:rgba(100,100,100,0.7);color:white;position: absolute;left:0px;top:0px;width:100%;height:50%";
			Log._logdiv.onclick=function (){
				if (Laya.__parseInt(this.style.width)==30){
					this.style.width='100%';
					this.style.height="50%";
					this.style.overflow="scroll"
					this.style.background="rgba(100,100,100,0.7)"
				}
				else{
					this.style.width=this.style.height="30px";
					this.style.overflow="hidden";
					this.style.background="white"
				}
			}
		}

		Log.print=function(value){
			if (!Log._logdiv){
				return;
			}
			Log._logdiv.innerText+=value+"\n";
		}

		Log.enable=function(){
			return Log._logdiv !=null;
		}

		Log._logdiv=null
		return Log;
	})()


	/**
	*对象池类
	*@author ww
	*/
	//class laya.utils.Pool
	var Pool=(function(){
		function Pool(){}
		__class(Pool,'laya.utils.Pool');
		Pool.getPoolBySign=function(sign){
			return Pool._poolDic[sign] || (Pool._poolDic[sign]=[]);
		}

		Pool.recover=function(sign,item){
			if (item["__InPool"])return;
			item["__InPool"]=true;
			Pool.getPoolBySign(sign).push(item);
		}

		Pool.getItemByClass=function(sign,clz){
			var pool=Pool.getPoolBySign(sign);
			var rst=pool.length?pool.pop():new clz();
			rst["__InPool"]=false;
			return rst;
		}

		Pool.getItemByCreateFun=function(sign,createFun){
			var pool=Pool.getPoolBySign(sign);
			var rst=pool.length?pool.pop():createFun();
			rst["__InPool"]=false;
			return rst;
		}

		Pool.getItem=function(sign){
			var pool=Pool.getPoolBySign(sign);
			var rst=pool.length?pool.pop():null;
			if(rst)rst["__InPool"]=false;
			return rst;
		}

		Pool._poolDic={};
		Pool.InPoolSign="__InPool";
		return Pool;
	})()


	/**
	*帧率统计
	*@author yung
	*/
	//class laya.utils.Stat
	var Stat=(function(){
		function Stat(){};
		__class(Stat,'laya.utils.Stat');
		__getset(1,Stat,'onclick',null,function(fn){
			Stat._canvas.source.onclick=fn;
			Stat._canvas.source.style.pointerEvents='';
		});

		Stat.show=function(x,y){
			(x===void 0)&& (x=0);
			(y===void 0)&& (y=0);
			Stat.preFrameTime=Stat._timer=Browser.now()-1000;
			Stat._view[0]={title:"FPS(3D)",value:"_fpsStr",color:"yellow",units:"int"};
			Stat._view[1]={title:"Sprite",value:"spriteDraw",color:"white",units:"int"};
			Stat._view[2]={title:"DrawCall",value:"drawCall",color:"white",units:"int"};
			Stat._view[3]={title:"Canvas",value:"_canvasStr",color:"white",units:"int"};
			Stat._view[4]={title:"MaxMem",value:"maxMemorySize",color:"white",units:"M"};
			Stat._view[5]={title:"CurMem",value:"currentMemorySize",color:"Yellow",units:"M"};
			Stat._view[6]={title:"TexMem",value:"texturesMemSize",color:"LightGoldenRodYellow",units:"M"};
			Stat._view[7]={title:"BufMem",value:"buffersMemSize",color:"LightGoldenRodYellow",units:"M"};
			Stat._view[8]={title:"Shader",value:"shaderCall",color:"white",units:"int"};
			Stat._view[9]={title:"TriFaces",value:"trianglesFaces",color:"white",units:"int"};
			Stat._view[10]={title:"BufLen",value:"bufferLen",color:"white",units:"int"};
			if (!Render.isWebGl){
				Stat._view[0].title="FPS(2D)";
				Stat._view.length=4;
			}
			for (var i=0;i < Stat._view.length;i++){
				Stat._view[i].x=4;
				Stat._view[i].y=i *12+2;
			}
			Stat._height=Stat._view.length *12+4;
			if (!Stat._canvas){
				Stat._canvas=new HTMLCanvas('2D');
				Stat._canvas.size(Stat._width,Stat._height);
				Stat._ctx=Stat._canvas.getContext('2d');
				Stat._ctx.textBaseline="top";
				var canvas=Stat._canvas.source;
				canvas.style.cssText="pointer-events:none;z-index:100000;position: absolute;left:"+x+"px;top:"+y+"px;width:"+Stat._width+"px;height:"+Stat._height+"px;";
			}
			Laya.timer.frameLoop(1,Stat,Stat.loop);
			Browser.document.body.appendChild(Stat._canvas.source);
		}

		Stat.hide=function(){
			var canvas=Stat._canvas.source;
			Browser.removeElement(canvas);
			Laya.timer.clear(Stat,Stat.loop);
		}

		Stat.clear=function(){
			Stat.trianglesFaces=0;
			Stat.drawCall=0;
			Stat.shaderCall=0;
			Stat.spriteDraw=-1;
			Stat.bufferLen=0;
			Stat.canvasNormal=0;
			Stat.canvasBitmap=0;
			Stat.canvasReCache=0;
		}

		Stat.loop=function(){
			Stat._count++;
			var timer=Browser.now();
			Stat.interval=Browser.now()-Stat.preFrameTime;
			Stat.preFrameTime=timer;
			if (timer-Stat._timer < 1000){
				Stat.clear();
				return;
			}
			Stat._count=Math.round((Stat._count *1000)/ (timer-Stat._timer));
			Stat.maxMemorySize=ResourceManager.systemResourceManager.autoReleaseMaxSize;
			Stat.currentMemorySize=ResourceManager.systemResourceManager.memorySize;
			Stat.texturesMemSize=0;
			Stat.buffersMemSize=0;
			for (var i=0;i < Resource.getLoadedResourcesCount();i++){
				var resource=Resource.getLoadedResourceByIndex(i);
				if (((resource instanceof laya.resource.Bitmap )))
					Stat.texturesMemSize+=resource.memorySize;
			}
			Stat.FPS=Stat._count;
			Stat._fpsStr=Stat._count+(Stat.renderSlow?" slow":"");
			Stat._canvasStr=Stat.canvasReCache+"/"+Stat.canvasNormal+"/"+Stat.canvasBitmap;
			var ctx=Stat._ctx;
			ctx.clearRect(0,0,Stat._width,Stat._height);
			ctx.fillStyle="rgba(50,50,60,0.8)";
			ctx.fillRect(0,0,Stat._width,Stat._height);
			for (i=0;i < Stat._view.length;i++){
				var one=Stat._view[i];
				ctx.fillStyle="white";
				ctx.fillText(one.title,one.x,one.y);
				ctx.fillStyle=one.color;
				var value=Stat[one.value];
				(one.units=="M")&& (value=Math.floor(value / (1024 *1024)*100)/ 100+" M");
				ctx.fillText(value+"",one.x+60,one.y);
			}
			Stat._count=0;
			Stat._timer=timer;
			Stat.clear();
		}

		Stat.loopCount=0;
		Stat.maxMemorySize=0;
		Stat.currentMemorySize=0;
		Stat.texturesMemSize=0;
		Stat.buffersMemSize=0;
		Stat.shaderCall=0;
		Stat.drawCall=0;
		Stat.trianglesFaces=0;
		Stat.spriteDraw=0;
		Stat.FPS=0;
		Stat.canvasNormal=0;
		Stat.canvasBitmap=0;
		Stat.canvasReCache=0;
		Stat.interval=0;
		Stat.preFrameTime=0;
		Stat.bufferLen=0;
		Stat.renderSlow=false;
		Stat._fpsStr=null
		Stat._canvasStr=null
		Stat._canvas=null
		Stat._ctx=null
		Stat._timer=NaN
		Stat._count=0;
		Stat._width=120;
		Stat._height=100;
		Stat._view=[];
		return Stat;
	})()


	/**
	*...
	*@author laya
	*/
	//class laya.utils.StringKey
	var StringKey=(function(){
		function StringKey(){
			this._strs={};
			this._length=0;
		}

		__class(StringKey,'laya.utils.StringKey');
		var __proto=StringKey.prototype;
		__proto.add=function(str){
			var index=this._strs[str];
			if (index !=null)return index;
			return this._strs[str]=this._length++;
		}

		__proto.get=function(str){
			var index=this._strs[str];
			return index==null ?-1 :index;
		}

		return StringKey;
	})()


	/**
	*时钟管理类，单例，可以通过Laya.timer访问
	*@author yung
	*/
	//class laya.utils.Timer
	var Timer=(function(){
		var TimerHandler;
		function Timer(){
			this.scale=1;
			this.currFrame=0;
			this._mid=1;
			this._map=[];
			this._laters=[];
			this._handlers=[];
			this._temp=[];
			this._pool=[];
			this._count=0;
			this.currTimer=Browser.now();
			this._lastTimer=Browser.now();
			Laya.timer && Laya.timer.frameLoop(1,this,this._update);
		}

		__class(Timer,'laya.utils.Timer');
		var __proto=Timer.prototype;
		__proto._update=function(){
			if (this.scale <=0){
				this._lastTimer=Browser.now();
				return;
			};
			var frame=this.currFrame=this.currFrame+this.scale;
			var now=Browser.now()
			Timer.DELTA=now-this._lastTimer;
			var timer=this.currTimer=this.currTimer+Timer.DELTA *this.scale;
			this._lastTimer=now;
			var handlers=this._handlers;
			this._count=0;
			for (i=0,n=handlers.length;i < n;i++){
				handler=handlers[i];
				if (handler.method!==null){
					var t=handler.userFrame ? frame :timer;
					if (t >=handler.exeTime){
						if (handler.repeat){
							do {
								handler.exeTime+=handler.delay;
								handler.run(false);
							}while (t >=handler.exeTime);
							}else {
							handler.run(true);
						}
					}
					}else {
					this._count++;
				}
			}
			if (this._count > 30 || frame % 200===0)this._clearHandlers();
			var laters=this._laters;
			for (var i=0,n=laters.length-1;i <=n;i++){
				var handler=laters[i];
				handler.method!==null && handler.run(false);
				this._recoverHandler(handler);
				i===n && (n=laters.length-1);
			}
			laters.length=0;
		}

		__proto._clearHandlers=function(){
			var handlers=this._handlers;
			for (var i=0,n=handlers.length;i < n;i++){
				var handler=handlers[i];
				if (handler.method!==null)this._temp.push(handler);
				else this._recoverHandler(handler);
			}
			this._handlers=this._temp;
			this._temp=handlers;
			this._temp.length=0;
		}

		__proto._recoverHandler=function(handler){
			handler.clear();
			this._map[handler.key]=null;
			this._pool.push(handler);
		}

		__proto._create=function(useFrame,repeat,delay,caller,method,args,coverBefore){
			(coverBefore===void 0)&& (coverBefore=false);
			if (!delay){
				method.apply(caller,args);
				return;
			}
			if (coverBefore){
				var handler=this._getHandler(caller,method);
				if (handler){
					handler.repeat=repeat;
					handler.userFrame=useFrame;
					handler.delay=delay;
					handler.caller=caller;
					handler.method=method;
					handler.args=args;
					handler.exeTime=delay+(useFrame ? this.currFrame :this.currTimer);
					return;
				}
			}
			handler=this._pool.length > 0 ? this._pool.pop():new TimerHandler();
			handler.repeat=repeat;
			handler.userFrame=useFrame;
			handler.delay=delay;
			handler.caller=caller;
			handler.method=method;
			handler.args=args;
			handler.exeTime=delay+(useFrame ? this.currFrame :this.currTimer);
			this._indexHandler(handler);
			this._handlers.push(handler);
		}

		__proto._indexHandler=function(handler){
			var caller=handler.caller;
			var method=handler.method;
			var cid=caller ? caller.$_GID || (caller.$_GID=Utils1.getGID()):0;
			var mid=method.$_TID || (method.$_TID=(this._mid++)*100000);
			handler.key=cid+mid;
			this._map[handler.key]=handler;
		}

		/**
		*定时执行一次
		*@param delay 延迟时间(单位毫秒)
		*@param caller 执行域(this)
		*@param method 定时器回调函数
		*@param args 回调参数
		*@param coverBefore 是否覆盖之前的延迟执行，默认为false
		*/
		__proto.once=function(delay,caller,method,args,coverBefore){
			(coverBefore===void 0)&& (coverBefore=false);
			this._create(false,false,delay,caller,method,args,coverBefore);
		}

		/**
		*定时重复执行
		*@param delay 间隔时间(单位毫秒)
		*@param caller 执行域(this)
		*@param method 定时器回调函数
		*@param args 回调参数
		*@param coverBefore 是否覆盖之前的延迟执行，默认为false
		*/
		__proto.loop=function(delay,caller,method,args,coverBefore){
			(coverBefore===void 0)&& (coverBefore=false);
			this._create(false,true,delay,caller,method,args,coverBefore);
		}

		/**
		*定时执行一次(基于帧率)
		*@param delay 延迟几帧(单位为帧)
		*@param caller 执行域(this)
		*@param method 定时器回调函数
		*@param args 回调参数
		*@param coverBefore 是否覆盖之前的延迟执行，默认为false
		*/
		__proto.frameOnce=function(delay,caller,method,args,coverBefore){
			(coverBefore===void 0)&& (coverBefore=false);
			this._create(true,false,delay,caller,method,args,coverBefore);
		}

		/**
		*定时重复执行(基于帧率)
		*@param delay 间隔几帧(单位为帧)
		*@param caller 执行域(this)
		*@param method 定时器回调函数
		*@param args 回调参数
		*@param coverBefore 是否覆盖之前的延迟执行，默认为false
		*/
		__proto.frameLoop=function(delay,caller,method,args,coverBefore){
			(coverBefore===void 0)&& (coverBefore=false);
			this._create(true,true,delay,caller,method,args,coverBefore);
		}

		/**输出统计信息*/
		__proto.toString=function(){
			return "callLater:"+this._laters.length+" handlers:"+this._handlers.length+" pool:"+this._pool.length;
		}

		/**
		*清理定时器
		*@param caller 执行域(this)
		*@param method 定时器回调函数
		*/
		__proto.clear=function(caller,method){
			var handler=this._getHandler(caller,method);
			if (handler){
				this._map[handler.key]=null;
				handler.key=0;
				handler.clear();
			}
		}

		/**
		*清理对象身上的所有定时器
		*@param caller 执行域(this)
		*/
		__proto.clearAll=function(caller){
			for (var i=0,n=this._handlers.length;i < n;i++){
				var handler=this._handlers[i];
				if (handler.caller===caller){
					this._map[handler.key]=null;
					handler.key=0;
					handler.clear();
				}
			}
		}

		__proto._getHandler=function(caller,method){
			var cid=caller ? caller.$_GID || (caller.$_GID=Utils1.getGID()):0;
			var mid=method.$_TID || (method.$_TID=(this._mid++)*100000);
			return this._map[cid+mid];
		}

		/**
		*延迟执行
		*@param caller 执行域(this)
		*@param method 定时器回调函数
		*@param args 回调参数
		*/
		__proto.callLater=function(caller,method,args){
			if (this._getHandler(caller,method)==null){
				if (this._pool.length)var handler=this._pool.pop();
				else handler=new TimerHandler();
				handler.caller=caller;
				handler.method=method;
				handler.args=args;
				this._indexHandler(handler);
				this._laters.push(handler);
			}
		}

		/**
		*立即执行callLater
		*@param caller 执行域(this)
		*@param method 定时器回调函数
		*/
		__proto.runCallLater=function(caller,method){
			var handler=this._getHandler(caller,method);
			if (handler && handler.method !=null){
				handler.run(true);
				this._map[handler.key]=null;
			}
		}

		Timer.DELTA=0;
		Timer.__init$=function(){
			//class TimerHandler
			TimerHandler=(function(){
				function TimerHandler(){
					this.key=0;
					this.repeat=false;
					this.delay=0;
					this.userFrame=false;
					this.exeTime=0;
					this.caller=null;
					this.method=null;
					this.args=null;
				}
				__class(TimerHandler,'');
				var __proto=TimerHandler.prototype;
				__proto.clear=function(){
					this.caller=null;
					this.method=null;
					this.args=null;
				}
				__proto.run=function(widthClear){
					var caller=this.caller;
					if (caller && caller.destroyed)return this.clear();
					var method=this.method;
					var args=this.args;
					widthClear && this.clear();
					if (method==null)return;
					args ? method.apply(caller,args):method.call(caller);
				}
				return TimerHandler;
			})()
		}

		return Timer;
	})()


	/**
	*缓动类
	*@author yung
	*/
	//class laya.utils.Tween
	var Tween=(function(){
		function Tween(){
			//this._complete=null;
			//this._target=null;
			//this._ease=null;
			//this._props=null;
			//this._duration=0;
			//this._delay=0;
			//this._startTimer=0;
			//this._usedTimer=0;
			//this._usedPool=false;
			this.gid=0;
		}

		__class(Tween,'laya.utils.Tween');
		var __proto=Tween.prototype;
		/**
		*缓动对象的props属性到目标值
		*@param target 目标对象(即将更改属性值的对象)
		*@param props 变化的属性列表，比如{x:100,y:20}
		*@param duration 花费的时间，单位毫秒
		*@param ease 缓动类型，默认为匀速运动
		*@param complete 结束回调函数
		*@param delay 延迟执行时间
		*@param coverBefore 是否覆盖之前的缓动
		*@return 返回Tween对象
		*/
		__proto.to=function(target,props,duration,ease,complete,delay,coverBefore){
			(delay===void 0)&& (delay=0);
			(coverBefore===void 0)&& (coverBefore=false);
			return this._create(target,props,duration,ease,complete,delay,coverBefore,true,false,true);
		}

		/**
		*从props属性，缓动到当前状态
		*@param target 目标对象(即将更改属性值的对象)
		*@param props 变化的属性列表，比如{x:100,y:20}
		*@param duration 花费的时间，单位毫秒
		*@param ease 缓动类型，默认为匀速运动
		*@param complete 结束回调函数
		*@param delay 延迟执行时间
		*@param coverBefore 是否覆盖之前的缓动
		*@return 返回Tween对象
		*/
		__proto.from=function(target,props,duration,ease,complete,delay,coverBefore){
			(delay===void 0)&& (delay=0);
			(coverBefore===void 0)&& (coverBefore=false);
			return this._create(target,props,duration,ease,complete,delay,coverBefore,false,false,true);
		}

		/**@private */
		__proto._create=function(target,props,duration,ease,complete,delay,coverBefore,isTo,usePool,runNow){
			if (!target)throw new Error("Tween:target is null");
			this._target=target;
			this._duration=duration;
			this._ease=ease || Tween.easeNone;
			this._complete=complete;
			this._delay=delay;
			this._props=[];
			this._usedTimer=0;
			this._startTimer=Browser.now();
			this._usedPool=usePool;
			var gid=(target.$_GID || (target.$_GID=Utils1.getGID()));
			if (!Tween.tweenMap[gid]){
				Tween.tweenMap[gid]=[this];
				}else {
				if (coverBefore)Tween.clearTween(target);
				Tween.tweenMap[gid].push(this);
			}
			if (runNow){
				if (delay <=0)this.firstStart(target,props,isTo);
				else Laya.timer.once(delay,this,this.firstStart,[target,props,isTo]);
				}else {
				this._initProps(target,props,isTo);
			}
			return this;
		}

		__proto.firstStart=function(target,props,isTo){
			this._initProps(target,props,isTo);
			this._beginLoop();
		}

		__proto._initProps=function(target,props,isTo){
			for (var p in props){
				if ((typeof (target[p])=='number')){
					var start=isTo ? target[p] :props[p];
					var end=isTo ? props[p] :target[p];
					this._props.push([p,start,end-start]);
				}
			}
		}

		__proto._beginLoop=function(){
			Laya.timer.frameLoop(1,this,this._doEase);
		}

		/**执行缓动**/
		__proto._doEase=function(){
			this.updateEase(Browser.now());
		}

		__proto.updateEase=function(time){
			var target=this._target;
			if (target.destroyed)return Tween.clearTween(target);
			var usedTimer=this._usedTimer=time-this._startTimer-this._delay;
			if (usedTimer < 0)return;
			if (usedTimer >=this._duration)return this.complete();
			var ratio=usedTimer > 0 ? this._ease(usedTimer,0,1,this._duration):0;
			var props=this._props;
			for (var i=0,n=props.length;i < n;i++){
				var prop=props[i];
				target[prop[0]]=prop[1]+(ratio *prop[2]);
			}
		}

		/**
		*立即结束缓动并到终点
		*/
		__proto.complete=function(){
			var target=this._target;
			var props=this._props;
			var handler=this._complete;
			this.clear();
			for (var i=0,n=props.length;i < n;i++){
				var prop=props[i];
				target[prop[0]]=prop[1]+prop[2];
			}
			handler && handler.run();
		}

		/**
		*暂停缓动，可以通过resume或restart重新开始
		*/
		__proto.pause=function(){
			Laya.timer.clear(this,this._beginLoop);
			Laya.timer.clear(this,this._doEase);
		}

		/**
		*设置开始时间
		*@param startTime
		*/
		__proto.setStartTime=function(startTime){
			this._startTimer=startTime;
			this.updateEase(this._startTimer);
		}

		/**
		*停止并清理当前缓动
		*/
		__proto.clear=function(){
			if (this._target){
				this._remove();
				this._clear();
			}
		}

		__proto._clear=function(){
			this.pause();
			Laya.timer.clear(this,this.firstStart);
			this._complete=null;
			this._target=null;
			this._ease=null;
			this._props=null;
			if (this._usedPool){
				Pool.recover("tween",this);
			}
		}

		/**回收到对象池*/
		__proto.recover=function(){
			this._usedPool=true;
			this._clear();
		}

		__proto._remove=function(){
			var tweens=Tween.tweenMap[this._target.$_GID];
			if (tweens){
				for (var i=0,n=tweens.length;i < n;i++){
					if (tweens[i]===this){
						tweens.splice(i,1);
						break ;
					}
				}
			}
		}

		/**
		*重新开始暂停的缓动
		*/
		__proto.restart=function(){
			this.pause();
			this._usedTimer=0;
			this._startTimer=Browser.now();
			var props=this._props;
			for (var i=0,n=props.length;i < n;i++){
				var prop=props[i];
				this._target[prop[0]]=prop[1];
			}
			Laya.timer.once(this._delay,this,this._beginLoop);
		}

		/**
		*恢复暂停的缓动
		*/
		__proto.resume=function(){
			if (this._usedTimer >=this._duration)return;
			this._startTimer=Browser.now()-this._usedTimer-this._delay;
			this._beginLoop();
		}

		Tween.to=function(target,props,duration,ease,complete,delay,coverBefore,usePool){
			(delay===void 0)&& (delay=0);
			(coverBefore===void 0)&& (coverBefore=false);
			(usePool===void 0)&& (usePool=true);
			return Pool.getItemByClass("tween",Tween)._create(target,props,duration,ease,complete,delay,coverBefore,true,usePool,true);
		}

		Tween.from=function(target,props,duration,ease,complete,delay,coverBefore,usePool){
			(delay===void 0)&& (delay=0);
			(coverBefore===void 0)&& (coverBefore=false);
			(usePool===void 0)&& (usePool=true);
			return Pool.getItemByClass("tween",Tween)._create(target,props,duration,ease,complete,delay,coverBefore,false,usePool,true);
		}

		Tween.clearAll=function(target){
			if (!target || !target.$_GID)return;
			var tweens=Tween.tweenMap[target.$_GID];
			if (tweens){
				for (var i=0,n=tweens.length;i < n;i++){
					tweens[i]._clear();
				}
				tweens.length=0;
			}
		}

		Tween.clear=function(tween){
			tween.clear();
		}

		Tween.clearTween=function(target){
			Tween.clearAll(target);
		}

		Tween.easeNone=function(t,b,c,d){
			return c *t / d+b;
		}

		Tween.tweenMap={};
		return Tween;
	})()


	/**
	*工具类
	*@author yung
	*/
	//class laya.utils.Utils
	var Utils1=(function(){
		function Utils(){};
		__class(Utils,'laya.utils.Utils',null,'Utils1');
		Utils.toRadian=function(angle){
			return angle *Utils._pi2;
		}

		Utils.toAngle=function(radian){
			return radian *Utils._pi;
		}

		Utils.toHexColor=function(color){
			if (color < 0 || isNaN(color))return null;
			var str=color.toString(16);
			while (str.length < 6)str="0"+str;
			return "#"+str;
		}

		Utils.getGID=function(){
			return Utils._gid++;
		}

		Utils.parseXMLFromString=function(value){
			var rst;
			rst=(new DOMParser()).parseFromString(value,'text/xml');
			return rst;
		}

		Utils.preFixNumber=function(num,strLen){
			return ("0000000000"+num).slice(-strLen);
		}

		Utils.concatArr=function(src,a){
			if (!a)return src;
			if (!src)return a;
			var i=0,len=a.length;
			for (i=0;i < len;i++){
				src.push(a[i]);
			}
			return src;
		}

		Utils.clearArr=function(arr){
			if (!arr)return arr;
			arr.length=0;
			return arr;
		}

		Utils.setValueArr=function(src,v){
			src || (src=[]);
			src.length=0;
			return Utils.concatArr(src,v);
		}

		Utils.getFrom=function(rst,src,count){
			var i=0;
			for (i=0;i < count;i++){
				rst.push(src[i]);
			}
			return rst;
		}

		Utils.getFromR=function(rst,src,count){
			var i=0;
			for (i=0;i < count;i++){
				rst.push(src.pop());
			}
			return rst;
		}

		Utils.getGlobalRec=function(sprite){
			return Utils.getGlobalRecByPoints(sprite,0,0,sprite.width,sprite.height);
		}

		Utils.getGlobalRecByPoints=function(sprite,x0,y0,x1,y1){
			var newLTPoint;
			newLTPoint=new Point(x0,y0);
			newLTPoint=sprite.localToGlobal(newLTPoint);
			var newRBPoint;
			newRBPoint=new Point(x1,y1);
			newRBPoint=sprite.localToGlobal(newRBPoint);
			var rst;
			rst=Rectangle._getWrapRec([newLTPoint.x,newLTPoint.y,newRBPoint.x,newRBPoint.y]);
			return rst;
		}

		Utils.getGlobalPosAndScale=function(sprite){
			return Utils.getGlobalRecByPoints(sprite,0,0,1,1);
		}

		Utils.enableDisplayTree=function(dis){
			while (dis){
				dis.mouseEnabled=true;
				dis=dis.parent;
			}
		}

		Utils.bind=function(fun,_scope){
			var rst;
			rst=fun.bind(_scope);;
			return rst;
		}

		Utils.copyFunction=function(src,dec,permitOverrides){
			for (var i in src){
				if (!permitOverrides && dec[i])continue ;
				dec[i]=src[i];
			}
		}

		Utils.measureText=function(txt,font){
			if (Utils._charSizeTestDiv==null){
				Utils._charSizeTestDiv=Browser.createElement('div');
				Utils._charSizeTestDiv.style.cssText="z-index:10000000;padding:0px;position: absolute;left:0px;visibility:hidden;top:0px;background:white";
				Browser.document.body.appendChild(Utils._charSizeTestDiv);
			}
			Utils._charSizeTestDiv.style.font=font;
			Utils._charSizeTestDiv.innerText=txt==" " ? "i" :txt;
			var out={width:Utils._charSizeTestDiv.offsetWidth,height:Utils._charSizeTestDiv.offsetHeight};
			if (txt==' ')out.width=out.height *0.25;
			return out;
		}

		Utils.regClass=function(className,fullClassName){
			Utils._systemClass[className]=fullClassName;
		}

		Utils.New=function(className){
			className=Utils._systemClass[className] || className;
			return new Laya.__classmap[className];
		}

		Utils.updateOrder=function(childs){
			if (childs.length < 2)return false;
			var c=childs[0];
			var i=1,sz=childs.length;
			var z=c._zOrder,low=NaN,high=NaN,mid=NaN,zz=NaN;
			var repaint=false;
			for (i=1;i < sz;i++){
				c=childs [i];
				if (!c)continue ;
				if ((z=c._zOrder)< 0)z=c._zOrder;
				if(z<childs[i-1]._zOrder){
					mid=low=0;
					high=i-1;
					while (low <=high){
						mid=(low+high)>>>1;
						if (!childs[mid])break ;
						zz=childs[mid]._zOrder;
						if (zz < 0)zz=childs[mid]._zOrder;
						if (zz< z)
							low=mid+1;
						else if (zz > z)
						high=mid-1;
						else break ;
					}
					if(z>childs[mid]._zOrder)mid++;
					childs.splice(i,1);
					childs.splice(mid,0,c);
					repaint=true;
				}
			}
			return repaint;
		}

		Utils.attachAllClassTimeDelay=function(timeout,exclude){
			Utils._attachAllClassTimeDelay=timeout;
			var __classmap=Laya["__classmap"];
			var excludes=((exclude?exclude.join('%'):"")+"%Laya%laya.ui.%laya.utils.Log%laya2.display%laya.utils2%laya.asyn%laya.display.css%laya.maths%laya.utils").split("%");
			var j=0,excludelen=excludes.length;
			for (var i in __classmap){
				if (i.indexOf('.')< 0)continue ;
				for (j=0;j < excludelen;j++){
					if (i.indexOf(excludes[j])==0){
						j=-1;
						break ;
					}
				}
				if(j>0)Utils.attachClassTimeDelay(__classmap[i],i,timeout);
			}
		}

		Utils.attachClassTimeDelay=function(_class,className,timeout){
			var i;
			var pre;
			for (i in _class){
				if (_class['_$GET_'+i] !=null || i.charAt(0)=='_')continue ;
				pre=_class[i];
				if (((typeof pre=='function'))){
					_class[i]=function (_class,className,protoName,pre,timeout){
						return function (){
							var tm=Browser.now();
							var r=pre.apply(_class,arguments);
							if ((Browser.now()-tm)> timeout)Log.print("static prototype delay: "+className+"."+protoName+" "+(Browser.now()-tm));
							return r;
						}
					}(_class,className,i,pre,timeout);
				}
			};
			var __proto=_class.prototype;
			for (i in __proto){
				if (__proto['_$get_'+i] !=null || i.charAt(0)=='_')continue ;
				pre=__proto[i];
				if (((typeof pre=='function'))&& !pre.__ISCHECK){
					pre.__ISCHECK=true;
					__proto[i]=function (_class,className,protoName,pre,timeout){
						return function (){
							var tm=Browser.now();
							var r=pre.apply(this,arguments);
							if ((Browser.now()-tm)> timeout)Log.print("prototype delay:"+className+"."+protoName+" "+(Browser.now()-tm));
							return r;
						}
					}(_class,className,i,pre,timeout);
					__proto[i].__ISCHECK=true;
				}
			}
		}

		Utils._gid=1;
		Utils._pi=180 / Math.PI;
		Utils._pi2=Math.PI / 180;
		Utils._charSizeTestDiv=null
		Utils._systemClass={'Sprite':'laya.display.Sprite','Sprite3D':'laya.d3.display.Sprite3D','Mesh':'laya.d3.display.Mesh','Sky':'laya.d3.display.Sky','div':'laya.html.dom.HTMLDivElement','img':'laya.html.dom.HTMLImageElement','span':'laya.html.dom.HTMLElement','br':'laya.html.dom.HTMLBrElement','style':'laya.html.dom.HTMLStyleElement','font':'laya.html.dom.HTMLElement','a':'laya.html.dom.HTMLElement','#text':'laya.html.dom.HTMLElement'};
		Utils._attachAllClassTimeDelay=-1;
		return Utils;
	})()


	/**
	*...
	*@author ww
	*/
	//class laya.particle.emitter.EmitterBase
	var EmitterBase=(function(){
		function EmitterBase(){
			this._frameTime=0;
			this._emissionRate=60;
			this._emissionTime=0;
			this.minEmissionTime=1/60;
			this._particleTemplate=null;
		}

		__class(EmitterBase,'laya.particle.emitter.EmitterBase');
		var __proto=EmitterBase.prototype;
		/**
		*开始发射粒子
		*@param duration 发射持续的时间
		*/
		__proto.start=function(duration){
			(duration===void 0)&& (duration=Number.MAX_VALUE);
			if (this._emissionRate !=0)
				this._emissionTime=duration;
		}

		/**
		*停止发射粒子
		*@param clearParticles 是否清理当前的粒子
		*/
		__proto.stop=function(){
			this._emissionTime=0;
		}

		/**
		*清理当前的活跃粒子
		*@param clearTexture 是否清理贴图数据,若清除贴图数据将无法再播放
		*/
		__proto.clear=function(){
			this._emissionTime=0;
		}

		__proto.emit=function(){}
		__proto.advanceTime=function(passedTime){
			(passedTime===void 0)&& (passedTime=1);
			this._emissionTime-=passedTime;
			if(this._emissionTime<0)return;
			this._frameTime+=passedTime;
			if (this._frameTime < this.minEmissionTime)return;
			while(this._frameTime>this.minEmissionTime){
				this._frameTime-=this.minEmissionTime;
				this.emit();
			}
		}

		__getset(0,__proto,'particleTemplate',null,function(particleTemplate){
			this._particleTemplate=particleTemplate;
		});

		/**
		*设置粒子发射速率
		*@param emissionRate 粒子发射速率 (个/秒)
		*/
		/**
		*获取粒子发射速率
		*@return 发射速率 粒子发射速率 (个/秒)
		*/
		__getset(0,__proto,'emissionRate',function(){
			return this._emissionRate;
			},function(_emissionRate){
			if(_emissionRate<=0)return;
			this._emissionRate=_emissionRate;
			(_emissionRate>0)&&(this.minEmissionTime=1/_emissionRate);
		});

		return EmitterBase;
	})()


	/**
	*...
	*@author
	*/
	//class laya.particle.ParticleData
	var ParticleData=(function(){
		function ParticleData(){
			this.position=null;
			this.velocity=null;
			this.color=null;
			this.sizeRotation=null;
			this.radiusRadian=null;
			this.durationAddScale=NaN;
			this.time=NaN;
		}

		__class(ParticleData,'laya.particle.ParticleData');
		ParticleData.Create=function(settings,position,velocity,time){
			var particleData=new ParticleData();
			particleData.position=position;
			MathUtil.scaleVector3(velocity,settings.emitterVelocitySensitivity,velocity);
			var horizontalVelocity=MathUtil.lerp(settings.minHorizontalVelocity,settings.maxHorizontalVelocity,Math.random());
			var horizontalAngle=Math.random()*Math.PI *2;
			velocity[0]+=horizontalVelocity *Math.cos(horizontalAngle);
			velocity[1]+=horizontalVelocity *Math.sin(horizontalAngle);
			velocity[2]+=MathUtil.lerp(settings.minVerticalVelocity,settings.maxVerticalVelocity,Math.random());
			particleData.velocity=velocity;
			particleData.color=new Float32Array(4);
			var i=0;
			if (settings.colorComponentInter){
				for (i=0;i < 4;i++)
				particleData.color[i]=MathUtil.lerp(settings.minColor[i],settings.maxColor[i],Math.random());
			}
			else{
				MathUtil.lerpVector4(settings.minColor,settings.maxColor,Math.random(),particleData.color);
			}
			particleData.sizeRotation=new Float32Array(3);
			var sizeRandom=Math.random();
			particleData.sizeRotation[0]=MathUtil.lerp(settings.minStartSize,settings.maxStartSize,sizeRandom);
			particleData.sizeRotation[1]=MathUtil.lerp(settings.minEndSize,settings.maxEndSize,sizeRandom);
			particleData.sizeRotation[2]=MathUtil.lerp(settings.minRotateSpeed,settings.maxRotateSpeed,Math.random());
			particleData.radiusRadian=new Float32Array(4);
			var radiusRandom=Math.random();
			particleData.radiusRadian[0]=MathUtil.lerp(settings.minStartRadius,settings.maxStartRadius,radiusRandom);
			particleData.radiusRadian[1]=MathUtil.lerp(settings.minEndRadius,settings.maxEndRadius,radiusRandom);
			particleData.radiusRadian[2]=MathUtil.lerp(settings.minHorizontalEndRadian,settings.maxHorizontalEndRadian,Math.random());
			particleData.radiusRadian[3]=MathUtil.lerp(settings.minVerticalEndRadian,settings.maxVerticalEndRadian,Math.random());
			particleData.durationAddScale=settings.ageAddScale *Math.random();
			particleData.time=time;
			return particleData;
		}

		return ParticleData;
	})()


	/**
	*...
	*@author ...
	*/
	//class laya.particle.ParticleSettings
	var ParticleSettings=(function(){
		function ParticleSettings(){
			this.textureName=null;
			this.textureCount=1;
			this.maxPartices=100;
			this.duration=1;
			this.ageAddScale=0;
			this.minHorizontalVelocity=0;
			this.maxHorizontalVelocity=0;
			this.minVerticalVelocity=0;
			this.maxVerticalVelocity=0;
			this.endVelocity=1;
			this.colorComponentInter=false;
			this.minRotateSpeed=0;
			this.maxRotateSpeed=0;
			this.minStartSize=100;
			this.maxStartSize=100;
			this.minEndSize=100;
			this.maxEndSize=100;
			this.emitterVelocitySensitivity=1;
			this.minStartRadius=0;
			this.maxStartRadius=0;
			this.minEndRadius=0;
			this.maxEndRadius=0;
			this.minHorizontalEndRadian=0;
			this.maxHorizontalEndRadian=0;
			this.minVerticalEndRadian=0;
			this.maxVerticalEndRadian=0;
			this.blendState=0;
			this.emitterType="null";
			this.emissionRate=0;
			this.sphereEmitterRadius=1;
			this.sphereEmitterVelocity=0;
			this.sphereEmitterVelocityAddVariance=0;
			this.ringEmitterRadius=30;
			this.ringEmitterVelocity=0;
			this.ringEmitterVelocityAddVariance=0;
			this.ringEmitterUp=2;
			this.gravity=new Float32Array([0,0,0]);
			this.minColor=new Float32Array([1,1,1,1]);
			this.maxColor=new Float32Array([1,1,1,1]);
			this.pointEmitterPosition=new Float32Array([0,0,0]);
			this.pointEmitterPositionVariance=new Float32Array([0,0,0]);
			this.pointEmitterVelocity=new Float32Array([0,0,0]);
			this.pointEmitterVelocityAddVariance=new Float32Array([0,0,0]);
			this.boxEmitterCenterPosition=new Float32Array([0,0,0]);
			this.boxEmitterSize=new Float32Array([0,0,0]);
			this.boxEmitterVelocity=new Float32Array([0,0,0]);
			this.boxEmitterVelocityAddVariance=new Float32Array([0,0,0]);
			this.sphereEmitterCenterPosition=new Float32Array([0,0,0]);
			this.ringEmitterCenterPosition=new Float32Array([0,0,0]);
			this.positionVariance=new Float32Array([0,0,0]);
		}

		__class(ParticleSettings,'laya.particle.ParticleSettings');
		ParticleSettings.fromFile=function(particleSettingFile){}
		return ParticleSettings;
	})()


	/**
	*...
	*@author
	*/
	//class laya.particle.ParticleTemplateBase
	var ParticleTemplateBase=(function(){
		function ParticleTemplateBase(){
			this.settings=null;
			this.texture=null;
		}

		__class(ParticleTemplateBase,'laya.particle.ParticleTemplateBase');
		var __proto=ParticleTemplateBase.prototype;
		__proto.addParticleArray=function(position,velocity){}
		return ParticleTemplateBase;
	})()


	/**
	*...
	*@author ww
	*/
	//class laya.particle.particleUtils.CanvasShader
	var CanvasShader=(function(){
		function CanvasShader(){
			this.u_EndVelocity=NaN;
			this.u_Gravity=null;
			this.u_Duration=NaN;
			this.a_RadiusRadian=null;
			this.a_Position=null;
			this.a_SizeRotation=null;
			this.a_Color=null;
			this.a_Velocity=null;
			this.gl_Position=null;
			this.v_Color=null;
			this.a_AgeAddScale=NaN;
			this.oSize=NaN;
			this._position=new Float32Array(3);
			this._color=new Float32Array(4);
		}

		__class(CanvasShader,'laya.particle.particleUtils.CanvasShader');
		var __proto=CanvasShader.prototype;
		__proto.getLen=function(position){
			return Math.sqrt(position[0] *position[0]+position[1] *position[1]+position[2] *position[2]);
		}

		__proto.ComputeParticlePosition=function(position,velocity,age,normalizedAge){
			this._position[0]=position[0];
			this._position[1]=position[1];
			this._position[2]=position[2];
			var startVelocity=this.getLen(velocity);
			var endVelocity=startVelocity *this.u_EndVelocity;
			var velocityIntegral=startVelocity *normalizedAge+(endVelocity-startVelocity)*normalizedAge *normalizedAge / 2.0;
			var lenVelocity=NaN;
			lenVelocity=this.getLen(velocity);
			var i=0,len=0;
			len=3;
			for (i=0;i < len;i++){
				this._position[i]+=this._position[i]+(velocity[i] / lenVelocity)*velocityIntegral *this.u_Duration;
				this._position[i]+=this.u_Gravity[i] *age *normalizedAge;
			};
			var radius=MathUtil.lerp(this.a_RadiusRadian[0],this.a_RadiusRadian[1],normalizedAge);
			var radianHorizontal=this.a_RadiusRadian[2] *normalizedAge;
			var radianVertical=this.a_RadiusRadian[3] *normalizedAge;
			var r=Math.cos(radianVertical)*radius;
			this._position[1]+=Math.sin(radianVertical)*radius;
			this._position[0]+=Math.cos(radianHorizontal)*r;
			this._position[2]+=Math.sin(radianHorizontal)*r;
			return new Float32Array([this._position[0],this._position[1],0.0,1.0]);
		}

		__proto.ComputeParticleSize=function(startSize,endSize,normalizedAge){
			var size=MathUtil.lerp(startSize,endSize,normalizedAge);
			return size;
		}

		__proto.ComputeParticleRotation=function(rot,age){
			return rot *age;
		}

		__proto.ComputeParticleColor=function(projectedPosition,color,normalizedAge){
			var rst=this._color;
			rst[0]=color[0];
			rst[1]=color[1];
			rst[2]=color[2];
			rst[3]=color[3]*normalizedAge *(1.0-normalizedAge)*(1.0-normalizedAge)*6.7;
			return rst;
		}

		__proto.clamp=function(value,min,max){
			if(value<min)return min;
			if(value>max)return max;
			return value;
		}

		__proto.getData=function(age){
			age *=1.0+this.a_AgeAddScale;
			var normalizedAge=this.clamp(age / this.u_Duration,0.0,1.0);
			this.gl_Position=this.ComputeParticlePosition(this.a_Position,this.a_Velocity,age,normalizedAge);
			var pSize=this.ComputeParticleSize(this.a_SizeRotation[0],this.a_SizeRotation[1],normalizedAge);
			var rotation=this.ComputeParticleRotation(this.a_SizeRotation[2],age);
			this.v_Color=this.ComputeParticleColor(this.gl_Position,this.a_Color,normalizedAge);
			var matric=new Matrix();
			var scale=NaN;
			scale=pSize/this.oSize*2;
			matric.scale(scale,scale);
			matric.rotate(rotation);
			matric.setTranslate(this.gl_Position[0],-this.gl_Position[1]);
			var alpha=NaN;
			alpha=this.v_Color[3];
			return [this.v_Color,alpha,matric,this.v_Color[0]*alpha,this.v_Color[1]*alpha,this.v_Color[2]*alpha];
		}

		return CanvasShader;
	})()


	/**
	*
	*@author ww
	*@version 1.0
	*
	*@created 2015-8-25 下午3:41:07
	*/
	//class laya.particle.particleUtils.CMDParticle
	var CMDParticle=(function(){
		function CMDParticle(){
			this.maxIndex=0;
			this.cmds=null;
			this.id=0;
		}

		__class(CMDParticle,'laya.particle.particleUtils.CMDParticle');
		var __proto=CMDParticle.prototype;
		__proto.setCmds=function(cmds){
			this.cmds=cmds;
			this.maxIndex=cmds.length-1;
		}

		return CMDParticle;
	})()


	/**
	*
	*@author ww
	*@version 1.0
	*
	*@created 2015-8-26 下午7:22:26
	*/
	//class laya.particle.particleUtils.PicTool
	var PicTool=(function(){
		function PicTool(){}
		__class(PicTool,'laya.particle.particleUtils.PicTool');
		PicTool.getCanvasPic=function(img,color){
			img=img.bitmap;
			var canvas=Browser.createElement("canvas");
			var ctx=canvas.getContext('2d');
			canvas.height=img.height;
			canvas.width=img.width;
			ctx.drawImage(img.source,0,0);
			var imgdata=ctx.getImageData(0,0,canvas.width,canvas.height);
			var data=imgdata.data;
			var red=(color >> 16 & 0xFF);
			var green=(color >> 8 & 0xFF);
			var blue=(color & 0xFF);
			for(var i=0,n=data.length;i<n;i+=4){
				if(data[i+3]==0)continue ;
				data[i]=red;
				data[i+1]=green;
				data[i+2]=blue;
			}
			ctx.putImageData(imgdata,0,0);
			canvas.source=canvas;
			return canvas;
		}

		PicTool.getRGBPic=function(img){
			var rst;
			rst=[new Texture(PicTool.getCanvasPic(img,0xFF0000)),new Texture(PicTool.getCanvasPic(img,0x00FF00)),new Texture(PicTool.getCanvasPic(img,0x0000FF))];
			return rst;
		}

		return PicTool;
	})()


	/**
	*...
	*@author laya
	*/
	//class laya.webgl.shader.Shader
	var Shader=(function(){
		function Shader(vs,ps,saveName,nameMap){
			this.customCompile=false;
			//this._nameMap=null;
			//this._vs=null;
			//this._ps=null;
			//this._texIndex=0;
			this.tag={};
			this._program=null;
			this._params=null;
			this._paramsMap={};
			this._offset=0;
			//this._id=0;
			this._id=++Shader._count;
			this._vs=vs;
			this._ps=ps;
			this._nameMap=nameMap ? nameMap :{};
			saveName !=null && (Shader.sharders[saveName]=this);
		}

		__class(Shader,'laya.webgl.shader.Shader');
		var __proto=Shader.prototype;
		__proto.compile=function(){
			if (!this._vs || !this._ps || this._params)
				return;
			this._params=[];
			var text=[this._vs,this._ps];
			var result;
			if (this.customCompile)
				result=this.preCompile(this._vs,this._ps);
			var gl=WebGL.mainContext;
			this._program=gl.createProgram();
			var vshader=Shader._createShader(gl,text[0],0x8B31);
			var pshader=Shader._createShader(gl,text[1],0x8B30);
			gl.attachShader(this._program,vshader);
			gl.attachShader(this._program,pshader);
			gl.linkProgram(this._program);
			if (!gl.getProgramParameter(this._program,0x8B82)){
				throw gl.getProgramInfoLog(this._program);
			};
			var one,i=0,j=0,n=0,location=0;
			var attribNum=0;
			if (this.customCompile)
				attribNum=result.attributes.length;
			else
			attribNum=gl.getProgramParameter(this._program,0x8B89);
			for (i=0;i < attribNum;i++){
				var attrib;
				if (this.customCompile)
					attrib=result.attributes[i];
				else
				attrib=gl.getActiveAttrib(this._program,i);
				location=gl.getAttribLocation(this._program,attrib.name);
				one={vartype:"attribute",ivartype:0,attrib:attrib,location:location,name:attrib.name,type:attrib.type,isArray:false,isSame:false,preValue:null,indexOfParams:0 };
				this._params.push(one);
			};
			var nUniformNum=0;
			if (this.customCompile)
				nUniformNum=result.uniforms.length;
			else
			nUniformNum=gl.getProgramParameter(this._program,0x8B86);
			for (i=0;i < nUniformNum;i++){
				var uniform;
				if (this.customCompile)
					uniform=result.uniforms[i];
				else
				uniform=gl.getActiveUniform(this._program,i);
				location=gl.getUniformLocation(this._program,uniform.name);
				one={vartype:"uniform",ivartype:1,attrib:attrib,location:location,name:uniform.name,type:uniform.type,isArray:false,isSame:false,preValue:null,indexOfParams:0};
				if (one.name.indexOf('[0]')> 0){
					one.name=one.name.substr(0,one.name.length-3);
					one.isArray=true;
					one.location=gl.getUniformLocation(this._program,one.name);
				}
				this._params.push(one);
			}
			for (i=0,n=this._params.length;i < n;i++){
				one=this._params[i];
				one.indexOfParams=i;
				one.index=1;
				one.value=[one.location,null];
				one.codename=one.name;
				one.name=this._nameMap[one.codename] ? this._nameMap[one.codename] :one.codename;
				this._paramsMap[one.name]=one;
				one._this=this;
				one.saveValue=[];
				if (one.vartype==="attribute"){
					one.fun=this._attribute;
					continue ;
				}
				switch (one.type){
					case 0x1406:
						one.fun=one.isArray ? this._uniform1fv :this._uniform1f;
						break ;
					case 0x8B50:
						one.fun=this._uniform_vec2;
						break ;
					case 0x8B51:
						one.fun=this._uniform_vec3;
						break ;
					case 0x8B52:
						one.fun=this._uniform_vec4;
						break ;
					case 0x8B5E:
						one.fun=this._uniform_sampler2D;
						break ;
					case 0x8B5C:
						one.fun=this._uniformMatrix4fv;
						break ;
					case 0x8B56:
						one.fun=this._uniform1i;
						break ;
					case 0x8B60:
					case 0x8B5A:
					case 0x8B5B:
						throw new Error("compile shader err!");
						break ;
					default :
						throw new Error("compile shader err!");
						break ;
					}
			}
			this._vs=this._ps=null;
		}

		/**
		*根据变量名字获得
		*@param name
		*@return
		*/
		__proto.getUniform=function(name){
			return this._paramsMap[name];
		}

		__proto._attribute=function(one,value){
			var gl=WebGL.mainContext;
			gl.enableVertexAttribArray(one.location);
			gl.vertexAttribPointer(one.location,value[0],value[1],value[2],value[3],value[4]+this._offset);
			return 2;
		}

		__proto._uniformMatrix4fv=function(one,value){
			WebGL.mainContext.uniformMatrix4fv(one.location,false,value);
			return 1;
		}

		__proto._uniform1i=function(one,value){
			var saveValue=one.saveValue;
			if (saveValue[0]!==value){
				WebGL.mainContext.uniform1i(one.location,saveValue[0]=value);
				return 1;
			}
			return 0;
		}

		__proto._uniform1f=function(one,value){
			var saveValue=one.saveValue;
			if (saveValue[0]!==value){
				WebGL.mainContext.uniform1f(one.location,saveValue[0]=value);
				return 1;
			}
			return 0;
		}

		__proto._uniform1fv=function(one,value){
			var saveValue=one.saveValue;
			if (saveValue[0]!==value){
				WebGL.mainContext.uniform1fv(one.location,saveValue[0]=value);
				return 1;
			}
			return 0;
		}

		__proto._uniform_vec2=function(one,value){
			var saveValue=one.saveValue;
			if (saveValue[0]!==value[0] || saveValue[1]!==value[1]){
				WebGL.mainContext.uniform2f(one.location,saveValue[0]=value[0],saveValue[1]=value[1]);
				return 1;
			}
			return 0;
		}

		__proto._uniform_vec3=function(one,value){
			WebGL.mainContext.uniform3f(one.location,value[0],value[1],value[2]);
			return 1;
		}

		__proto._uniform_vec4=function(one,value){
			WebGL.mainContext.uniform4f(one.location,value[0],value[1],value[2],value[3]);
			return 1;
		}

		__proto._uniform_sampler2D=function(one,value){
			var gl=WebGL.mainContext;
			gl.activeTexture(Shader._TEXTURES[this._texIndex]);
			gl.bindTexture(0x0DE1,value);
			var saveValue=one.saveValue;
			if (saveValue[0]!==this._texIndex)
				gl.uniform1i(one.location,saveValue[0]=this._texIndex);
			this._texIndex++;
			return 1;
		}

		__proto.uploadOne=function(name,value){
			this._program || this.compile();
			WebGLContext.UseProgram(this._program);
			var one=this._paramsMap[name];
			one.fun.call(this,one,value);
		}

		__proto._noSetValue=function(one){
			console.log("no....:"+one.name);
		}

		/**
		*提交shader到GPU
		*@param shaderValue
		*/
		__proto.upload=function(shaderValue,params){
			Shader.activeShader=this;
			this._program || this.compile();
			WebGLContext.UseProgram(this._program);
			this._texIndex=0;
			params=params || this._params;
			var one,value,n=params.length,shaderCall=0;
			for (var i=0;i < n;i++){
				one=params[i];
				((value=shaderValue[one.name])!==null)&& (shaderCall+=one.fun.call(this,one,value));
			}
			Stat.shaderCall+=shaderCall;
		}

		/**
		*按数组的定义提交
		*@param shaderValue 数组格式[name,[value,id],...]
		*/
		__proto.uploadArray=function(shaderValue,length,_bufferUsage){
			Shader.activeShader=this;
			this._program || this.compile();
			this._texIndex=0;
			var sameProgram=!WebGLContext.UseProgram(this._program);
			var params=this._params,value;
			var one,shaderCall=0,uploadArrayCount=Shader._uploadArrayCount++;
			for (var i=length-2;i >=0;i-=2){
				one=this._paramsMap[shaderValue[i]]
				if (!one || one._uploadArrayCount===uploadArrayCount)
					continue ;
				one._uploadArrayCount=uploadArrayCount;
				var v=shaderValue[i+1];
				var uid=v[1];
				if (sameProgram&&one.ivartype===1 && uid > 0 && uid===one.__uploadid)
					continue ;
				value=v[0];
				if (value!=null){
					_bufferUsage && _bufferUsage[one.name] && _bufferUsage[one.name].bind();
					shaderCall+=one.fun.call(this,one,value);
					one.__uploadid=uid;
				}
			}
			Stat.shaderCall+=shaderCall;
		}

		/**
		*得到编译后的变量及相关预定义
		*@return
		*/
		__proto.getParams=function(){
			return this._params;
		}

		__proto.preCompile=function(vs,ps){
			var text=[vs,ps];
			var result={};
			var attributes=[];
			var uniforms=[];
			result.attributes=attributes;
			result.uniforms=uniforms;
			var removeAnnotation=new RegExp("(/\\*([^*]|[\\r\\\n]|(\\*+([^*/]|[\\r\\n])))*\\*+/)|(//.*)","g");
			var reg=new RegExp("(\".*\")|('.*')|([\\w\\*-\\.+/()=<>{}\\\\]+)|([,;:\\\\])","g");
			var i=0,n=0,one;
			for (var s=0;s < 2;s++){
				text[s]=text[s].replace(removeAnnotation,"");
				var words=text[s].match(reg);
				var str="";
				var ofs=0;
				for (i=0,n=words.length;i < n;i++){
					var word=words[i];
					if (word !="attribute" && word !="uniform"){
						str+=word;
						if (word !=";")str+=" ";
						continue ;
					}
					one={type:Shader.shaderParamsMap[words[i+1]],name:words[i+2],size:isNaN(Laya.__parseInt(words[i+3]))?1:Laya.__parseInt(words[i+3])};
					if (word=="attribute"){
						attributes.push(one);
					}
					else{
						uniforms.push(one);
					}
					str+=one.vartype+" "+one.type+" "+one.name+" ";
					if (words[i+3]==':'){
						one.type=words[i+4];
						i+=2;
					}
					i+=2;
				}
				text[s]=str;
			}
			return result;
		}

		Shader.getShader=function(name){
			return Shader.sharders[name];
		}

		Shader.create=function(vs,ps,saveName,nameMap){
			return new Shader(vs,ps,saveName,nameMap);
		}

		Shader._createShader=function(gl,str,type){
			var shader=gl.createShader(type);
			gl.shaderSource(shader,str);
			gl.compileShader(shader);
			if (!gl.getShaderParameter(shader,0x8B81)){
				throw gl.getShaderInfoLog(shader);
			}
			return shader;
		}

		Shader.addInclude=function(fileName,txt){
			if (!txt || txt.length===0)
				throw new Error("add shader include file err:"+fileName);
			if (Shader._includeFiles[fileName])
				throw new Error("add shader include file err, has add:"+fileName);
			Shader._includeFiles[fileName]=txt;
		}

		Shader.preCompile=function(nameID,mainID,vs,ps,nameMap){
			var id=0.0002 *nameID+mainID;
			Shader._preCompileShader[id]=new ShaderCompile(id,vs,ps,nameMap,Shader._includeFiles);
		}

		Shader.withCompile=function(nameID,mainID,define,shaderName,createShader){
			if (shaderName && Shader.sharders[shaderName])
				return Shader.sharders[shaderName];
			var pre=Shader._preCompileShader[0.0002 *nameID+mainID];
			if (!pre)
				throw new Error("withCompile shader err!"+nameID+" "+mainID);
			return pre.createShader(define,shaderName,createShader);
		}

		Shader.SHADERNAME2ID=0.0002;
		Shader.activeShader=null
		Shader.sharders=(Shader.sharders=[],Shader.sharders.length=0x20,Shader.sharders);
		Shader._includeFiles={};
		Shader._count=0;
		Shader._preCompileShader={};
		Shader._uploadArrayCount=1;
		Shader._TEXTURES=[0x84C0,0x84C1,0x84C2,0x84C3,0x84C4,0x84C5,0x84C6,,0x84C7,0x84C8];
		__static(Shader,
		['nameKey',function(){return this.nameKey=new StringKey();},'shaderParamsMap',function(){return this.shaderParamsMap={
				"float":0x1406,
				"int":0x1404,
				"bool":0x8B56,
				"vec2":0x8B50,
				"vec3":0x8B51,
				"vec4":0x8B52,
				"ivec2":0x8B53,
				"ivec3":0x8B54,
				"ivec4":0x8B55,
				"bvec2":0x8B57,
				"bvec3":0x8B58,
				"bvec4":0x8B59,
				"mat2":0x8B5A,
				"mat3":0x8B5B,
				"mat4":0x8B5C,
				"sampler2D":0x8B5E,
				"samplerCube":0x8B60
		};}

		]);
		return Shader;
	})()


	/**
	*...
	*@author laya
	*/
	//class laya.webgl.shader.ShaderValue
	var ShaderValue=(function(){
		function ShaderValue(){}
		__class(ShaderValue,'laya.webgl.shader.ShaderValue');
		return ShaderValue;
	})()


	/**
	*<code>LayoutStyle</code> 是一个布局样式类。
	*@author yung
	*/
	//class laya.ui.LayoutStyle
	var LayoutStyle=(function(){
		function LayoutStyle(){
			this.enable=false;
			this.top=NaN;
			this.bottom=NaN;
			this.left=NaN;
			this.right=NaN;
			this.centerX=NaN;
			this.centerY=NaN;
		}

		__class(LayoutStyle,'laya.ui.LayoutStyle');
		__static(LayoutStyle,
		['EMPTY',function(){return this.EMPTY=new LayoutStyle();}
		]);
		return LayoutStyle;
	})()


	/**
	*<code>Styles</code> 定义了组件常用的样式属性。
	*@author yung
	*/
	//class laya.ui.Styles
	var Styles=(function(){
		function Styles(){};
		__class(Styles,'laya.ui.Styles');
		Styles.labelColor="#000000";
		Styles.buttonStateNum=3;
		Styles.scrollBarMinNum=15;
		Styles.scrollBarDelayTime=500;
		__static(Styles,
		['defaultSizeGrid',function(){return this.defaultSizeGrid=[4,4,4,4,0];},'labelPadding',function(){return this.labelPadding=[2,2,2,2];},'inputLabelPadding',function(){return this.inputLabelPadding=[1,1,1,3];},'buttonLabelColors',function(){return this.buttonLabelColors=["#32556b","#32cc6b","#ff0000","#C0C0C0"];},'comboBoxItemColors',function(){return this.comboBoxItemColors=["#5e95b6","#ffffff","#000000","#8fa4b1","#ffffff"];}
		]);
		return Styles;
	})()


	/**
	*文本工具集。
	*@author yung
	*/
	//class laya.ui.UIUtils
	var UIUtils=(function(){
		function UIUtils(){};
		__class(UIUtils,'laya.ui.UIUtils');
		UIUtils.fillArray=function(arr,str,type){
			var temp=arr.concat();
			if (str){
				var a=str.split(",");
				for (var i=0,n=Math.min(temp.length,a.length);i < n;i++){
					var value=a[i];
					temp[i]=(value=="true" ? true :(value=="false" ? false :value));
					if (type !=null)temp[i]=type(value);
				}
			}
			return temp;
		}

		UIUtils.toColor=function(color){
			var str=color.toString("16");
			while (str.length < 6)str="0"+str;
			return "#"+str;
		}

		UIUtils.gray=function(traget,isGray){
			(isGray===void 0)&& (isGray=true);
			if (isGray){
				UIUtils.addFilter(traget,UIUtils.grayFilter);
				}else {
				UIUtils.clearFilter(traget,ColorFilter);
			}
		}

		UIUtils.addFilter=function(target,filter){
			var filters=target.filters || [];
			filters.push(filter);
			target.filters=filters;
		}

		UIUtils.clearFilter=function(target,filterType){
			var filters=target.filters;
			if (filters !=null && filters.length > 0){
				for (var i=filters.length-1;i >-1;i--){
					var filter=filters[i];
					if (Laya.__typeof(filter,filterType))filters.splice(i,1);
				}
				target.filters=filters;
			}
		}

		__static(UIUtils,
		['grayFilter',function(){return this.grayFilter=new ColorFilter([0.3086,0.6094,0.082,0,0,0.3086,0.6094,0.082,0,0,0.3086,0.6094,0.082,0,0,0,0,0,1,0]);}
		]);
		return UIUtils;
	})()


	/**全局配置*/
	//class UIConfig
	var UIConfig=(function(){
		function UIConfig(){};
		__class(UIConfig,'UIConfig');
		UIConfig.resPath="";
		UIConfig.uiPath="";
		UIConfig.touchScrollEnable=true;
		UIConfig.mouseWheelEnable=true;
		UIConfig.showButtons=true;
		UIConfig.popupBgColor="#000000";
		UIConfig.popupBgAlpha=0.5;
		return UIConfig;
	})()


	/**
	*
	*@author ww
	*@version 1.0
	*
	*@created 2015-10-23 下午2:24:04
	*/
	//class tools.ClassTool
	var ClassTool=(function(){
		function ClassTool(){}
		__class(ClassTool,'tools.ClassTool');
		ClassTool.defineProperty=function(obj,name,des){
			Object.defineProperty(obj,name,des);;
		}

		ClassTool.getOwnPropertyDescriptor=function(obj,name){
			var rst;
			rst=Object.getOwnPropertyDescriptor(obj,name);;
			return rst;
		}

		ClassTool.getOwnPropertyNames=function(obj){
			var rst;
			rst=Object.getOwnPropertyNames(obj);;
			return rst;
		}

		ClassTool.getClassName=function(tar){
			return tar["constructor"].name;
		}

		ClassTool.getClassNameByClz=function(clz){
			return clz["name"];
		}

		ClassTool.getClassByName=function(className){
			var rst;
			rst=eval(className);
			return rst;
		}

		ClassTool.createObjByName=function(className){
			var clz;
			clz=ClassTool.getClassByName(className);
			return new clz();
		}

		return ClassTool;
	})()


	/**
	*...
	*@author ww
	*/
	//class tools.ColorTool
	var ColorTool=(function(){
		function ColorTool(){
			this.red=NaN;
			this.green=NaN;
			this.blue=NaN;
		}

		__class(ColorTool,'tools.ColorTool');
		ColorTool.toHexColor=function(color){
			if (color < 0 || isNaN(color))
				return null;
			var str=color.toString(16);
			while (str.length < 6)
			str="0"+str;
			return "#"+str;
		}

		ColorTool.getRGBByRGBStr=function(str){
			str.charAt(0)=='#' && (str=str.substr(1));
			var color=parseInt(str,16);
			var flag=(str.length==8);
			var _color;
			_color=[((0x00FF0000 & color)>> 16),((0x0000FF00 & color)>> 8),(0x000000FF & color)];
			return _color;
		}

		ColorTool.getColorBit=function(value){
			var rst;
			rst=Math.floor(value).toString(16);
			rst=rst.length > 1 ? rst :"0"+rst;
			return rst;
		}

		ColorTool.getRGBStr=function(rgb){
			return "#"+ColorTool.getColorBit(rgb[0])+ColorTool.getColorBit(rgb[1])+ColorTool.getColorBit(rgb[2]);
		}

		ColorTool.traseHSB=function(hsb){
			console.log("hsb:",hsb[0],hsb[1],hsb[2]);
		}

		ColorTool.rgb2hsb=function(rgbR,rgbG,rgbB){
			var rgb=[rgbR,rgbG,rgbB];
			rgb.sort(MathUtil.SortNumSmallFirst);
			var max=rgb[2];
			var min=rgb[0];
			var hsbB=max / 255.0;
			var hsbS=max==0 ? 0 :(max-min)/ max;
			var hsbH=0;
			if(max==min){
				hsbH=1;
			}
			else
			if (rgbR==0 && rgbG==0&&rgbB==0){
			}else
			if (max==rgbR && rgbG >=rgbB){
				hsbH=(rgbG-rgbB)*60 / (max-min)+0;
			}
			else if (max==rgbR && rgbG < rgbB){
				hsbH=(rgbG-rgbB)*60 / (max-min)+360;
			}
			else if (max==rgbG){
				hsbH=(rgbB-rgbR)*60 / (max-min)+120;
			}
			else if (max==rgbB){
				hsbH=(rgbR-rgbG)*60 / (max-min)+240;
			}
			return [hsbH,hsbS,hsbB];
		}

		ColorTool.hsb2rgb=function(h,s,v){
			var r=0,g=0,b=0;
			var i=Math.floor((h / 60)% 6);
			var f=(h / 60)-i;
			var p=v *(1-s);
			var q=v *(1-f *s);
			var t=v *(1-(1-f)*s);
			switch (i){
				case 0:
					r=v;
					g=t;
					b=p;
					break ;
				case 1:
					r=q;
					g=v;
					b=p;
					break ;
				case 2:
					r=p;
					g=v;
					b=t;
					break ;
				case 3:
					r=p;
					g=q;
					b=v;
					break ;
				case 4:
					r=t;
					g=p;
					b=v;
					break ;
				case 5:
					r=v;
					g=p;
					b=q;
					break ;
				default :
					break ;
				}
			return [Math.floor(r *255.0),Math.floor(g *255.0),Math.floor(b *255.0)];
		}

		return ColorTool;
	})()


	/**
	*
	*@author ww
	*@version 1.0
	*
	*@created 2015-9-29 下午12:53:31
	*/
	//class tools.CommonTools
	var CommonTools=(function(){
		function CommonTools(){}
		__class(CommonTools,'tools.CommonTools');
		CommonTools.bind=function(fun,scope){
			var rst;
			rst=fun.bind(scope);
			return rst;
		}

		CommonTools.insertP=function(tar,x,y,scaleX,scaleY,rotation){
			var nSp;
			nSp=new Sprite();
			tar.parent.addChild(nSp);
			nSp.x=x;
			nSp.y=y;
			nSp.scaleX=scaleX;
			nSp.scaleY=scaleY;
			nSp.rotation=rotation;
			nSp.addChild(tar);
			CommonTools.count++;
			nSp.name="insertP:"+CommonTools.count;
		}

		CommonTools.insertChild=function(tar,x,y,scaleX,scaleY,rotation,color){
			(color===void 0)&& (color="#ff00ff");
			var nSp;
			nSp=new Sprite();
			tar.addChild(nSp);
			nSp.x=x;
			nSp.y=y;
			nSp.scaleX=scaleX;
			nSp.scaleY=scaleY;
			nSp.rotation=rotation;
			nSp.graphics.drawRect(0,0,20,20,color);
			nSp.name="child:"+tar.numChildren;
			return nSp;
		}

		CommonTools.count=0;
		return CommonTools;
	})()


	/**
	*
	*@author ww
	*@version 1.0
	*
	*@created 2015-9-24 下午6:37:56
	*/
	//class tools.CountTool
	var CountTool=(function(){
		function CountTool(){
			this.data={};
			this.count=0;
		}

		__class(CountTool,'tools.CountTool');
		var __proto=CountTool.prototype;
		__proto.reset=function(){
			this.data={};
			this.count=0;
		}

		__proto.add=function(name){
			this.count++;
			if(!this.data.hasOwnProperty(name)){
				this.data[name]=0;
			}
			this.data[name]=this.data[name]+1;
		}

		__proto.traceSelf=function(){
			console.log("total:"+this.count);
			TraceTool.traceObj(this.data);
		}

		__proto.traceSelfR=function(){
			console.log("total:"+this.count);
			TraceTool.traceObjR(this.data);
		}

		return CountTool;
	})()


	/**
	*
	*@author ww
	*@version 1.0
	*
	*@created 2015-10-31 下午3:35:16
	*/
	//class tools.DebugExport
	var DebugExport=(function(){
		function DebugExport(){}
		__class(DebugExport,'tools.DebugExport');
		DebugExport.export=function(){
			var _window;
			_window=window;;
			var key;
			for(key in DebugExport._exportsDic){
				_window[key]=DebugExport._exportsDic[key];
			}
		}

		__static(DebugExport,
		['_exportsDic',function(){return this._exportsDic={
				"DebugTool":DebugTool,
				"Watcher":Watcher
		};}

		]);
		return DebugExport;
	})()


	/**
	*
	*@author ww
	*@version 1.0
	*
	*@created 2015-9-24 下午3:00:38
	*/
	//class tools.DebugTool
	var DebugTool=(function(){
		function DebugTool(){}
		__class(DebugTool,'tools.DebugTool');
		__getset(1,DebugTool,'isThisShow',function(){
			return DebugTool._mainPanel.visible;
		});

		__getset(1,DebugTool,'target',function(){
			return DebugTool._target;
			},function(v){
			DebugTool._target=v;
			if(DebugTool._mainPanel){
				DebugTool._mainPanel.updateStatu();
			}
		});

		/**
		*设置是否显示帧率信息
		*@param value 是否显示true|false
		*/
		__getset(1,DebugTool,'showStatu',null,function(value){
			if(value){
				Stat.show();
				}else{
				Stat.hide();
				DebugTool.clearDebugLayer();
			}
		});

		/**
		*是否自动显示点击对象的边框
		*@param value
		*/
		__getset(1,DebugTool,'showBound',function(){
			return DebugTool._showBound;
			},function(value){
			DebugTool._showBound=value;
			if(!DebugTool._showBound){
				DebugTool.clearDebugLayer();
			}
		});

		DebugTool.init=function(){
			DisplayHook.initMe();
			if(!DebugTool.debugLayer){
				DebugTool.debugLayer=new Sprite();
				Laya.stage.addChild(DebugTool.debugLayer);
				DebugTool.debugLayer.mouseEnabled=false;
				DebugTool.debugLayer.mouseThrough=true;
				DebugTool.showStatu=true;
				Laya.stage.on("keydown",null,DebugTool.keyHandler);
				DebugTool._mainPanel=new DMainPain();
				Laya.stage.addChild(DebugTool._mainPanel);
				DebugTool._mainPanel.x=(Laya.stage.width-DebugTool._mainPanel.width);
				DebugTool._traceFun=DebugTool._mainPanel.outUI.out;
				DebugTool._traceFun=CommonTools.bind(DebugTool._traceFun,DebugTool._mainPanel.outUI);
				DebugTool.cmdToTypeO[0x01]="IMAGE";
				DebugTool.cmdToTypeO[0x04]="ALPHA";
				DebugTool.cmdToTypeO[0x08]="TRANSFORM";
				DebugTool.cmdToTypeO[0x10]="CANVAS";
				DebugTool.cmdToTypeO[0x100]="GRAPHICS";
				DebugTool.cmdToTypeO[0x200]="CUSTOM";
				DebugTool.cmdToTypeO[0x800]="CHILDS";
				DebugExport.export();
				DebugTool.showDebugUI(false);
			}
		}

		DebugTool.showDebugUI=function(ifShow){
			DebugTool._mainPanel.visible=ifShow;
			DebugTool.showStatu=ifShow;
		}

		DebugTool.dTrace=function(str){
			if(DebugTool._traceFun!=null){
				DebugTool._traceFun(str);
			}
			console.log(str);
		}

		DebugTool.keyHandler=function(e){
			var key;
			key=String.fromCharCode(e.keyCode);
			if(!e.shiftKey)return;
			switch(e.keyCode){
				case 38:
					DebugTool.showParent();
					break ;
				case 40:
					DebugTool.showChild();
					break ;
				case 37:
					DebugTool.showBrother(DebugTool.target,1);
					break ;
				case 39:
					DebugTool.showBrother(DebugTool.target,-1);
					break ;
				}
			DebugTool.dealCMDKey(key);
		}

		DebugTool.dealCMDKey=function(key){
			switch(key){
				case "上":
					DebugTool.showParent();
					break ;
				case "下":
					DebugTool.showChild();
					break ;
				case "左":
					DebugTool.showBrother(DebugTool.target,1);
					break ;
				case "右":
					DebugTool.showBrother(DebugTool.target,-1);
					break ;
				case "B":
					DebugTool.showAllBrother();
					break ;
				case "C":
					DebugTool.showAllChild();
					break ;
				case "E":
					DebugTool.traceDisMouseEnable();
					break ;
				case "S":
					DebugTool.traceDisSizeChain();
					break ;
				case "D":
					DisControlTool.downDis(DebugTool.target);
					break ;
				case "U":
					DisControlTool.upDis(DebugTool.target);
					break ;
				case "N":
					DebugTool.getNodeInfo();
					break ;
				case "M":
					DebugTool.showAllUnderMosue();
					break ;
				case "I":
					DebugTool.switchMyVisible();
					break ;
				case "O":
					DebugTool.switchDisController();
					break ;
				case "L":
					DisController.I.switchType();
					break ;
				case "mCMD":
					DebugTool.traceCMD();
					break ;
				case "allCMD":
					DebugTool.traceCMDR();
					break ;
				}
		}

		DebugTool.switchDisController=function(){
			if(DisController.I.target){
				DisController.I.target=null;
				}else{
				if(DebugTool.target){
					DisController.I.target=DebugTool.target;
				}
			}
		}

		DebugTool.switchMyVisible=function(){
			DebugTool.showDebugUI(!DebugTool._mainPanel.visible);
		}

		DebugTool.showParent=function(sprite){
			if(!sprite)sprite=DebugTool.target;
			if(!sprite){
				console.log("no targetAvalible");
				return null;
			}
			DebugTool.target=sprite.parent;
			DebugTool.autoWork();
		}

		DebugTool.showChild=function(sprite){
			if(!sprite)sprite=DebugTool.target;
			if(!sprite){
				console.log("no targetAvalible");
				return null;
			}
			if(sprite.numChildren>0){
				DebugTool.target=sprite.getChildAt(0);
				DebugTool.autoWork();
			}
		}

		DebugTool.showAllChild=function(sprite){
			if(!sprite)sprite=DebugTool.target;
			if(!sprite){
				console.log("no targetAvalible");
				return null;
			}
			DebugTool.selectedNodes=DisControlTool.getAllChild(sprite);
			DebugTool.showSelected();
		}

		DebugTool.showAllUnderMosue=function(){
			DebugTool.selectedNodes=DisControlTool.getObjectsUnderGlobalPoint(Laya.stage);
			DebugTool.showSelected();
		}

		DebugTool.showAllBrother=function(sprite){
			if(!sprite)sprite=DebugTool.target;
			if(!sprite){
				console.log("no targetAvalible");
				return null;
			}
			if(!sprite.parent)return;
			DebugTool.selectedNodes=DisControlTool.getAllChild(sprite.parent);
			DebugTool.showSelected();
		}

		DebugTool.showBrother=function(sprite,dID){
			(dID===void 0)&& (dID=1);
			if(!sprite)sprite=DebugTool.target;
			if(!sprite){
				console.log("no targetAvalible");
				return null;
			};
			var p;
			p=sprite.parent;
			if(!p)return;
			var n=0;
			n=p.getChildIndex(sprite);
			n+=dID;
			if(n<0)n+=p.numChildren;
			if (n>=p.numChildren)n-=p.numChildren;
			DebugTool.target=p.getChildAt(n);
			DebugTool.autoWork();
		}

		DebugTool.clearDebugLayer=function(){
			if(DebugTool.debugLayer.graphics)
				DebugTool.debugLayer.graphics.clear();
		}

		DebugTool.showSelected=function(){
			if(!DebugTool.autoShowSelected)return;
			if(!DebugTool.selectedNodes||DebugTool.selectedNodes.length<1)return;
			console.log("selected:");
			console.log(DebugTool.selectedNodes);
			var i=0;
			var len=0;
			len=DebugTool.selectedNodes.length;
			DebugTool.clearDebugLayer();
			for(i=0;i<len;i++){
				DebugTool.showDisBound(DebugTool.selectedNodes[i],false);
			}
		}

		DebugTool.getClassCreateInfo=function(className){
			return RunProfile.getRunInfo(className);
		}

		DebugTool.autoWork=function(){
			if(!DebugTool.isThisShow)return;
			if(DebugTool.showBound)DebugTool.showDisBound();
			if(DebugTool.autoTraceSpriteInfo&&DebugTool.target){
				TraceTool.traceSpriteInfo(DebugTool.target,DebugTool.autoTraceBounds,DebugTool.autoTraceSize,DebugTool.autoTraceTree);
			}
			if(!DebugTool.target)return;
			if(DebugTool.autoTraceCMD){
				DebugTool.traceCMD();
			}
			if(DebugTool.autoTraceCMDR){
				DebugTool.traceCMDR();
			}
			if(DebugTool.autoTraceEnable){
				DebugTool.traceDisMouseEnable(DebugTool.target);
			}
		}

		DebugTool.traceDisMouseEnable=function(tar){
			console.log("traceDisMouseEnable:");
			if(!tar)tar=DebugTool.target;
			if(!tar){
				console.log("no targetAvalible");
				return null;
			}
			DebugTool.selectedNodes=[];
			while(tar){
				DebugTool.dTrace(TraceTool.getClassName(tar)+":"+tar.mouseEnabled);
				DebugTool.selectedNodes.push(tar);
				tar=tar.parent;
			}
			DebugTool.showSelected();
		}

		DebugTool.traceDisSizeChain=function(tar){
			console.log("traceDisSizeChain:");
			if(!tar)tar=DebugTool.target;
			if(!tar){
				console.log("no targetAvalible");
				return null;
			}
			DebugTool.selectedNodes=[];
			while(tar){
				DebugTool.dTrace(TraceTool.getClassName(tar)+":");
				TraceTool.traceSize(tar);
				DebugTool.selectedNodes.push(tar);
				tar=tar.parent;
			}
			DebugTool.showSelected();
		}

		DebugTool.showDisBound=function(sprite,clearPre){
			(clearPre===void 0)&& (clearPre=true);
			DisControlTool.setTop(DebugTool._mainPanel);
			DisControlTool.setTop(DebugTool.debugLayer);
			if(!sprite)sprite=DebugTool.target;
			if(!sprite){
				console.log("no targetAvalible");
				return null;
			}
			if(clearPre)
				DebugTool.clearDebugLayer();
			var pointList;
			pointList=sprite._getBoundPointsM(true);
			if(!pointList||pointList.length<1)return;
			pointList=GrahamScan.pListToPointList(pointList,true);
			WalkTools.walkArr(pointList,sprite.localToGlobal,sprite);
			pointList=GrahamScan.pointListToPlist(pointList);
			DebugTool._disBoundRec=Rectangle._getWrapRec(pointList,DebugTool._disBoundRec);
			DebugTool.debugLayer.graphics.drawRect(DebugTool._disBoundRec.x,DebugTool._disBoundRec.y,DebugTool._disBoundRec.width,DebugTool._disBoundRec.height,null,"#ff0000");
		}

		DebugTool.getNodeInfo=function(){
			DebugTool.counter.reset();
			WalkTools.walkTarget(Laya.stage,DebugTool.addNodeInfo);
			console.log("node info:");
			DebugTool.counter.traceSelf();
			return DebugTool.counter.data;
		}

		DebugTool.findByClass=function(className){
			DebugTool._classList=[];
			DebugTool._tFindClass=className;
			WalkTools.walkTarget(Laya.stage,DebugTool.addClassNode);
			DebugTool.selectedNodes=DebugTool._classList;
			DebugTool.showSelected();
			return DebugTool._classList;
		}

		DebugTool.addClassNode=function(node){
			var type;
			type=node["constructor"].name;
			if(type==DebugTool._tFindClass){
				DebugTool._classList.push(node);
			}
		}

		DebugTool.traceCMD=function(sprite){
			if(!sprite)sprite=DebugTool.target;
			if(!sprite){
				console.log("no targetAvalible");
				return null;
			}
			console.log("self CMDs:");
			console.log(sprite.graphics.cmds);
			var renderSprite;
			renderSprite=RenderSprite.renders[sprite._renderType];
			console.log("renderSprite:",renderSprite);
			DebugTool._rSpList.length=0;
			while(renderSprite&&renderSprite["_sign"]>0){
				DebugTool._rSpList.push(DebugTool.cmdToTypeO[renderSprite["_sign"]]);
				renderSprite=renderSprite._next;
			}
			console.log("fun:",DebugTool._rSpList.join(","));
			DebugTool.counter.reset();
			DebugTool.addCMDs(sprite.graphics.cmds);
			DebugTool.counter.traceSelf();
			return DebugTool.counter.data;
		}

		DebugTool.addCMDs=function(cmds){
			WalkTools.walkArr(cmds,DebugTool.addCMD);
		}

		DebugTool.addCMD=function(cmd){
			DebugTool.counter.add(cmd.callee);
		}

		DebugTool.traceCMDR=function(sprite){
			if(!sprite)sprite=DebugTool.target;
			if(!sprite){
				console.log("no targetAvalible");
				return 0;
			}
			DebugTool.counter.reset();
			WalkTools.walkTarget(sprite,DebugTool.getCMdCount);
			console.log("cmds include children");
			DebugTool.counter.traceSelf();
			return DebugTool.counter.data;
		}

		DebugTool.getCMdCount=function(target){
			if(!target)return 0;
			if (! (target instanceof laya.display.Sprite ))return 0;
			if (!target.graphics.cmds)return 0;
			DebugTool.addCMDs(target.graphics.cmds);
			var rst=target.graphics.cmds.length;
			return rst;
		}

		DebugTool.addNodeInfo=function(node){
			var type;
			type=node["constructor"].name;
			DebugTool.counter.add(type);
		}

		DebugTool.find=function(filter){
			var rst;
			rst=DebugTool.findTarget(Laya.stage,filter);
			DebugTool.selectedNodes=rst;
			DebugTool.showSelected();
			return rst;
		}

		DebugTool.findByName=function(name){
			DebugTool.nameFilter.name=name;
			return DebugTool.find(DebugTool.nameFilter);
		}

		DebugTool.findNameStartWith=function(startStr){
			DebugTool.nameFilter.name=DebugTool.getStartWithFun(startStr);
			return DebugTool.find(DebugTool.nameFilter);
		}

		DebugTool.findNameHas=function(hasStr){
			DebugTool.nameFilter.name=DebugTool.getHasFun(hasStr);
			return DebugTool.find(DebugTool.nameFilter);
		}

		DebugTool.getStartWithFun=function(startStr){
			var rst=function (str){
				if(!str)return false;
				if(str.indexOf(startStr)==0)return true;
				return false;
			};
			return rst;
		}

		DebugTool.getHasFun=function(hasStr){
			var rst=function (str){
				if(!str)return false;
				if(str.indexOf(hasStr)>=0)return true;
				return false;
			};
			return rst;
		}

		DebugTool.findTarget=function(target,filter){
			var rst=[];
			if(DebugTool.isFit(target,filter))rst.push(target);
			var i=0;
			var len=0;
			var tChild;
			len=target.numChildren;
			for(i=0;i<len;i++){
				tChild=target.getChildAt(i);
				if((tChild instanceof laya.display.Sprite )){
					rst=rst.concat(DebugTool.findTarget(tChild,filter));
				}
			}
			return rst;
		}

		DebugTool.isFit=function(tar,filter){
			if(!tar)return false;
			if(!filter)return true;
			var key;
			for(key in filter){
				if((typeof (filter[key])=='function')){
					if(!filter[key](tar[key]))return false;
					}else{
					if(tar[key]!=filter[key])return false;
				}
			}
			return true;
		}

		DebugTool._mainPanel=null
		DebugTool._traceFun=null
		DebugTool.debugLayer=null
		DebugTool._target=null
		DebugTool.selectedNodes=[];
		DebugTool.autoShowSelected=true;
		DebugTool._showBound=true;
		DebugTool._disBoundRec=null
		DebugTool.autoTraceEnable=false;
		DebugTool.autoTraceBounds=false;
		DebugTool.autoTraceSize=false;
		DebugTool.autoTraceTree=true;
		DebugTool.autoTraceCMD=true;
		DebugTool.autoTraceCMDR=false;
		DebugTool.autoTraceSpriteInfo=true;
		DebugTool._classList=null
		DebugTool._tFindClass=null
		DebugTool._rSpList=[];
		__static(DebugTool,
		['text',function(){return this.text=new Stat();},'cmdToTypeO',function(){return this.cmdToTypeO={
		};},'counter',function(){return this.counter=new CountTool();},'nameFilter',function(){return this.nameFilter={"name":"name"};}

		]);
		return DebugTool;
	})()


	/**
	*本类用于显示对象值变化过程
	*@author ww
	*@version 1.0
	*
	*@created 2015-10-23 上午10:41:50
	*/
	//class tools.DifferTool
	var DifferTool=(function(){
		function DifferTool(sign,autoTrace){
			this.autoTrace=true;
			this.sign="";
			this.obj=null;
			(sign===void 0)&& (sign="");
			(autoTrace===void 0)&& (autoTrace=true);
			this.sign=sign;
			this.autoTrace=autoTrace;
		}

		__class(DifferTool,'tools.DifferTool');
		var __proto=DifferTool.prototype;
		__proto.update=function(data,msg){
			if(msg){
				console.log(msg);
			};
			var tObj=ObjectTools.copyObj(data);
			if(!this.obj)this.obj={};
			var rst;
			rst=ObjectTools.differ(this.obj,tObj);
			this.obj=tObj;
			if(this.autoTrace){
				console.log(this.sign+" differ:");
				ObjectTools.traceDifferObj(rst);
			}
			return rst;
		}

		DifferTool.differ=function(sign,data,msg){
			if(!DifferTool._differO[sign])DifferTool._differO[sign]=new DifferTool(sign,true);
			var tDiffer;
			tDiffer=DifferTool._differO[sign];
			return tDiffer.update(data,msg);
		}

		DifferTool._differO={};
		return DifferTool;
	})()


	/**
	*
	*@author ww
	*@version 1.0
	*
	*@created 2016-1-14 下午4:32:47
	*/
	//class tools.DisController
	var DisController=(function(){
		function DisController(){
			this.arrowAxis=null;
			this._target=null;
			this.recInfo=null;
			DisController.init();
			this.arrowAxis=new Axis();
			this.arrowAxis.mouseEnabled=true;
		}

		__class(DisController,'tools.DisController');
		var __proto=DisController.prototype;
		__proto.switchType=function(){
			this.arrowAxis.switchType();
		}

		__proto.updateMe=function(){
			if(!this._target)return;
			this.recInfo=RecInfo.getGlobalRecInfo(this._target,0,0,1,0,0,1);
			console.log("rotation:",this.recInfo.rotation);
			console.log("pos:",this.recInfo.x,this.recInfo.y);
			console.log("scale:",this.recInfo.width,this.recInfo.height);
			this.arrowAxis.x=this.recInfo.x;
			this.arrowAxis.y=this.recInfo.y;
			this.arrowAxis.rotation=this.recInfo.rotation;
			this.arrowAxis.yAxis.rotation=this.recInfo.rotationV-this.recInfo.rotation;
		}

		__getset(0,__proto,'target',function(){
			return this._target;
			},function(target){
			this._target=target;
			if(target){
				DisController._container.addChild(this.arrowAxis);
				Laya.timer.loop(100,this,this.updateMe);
				}else{
				this.arrowAxis.removeSelf();
				Laya.timer.clear(this,this.updateMe);
			}
			this.arrowAxis.target=target;
			this.updateMe();
		});

		__getset(0,__proto,'type',function(){
			return this.arrowAxis.type;
			},function(lenType){
			this.arrowAxis.type=lenType;
		});

		DisController.init=function(){
			if (DisController._container){
				DisControlTool.setTop(DisController._container);
				return;
			};
			DisController._container=new Sprite();
			DisController._container.mouseEnabled=true;
			Laya.stage.addChild(DisController._container);
		}

		DisController._container=null
		__static(DisController,
		['I',function(){return this.I=new DisController();}
		]);
		return DisController;
	})()


	/**
	*
	*@author ww
	*@version 1.0
	*
	*@created 2015-9-25 下午7:19:44
	*/
	//class tools.DisControlTool
	var DisControlTool=(function(){
		function DisControlTool(){}
		__class(DisControlTool,'tools.DisControlTool');
		DisControlTool.getObjectsUnderPoint=function(sprite,x,y,rst,filterFun){
			rst=rst?rst:[];
			if(filterFun!=null&&!filterFun(sprite))return rst;
			if (sprite.getBounds().contains(x,y)){
				rst.push(sprite);
				var i=0,len=sprite.numChildren;
				var tS;
				DisControlTool.tempP.setTo(x,y);
				DisControlTool.tempP=sprite.fromParentPoint(DisControlTool.tempP);
				x=DisControlTool.tempP.x;
				y=DisControlTool.tempP.y;
				for (i=0;i < len;i++){
					tS=sprite.getChildAt(i);
					if((tS instanceof laya.display.Sprite ))
						DisControlTool.getObjectsUnderPoint(tS,x,y,rst,filterFun);
				}
			}
			return rst;
		}

		DisControlTool.getObjectsUnderGlobalPoint=function(sprite,filterFun){
			var point=new Point();
			point.setTo(Laya.stage.mouseX,Laya.stage.mouseY);
			if(sprite.parent)
				point=(sprite.parent).globalToLocal(point);
			return DisControlTool.getObjectsUnderPoint(sprite,point.x,point.y,null,filterFun);
		}

		DisControlTool.visibleAndEnableObjFun=function(tar){
			return tar.visible&&tar.mouseEnabled;
		}

		DisControlTool.visibleObjFun=function(tar){
			return tar.visible;
		}

		DisControlTool.getMousePoint=function(sprite){
			var point=new Point();
			point.setTo(Laya.stage.mouseX,Laya.stage.mouseY);
			point=sprite.globalToLocal(point);
			return point;
		}

		DisControlTool.isChildE=function(parent,child){
			if (!parent)return false;
			while (child){
				if (child.parent==parent)return true;
				child=child.parent;
			}
			return false;
		}

		DisControlTool.isInTree=function(pNode,child){
			return pNode==child || DisControlTool.isChildE(pNode,child);
		}

		DisControlTool.setTop=function(tar){
			if(tar&&tar.parent){
				var tParent;
				tParent=tar.parent;
				tParent.setChildIndex(tar,tParent.numChildren-1);
			}
		}

		DisControlTool.clearItemRelativeInfo=function(item){
			var Nan="NaN";
			item.getLayout().left=Nan;
			item.getLayout().right=Nan;
			item.getLayout().top=Nan;
			item.getLayout().bottom=Nan;
		}

		DisControlTool.swap=function(tarA,tarB){
			if (tarA==tarB)return;
			var iA=0;
			iA=tarA.parent.getChildIndex(tarA);
			var iB=0;
			iB=tarB.parent.getChildIndex(tarB);
			var bP;
			bP=tarB.parent;
			tarA.parent.addChildAt(tarB,iA);
			bP.addChildAt(tarA,iB);
		}

		DisControlTool.insertToTarParent=function(tarA,tars,after){
			(after===void 0)&& (after=false);
			var tIndex=0;
			var parent;
			if(!tarA)return;
			parent=tarA.parent;
			if(!parent)return;
			tIndex=parent.getChildIndex(tarA);
			if(after)tIndex++;
			DisControlTool.insertToParent(parent,tars,tIndex);
		}

		DisControlTool.insertToParent=function(parent,tars,index){
			(index===void 0)&& (index=-1);
			if(!parent)return;
			if(index<0)index=parent.numChildren;
			var i=0,len=0;
			len=tars.length;
			for(i=0;i<len;i++){
				DisControlTool.transParent(tars[i],parent);
				parent.addChildAt(tars[i],index);
			}
		}

		DisControlTool.transParent=function(tar,newParent){
			if(!tar||!newParent)return;
			if(!tar.parent)return;
			var preParent;
			preParent=tar.parent;
			var pos;
			pos=new Point(tar.x,tar.y);
			pos=preParent.localToGlobal(pos);
			pos=newParent.globalToLocal(pos);
			tar.pos(pos.x,pos.y);
		}

		DisControlTool.transPoint=function(nowParent,tarParent,point){
			point=nowParent.localToGlobal(point);
			point=tarParent.globalToLocal(point);
			return point;
		}

		DisControlTool.removeItems=function(itemList){
			var i=0,len=0;
			len=itemList.length;
			for (i=0;i < len;i++){
				(itemList [i]).removeSelf();
			}
		}

		DisControlTool.addItems=function(itemList,parent){
			var i=0,len=0;
			len=itemList.length;
			for (i=0;i < len;i++){
				parent.addChild(itemList[i]);
			}
		}

		DisControlTool.getAllChild=function(tar){
			if(!tar)return [];
			var i=0;
			var len=0;
			var rst=[];
			len=tar.numChildren;
			for(i=0;i<len;i++){
				rst.push(tar.getChildAt(i));
			}
			return rst;
		}

		DisControlTool.upDis=function(child){
			if(child&&child.parent){
				var tParent;
				tParent=child.parent;
				var newIndex=0;
				newIndex=tParent.getChildIndex(child)+1;
				if(newIndex>=tParent.numChildren){
					newIndex=tParent.numChildren-1;
				}
				console.log("setChildIndex:"+newIndex);
				tParent.setChildIndex(child,newIndex);
			}
		}

		DisControlTool.downDis=function(child){
			if(child&&child.parent){
				var tParent;
				tParent=child.parent;
				var newIndex=0;
				newIndex=tParent.getChildIndex(child)-1;
				if(newIndex<0)newIndex=0;
				console.log("setChildIndex:"+newIndex);
				tParent.setChildIndex(child,newIndex);
			}
		}

		DisControlTool.showToStage=function(dis,offX,offY){
			(offX===void 0)&& (offX=0);
			(offY===void 0)&& (offY=0);
			var rec=dis.getBounds();
			dis.x=Laya.stage.mouseX+offX;
			dis.y=Laya.stage.mouseY+offY;
			if (dis.x+rec.width > Laya.stage.width){
				dis.x-=rec.width+offX;
			}
			if (dis.y+rec.height > Laya.stage.height){
				dis.y-=rec.height+offY;
			}
		}

		__static(DisControlTool,
		['tempP',function(){return this.tempP=new Point();}
		]);
		return DisControlTool;
	})()


	/**
	*调试拾取显示对象类
	*@author ww
	*/
	//class tools.DisplayHook
	var DisplayHook=(function(){
		function DisplayHook(){
			this.mouseX=NaN;
			this.mouseY=NaN;
			this._stage=null;
			this._target=null;
			this._matrix=new Matrix();
			this._point=new Point();
			this._rect=new Rectangle();
			this._event=Event.EMPTY;
			this._stage=Laya.stage;
			this.init(Render.context.canvas);
		}

		__class(DisplayHook,'tools.DisplayHook');
		var __proto=DisplayHook.prototype;
		__proto.init=function(canvas){
			var _$this=this;
			if (Browser.window.navigator.msPointerEnabled){
				canvas.style['-ms-content-zooming']='none';
				canvas.style['-ms-touch-action']='none';
			};
			var _this=this;
			Browser.document.addEventListener('mousedown',function(e){
				_$this._event._stoped=false;
				DisplayHook.isFirst=true;
				_this.check(_this._stage,e.offsetX,e.offsetY,_this.onMouseDown,true,false);
			},true);
			Browser.document.addEventListener('touchstart',function(e){
				_$this._event._stoped=false;
				DisplayHook.isFirst=true;
				var touches=e.changedTouches;
				for (var i=0,n=touches.length;i < n;i++){
					var touch=touches[i];
					initEvent(touch,e);
					_this.check(_this._stage,_this.mouseX,_this.mouseY,_this.onMouseDown,true,false);
				}
			},true);
			function initEvent (e,event){
				_this._event._stoped=false;
				_this._event.nativeEvent=event || e;
				_this._target=null;
				if (e.offsetX){
					_this.mouseX=e.offsetX;
					_this.mouseY=e.offsetY;
					}else {
					_this.mouseX=e.clientX-Laya.stage.offset.x;
					_this.mouseY=e.clientY-Laya.stage.offset.y;
				}
			}
		}

		__proto.onMouseMove=function(ele,hit){
			this.sendEvent(ele,"mousemove");
			return;
			if (hit && ele !=this._stage && ele!==this._target){
				if (this._target){
					if (this._target.$_MOUSEOVER){
						this._target.$_MOUSEOVER=false;
						this._target.event("mouseout");
					}
				}
				this._target=ele;
				if (!ele.$_MOUSEOVER){
					ele.$_MOUSEOVER=true;
					this.sendEvent(ele,"mouseover");
				}
				}else if (!hit && this._target && ele===this._target){
				this._target=null;
				if (ele.$_MOUSEOVER){
					ele.$_MOUSEOVER=false;
					this.sendEvent(ele,"mouseout");
				}
			}
		}

		__proto.onMouseUp=function(ele,hit){
			hit && this.sendEvent(ele,"mouseup");
		}

		__proto.onMouseDown=function(ele,hit){
			if (hit){
				ele.$_MOUSEDOWN=true;
				this.sendEvent(ele,"mousedown");
			}
		}

		__proto.sendEvent=function(ele,type){
			if (!this._event._stoped){
				ele.event(type,this._event.setTo(type,ele,ele));
				if (type==="mouseup" && ele.$_MOUSEDOWN){
					ele.$_MOUSEDOWN=false;
					ele.event("click",this._event.setTo("click",ele,ele));
				}
			}
		}

		__proto.check=function(sp,mouseX,mouseY,callBack,hitTest,mouseEnable){
			if(sp==DebugTool.debugLayer)return false;
			if((sp instanceof tools.debugUI.TraceOutUI ))return false;
			if (!sp.visible || sp.getSelfBounds().width<=0)return false;
			var isHit=false;
			mouseEnable=true
			if (mouseEnable){
				var graphicHit=false;
				if (hitTest){
					this._rect=sp.getBounds();
					isHit=this._rect.contains(mouseX,mouseY);
					this._point.setTo(mouseX,mouseY);
					sp.fromParentPoint(this._point);
					mouseX=this._point.x;
					mouseY=this._point.y;
				}
				if (isHit){
					var flag=false;
					for (var i=sp._childs.length-1;i >-1;i--){
						var child=sp._childs[i];
						(flag=this.check(child,mouseX,mouseY,callBack,hitTest,true));
						if (flag)break ;
					}
					if((sp instanceof tools.debugUI.DMainPain ))return false;
					graphicHit=sp.getGraphicBounds().contains(mouseX,mouseY);
					isHit=flag||graphicHit;
					if(isHit&&!flag&&DisplayHook.isFirst){
						DisplayHook.isFirst=false;
						if(! ((sp instanceof tools.debugUI.DButton ))){
							DebugTool.target=sp;
							console.log("click target:");
							DebugTool.autoWork();
						}
					}
				}
			}
			return isHit;
		}

		DisplayHook.initMe=function(){
			if(!DisplayHook.instance){
				DisplayHook.instance=new DisplayHook();
			}
		}

		DisplayHook.instance=null
		DisplayHook.isFirst=false;
		return DisplayHook;
	})()


	/**
	*简单的显示对象对象池
	*从父容器上移除时即被视为可被重用
	*@author ww
	*@version 1.0
	*
	*@created 2015-11-13 下午8:05:13
	*/
	//class tools.DisPool
	var DisPool=(function(){
		function DisPool(){}
		__class(DisPool,'tools.DisPool');
		DisPool.getDis=function(clz){
			var clzName;
			clzName=ClassTool.getClassNameByClz(clz);
			if(!DisPool._objDic[clzName]){
				DisPool._objDic[clzName]=[];
			};
			var disList;
			disList=DisPool._objDic[clzName];
			var i=0,len=0;
			len=disList.length;
			for(i=0;i<len;i++){
				if(!disList[i].parent){
					return disList[i];
				}
			}
			disList.push(new clz());
			return disList[disList.length-1];
		}

		DisPool._objDic={};
		return DisPool;
	})()


	/**
	*
	*@author ww
	*@version 1.0
	*
	*@created 2015-9-28 上午10:39:47
	*/
	//class tools.DTrace
	var DTrace=(function(){
		function DTrace(){}
		__class(DTrace,'tools.DTrace');
		DTrace.getArgArr=function(arg){
			var rst;
			rst=[];
			var i=0,len=arg.length;
			for(i=0;i<len;i++){
				rst.push(arg[i]);
			}
			return rst;
		}

		DTrace.dTrace=function(__arg){
			var arg=arguments;
			arg=DTrace.getArgArr(arg);
			arg.push(TraceTool.getCallLoc(2));
			console.log.apply(console,arg);
			var str;
			str=arg.join(" ");
		}

		DTrace.timeStart=function(sign){
			console.time(sign);;
		}

		DTrace.timeEnd=function(sign){
			console.timeEnd(sign);;
		}

		DTrace.traceTable=function(data){
			console.table(data);;
		}

		return DTrace;
	})()


	/**
	*本类用于在对象的函数上挂钩子
	*@author ww
	*@version 1.0
	*
	*@created 2015-10-23 下午1:13:13
	*/
	//class tools.hook.FunHook
	var FunHook=(function(){
		function FunHook(){}
		__class(FunHook,'tools.hook.FunHook');
		FunHook.hook=function(obj,funName,preFun,aftFun){
			FunHook.hookFuns(obj,funName,[preFun,obj[funName],aftFun],1);
		}

		FunHook.hookAllFun=function(obj){
			var key;
			var arr;
			arr=ClassTool.getOwnPropertyNames(obj);
			for(key in arr){
				key=arr[key];
				if (FunHook.special[key])continue ;
				console.log("try hook:",key);
				if((typeof (obj[key])=='function')){
					console.log("hook:",key);
					FunHook.hookFuns(obj,key,[FunHook.getTraceMsg("call:"+key),obj[key]],1);
				}
			}
			if(obj["__proto__"]){
				FunHook.hookAllFun(obj["__proto__"]);
				}else{
				console.log("end:",obj);
			}
		}

		FunHook.getTraceMsg=function(msg){
			var rst;
			rst=function (){
				console.log(msg);
			}
			return rst;
		}

		FunHook.hookFuns=function(obj,funName,funList,rstI){
			(rstI===void 0)&& (rstI=-1);
			var _preFun=obj[funName];
			var newFun;
			newFun=function (__args){
				var args=arguments;
				var rst;
				var i=0;
				var len=0;
				len=funList.length;
				for(i=0;i<len;i++){
					if(!funList[i])continue ;
					if(i==rstI){
						rst=funList[i].apply(this,args);
						}else{
						funList[i].apply(this,args);
					}
				}
				return rst;
			};
			newFun["pre"]=_preFun;
			obj[funName]=newFun;
		}

		FunHook.removeHook=function(obj,funName){
			if(obj[funName].pre!=null){
				obj[funName]=obj[funName].pre;
			}
		}

		FunHook.debugHere=function(){
			debugger;;
		}

		FunHook.traceLoc=function(level,msg){
			(level===void 0)&& (level=0);
			(msg===void 0)&& (msg="");
			console.log(msg,"fun loc:",TraceTool.getCallLoc(3+level));
		}

		FunHook.getLocFun=function(level,msg){
			(level===void 0)&& (level=0);
			(msg===void 0)&& (msg="");
			level+=1;
			var rst;
			rst=function (){
				FunHook.traceLoc(level,msg);
			}
			return rst;
		}

		__static(FunHook,
		['special',function(){return this.special={
				"length":true,
				"name":true,
				"arguments":true,
				"caller":true,
				"prototype":true,
				"is":true,
				"isExtensible":true,
				"isFrozen":true,
				"isSealed":true,
				"preventExtensions":true,
				"seal":true,
				"unobserve":true,
				"apply":true,
				"call":true,
				"bind":true,
				"freeze":true,
				"unobserve":true
		};}

		]);
		return FunHook;
	})()


	/**
	*本类用于监控对象 set get 函数的调用
	*@author ww
	*@version 1.0
	*
	*@created 2015-10-23 下午2:52:48
	*/
	//class tools.hook.VarHook
	var VarHook=(function(){
		function VarHook(){}
		__class(VarHook,'tools.hook.VarHook');
		VarHook.hookVar=function(obj,name,setHook,getHook){
			if(!setHook)setHook=[];
			if(!getHook)getHook=[];
			var preO=obj;
			var preValue=obj[name];
			var des;
			des=ClassTool.getOwnPropertyDescriptor(obj,name);
			var ndes={};
			var mSet=function (value){
				console.log("var hook set "+name+":",value);
				preValue=value;
			};
			var mGet=function (){
				console.log("var hook get"+name+":",preValue);
				return preValue;
			}
			if(des){
				ndes.set=mSet;
				ndes.get=mGet;
				ndes.enumerable=des.enumerable;
				setHook.push(ndes.set);
				getHook.push(ndes.get);
				FunHook.hookFuns(ndes,"set",setHook);
				FunHook.hookFuns(ndes,"get",getHook,getHook.length-1);
				ClassTool.defineProperty(obj,name,ndes);
				return;
			}
			while(!des&&obj["__proto__"]){
				obj=obj["__proto__"];
				des=ClassTool.getOwnPropertyDescriptor(obj,name);
			}
			if (des){
				ndes.set=des.set?des.set:mSet;
				ndes.get=des.get?des.get:mGet;
				ndes.enumerable=des.enumerable;
				setHook.push(ndes.set);
				getHook.push(ndes.get);
				FunHook.hookFuns(ndes,"set",setHook);
				FunHook.hookFuns(ndes,"get",getHook,getHook.length-1);
				ClassTool.defineProperty(preO,name,ndes);
			}
			if(!des){
				console.log("get des fail add directly");
				ndes.set=mSet;
				ndes.get=mGet;
				setHook.push(ndes.set);
				getHook.push(ndes.get);
				FunHook.hookFuns(ndes,"set",setHook);
				FunHook.hookFuns(ndes,"get",getHook,getHook.length-1);
				ClassTool.defineProperty(obj,name,ndes);
			}
		}

		VarHook.getLocFun=function(msg,level){
			(msg===void 0)&& (msg="");
			(level===void 0)&& (level=0);
			level+=1;
			var rst;
			rst=function (){
				FunHook.traceLoc(level,msg);
			}
			return rst;
		}

		return VarHook;
	})()


	/**
	*
	*@author ww
	*@version 1.0
	*
	*@created 2015-10-29 上午9:45:33
	*/
	//class tools.IDTools
	var IDTools=(function(){
		function IDTools(){
			this.tID=0;
		}

		__class(IDTools,'tools.IDTools');
		var __proto=IDTools.prototype;
		__proto.getID=function(){
			return this.tID++;
		}

		IDTools.getAID=function(){
			return IDTools._ID.getID();
		}

		IDTools.idObjE=function(obj,sign){
			(sign===void 0)&& (sign="default");
			if (obj["_M_id_"])return obj;
			if(!sign){
				sign="default";
			}
			if(!IDTools._idDic[sign]){
				IDTools._idDic[sign]=new IDTools();
			}
			obj["_M_id_"]=IDTools._idDic[sign].getAID();
			return obj;
		}

		IDTools.setObjID=function(obj,id){
			obj["_M_id_"]=id;
			return obj;
		}

		IDTools.idObj=function(obj){
			if (obj["_M_id_"])return obj;
			obj["_M_id_"]=IDTools.getAID();
			return obj;
		}

		IDTools.getObjID=function(obj){
			if(!obj)return-1;
			return obj["_M_id_"];
		}

		IDTools.idSign="_M_id_";
		__static(IDTools,
		['_ID',function(){return this._ID=new IDTools();},'_idDic',function(){return this._idDic={"default":new IDTools()};}
		]);
		return IDTools;
	})()


	/**
	*
	*@author ww
	*@version 1.0
	*
	*@created 2015-11-27 上午9:58:59
	*/
	//class tools.JsonTool
	var JsonTool=(function(){
		function JsonTool(){}
		__class(JsonTool,'tools.JsonTool');
		JsonTool.getJsonString=function(obj,singleLine,split,depth,Width){
			(singleLine===void 0)&& (singleLine=true);
			(split===void 0)&& (split="\n");
			(depth===void 0)&& (depth=0);
			(Width===void 0)&& (Width=4);
			var preStr="";
			preStr=JsonTool.getEmptyStr(depth*Width);
			var rst;
			var keyValues;
			keyValues={};
			var tKey;
			var tValue;
			var type;
			var keys;
			keys=[];
			for(tKey in obj){
				keys.push(tKey);
				tValue=obj[tKey];
				if(JsonTool.singleLineKey[tKey]){
					keyValues[tKey]=JsonTool.getValueStr(tValue,true,split,depth+1,Width);
					}else{
					keyValues[tKey]=JsonTool.getValueStr(tValue,singleLine,split,depth+1,Width);
				}
			};
			var i=0,len=0;
			len=keys.length;
			keys.sort();
			keys=keys.reverse();
			var keyPreStr;
			keyPreStr=JsonTool.getEmptyStr((depth+1)*Width);
			if(singleLine){
				split="";
				preStr="";
				keyPreStr="";
			};
			var keyValueStrArr;
			keyValueStrArr=[];
			for(i=0;i<len;i++){
				tKey=keys[i];
				keyValueStrArr.push(keyPreStr+JsonTool.wrapValue(tKey)+":"+keyValues[tKey]);
			}
			rst="{"+split+keyValueStrArr.join(","+split)+split+preStr+"}";
			return rst;
		}

		JsonTool.wrapValue=function(value,wraper){
			(wraper===void 0)&& (wraper="\"");
			return wraper+value+wraper;
		}

		JsonTool.getArrStr=function(arr,singleLine,split,depth,Width){
			(singleLine===void 0)&& (singleLine=true);
			(split===void 0)&& (split="\n");
			(depth===void 0)&& (depth=0);
			(Width===void 0)&& (Width=4);
			var rst;
			var i=0,len=0;
			len=arr.length;
			var valueStrArr;
			valueStrArr=[];
			for(i=0;i<len;i++){
				valueStrArr.push(JsonTool.getValueStr(arr[i],singleLine,split,depth+1,Width));
			};
			var preStr="";
			preStr=JsonTool.getEmptyStr((depth+1)*Width);
			if(singleLine){
				split="";
				preStr="";
			}
			rst="["+split+preStr+valueStrArr.join(","+split+preStr)+"]";
			return rst;
		}

		JsonTool.getValueStr=function(tValue,singleLine,split,depth,Width){
			(singleLine===void 0)&& (singleLine=true);
			(split===void 0)&& (split="\n");
			(depth===void 0)&& (depth=0);
			(Width===void 0)&& (Width=0);
			var rst;
			if((typeof tValue=='string')){
				rst="\""+tValue+"\"";
				}else if(tValue==null){
				rst="null";
				}else if((typeof tValue=='number')|| ((typeof tValue=='number')&& Math.floor(tValue)==tValue)|| (typeof tValue=='boolean')){
				rst=tValue;
				}else if((tValue instanceof Array)){
				rst=JsonTool.getArrStr(tValue,singleLine,split,depth,Width);
				}else if((typeof tValue=='object')){
				rst=JsonTool.getJsonString(tValue,singleLine,split,depth,Width);
				}else{
				rst=tValue;
			}
			return rst;
		}

		JsonTool.getEmptyStr=function(width){
			if(!JsonTool.emptyDic.hasOwnProperty(width)){
				var i=0;
				var len=0;
				len=width;
				var rst;
				rst="";
				for(i=0;i<len;i++){
					rst+=" ";
				}
				JsonTool.emptyDic[width]=rst;
			}
			return JsonTool.emptyDic[width];
		}

		JsonTool.emptyDic={};
		__static(JsonTool,
		['singleLineKey',function(){return this.singleLineKey={
				"props":true
		};}

		]);
		return JsonTool;
	})()


	/**
	*布局工具类,目前只支持水平方向布局
	*@author ww
	*/
	//class tools.layout.Layouter
	var Layouter=(function(){
		function Layouter(){
			this.data=null;
			this._items=null;
			this.layoutFun=null;
			this._sX=0;
			this._width=0;
		}

		__class(Layouter,'tools.layout.Layouter');
		var __proto=Layouter.prototype;
		__proto.layout=function(){
			this.layoutFun(this._width,this._items,this.data,this._sX);
		}

		/**
		*重新布局
		*
		*/
		__proto.changed=function(){
			Laya.timer.callLater(this,this.layout);
		}

		/**
		*根据当前的对象状态计算位置大小
		*
		*/
		__proto.calSize=function(){
			var i=0,len=0;
			var tItem;
			tItem=this.items[0];
			this._sX=tItem.x;
			var maxX=NaN;
			maxX=this._sX+tItem.width;
			len=this.items.length;
			for (i=1;i < len;i++){
				tItem=this.items[i];
				if (this._sX > tItem.x){
					this._sX=tItem.x;
				}
				if (maxX < tItem.x+tItem.width){
					maxX=tItem.x+tItem.width;
				}
			}
			this._width=maxX-this._sX;
			console.log("size:",this._sX,this._width);
		}

		__getset(0,__proto,'items',function(){
			return this._items;
			},function(arr){
			this._items=arr;
			this.calSize();
		});

		__getset(0,__proto,'x',function(){
			return this._sX;
			},function(v){
			this._sX=v;
			this.changed();
		});

		__getset(0,__proto,'width',function(){
			return this._width;
			},function(v){
			this._width=v;
			this.changed();
		});

		return Layouter;
	})()


	/**
	*...
	*@author ww
	*/
	//class tools.layout.LayoutFuns
	var LayoutFuns=(function(){
		function LayoutFuns(){}
		__class(LayoutFuns,'tools.layout.LayoutFuns');
		LayoutFuns.sameWidth=function(totalWidth,items,data,sX){
			(sX===void 0)&& (sX=0);
			var dWidth=0;
			if (data && data.dWidth)
				dWidth=data.dWidth;
			var perWidth=NaN;
			perWidth=(totalWidth-(items.length-1)*dWidth)/ items.length;
			var tItem;
			var i=0,len=0;
			var tX=NaN;
			tX=sX;
			len=items.length;
			for (i=0;i < len;i++){
				tItem=items[i];
				tItem.x=tX;
				tItem.width=perWidth;
				tX+=dWidth+perWidth;
			}
		}

		LayoutFuns.getSameWidthLayout=function(items,dWidth){
			var data;
			data={};
			data.dWidth=dWidth;
			return LayoutFuns.getLayouter(items,data,tools.layout.LayoutFuns.sameWidth);
		}

		LayoutFuns.getLayouter=function(items,data,fun){
			var layouter;
			layouter=new Layouter();
			layouter.items=items;
			layouter.data=data;
			layouter.layoutFun=fun;
			return layouter;
		}

		LayoutFuns.sameDis=function(totalWidth,items,data,sX){
			(sX===void 0)&& (sX=0);
			var dWidth=NaN;
			dWidth=totalWidth;
			var tItem;
			var i=0,len=0;
			len=items.length;
			LayoutFuns.prepareForLayoutWidth(totalWidth,items);
			for (i=0;i < len;i++){
				tItem=items[i];
				dWidth-=tItem.width;
			}
			if (items.length > 1)
				dWidth=dWidth / (items.length-1);
			var tX=NaN;
			tX=sX;
			len=items.length;
			for (i=0;i < len;i++){
				tItem=items[i];
				tItem.x=tX;
				tX+=dWidth+tItem.width;
			}
		}

		LayoutFuns.getSameDisLayout=function(items,rateSame){
			(rateSame===void 0)&& (rateSame=false);
			var data;
			data={};
			if (rateSame){
				var i=0,len=0;
				len=items.length;
				var tItem;
				var totalWidth=NaN;
				totalWidth=0;
				for (i=0;i < len;i++){
					tItem=items[i];
					totalWidth+=tItem.width;
				}
				totalWidth=tItem.x+tItem.width;
				for (i=0;i < len;i++){
					tItem=items[i];
					LayoutFuns.setItemRate(tItem,tItem.width / totalWidth);
				}
			}
			return LayoutFuns.getLayouter(items,data,tools.layout.LayoutFuns.sameDis);
		}

		LayoutFuns.fullFill=function(totalWidth,items,data,sX){
			(sX===void 0)&& (sX=0);
			var dL=0,dR=0;
			if (data){
				if (data.dL)
					dL=data.dL;
				if (data.dR)
					dR=data.dR;
			};
			var item;
			var i=0,len=0;
			len=items.length;
			for (i=0;i < len;i++){
				item=items[i];
				item.x=sX+dL;
				item.width=totalWidth-dL-dR;
			}
		}

		LayoutFuns.getFullFillLayout=function(items,dL,dR){
			(dL===void 0)&& (dL=0);
			(dR===void 0)&& (dR=0);
			var data;
			data={};
			data.dL=dL;
			data.dR=dR;
			return LayoutFuns.getLayouter(items,data,tools.layout.LayoutFuns.fullFill);
		}

		LayoutFuns.fixPos=function(totalWidth,items,data,sX){
			(sX===void 0)&& (sX=0);
			var dLen=0;
			var poss=[];
			var isRate=false;
			if (data){
				if (data.dLen)
					dLen=data.dLen;
				if (data.poss)
					poss=data.poss;
				if (data.isRate)
					isRate=data.isRate;
			};
			var item;
			var i=0,len=0;
			len=poss.length;
			var tX=NaN;
			tX=sX;
			var tValue=NaN;
			var preItem;
			preItem=null;
			for (i=0;i < len;i++){
				item=items[i];
				tValue=sX+poss[i];
				if (isRate){
					tValue=sX+poss[i] *totalWidth;
				}
				item.x=tValue;
				if (preItem){
					preItem.width=item.x-dLen-preItem.x;
				}
				preItem=item;
			};
			var lastItem;
			lastItem=items[items.length-1];
			lastItem.width=sX+totalWidth-dLen-lastItem.x;
		}

		LayoutFuns.getFixPos=function(items,dLen,isRate,poss){
			(dLen===void 0)&& (dLen=0);
			(isRate===void 0)&& (isRate=false);
			var data;
			data={};
			var layout;
			layout=LayoutFuns.getLayouter(items,data,LayoutFuns.fixPos);
			var i=0,len=0;
			var sX=NaN;
			var totalWidth=NaN;
			sX=layout.x;
			totalWidth=layout.width;
			if (!poss){
				poss=[];
				len=items.length;
				var tValue=NaN;
				for (i=0;i < len;i++){
					tValue=items[i].x-sX;
					if (isRate){
						tValue=tValue / totalWidth;
					}
					else{
					}
					poss.push(tValue);
				}
			}
			data.dLen=dLen;
			data.poss=poss;
			data.isRate=isRate;
			return layout;
		}

		LayoutFuns.clearItemsRelativeInfo=function(items){
			var i=0,len=0;
			len=items.length;
			for (i=0;i < len;i++){
				LayoutFuns.clearItemRelativeInfo(items[i]);
			}
		}

		LayoutFuns.clearItemRelativeInfo=function(item){
			var Nan="NaN";
			item.getLayout().left=Nan;
			item.getLayout().right=Nan;
		}

		LayoutFuns.prepareForLayoutWidth=function(totalWidth,items){
			var i=0,len=0;
			len=items.length;
			for (i=0;i < len;i++){
				LayoutFuns.prepareItemForLayoutWidth(totalWidth,items[i]);
			}
		}

		LayoutFuns.getSumWidth=function(items){
			var sum=NaN;
			sum=0;
			var i=0,len=0;
			len=items.length;
			for (i=0;i < len;i++){
				sum+=items[i].width;
			}
			return sum;
		}

		LayoutFuns.prepareItemForLayoutWidth=function(totalWidth,item){
			if (LayoutFuns.getItemRate(item)> 0){
				item.width=totalWidth *LayoutFuns.getItemRate(item);
			}
		}

		LayoutFuns.setItemRate=function(item,rate){
			item["layoutRate"]=rate;
		}

		LayoutFuns.getItemRate=function(item){
			return item["layoutRate"] ? item["layoutRate"] :-1;
		}

		LayoutFuns.setItemFreeSize=function(item,free){
			(free===void 0)&& (free=true);
			item["layoutFreeSize"]=free;
		}

		LayoutFuns.isItemFreeSize=function(item){
			return item["layoutFreeSize"];
		}

		LayoutFuns.lockedDis=function(totalWidth,items,data,sX){
			(sX===void 0)&& (sX=0);
			var dists;
			dists=data.dists;
			var sumDis=NaN;
			sumDis=data.sumDis;
			var sumWidth=NaN;
			var i=0,len=0;
			var tItem;
			var preItem;
			LayoutFuns.prepareForLayoutWidth(totalWidth,items);
			sumWidth=LayoutFuns.getSumWidth(items);
			var dWidth=NaN;
			dWidth=totalWidth-sumDis-sumWidth;
			var freeItem;
			freeItem=LayoutFuns.getFreeItem(items);
			if(freeItem){
				freeItem.width+=dWidth;
			}
			preItem=items[0];
			preItem.x=sX;
			len=items.length;
			for(i=1;i<len;i++){
				tItem=items[i];
				tItem.x=preItem.x+preItem.width+dists[i-1];
				preItem=tItem;
			}
		}

		LayoutFuns.getFreeItem=function(items){
			var i=0,len=0;
			len=items.length;
			for (i=0;i < len;i++){
				if(LayoutFuns.isItemFreeSize(items[i])){
					return items[i];
				}
			}
			return null;
		}

		LayoutFuns.getLockedDis=function(items){
			var data;
			data={};
			var dists;
			var i=0,len=0;
			var tItem;
			var preItem;
			var sumDis=NaN;
			sumDis=0;
			var tDis=NaN;
			preItem=items[0];
			dists=[];
			len=items.length;
			for(i=1;i<len;i++){
				tItem=items[i];
				tDis=tItem.x-preItem.x-preItem.width;
				dists.push(tDis);
				sumDis+=tDis;
				preItem=tItem;
			}
			data.dists=dists;
			data.sumDis=sumDis;
			return LayoutFuns.getLayouter(items,data,tools.layout.LayoutFuns.lockedDis);
		}

		LayoutFuns.RateSign="layoutRate";
		LayoutFuns.FreeSizeSign="layoutFreeSize";
		return LayoutFuns;
	})()


	/**
	*
	*@author ww
	*@version 1.0
	*
	*@created 2015-11-9 下午3:26:01
	*/
	//class tools.LayoutTools
	var LayoutTools=(function(){
		function LayoutTools(){}
		__class(LayoutTools,'tools.LayoutTools');
		LayoutTools.layoutToXCount=function(items,xCount,dx,dY,sx,sy){
			(xCount===void 0)&& (xCount=1);
			(dx===void 0)&& (dx=0);
			(dY===void 0)&& (dY=0);
			(sx===void 0)&& (sx=0);
			(sy===void 0)&& (sy=0);
			var tX=NaN,tY=NaN;
			var tItem;
			var i=0,len=0;
			var tCount=0;
			var maxHeight=0;
			tCount=0;
			maxHeight=0;
			tX=sx;
			tY=sy;
			len=items.length;
			for (i=0;i < len;i++){
				tItem=items[i];
				tItem.x=tX;
				tItem.y=tY;
				if (tItem.height > maxHeight){
					maxHeight=tItem.height;
				}
				tCount++;
				if (tCount >=xCount){
					tCount=tCount % xCount;
					tItem.y+=maxHeight+dY;
					maxHeight=0;
					}else{
					tX+=tItem.width+dx;
				}
			}
		}

		LayoutTools.layoutToWidth=function(items,width,dX,dY,sx,sy){
			var tX=NaN,tY=NaN;
			var tItem;
			var i=0,len=0;
			tX=sx;
			tY=sy;
			len=items.length;
			for(i=0;i<len;i++){
				tItem=items[i];
				if(tX+tItem.width+dX>width){
					tX=sx;
					tY+=dY+tItem.height;
					}else{
				}
				tItem.x=tX;
				tItem.y=tY;
				tX+=dX+tItem.width;
			}
		}

		return LayoutTools;
	})()


	/**
	*本类提供obj相关的一些操作
	*@author ww
	*@version 1.0
	*
	*@created 2015-10-21 下午2:03:36
	*/
	//class tools.ObjectTools
	var ObjectTools=(function(){
		function ObjectTools(){}
		__class(ObjectTools,'tools.ObjectTools');
		ObjectTools.getFlatKey=function(tKey,aKey){
			if(tKey=="")return aKey;
			return tKey+ObjectTools.sign+aKey;
		}

		ObjectTools.flatObj=function(obj,rst,tKey){
			(tKey===void 0)&& (tKey="");
			rst=rst?rst:{};
			var key;
			var tValue;
			for(key in obj){
				if((typeof (obj[key])=='object')){
					ObjectTools.flatObj(obj[key],rst,ObjectTools.getFlatKey(tKey,key));
					}else{
					tValue=obj[key];
					rst[ObjectTools.getFlatKey(tKey,key)]=obj[key];
				}
			}
			return rst;
		}

		ObjectTools.recoverObj=function(obj){
			var rst={};
			var tKey;
			for(tKey in obj){
				ObjectTools.setKeyValue(rst,tKey,obj[tKey]);
			}
			return rst;
		}

		ObjectTools.differ=function(objA,objB){
			var tKey;
			var valueA;
			var valueB;
			objA=ObjectTools.flatObj(objA);
			objB=ObjectTools.flatObj(objB);
			var rst={};
			for(tKey in objA){
				if(!objB.hasOwnProperty(tKey)){
					rst[tKey]="被删除";
				}
			}
			for(tKey in objB){
				if(objB[tKey]!=objA[tKey]){
					rst[tKey]={"pre":objA[tKey],"now":objB[tKey]};
				}
			}
			return rst;
		}

		ObjectTools.traceDifferObj=function(obj){
			var key;
			var tO;
			for(key in obj){
				if((typeof (obj[key])=='string')){
					console.log(key+":",obj[key]);
					}else{
					tO=obj[key];
					console.log(key+":","now:",tO["now"],"pre:",tO["pre"]);
				}
			}
		}

		ObjectTools.setKeyValue=function(obj,flatKey,value){
			if(flatKey.indexOf(ObjectTools.sign)>=0){
				var keys=flatKey.split(ObjectTools.sign);
				var tKey;
				while(keys.length>1){
					tKey=keys.shift();
					if(!obj[tKey]){
						obj[tKey]={};
						console.log("addKeyObj:",tKey);
					}
					obj=obj[tKey];
					if(!obj){
						console.log("wrong flatKey:",flatKey);
						return;
					}
				}
				obj[keys.shift()]=value;
				}else{
				obj[flatKey]=value;
			}
		}

		ObjectTools.copyObj=function(obj){
			var rst={};
			var key;
			for(key in obj){
				if(((obj[key])instanceof Array)){
					rst[key]=ObjectTools.copyArr(obj[key]);
				}
				else
				if((typeof (obj[key])=='object')){
					rst[key]=ObjectTools.copyObj(obj[key]);
					}else{
					rst[key]=obj[key];
				}
			}
			return rst;
		}

		ObjectTools.copyArr=function(arr){
			var rst;
			rst=[];
			var i=0,len=0;
			len=arr.length;
			for(i=0;i<len;i++){
				rst.push(ObjectTools.copyObj(arr[i]));
			}
			return rst;
		}

		ObjectTools.getJsonString=function(obj){
			var rst;
			rst=JSON.stringify(obj);
			return rst;
		}

		ObjectTools.getObj=function(jsonStr){
			var rst;
			rst=JSON.parse(jsonStr);
			return rst;
		}

		ObjectTools.getKeyArr=function(obj){
			var rst;
			var key;
			rst=[];
			for(key in obj){
				rst.push(key);
			}
			return rst;
		}

		ObjectTools.copyValueByArr=function(tar,src,keys){
			var i=0,len=keys.length;
			for(i=0;i<len;i++){
				if(!(src[keys[i]]===null))
					tar[keys[i]]=src[keys[i]];
			}
		}

		ObjectTools.insertValue=function(tar,src){
			var key;
			for (key in src){
				tar[key]=src[key];
			}
		}

		ObjectTools.replaceValue=function(obj,replaceO){
			var key;
			for(key in obj){
				if(replaceO.hasOwnProperty(obj[key])){
					obj[key]=replaceO[obj[key]];
				}
				if((typeof (obj[key])=='object')){
					ObjectTools.replaceValue(obj[key],replaceO);
				}
			}
		}

		ObjectTools.setKeyValues=function(items,key,value){
			var i=0,len=0;
			len=items.length;
			for(i=0;i<len;i++){
				items[i][key]=value;
			}
		}

		ObjectTools.findItemPos=function(items,sign,value){
			var i=0,len=0;
			len=items.length;
			for(i=0;i<len;i++){
				if(items[i][sign]==value){
					return i;
				}
			}
			return-1;
		}

		ObjectTools.setObjValue=function(obj,key,value){
			obj[key]=value;
			return obj;
		}

		ObjectTools.setAutoTypeValue=function(obj,key,value){
			if(obj.hasOwnProperty(key)){
				if(ObjectTools.isNumber(obj[key])){
					obj[key]=parseFloat(value);
					}else{
					obj[key]=value;
				}
				}else{
				obj[key]=value;
			}
			return obj;
		}

		ObjectTools.getAutoValue=function(value){
			if (parseFloat(value)==value)return parseFloat(value);
			return value;
		}

		ObjectTools.isNumber=function(value){
			return (parseFloat(value)==value);
		}

		ObjectTools.isNaN=function(value){
			return value.toString()=="NaN";
		}

		ObjectTools.getStrTypedValue=function(value){
			if(value=="false"){
				return false;
			}else
			if(value=="true"){
				return true;
			}else
			if(value=="null"){
				return null;
			}else
			if(value=="undefined"){
				return null;
				}else{
				return ObjectTools.getAutoValue(value);
			}
		}

		ObjectTools.createKeyValueDic=function(dataList,keySign){
			var rst;
			rst={};
			var i=0,len=0;
			len=dataList.length;
			var tItem;
			var tKey;
			for(i=0;i<len;i++){
				tItem=dataList[i];
				tKey=tItem[keySign];
				rst[tKey]=tItem;
			}
			return rst;
		}

		ObjectTools.sign="_";
		return ObjectTools;
	})()


	/**
	*
	*@author ww
	*@version 1.0
	*
	*@created 2015-12-23 下午12:00:48
	*/
	//class tools.RecInfo
	var RecInfo=(function(){
		function RecInfo(){
			this.oX=0;
			this.oY=0;
			this.hX=1;
			this.hY=0;
			this.vX=0;
			this.vY=1;
		}

		__class(RecInfo,'tools.RecInfo');
		var __proto=RecInfo.prototype;
		__proto.initByPoints=function(oPoint,ePoint,vPoint){
			this.oX=oPoint.x;
			this.oY=oPoint.y;
			this.hX=ePoint.x;
			this.hY=ePoint.y;
			this.vX=vPoint.x;
			this.vY=vPoint.y;
		}

		__getset(0,__proto,'rotationRad',function(){
			var dx=this.hX-this.oX;
			var dy=this.hY-this.oY;
			return Math.atan2(dy,dx);
		});

		__getset(0,__proto,'x',function(){
			return this.oX;
		});

		__getset(0,__proto,'y',function(){
			return this.oY;
		});

		__getset(0,__proto,'rotationRadV',function(){
			var dx=this.vX-this.oX;
			var dy=this.vY-this.oY;
			return Math.atan2(dy,dx);
		});

		__getset(0,__proto,'width',function(){
			return Math.sqrt((this.hX-this.oX)*(this.hX-this.oX)+(this.hY-this.oY)*(this.hY-this.oY));
		});

		__getset(0,__proto,'height',function(){
			return Math.sqrt((this.vX-this.oX)*(this.vX-this.oX)+(this.vY-this.oY)*(this.vY-this.oY));
		});

		__getset(0,__proto,'rotation',function(){
			return this.rotationRad/Math.PI*180;
		});

		__getset(0,__proto,'rotationV',function(){
			return this.rotationRadV/Math.PI*180;
		});

		RecInfo.createByPoints=function(oPoint,ePoint,vPoint){
			var rst;
			rst=new RecInfo();
			rst.initByPoints(oPoint,ePoint,vPoint);
			return rst;
		}

		RecInfo.getGlobalPoints=function(sprite,x,y){
			return sprite.localToGlobal(new Point(x,y));
		}

		RecInfo.getGlobalRecInfo=function(sprite,x0,y0,x1,y1,x2,y2){
			(x0===void 0)&& (x0=0);
			(y0===void 0)&& (y0=0);
			(x1===void 0)&& (x1=1);
			(y1===void 0)&& (y1=0);
			(x2===void 0)&& (x2=0);
			(y2===void 0)&& (y2=1);
			return RecInfo.createByPoints(RecInfo.getGlobalPoints(sprite,x0,y0),RecInfo.getGlobalPoints(sprite,x1,y1),RecInfo.getGlobalPoints(sprite,x2,y2));
		}

		return RecInfo;
	})()


	/**
	*类实例创建分析工具
	*@author ww
	*@version 1.0
	*
	*@created 2015-9-25 下午3:31:46
	*/
	//class tools.RunProfile
	var RunProfile=(function(){
		function RunProfile(){}
		__class(RunProfile,'tools.RunProfile');
		RunProfile.run=function(funName){
			var tCount;
			if(!RunProfile.infoDic.hasOwnProperty(funName)){
				RunProfile.infoDic[funName]=new CountTool();
			}
			tCount=RunProfile.infoDic[funName];
			var msg;
			msg=TraceTool.getCallLoc(3)+"\n"+TraceTool.getCallStack(3,2);
			tCount.add(msg);
			if(RunProfile._runShowDic[funName]){
				console.log("Create:"+funName);
				console.log(msg);
			}
		}

		RunProfile.showClassCreate=function(funName){
			RunProfile._runShowDic[funName]=true;
		}

		RunProfile.hideClassCreate=function(funName){
			RunProfile._runShowDic[funName]=false;
		}

		RunProfile.getRunInfo=function(funName){
			var rst;
			rst=RunProfile.infoDic[funName];
			if(rst){
				rst.traceSelfR();
			}
			return RunProfile.infoDic[funName];
		}

		RunProfile.runTest=function(fun,count,sign){
			(sign===void 0)&& (sign="runTest");
			DTrace.timeStart(sign);
			var i=0;
			for(i=0;i<count;i++){
				fun();
			}
			DTrace.timeEnd(sign);
		}

		RunProfile.infoDic={};
		RunProfile._runShowDic={};
		return RunProfile;
	})()


	/**
	*一些字符串操作函数
	*@author ww
	*
	*/
	//class tools.StringTool
	var StringTool=(function(){
		function StringTool(){}
		__class(StringTool,'tools.StringTool');
		StringTool.toUpCase=function(str){
			return str.toUpperCase();
		}

		StringTool.toLowCase=function(str){
			return str.toLowerCase();
		}

		StringTool.toUpHead=function(str){
			var rst;
			if(str.length<=1)return str.toUpperCase();
			rst=str.charAt(0).toUpperCase()+str.substr(1);
			return rst;
		}

		StringTool.toLowHead=function(str){
			var rst;
			if(str.length<=1)return str.toLowerCase();
			rst=str.charAt(0).toLowerCase()+str.substr(1);
			return rst;
		}

		StringTool.packageToFolderPath=function(packageName){
			var rst;
			rst=packageName.replace(".","/");
			return rst;
		}

		StringTool.insert=function(str,iStr,index){
			return str.substring(0,index)+iStr+str.substr(index);
		}

		StringTool.insertAfter=function(str,iStr,tarStr,isLast){
			(isLast===void 0)&& (isLast=false);
			var i=0;
			if(isLast){
				i=str.lastIndexOf(tarStr);
				}else{
				i=str.indexOf(tarStr);
			}
			if(i>=0){
				return StringTool.insert(str,iStr,i+tarStr.length);
			}
			return str;
		}

		StringTool.insertBefore=function(str,iStr,tarStr,isLast){
			(isLast===void 0)&& (isLast=false);
			var i=0;
			if(isLast){
				i=str.lastIndexOf(tarStr);
				}else{
				i=str.indexOf(tarStr);
			}
			if(i>=0){
				return StringTool.insert(str,iStr,i);
			}
			return str;
		}

		StringTool.insertParamToFun=function(funStr,params){
			var oldParam;
			oldParam=StringTool.getParamArr(funStr);
			var inserStr;
			inserStr=params.join(",");
			if(oldParam.length>0){
				inserStr=","+inserStr;
			}
			return StringTool.insertBefore(funStr,inserStr,")",true);
		}

		StringTool.trim=function(str,vList){
			if(!vList){
				vList=[" ","\r","\n","\t",String.fromCharCode(65279)];
			};
			var rst;
			var i=0;
			var len=0;
			rst=str;
			len=vList.length;
			for(i=0;i<len;i++){
				rst=StringTool.getReplace(rst,vList[i],"");
			}
			return rst;
		}

		StringTool.isEmpty=function(str){
			if(str.length<1)return true;
			return StringTool.emptyStrDic.hasOwnProperty(str);
		}

		StringTool.trimLeft=function(str){
			var i=0;
			i=0;
			var len=0;
			len=str.length;
			while(StringTool.isEmpty(str.charAt(i))&&i<len){
				i++;
			}
			if(i<len){
				return str.substr(i);
			}
			return "";
		}

		StringTool.trimRight=function(str){
			var i=0;
			i=str.length-1;
			while(StringTool.isEmpty(str.charAt(i))&&i>=0){
				i--;
			};
			var rst;
			rst=str.substring(0,i)
			if(i>=0){
				return str.substring(0,i+1);
			}
			return "";
		}

		StringTool.trimSide=function(str){
			var rst;
			rst=StringTool.trimLeft(str);
			rst=StringTool.trimRight(rst);
			return rst;
		}

		StringTool.trimButEmpty=function(str){
			return StringTool.trim(str,["\r","\n","\t"]);
		}

		StringTool.removeEmptyStr=function(strArr){
			var i=0;
			i=strArr.length-1;
			var str;
			for(i=i;i>=0;i--){
				str=strArr[i];
				str=tools.StringTool.trimSide(str);
				if(StringTool.isEmpty(str)){
					strArr.splice(i,1);
					}else{
					strArr[i]=str;
				}
			}
			return strArr;
		}

		StringTool.ifNoAddToTail=function(str,sign){
			if(str.indexOf(sign)>=0){
				return str;
			}
			return str+sign;
		}

		StringTool.trimEmptyLine=function(str){
			var i=0;
			var len=0;
			var tLines;
			var tLine;
			tLines=str.split("\n");
			for(i=tLines.length-1;i>=0;i--){
				tLine=tLines[i];
				if(StringTool.isEmptyLine(tLine)){
					tLines.splice(i,1);
				}
			}
			return tLines.join("\n");
		}

		StringTool.isEmptyLine=function(str){
			str=tools.StringTool.trim(str);
			if(str=="")return true;
			return false;
		}

		StringTool.removeCommentLine=function(lines){
			var rst;
			rst=[];
			var i=0;
			var tLine;
			var adptLine;
			i=0;
			var len=0;
			var index=0;
			len=lines.length;
			while(i<len){
				adptLine=tLine=lines[i];
				index=tLine.indexOf("/**");
				if(index>=0){
					adptLine=tLine.substring(0,index-1);
					StringTool.addIfNotEmpty(rst,adptLine);
					while(i<len){
						tLine=lines[i];
						index=tLine.indexOf("*/");
						if(index>=0){
							adptLine=tLine.substring(index+2);
							StringTool.addIfNotEmpty(rst,adptLine);
							break ;
						}
						i++;
					}
					}else if(tLine.indexOf("//")>=0){
					if(tools.StringTool.trim(tLine).indexOf("//")==0){
						}else{
						StringTool.addIfNotEmpty(rst,adptLine);
					}
					}else{
					StringTool.addIfNotEmpty(rst,adptLine);
				}
				i++;
			}
			return rst;
		}

		StringTool.addIfNotEmpty=function(arr,str){
			if(!str)return;
			var tStr;
			tStr=StringTool.trim(str);
			if(tStr!=""){
				arr.push(str);
			}
		}

		StringTool.trimExt=function(str,vars){
			var rst;
			rst=StringTool.trim(str);
			var i=0;
			var len=0;
			len=vars.length;
			for(i=0;i<len;i++){
				rst=StringTool.getReplace(rst,vars[i],"");
			}
			return rst;
		}

		StringTool.getBetween=function(str,left,right,ifMax){
			(ifMax===void 0)&& (ifMax=false);
			if(!str)return "";
			if(!left)return "";
			if(!right)return "";
			var lId=0;
			var rId=0;
			lId=str.indexOf(left);
			if(lId<0)return"";
			if(ifMax){
				rId=str.lastIndexOf(right);
				if(rId<lId)return "";
				}else{
				rId=str.indexOf(right,lId);
			}
			if(rId<0)return "";
			return str.substring(lId+left.length,rId);
		}

		StringTool.getSplitLine=function(line,split){
			(split===void 0)&& (split=" ");
			return line.split(split);
		}

		StringTool.getLeft=function(str,sign){
			var i=0;
			i=str.indexOf(sign);
			return str.substr(0,i);
		}

		StringTool.getRight=function(str,sign){
			var i=0;
			i=str.indexOf(sign);
			return str.substr(i+1);
		}

		StringTool.delelteItem=function(arr){
			while (arr.length>0){
				if(arr[0]==""){
					arr.shift();
					}else{
					break ;
				}
			}
		}

		StringTool.getWords=function(line){
			var rst=StringTool.getSplitLine(line);
			StringTool.delelteItem(rst);
			return rst;
		}

		StringTool.getLinesI=function(startLine,endLine,lines){
			var i=0;
			var rst=[];
			for(i=startLine;i<=endLine;i++){
				rst.push(lines[i]);
			}
			return rst;
		}

		StringTool.structfy=function(str,inWidth,removeEmpty){
			(inWidth===void 0)&& (inWidth=4);
			(removeEmpty===void 0)&& (removeEmpty=true);
			if(removeEmpty){
				str=tools.StringTool.trimEmptyLine(str);
			};
			var lines;
			var tIn=0;
			tIn=0;
			var tInStr;
			tInStr=StringTool.getEmptyStr(0);
			lines=str.split("\n");
			var i=0;
			var len=0;
			var tLineStr;
			len=lines.length;
			for(i=0;i<len;i++){
				tLineStr=lines[i];
				tLineStr=tools.StringTool.trimLeft(tLineStr);
				tLineStr=tools.StringTool.trimRight(tLineStr);
				tIn+=StringTool.getPariCount(tLineStr);
				if(tLineStr.indexOf("}")>=0){
					tInStr=StringTool.getEmptyStr(tIn*inWidth);
				}
				tLineStr=tInStr+tLineStr;
				lines[i]=tLineStr;
				tInStr=StringTool.getEmptyStr(tIn*inWidth);
			}
			return lines.join("\n");
		}

		StringTool.getEmptyStr=function(width){
			if(!StringTool.emptyDic.hasOwnProperty(width)){
				var i=0;
				var len=0;
				len=width;
				var rst;
				rst="";
				for(i=0;i<len;i++){
					rst+=" ";
				}
				StringTool.emptyDic[width]=rst;
			}
			return StringTool.emptyDic[width];
		}

		StringTool.getPariCount=function(str,inChar,outChar){
			(inChar===void 0)&& (inChar="{");
			(outChar===void 0)&& (outChar="}");
			var varDic;
			varDic={};
			varDic[inChar]=1;
			varDic[outChar]=-1;
			var i=0;
			var len=0;
			var tChar;
			len=str.length;
			var rst=0;
			rst=0;
			for(i=0;i<len;i++){
				tChar=str.charAt(i);
				if(varDic.hasOwnProperty(tChar)){
					rst+=varDic[tChar];
				}
			}
			return rst;
		}

		StringTool.readInt=function(str,startI){
			(startI===void 0)&& (startI=0);
			var rst=NaN;
			rst=0;
			var tNum=0;
			var tC;
			var i=0;
			var isBegin=false;
			isBegin=false;
			var len=0;
			len=str.length;
			for(i=startI;i<len;i++){
				tC=str.charAt(i);
				if(Number(tC)>0||tC=="0"){
					rst=10*rst+Number(tC);
					if(rst>0)isBegin=true;
					}else{
					if(isBegin)return rst;
				}
			}
			return rst;
		}

		StringTool.getReplace=function(str,oStr,nStr){
			if(!str)return "";
			var rst;
			rst=str.replace(new RegExp(oStr,"g"),nStr);
			return rst;
		}

		StringTool.getWordCount=function(str,findWord){
			var rg=new RegExp(findWord,"g")
			return str.match(rg).length;
		}

		StringTool.getResolvePath=function(path,basePath){
			if(StringTool.isAbsPath(path)){
				return path;
			};
			var tSign;
			tSign="\\";
			if(basePath.indexOf("/")>=0){
				tSign="/";
			}
			if(basePath.charAt(basePath.length-1)==tSign){
				basePath=basePath.substr(0,basePath.length-1);
			};
			var parentSign;
			parentSign=".."+tSign;
			var tISign;
			tISign="."+tSign;
			var pCount=0;
			pCount=StringTool.getWordCount(path,parentSign);
			path=tools.StringTool.getReplace(path,parentSign,"");
			path=tools.StringTool.getReplace(path,tISign,"");
			var i=0;
			var len=0;
			len=pCount;
			var iPos=0;
			for(i=0;i<len;i++){
				basePath=StringTool.removeLastSign(path,tSign);
			}
			return basePath+tSign+path;
		}

		StringTool.isAbsPath=function(path){
			if(path.indexOf(":")>=0)return true;
			return false;
		}

		StringTool.removeLastSign=function(str,sign){
			var iPos=0;
			iPos=str.lastIndexOf(sign);
			str=str.substring(0,iPos);
			return str;
		}

		StringTool.getParamArr=function(str){
			var paramStr;
			paramStr=tools.StringTool.getBetween(str,"(",")",true);
			if(StringTool.trim(paramStr).length<1)return [];
			return paramStr.split(",");
		}

		StringTool.copyStr=function(str){
			return str.substring();
		}

		StringTool.ArrayToString=function(arr){
			var rst;
			rst="[{items}]".replace(new RegExp("\\{items\\}","g"),StringTool.getArrayItems(arr));
			return rst;
		}

		StringTool.getArrayItems=function(arr){
			var rst;
			if(arr.length<1)return "";
			rst=StringTool.parseItem(arr[0]);
			var i=0;
			var len=0;
			len=arr.length;
			for(i=1;i<len;i++){
				rst+=","+StringTool.parseItem(arr[i]);
			}
			return rst;
		}

		StringTool.parseItem=function(item){
			var rst;
			rst="\""+item+"\"";
			return "";
		}

		StringTool.emptyDic={};
		__static(StringTool,
		['emptyStrDic',function(){return this.emptyStrDic={
				" ":true,
				"\r":true,
				"\n":true,
				"\t":true
		};}

		]);
		return StringTool;
	})()


	/**
	*
	*@author ww
	*@version 1.0
	*
	*@created 2015-9-25 上午10:48:54
	*/
	//class tools.TraceTool
	var TraceTool=(function(){
		function TraceTool(){}
		__class(TraceTool,'tools.TraceTool');
		TraceTool.traceObj=function(obj){
			var key;
			for(key in obj){
				console.log(key+":"+obj[key]);
			}
		}

		TraceTool.traceObjR=function(obj){
			var key;
			for(key in obj){
				console.log(obj[key]+":"+key);
			}
		}

		TraceTool.traceSize=function(tar){
			DebugTool.dTrace("Size: x:"+tar.x+" y:"+tar.y+" w:"+tar.width+" h:"+tar.height+" scaleX:"+tar.scaleX+" scaleY:"+tar.scaleY);
		}

		TraceTool.traceSplit=function(msg){
			console.log("---------------------"+msg+"---------------------------");
		}

		TraceTool.group=function(gName){
			console.group(gName);;
		}

		TraceTool.groupEnd=function(){
			console.groupEnd();;
		}

		TraceTool.getCallStack=function(life,s){
			(life===void 0)&& (life=2);
			(s===void 0)&& (s=1);
			var caller;
			caller=TraceTool.getCallStack;
			caller=caller.caller.caller;
			var msg;
			msg="";
			life--;
			s--;
			while(caller&&life>0){
				if(s<=0){
					msg+=caller+"<-";
				}
				caller=caller.caller;
				life--;
				s--;
			}
			return msg;
		}

		TraceTool.getCallLoc=function(index){
			(index===void 0)&& (index=2);
			var loc;
			try {
				throw new Error();
				}catch (e){
				loc=e.stack.replace(/Error\n/).split(/\n/)[index].replace(/^\s+|\s+$/,"");
			}
			return loc;
		}

		TraceTool.traceCallStack=function(){
			var loc;
			try {
				throw new Error();
				}catch (e){
				loc=e.stack;
			}
			console.log(loc);
			return loc;
		}

		TraceTool.getPlaceHolder=function(len){
			if(!TraceTool.holderDic.hasOwnProperty(len)){
				var rst;
				rst="";
				var i=0;
				for(i=0;i<len;i++){
					rst+="-";
				}
				TraceTool.holderDic[len]=rst;
			}
			return TraceTool.holderDic[len];
		}

		TraceTool.traceTree=function(tar,depth,isFirst){
			(depth===void 0)&& (depth=0);
			(isFirst===void 0)&& (isFirst=true);
			if(isFirst){
				console.log("traceTree");
			}
			if(!tar)return;
			var i=0;
			var len=0;
			if(tar.numChildren<1){
				console.log(tar);
				return;
			}
			TraceTool.group(tar);
			len=tar.numChildren;
			depth++;
			for(i=0;i<len;i++){
				TraceTool.traceTree(tar.getChildAt(i),depth,false);
			}
			TraceTool.groupEnd();
		}

		TraceTool.getClassName=function(tar){
			return tar["constructor"].name;
		}

		TraceTool.traceSpriteInfo=function(tar,showBounds,showSize,showTree){
			(showBounds===void 0)&& (showBounds=true);
			(showSize===void 0)&& (showSize=true);
			(showTree===void 0)&& (showTree=true);
			if(!((tar instanceof laya.display.Sprite ))){
				console.log("not Sprite");
				return;
			};
			if(!tar){
				console.log("null Sprite");
				return;
			};
			TraceTool.traceSplit("traceSpriteInfo");
			DebugTool.dTrace(tools.TraceTool.getClassName(tar)+":"+tar.name);
			if(showTree){
				TraceTool.traceTree(tar);
				}else{
				console.log(tar);
			}
			if(showSize){
				TraceTool.traceSize(tar);
			}
			if(showBounds){
				console.log("bounds:"+tar.getBounds());
			}
		}

		TraceTool.holderDic={};
		return TraceTool;
	})()


	/**
	*
	*@author ww
	*@version 1.0
	*
	*@created 2015-12-30 下午5:12:53
	*/
	//class tools.ValueChanger
	var ValueChanger=(function(){
		function ValueChanger(){
			this.target=null;
			this.key=null;
			this._tValue=NaN;
			this.preValue=0;
		}

		__class(ValueChanger,'tools.ValueChanger');
		var __proto=ValueChanger.prototype;
		__proto.record=function(){
			this.preValue=this.value;
		}

		__proto.showValueByAdd=function(addValue){
			this.value=this.preValue+addValue;
		}

		__proto.showValueByScale=function(scale){
			this.value=this.preValue *scale;
		}

		__proto.recover=function(){
			this.value=this.preValue;
		}

		__proto.dispose=function(){
			this.target=null;
		}

		__getset(0,__proto,'value',function(){
			if(this.target){
				this._tValue=this.target[this.key];
			}
			return this._tValue;
			},function(nValue){
			this._tValue=nValue;
			if(this.target){
				this.target[this.key]=nValue;
			}
		});

		__getset(0,__proto,'dValue',function(){
			return this.value-this.preValue;
		});

		__getset(0,__proto,'scaleValue',function(){
			return this.value/this.preValue;
		});

		ValueChanger.create=function(target,key){
			var rst;
			rst=new ValueChanger();
			rst.target=target;
			rst.key=key;
			return rst;
		}

		return ValueChanger;
	})()


	/**
	*
	*@author ww
	*@version 1.0
	*
	*@created 2015-9-24 下午6:15:01
	*/
	//class tools.WalkTools
	var WalkTools=(function(){
		function WalkTools(){}
		__class(WalkTools,'tools.WalkTools');
		WalkTools.walkTarget=function(target,fun,_this){
			fun.apply(_this,[target]);
			var i=0;
			var len=0;
			var tChild;
			len=target.numChildren;
			for(i=0;i<len;i++){
				tChild=target.getChildAt(i);
				WalkTools.walkTarget(tChild,fun,tChild);
			}
		}

		WalkTools.walkChildren=function(target,fun,_this){
			if(!target||target.numChildren<1)return;
			WalkTools.walkArr(DisControlTool.getAllChild(target),fun,_this);
		}

		WalkTools.walkArr=function(arr,fun,_this){
			if(!arr)return;
			var i=0;
			var len=0;
			len=arr.length;
			for(i=0;i<len;i++){
				fun.apply(_this,[arr[i],i]);
			}
		}

		return WalkTools;
	})()


	/**
	*本类用于监控对象值变化
	*@author ww
	*@version 1.0
	*
	*@created 2015-10-23 下午4:18:27
	*/
	//class tools.Watcher
	var Watcher=(function(){
		function Watcher(){}
		__class(Watcher,'tools.Watcher');
		Watcher.watch=function(obj,name,funs){
			VarHook.hookVar(obj,name,funs);
		}

		Watcher.traceChange=function(obj,name,sign){
			(sign===void 0)&& (sign="var changed:");
			VarHook.hookVar(obj,name,[Watcher.getTraceValueFun(name),VarHook.getLocFun(sign)]);
		}

		Watcher.debugChange=function(obj,name){
			VarHook.hookVar(obj,name,[VarHook.getLocFun("debug loc"),FunHook.debugHere]);
		}

		Watcher.differChange=function(obj,name,sign,msg){
			(msg===void 0)&& (msg="");
			VarHook.hookVar(obj,name,[Watcher.getDifferFun(obj,name,sign,msg)]);
		}

		Watcher.getDifferFun=function(obj,name,sign,msg){
			(msg===void 0)&& (msg="");
			var rst;
			rst=function (){
				DifferTool.differ(sign,obj[name],msg);
			}
			return rst;
		}

		Watcher.traceValue=function(value){
			console.log("value:",value);
		}

		Watcher.getTraceValueFun=function(name){
			var rst;
			rst=function (value){
				console.log("set "+name+" :",value);
			}
			return rst;
		}

		return Watcher;
	})()


	/**
	*XML转Object类
	*@author ww
	*
	*/
	//class tools.XML2Object
	var XML2Object=(function(){
		function XML2Object(){};
		__class(XML2Object,'tools.XML2Object');
		__getset(1,XML2Object,'arrays',function(){
			if(!XML2Object._arrays){
				XML2Object._arrays=[];
			}
			return XML2Object._arrays;
			},function(a){
			XML2Object._arrays=a;
		});

		XML2Object.parse=function(node,isFirst){
			(isFirst===void 0)&& (isFirst=true);
			var obj={};
			if(isFirst)
				obj.Name=node.localName;
			var numOfChilds=node.children.length;
			var childs=[];
			var children={};
			obj.c=children;
			obj.cList=childs;
			for(var i=0;i<numOfChilds;i++){
				var childNode=node.children[i];
				var childNodeName=childNode.localName;
				var value;
				var numOfAttributes
				value=XML2Object.parse(childNode,true);
				childs.push(value);
				if(children[childNodeName]){
					if(XML2Object.getTypeof(children[childNodeName])=="array"){
						children[childNodeName].push(value);
						}else {
						children[childNodeName]=[children[childNodeName],value];
					}
					}else if(XML2Object.isArray(childNodeName)){
					children[childNodeName]=[value];
					}else {
					children[childNodeName]=value;
				}
			}
			numOfAttributes=0;
			if(node.attributes){
				numOfAttributes=node.attributes.length;
				var prop={};
				obj.p=prop;
				for(i=0;i<numOfAttributes;i++){
					prop[node.attributes[i].name.toString()]=String(node.attributes[i].nodeValue);
				}
			}
			if(numOfChilds==0){
				if(numOfAttributes==0){
					obj="";
				}else {}
			}
			return obj;
		}

		XML2Object.getArr=function(v){
			if(!v)return [];
			if(XML2Object.getTypeof(v)=="array")return v;
			return [v];
		}

		XML2Object.isArray=function(nodeName){
			var numOfArrays=XML2Object._arrays ? XML2Object._arrays.length :0;
			for(var i=0;i<numOfArrays;i++){
				if(nodeName==XML2Object._arrays[i]){
					return true;
				}
			}
			return false;
		}

		XML2Object.getTypeof=function(o){
			if(typeof(o)=="object"){
				if(o.length==null){
					return "object";
					}else if(typeof(o.length)=="number"){
					return "array";
					}else {
					return "object";
				}
				}else {
				return typeof(o);
			}
		}

		XML2Object._arrays=null
		return XML2Object;
	})()


	/**
	*...
	*@author laya
	*/
	//class laya.webgl.shader.ShaderDefines
	var ShaderDefines=(function(){
		function ShaderDefines(name2int,int2name,int2nameMap){
			this._value=0;
			//this._name2int=null;
			//this._int2name=null;
			//this._int2nameMap=null;
			this._name2int=name2int;
			this._int2name=int2name;
			this._int2nameMap=int2nameMap;
		}

		__class(ShaderDefines,'laya.webgl.shader.ShaderDefines');
		var __proto=ShaderDefines.prototype;
		__proto.add=function(value){
			if ((typeof value=='string'))value=this._name2int[value];
			this._value |=value;
			return this._value;
		}

		__proto.addInt=function(value){
			this._value |=value;
			return this._value;
		}

		__proto.remove=function(value){
			if ((typeof value=='string'))value=this._name2int[value];
			this._value &=(~value);
			return this._value;
		}

		__proto.isDefine=function(def){
			return (this._value & def)===def;
		}

		__proto.getValue=function(){
			return this._value;
		}

		__proto.setValue=function(value){
			this._value=value;
		}

		__proto.toString=function(){
			var r=this._int2nameMap[this._value];
			return r?r:ShaderDefines._toText(this._value,this._int2name,this._int2nameMap);
		}

		ShaderDefines._reg=function(name,value,_name2int,_int2name){
			_name2int[name]=value;
			_int2name[value]=name;
		}

		ShaderDefines._toText=function(value,_int2name,_int2nameMap){
			var r=_int2nameMap[value];
			if (r)return r;
			var o={};
			var d=1;
			for (var i=0;i < 32;i++){
				d=1 << i;
				if (d > value)break ;
				if (value & d){
					var name=_int2name[d];
					name && (o[name]="");
				}
			}
			_int2nameMap[value]=o;
			return o;
		}

		ShaderDefines._toInt=function(names,_name2int){
			var words=names.split('.');
			var num=0;
			for (var i=0,n=words.length;i < n;i++){
				var value=_name2int[words[i]];
				if (!value)throw new Error("Defines to int err:"+names+"/"+words[i]);
				num |=value;
			}
			return num;
		}

		return ShaderDefines;
	})()


	//class laya.filters.webgl.FilterActionGL
	var FilterActionGL=(function(){
		function FilterActionGL(){}
		__class(FilterActionGL,'laya.filters.webgl.FilterActionGL');
		var __proto=FilterActionGL.prototype;
		Laya.imps(__proto,{"laya.filters.IFilterActionGL":true})
		__proto.setValue=function(shader){}
		__proto.setValueMix=function(shader){}
		__proto.apply3d=function(scope,sprite,context,x,y){return null;}
		__proto.apply=function(srcCanvas){return null;}
		__getset(0,__proto,'typeMix',function(){
			return 0;
		});

		return FilterActionGL;
	})()


	//class laya.webgl.atlas.AtlasGrid
	var AtlasGrid=(function(){
		var TexMergeCellInfo,TexRowInfo,TexMergeTexSize;
		function AtlasGrid(width,height,atlasID){
			this._atlasID=0;
			this._width=0;
			this._height=0;
			this._texCount=0;
			this._rowInfo=null;
			this._cells=null;
			this._failSize=new TexMergeTexSize();
			(width===void 0)&& (width=0);
			(height===void 0)&& (height=0);
			(atlasID===void 0)&& (atlasID=0);
			this._cells=null;
			this._rowInfo=null;
			this._init(width,height);
			this._atlasID=atlasID;
		}

		__class(AtlasGrid,'laya.webgl.atlas.AtlasGrid');
		var __proto=AtlasGrid.prototype;
		//------------------------------------------------------------------------------
		__proto.getAltasID=function(){
			return this._atlasID;
		}

		//------------------------------------------------------------------------------
		__proto.setAltasID=function(atlasID){
			if(atlasID >=0){
				this._atlasID=atlasID;
			}
		}

		//------------------------------------------------------------------
		__proto.addTex=function(type,width,height){
			var result=this._get(width,height);
			if (result.ret==false){
				return result;
			}
			this._fill(result.x,result.y,width,height,type);
			this._texCount++;
			return result;
		}

		//------------------------------------------------------------------------------
		__proto._release=function(){
			if(this._cells !=null){
				this._cells.length=0;
				this._cells=null;
			}
			if(this._rowInfo){
				this._rowInfo.length=0;
				this._rowInfo=null;
			}
		}

		//------------------------------------------------------------------------------
		__proto._init=function(width,height){
			this._width=width;
			this._height=height;
			this._release();
			if (this._width==0)return false;
			this._cells=new Array(this._width *this._height);
			this._rowInfo=__newvec(this._height);
			for(var i=0;i < this._height;i++){
				this._rowInfo[i]=new TexRowInfo();
			}
			for(i=0;i < this._width *this._height;i++){
				this._cells[i]=new TexMergeCellInfo();
			}
			this._clear();
			return true;
		}

		//------------------------------------------------------------------
		__proto._get=function(width,height){
			var pFillInfo=new MergeFillInfo();
			if(width >=this._failSize.width && height >=this._failSize.height){
				return pFillInfo;
			};
			var rx=-1;
			var ry=-1;
			var nWidth=this._width;
			var nHeight=this._height;
			var pCellBox=this._cells;
			for(var y=0;y < nHeight;y++){
				if(this._rowInfo[y].spaceCount < width)continue ;
				for(var x=0;x < nWidth;){
					if (pCellBox[ y *nWidth+x].type !=0 || pCellBox[ y *nWidth+x].successionWidth < width || pCellBox[ y *nWidth+x].successionHeight < height){
						x+=pCellBox[y *nWidth+x].successionWidth;
						continue ;
					}
					rx=x;
					ry=y;
					for(var xx=0;xx < width;xx++){
						if (pCellBox[y *nWidth+x+xx].successionHeight < height){
							rx=-1;
							break ;
						}
					}
					if(rx < 0){
						x+=pCellBox[y *nWidth+x].successionWidth;
						continue ;
					}
					pFillInfo.ret=true;
					pFillInfo.x=rx;
					pFillInfo.y=ry;
					return pFillInfo;
				}
			}
			return pFillInfo;
		}

		//------------------------------------------------------------------
		__proto._fill=function(x,y,w,h,type){
			var nWidth=this._width;
			var nHeghit=this._height;
			this._check((x+w)<=nWidth && (y+h)<=nHeghit);
			for(var yy=y;yy < (h+y);++yy){
				this._check(this._rowInfo[yy].spaceCount >=w);
				this._rowInfo[yy].spaceCount-=w;
				for(var xx=0;xx < w;xx++){
					this._check(this._cells[x+yy *nWidth+xx].type==0);
					this._cells[x+yy *nWidth+xx].type=type;
					this._cells[x+yy *nWidth+xx].successionWidth=w;
					this._cells[x+yy *nWidth+xx].successionHeight=h;
				}
			}
			if(x>0){
				for(yy=0;yy < h;++yy){
					var s=0;
					for(xx=x-1;xx >=0;--xx,++s){
						if (this._cells[(y+yy)*nWidth+xx].type !=0)break ;
					}
					for(xx=s;xx>0;--xx){
						this._cells[(y+yy)*nWidth+x-xx].successionWidth=xx;
						this._check(xx>0);
					}
				}
			}
			if(y > 0){
				for(xx=x;xx < (x+w);++xx){
					s=0;
					for(yy=y-1;yy >=0;--yy,s++){
						if(this._cells[ xx+yy*nWidth].type!=0)break ;
					}
					for(yy=s;yy>0;--yy){
						this._cells[ xx+(y-yy)*nWidth].successionHeight=yy;
						this._check(yy>0);
					}
				}
			}
		}

		__proto._check=function(ret){
			if (ret==false){
				console.log("xtexMerger 错误啦");
			}
		}

		//------------------------------------------------------------------
		__proto._clear=function(){
			this._texCount=0;
			for (var y=0;y < this._height;y++){
				this._rowInfo[y].spaceCount=this._width;
			}
			for (var i=0;i < this._height;i++){
				for (var j=0;j < this._width;j++){
					var pCellbox=this._cells[ i *this._width+j];
					pCellbox.type=0;
					pCellbox.successionWidth=this._width-j;
					pCellbox.successionHeight=this._width-i;
				}
			}
			this._failSize.width=this._width+1;
			this._failSize.height=this._height+1;
		}

		AtlasGrid.__init$=function(){
			//------------------------------------------------------------------------------
			//class TexMergeCellInfo
			TexMergeCellInfo=(function(){
				function TexMergeCellInfo(){
					this.type=0;
					this.successionWidth=0;
					this.successionHeight=0;
				}
				__class(TexMergeCellInfo,'');
				return TexMergeCellInfo;
			})()
			//------------------------------------------------------------------------------
			//class TexRowInfo
			TexRowInfo=(function(){
				function TexRowInfo(){
					this.spaceCount=0;
				}
				__class(TexRowInfo,'');
				return TexRowInfo;
			})()
			//------------------------------------------------------------------------------
			//class TexMergeTexSize
			TexMergeTexSize=(function(){
				function TexMergeTexSize(){
					this.width=0;
					this.height=0;
				}
				__class(TexMergeTexSize,'');
				return TexMergeTexSize;
			})()
		}

		return AtlasGrid;
	})()


	;
	;
	;
	//class laya.webgl.atlas.AtlasManager
	var AtlasManager=(function(){
		function AtlasManager(width,height,gridSize,maxTexNum){
			this._maxAtlasNum=0;
			this._width=0;
			this._height=0;
			this._gridSize=0;
			this._gridNumX=0;
			this._gridNumY=0;
			this._init=false;
			this._curAtlasIndex=0;
			this._setAtlasParam=false;
			this._atlaserArray=null;
			this._needGC=false;
			this._setAtlasParam=true;
			this._width=width;
			this._height=height;
			this._gridSize=gridSize;
			this._maxAtlasNum=maxTexNum;
			this._gridNumX=width / gridSize;
			this._gridNumY=height / gridSize;
			this._curAtlasIndex=0;
			this._atlaserArray=[];
			if (WebGL.mainContext)this.Initialize();
		}

		__class(AtlasManager,'laya.webgl.atlas.AtlasManager');
		var __proto=AtlasManager.prototype;
		__proto.Initialize=function(){
			for (var i=0;i < this._maxAtlasNum;i++){
				this._atlaserArray.push(new Atlaser(this._gridNumX,this._gridNumY,this._width,this._height,AtlasManager._sid_));
				AtlasManager._sid_++;
			}
			return true;
		}

		__proto.setAtlasParam=function(width,height,gridSize,maxTexNum){
			if (this._setAtlasParam==true){
				AtlasManager._sid_=0;
				this._width=width;
				this._height=height;
				this._gridSize=gridSize;
				this._maxAtlasNum=maxTexNum;
				this._gridNumX=width / gridSize;
				this._gridNumY=height / gridSize;
				this._curAtlasIndex=0;
				this.freeAll();
				this.Initialize();
				return true;
				}else {
				console.log("设置大图合集参数错误，只能在开始页面设置各种参数");
				throw-1;
				return false;
			}
			return false;
		}

		__proto.computeUVinAtlasTexture=function(texture,offsetX,offsetY){
			var tex=texture;
			var u1=offsetX / this._width,v1=offsetY / this._height,u2=(offsetX+texture.bitmap.width)/ this._width,v2=(offsetY+texture.bitmap.height)/ this._height;
			var inAltasUVWidth=texture.bitmap.width / this._width,inAltasUVHeight=texture.bitmap.height / this._height;
			var oriUV=tex.originalUV;
			texture.uv=[u1+oriUV[0] *inAltasUVWidth,v1+oriUV[1] *inAltasUVHeight,u2-(1-oriUV[2])*inAltasUVWidth,v1+oriUV[3] *inAltasUVHeight,u2-(1-oriUV[4])*inAltasUVWidth,v2-(1-oriUV[5])*inAltasUVHeight,u1+oriUV[6] *inAltasUVWidth,v2-(1-oriUV[7])*inAltasUVHeight];
		}

		//添加 图片到大图集
		__proto.pushData=function(texture){
			var tex=texture;
			this._setAtlasParam=false;
			var bFound=false;
			var nImageGridX=(Math.ceil((texture.bitmap.width+2)/ this._gridSize));
			var nImageGridY=(Math.ceil((texture.bitmap.height+2)/ this._gridSize));
			var bSuccess=false;
			for (var k=0;k < 2;k++){
				var nAtlasSize=this._atlaserArray.length;
				for (var i=0;i < nAtlasSize;++i){
					var altasIndex=(this._curAtlasIndex+i)% nAtlasSize;
					var atlas=this._atlaserArray[altasIndex];
					var bitmap=texture.bitmap;
					if (atlas.webGLImages.indexOf(bitmap)==-1){
						var fillInfo=atlas.addTex(1,nImageGridX,nImageGridY);
						if (fillInfo.ret){
							var offsetX=fillInfo.x *this._gridSize+1;
							var offsetY=fillInfo.y *this._gridSize+1;
							atlas.addToAtlasTexture(bitmap,offsetX,offsetY);
							(!tex.originalUV)&& (tex.originalUV=texture.uv.slice());
							bSuccess=true;
							this._curAtlasIndex=altasIndex;
							this.computeUVinAtlasTexture(texture,bitmap.offsetX,bitmap.offsetY);
							atlas.addToAtlas(texture);
							break ;
						}
						}else {
						(!tex.originalUV)&& (tex.originalUV=texture.uv.slice());
						bSuccess=true;
						this._curAtlasIndex=altasIndex;
						this.computeUVinAtlasTexture(texture,bitmap.offsetX,bitmap.offsetY);
						atlas.addToAtlas(texture);
						break ;
					}
				}
				if (bSuccess)
					break ;
				this._atlaserArray.push(new Atlaser(this._gridNumX,this._gridNumY,this._width,this._height,AtlasManager._sid_++));
				this._needGC=true;
				this.garbageCollection();
				this._curAtlasIndex=this._atlaserArray.length-1;
			}
			if (!bSuccess){
				console.log(">>>AtlasManager pushData error");
			}
			return bSuccess;
		}

		__proto.addToAtlas=function(tex){
			laya.webgl.atlas.AtlasManager.instance.pushData(tex);
		}

		/**
		*回收大图合集,不建议手动调用
		*@return
		*/
		__proto.garbageCollection=function(){
			if (this._needGC===true){
				var n=this._atlaserArray.length-this._maxAtlasNum;
				for (var i=0;i < n;i++)
				this._atlaserArray[i].destroy();
				this._atlaserArray.splice(0,n);
				this._needGC=false;
			}
			return true;
		}

		__proto.freeAll=function(){
			for (var i=0,n=this._atlaserArray.length;i < n;i++){
				this._atlaserArray[i].destroy();
			}
			this._atlaserArray.length=0;
		}

		__getset(1,AtlasManager,'instance',function(){
			if (!AtlasManager.__S_Instance__){
				AtlasManager.__S_Instance__=new AtlasManager(AtlasManager.atlasTextureWidth,AtlasManager.atlasTextureHeight,AtlasManager.gridSize,AtlasManager.maxTextureCount);
			}
			return AtlasManager.__S_Instance__;
		});

		__getset(1,AtlasManager,'atlasLimitWidth',function(){
			return AtlasManager._atlasLimitWidth;
			},function(value){
			AtlasManager._atlasLimitWidth=value;
			Config.atlasLimitWidth=value;
		});

		__getset(1,AtlasManager,'enabled',function(){
			return AtlasManager._enabled;
		});

		__getset(1,AtlasManager,'atlasLimitHeight',function(){
			return AtlasManager._atlasLimitHeight;
			},function(value){
			AtlasManager._atlasLimitHeight=value;
			Config.atlasLimitHeight=value;
		});

		AtlasManager.enable=function(){
			AtlasManager._enabled=true;
			Config.atlasEnable=true;
		}

		AtlasManager.__init__=function(){
			AtlasManager.atlasLimitWidth=512;
			AtlasManager.atlasLimitHeight=512;
		}

		AtlasManager._enabled=false;
		AtlasManager._atlasLimitWidth=0;
		AtlasManager._atlasLimitHeight=0;
		AtlasManager.atlasTextureWidth=2048;
		AtlasManager.atlasTextureHeight=2048;
		AtlasManager.gridSize=16;
		AtlasManager.maxTextureCount=8;
		AtlasManager.BOARDER_TYPE_NO=0;
		AtlasManager.BOARDER_TYPE_RIGHT=1;
		AtlasManager.BOARDER_TYPE_LEFT=2;
		AtlasManager.BOARDER_TYPE_BOTTOM=4;
		AtlasManager.BOARDER_TYPE_TOP=8;
		AtlasManager.BOARDER_TYPE_ALL=15;
		AtlasManager._sid_=0;
		AtlasManager.__S_Instance__=null;
		return AtlasManager;
	})()


	//class laya.webgl.atlas.MergeFillInfo
	var MergeFillInfo=(function(){
		function MergeFillInfo(){
			this.x=0;
			this.y=0;
			this.ret=false;
			this.ret=false;
			this.x=0;
			this.y=0;
		}

		__class(MergeFillInfo,'laya.webgl.atlas.MergeFillInfo');
		return MergeFillInfo;
	})()


	;
	//class laya.webgl.canvas.BlendMode
	var BlendMode=(function(){
		function BlendMode(){};
		__class(BlendMode,'laya.webgl.canvas.BlendMode');
		BlendMode._init_=function(gl){
			BlendMode.fns=[BlendMode.BlendNormal,BlendMode.BlendAdd,BlendMode.BlendMultiply,BlendMode.BlendScreen,BlendMode.BlendOverlay,BlendMode.BlendLight];
			BlendMode.targetFns=[BlendMode.BlendNormalTarget,BlendMode.BlendAddTarget,BlendMode.BlendMultiplyTarget,BlendMode.BlendScreenTarget,BlendMode.BlendOverlayTarget,BlendMode.BlendLightTarget];
		}

		BlendMode.BlendNormal=function(gl){
			gl.blendFunc(0x0302,0x0303);
		}

		BlendMode.BlendAdd=function(gl){
			gl.blendFunc(0x0302,0x0304);
		}

		BlendMode.BlendMultiply=function(gl){
			gl.blendFunc(0x0306,0x0303);
		}

		BlendMode.BlendScreen=function(gl){
			gl.blendFunc(0x0302,1);
		}

		BlendMode.BlendOverlay=function(gl){
			gl.blendFunc(1,0x0301);
		}

		BlendMode.BlendLight=function(gl){
			gl.blendFunc(0x0302,1);
		}

		BlendMode.BlendNormalTarget=function(gl){
			gl.blendFuncSeparate(0x0302,0x0303,1,0x0303);
		}

		BlendMode.BlendAddTarget=function(gl){
			gl.blendFunc(0x0302,0x0304);
		}

		BlendMode.BlendMultiplyTarget=function(gl){
			gl.blendFunc(0x0306,0x0303);
		}

		BlendMode.BlendScreenTarget=function(gl){
			gl.blendFunc(0x0302,1);
		}

		BlendMode.BlendOverlayTarget=function(gl){
			gl.blendFunc(1,0x0301);
		}

		BlendMode.BlendLightTarget=function(gl){
			gl.blendFunc(0x0302,1);
		}

		BlendMode.NAMES=["normal","add","multiply","screen","overlay","light"];
		BlendMode.TOINT={"normal":0,"add":1,"multiply":2,"screen":3 ,"lighter":1,"overlay":4,"light":5};
		BlendMode.NORMAL="normal";
		BlendMode.ADD="add";
		BlendMode.MULTIPLY="multiply";
		BlendMode.SCREEN="screen";
		BlendMode.LIGHT="light";
		BlendMode.OVERLAY="overlay";
		BlendMode.fns=[];
		BlendMode.targetFns=[];
		return BlendMode;
	})()


	/**
	*...
	*@author laya
	*/
	//class laya.webgl.canvas.DrawStyle
	var DrawStyle=(function(){
		function DrawStyle(value){
			this._color=Color.create("black");
			this.setValue(value);
		}

		__class(DrawStyle,'laya.webgl.canvas.DrawStyle');
		var __proto=DrawStyle.prototype;
		__proto.setValue=function(value){
			if (value){
				if ((typeof value=='string')){
					this._color=Color.create(value);
					return;
				}
				if ((value instanceof laya.utils.Color )){
					this._color=value;
					return;
				}
			}
		}

		__proto.reset=function(){
			this._color=Color.create("black");
		}

		__proto.equal=function(value){
			if ((typeof value=='string'))return this._color.strColor===value;
			return false;
		}

		__proto.toColorStr=function(){
			return this._color.strColor;
		}

		DrawStyle.DEFAULT=new DrawStyle("#000000");
		return DrawStyle;
	})()


	/**
	*...
	*@author laya
	*/
	//class laya.webgl.canvas.Path
	var Path=(function(){
		function Path(){
			this._x=0;
			this._y=0;
			//this._rect=null;
			//this.ib=null;
			//this.vb=null;
			this.dirty=false;
			//this.geomatrys=null;
			//this._curGeomatry=null;
			this.offset=0;
			this.count=0;
			this.geoStart=0;
			this.geomatrys=[];
			var gl=WebGL.mainContext;
			this.ib=new Buffer(0x8893,"INDEX",null,0x88E4);
			this.vb=new Buffer(0x8892);
		}

		__class(Path,'laya.webgl.canvas.Path');
		var __proto=Path.prototype;
		__proto.clear=function(){
			this._rect=null;
		}

		__proto.rect2=function(x,y,w,h,color,borderWidth,borderColor){
			(borderWidth===void 0)&& (borderWidth=2);
			(borderColor===void 0)&& (borderColor=0);
			this.geomatrys.push(this._curGeomatry=new Rect1(x,y,w,h,color,borderWidth,borderColor));
		}

		__proto.rect=function(x,y,width,height){
			this._rect=new Rectangle(x,y,width,height);
			this.dirty=true;
		}

		__proto.strokeRect=function(x,y,width,height){
			this._rect=new Rectangle(x,y,width,height);
		}

		__proto.circle=function(x,y,r,color,borderWidth,borderColor,fill){
			this.geomatrys.push(this._curGeomatry=new Circle(x,y,r,color,borderWidth,borderColor,fill));
		}

		__proto.fan=function(x,y,r,r0,r1,color,borderWidth,borderColor){
			var geo;
			this.geomatrys.push(this._curGeomatry=geo=new Fan(x,y,r,r0,r1,color,borderWidth,borderColor));
			if(!color)geo.fill=false;
		}

		__proto.ellipse=function(x,y,rw,rh,color,borderWidth,borderColor){
			this.geomatrys.push(this._curGeomatry=new Ellipse(x,y,rw,rh,color,borderWidth,borderColor));
		}

		__proto.polygon=function(x,y,r,edges,color,borderWidth,borderColor){
			var geo;
			this.geomatrys.push(this._curGeomatry=geo=new Polygon(x,y,r,edges,color,borderWidth,borderColor));
			if(!color)geo.fill=false;if(borderColor==undefined)geo.borderWidth=0;
		}

		__proto.drawPath=function(x,y,points,color,borderWidth){
			this.geomatrys.push(this._curGeomatry=new Line(x,y,points,color,borderWidth));
		}

		__proto.update=function(){
			var si=this.ib.length;
			var len=this.geomatrys.length;
			this.offset=si;
			for(var i=this.geoStart;i<len;i++){
				this.geomatrys[i].getData(this.ib,this.vb,this.vb.length/(5*4));
			}
			this.geoStart=len;
			this.count=(this.ib.length-si)/2;
		}

		__proto.sector=function(x,y,rW,rH){}
		__proto.roundRect=function(x,y,w,h,rW,rH){}
		__proto.reset=function(){
			this.vb.clear();
			this.ib.clear();
			this.offset=this.count=this.geoStart=0;
			this.geomatrys.length=0;
		}

		return Path;
	})()


	/**
	*...
	*@author laya
	*/
	//class laya.webgl.canvas.save.SaveBase
	var SaveBase=(function(){
		function SaveBase(){
			//this._valueName=null;
			//this._value=null;
			//this._dataObj=null;
			//this._newSubmit=false;
		}

		__class(SaveBase,'laya.webgl.canvas.save.SaveBase');
		var __proto=SaveBase.prototype;
		Laya.imps(__proto,{"laya.webgl.canvas.save.ISaveData":true})
		__proto.isSaveMark=function(){return false;}
		__proto.restore=function(context){
			this._dataObj[this._valueName]=this._value;
			SaveBase._cache[SaveBase._cache._length++]=this;
			this._newSubmit && (context._curSubmit=Submit.RENDERBASE);
		}

		SaveBase._createArray=function(){
			var value=[];
			value._length=0;
			return value;
		}

		SaveBase._init=function(){
			var namemap=SaveBase._namemap={};
			namemap[0x1]="ALPHA";
			namemap[0x2]="fillStyle";
			namemap[0x8]="font";
			namemap[0x100]="lineWidth";
			namemap[0x200]="strokeStyle";
			namemap[0x2000]="_mergeID";
			namemap[0x400]=
			namemap[0x800]=
			namemap[0x1000]=[];
			namemap[0x4000]="textBaseline";
			namemap[0x8000]="textAlign";
			namemap[0x10000]="_nBlendType";
			namemap[0x80000]="shader";
			namemap[0x100000]="filters";
			return namemap;
		}

		SaveBase.save=function(context,type,dataObj,newSubmit){
			if ((context._saveMark._saveuse & type)!==type){
				context._saveMark._saveuse |=type;
				var cache=SaveBase._cache;
				var o=cache._length > 0 ?cache[--cache._length] :(new SaveBase());
				o._value=dataObj[ o._valueName=SaveBase._namemap[type]];
				o._dataObj=dataObj;
				o._newSubmit=newSubmit;
				var _save=context._save;
				_save[_save._length++]=o;
			}
		}

		SaveBase._cache=laya.webgl.canvas.save.SaveBase._createArray();
		SaveBase._namemap=SaveBase._init();
		return SaveBase;
	})()


	/**
	*...
	*@author laya
	*/
	//class laya.webgl.canvas.save.SaveClipRect
	var SaveClipRect=(function(){
		function SaveClipRect(){
			//this._clipSaveRect=null;
			//this._submitScissor=null;
			this._clipRect=new Rectangle();
		}

		__class(SaveClipRect,'laya.webgl.canvas.save.SaveClipRect');
		var __proto=SaveClipRect.prototype;
		Laya.imps(__proto,{"laya.webgl.canvas.save.ISaveData":true})
		__proto.isSaveMark=function(){return false;}
		__proto.restore=function(context){
			context._clipRect=this._clipSaveRect;
			SaveClipRect._cache[SaveClipRect._cache._length++]=this;
			this._submitScissor.submitLength=context._submits._length-this._submitScissor.submitIndex;
			context._curSubmit=Submit.RENDERBASE;
		}

		SaveClipRect.save=function(context,submitScissor){
			if ((context._saveMark._saveuse & 0x20000)==0x20000)return;
			context._saveMark._saveuse |=0x20000;
			var cache=SaveClipRect._cache;
			var o=cache._length > 0?cache[--cache._length]:(new SaveClipRect());
			o._clipSaveRect=context._clipRect;
			context._clipRect=o._clipRect.copyFrom(context._clipRect);
			o._submitScissor=submitScissor;
			var _save=context._save;
			_save[_save._length++]=o;
		}

		SaveClipRect._cache=SaveBase._createArray();
		return SaveClipRect;
	})()


	/**
	*...
	*@author laya
	*/
	//class laya.webgl.canvas.save.SaveMark
	var SaveMark=(function(){
		function SaveMark(){
			this._saveuse=0;
			//this._preSaveMark=null;
			;
		}

		__class(SaveMark,'laya.webgl.canvas.save.SaveMark');
		var __proto=SaveMark.prototype;
		Laya.imps(__proto,{"laya.webgl.canvas.save.ISaveData":true})
		__proto.isSaveMark=function(){
			return true;
		}

		__proto.restore=function(context){
			context._saveMark=this._preSaveMark;
			SaveMark._no[SaveMark._no._length++]=this;
		}

		SaveMark.Create=function(context){
			var no=SaveMark._no;
			var o=no._length > 0?no[--no._length]:(new SaveMark());
			o._saveuse=0;
			o._preSaveMark=context._saveMark;
			context._saveMark=o;
			return o;
		}

		SaveMark._no=SaveBase._createArray();
		return SaveMark;
	})()


	/**
	*...
	*@author laya
	*/
	//class laya.webgl.canvas.save.SaveTransform
	var SaveTransform=(function(){
		function SaveTransform(){
			//this._savematrix=null;
			this._matrix=new Matrix();
		}

		__class(SaveTransform,'laya.webgl.canvas.save.SaveTransform');
		var __proto=SaveTransform.prototype;
		Laya.imps(__proto,{"laya.webgl.canvas.save.ISaveData":true})
		__proto.isSaveMark=function(){return false;}
		__proto.restore=function(context){
			context._curMat=this._savematrix;
			SaveTransform._no[SaveTransform._no._length++]=this;
		}

		SaveTransform.save=function(context){
			var _saveMark=context._saveMark;
			if ((_saveMark._saveuse & 0x800)===0x800)return;
			_saveMark._saveuse |=0x800;
			var no=SaveTransform._no;
			var o=no._length > 0?no[--no._length]:(new SaveTransform());
			o._savematrix=context._curMat;
			context._curMat=context._curMat.copy(o._matrix);
			var _save=context._save;
			_save[_save._length++]=o;
		}

		SaveTransform._no=SaveBase._createArray();
		return SaveTransform;
	})()


	/**
	*...
	*@author laya
	*/
	//class laya.webgl.canvas.save.SaveTranslate
	var SaveTranslate=(function(){
		function SaveTranslate(){
			//this._x=NaN;
			//this._y=NaN;
		}

		__class(SaveTranslate,'laya.webgl.canvas.save.SaveTranslate');
		var __proto=SaveTranslate.prototype;
		Laya.imps(__proto,{"laya.webgl.canvas.save.ISaveData":true})
		__proto.isSaveMark=function(){return false;}
		__proto.restore=function(context){
			var mat=context._curMat;
			context._x=this._x;
			context._y=this._y;
			SaveTranslate._no[SaveTranslate._no._length++]=this;
		}

		SaveTranslate.save=function(context){
			var no=SaveTranslate._no;
			var o=no._length > 0?no[--no._length]:(new SaveTranslate());
			o._x=context._x;
			o._y=context._y;
			var _save=context._save;
			_save[_save._length++]=o;
		}

		SaveTranslate._no=SaveBase._createArray();
		return SaveTranslate;
	})()


	/**
	*...
	*@author laya
	*/
	//class laya.webgl.resource.RenderTargetMAX
	var RenderTargetMAX=(function(){
		var OneTarget;
		function RenderTargetMAX(){
			this.targets=null;
			this.oneTargets=null;
			this.repaint=false;
			this._width=NaN;
			this._height=NaN;
			this._clipRect=new Rectangle();
		}

		__class(RenderTargetMAX,'laya.webgl.resource.RenderTargetMAX');
		var __proto=RenderTargetMAX.prototype;
		__proto.size=function(w,h){
			if (this._width===w && this._height===h)return;
			this.repaint=true;
			this._width=w;
			this._height=h;
			if (!this.oneTargets)this.oneTargets=new OneTarget(w,h);
			else this.oneTargets.target.size(w,h);
		}

		__proto._flushToTarget=function(context,target){
			var worldScissorTest=RenderState2D.worldScissorTest;
			var preworldClipRect=RenderState2D.worldClipRect;
			RenderState2D.worldClipRect=this._clipRect;
			this._clipRect.x=this._clipRect.y=0;
			this._clipRect.width=this._width;
			this._clipRect.height=this._height;
			WebGL.mainContext.disable(0x0C11);
			var preAlpha=RenderState2D.worldAlpha;
			var preMatrix4=RenderState2D.worldMatrix4;
			var preMatrix=RenderState2D.worldMatrix;
			var preFilters=RenderState2D.worldFilters;
			var preShaderDefinesValue=RenderState2D.worldShaderDefinesValue;
			RenderState2D.worldMatrix=RenderTargetMAX._matrixDefault;
			RenderState2D.worldMatrix4=RenderState2D.TEMPMAT4_ARRAY;
			RenderState2D.worldAlpha=1;
			RenderState2D.worldFilters=null;
			RenderState2D.worldShaderDefinesValue=0;
			Shader.activeShader=null;
			target.start();
			Config.showCanvasMark?target.clear(0,1,0,0.3):target.clear(0,0,0,0);
			context.flush();
			target.end();
			Shader.activeShader=null;
			RenderState2D.worldAlpha=preAlpha;
			RenderState2D.worldMatrix4=preMatrix4;
			RenderState2D.worldMatrix=preMatrix;
			RenderState2D.worldFilters=preFilters;
			RenderState2D.worldShaderDefinesValue=preShaderDefinesValue;
			worldScissorTest && WebGL.mainContext.enable(0x0C11);
			RenderState2D.worldClipRect=preworldClipRect;
		}

		__proto.flush=function(context){
			if (this.repaint){
				this._flushToTarget(context,this.oneTargets.target);
				this.repaint=false;
			}
		}

		__proto.drawTo=function(context,x,y,width,height){
			context.drawTexture(this.oneTargets.target.getTexture(),x,y,width,height,0,0);
		}

		__proto.destroy=function(){
			if (this.oneTargets){
				this.oneTargets.target.destroy();
				this.oneTargets.target=null;
				this.oneTargets=null;
			}
		}

		__static(RenderTargetMAX,
		['_matrixDefault',function(){return this._matrixDefault=new Matrix();}
		]);
		RenderTargetMAX.__init$=function(){
			//class OneTarget
			OneTarget=(function(){
				function OneTarget(w,h){
					//this.x=NaN;
					//this.y=NaN;
					//this.width=NaN;
					//this.height=NaN;
					//this.target=null;
					this.width=w;
					this.height=h;
					this.target=RenderTarget2D.create(w,h);
				}
				__class(OneTarget,'');
				return OneTarget;
			})()
		}

		return RenderTargetMAX;
	})()


	//class laya.webgl.shader.d2.Shader2D
	var Shader2D=(function(){
		function Shader2D(){
			this.ALPHA=1;
			//this.shader=null;
			//this.filters=null;
			this.shaderType=0;
			//this.colorAdd=null;
			//this.strokeStyle=null;
			//this.fillStyle=null;
			this.glTexture=new WebGLImage();
			this.defines=new ShaderDefines2D();
		}

		__class(Shader2D,'laya.webgl.shader.d2.Shader2D');
		Shader2D.__init__=function(){
			Shader.addInclude("parts/ColorFilter_ps_uniform.glsl","uniform float u_colorMatrix[20];\n");
			Shader.addInclude("parts/ColorFilter_ps_logic.glsl","vec4 rgba=gl_FragColor;\ngl_FragColor.r =rgba.r*u_colorMatrix[0]+rgba.g*u_colorMatrix[1]+rgba.b*u_colorMatrix[2]+rgba.a*u_colorMatrix[3]+u_colorMatrix[4];\ngl_FragColor.g =rgba.r*u_colorMatrix[5]+rgba.g*u_colorMatrix[6]+rgba.b*u_colorMatrix[7]+rgba.a*u_colorMatrix[8]+u_colorMatrix[9];\ngl_FragColor.b =rgba.r*u_colorMatrix[10]+rgba.g*u_colorMatrix[11]+rgba.b*u_colorMatrix[12]+rgba.a*u_colorMatrix[13]+u_colorMatrix[14];\ngl_FragColor.a =rgba.r*u_colorMatrix[15]+rgba.g*u_colorMatrix[16]+rgba.b*u_colorMatrix[17]+rgba.a*u_colorMatrix[18]+u_colorMatrix[19];");
			Shader.addInclude("parts/GlowFilter_ps_uniform.glsl","uniform bool u_blurX;\nuniform vec4 u_color;\nuniform float u_offset;\nuniform float u_strength;\nuniform float u_texW;\nuniform float u_texH;");
			Shader.addInclude("parts/GlowFilter_ps_logic.glsl","const int c_FilterTime = 9;\nconst float c_Gene = (1.0/(1.0 + 2.0*(0.93 + 0.8 + 0.7 + 0.6 + 0.5 + 0.4 + 0.3 + 0.2 + 0.1)));\nvec4 vec4Color = gl_FragColor*c_Gene;\nfloat aryAttenuation[c_FilterTime];\naryAttenuation[0] = 0.93;\naryAttenuation[1] = 0.8;\naryAttenuation[2] = 0.7;\naryAttenuation[3] = 0.6;\naryAttenuation[4] = 0.5;\naryAttenuation[5] = 0.4;\naryAttenuation[6] = 0.3;\naryAttenuation[7] = 0.2;\naryAttenuation[8] = 0.1;\n\nfloat u_TexSpaceU=1.0/u_texW;\nfloat u_TexSpaceV=1.0/u_texH;\nvec2 vec2FilterDir;\nif(u_blurX)\n	vec2FilterDir = vec2(u_offset*u_TexSpaceU/9.0, 0.0);\nelse\n	vec2FilterDir = vec2(0.0,u_offset*u_TexSpaceV/9.0);\nvec2 vec2Step = vec2FilterDir;\n\nfor(int i = 0;i< c_FilterTime; ++i){\n	vec4Color += texture2D(texture, v_texcoord + vec2Step)*aryAttenuation[i]*c_Gene;\n	vec4Color += texture2D(texture, v_texcoord - vec2Step)*aryAttenuation[i]*c_Gene;\n	vec2Step += vec2FilterDir;\n}\n\ngl_FragColor = vec4Color.a*u_color*u_strength;");
			Shader.addInclude("parts/BlurFilter_ps_logic.glsl","gl_FragColor=vec4(0.0);\ngl_FragColor += texture2D(texture, vBlurTexCoords[ 0])*0.004431848411938341;\ngl_FragColor += texture2D(texture, vBlurTexCoords[ 1])*0.05399096651318985;\ngl_FragColor += texture2D(texture, vBlurTexCoords[ 2])*0.2419707245191454;\ngl_FragColor += texture2D(texture, v_texcoord        )*0.3989422804014327;\ngl_FragColor += texture2D(texture, vBlurTexCoords[ 3])*0.2419707245191454;\ngl_FragColor += texture2D(texture, vBlurTexCoords[ 4])*0.05399096651318985;\ngl_FragColor += texture2D(texture, vBlurTexCoords[ 5])*0.004431848411938341;");
			Shader.addInclude("parts/BlurFilter_ps_uniform.glsl","varying vec2 vBlurTexCoords[6];");
			Shader.addInclude("parts/BlurFilter_vs_uniform.glsl","uniform float strength;\nvarying vec2 vBlurTexCoords[6];");
			Shader.addInclude("parts/BlurFilter_vs_logic.glsl","\nvBlurTexCoords[ 0] = v_texcoord + vec2(-0.012 * strength, 0.0);\nvBlurTexCoords[ 1] = v_texcoord + vec2(-0.008 * strength, 0.0);\nvBlurTexCoords[ 2] = v_texcoord + vec2(-0.004 * strength, 0.0);\nvBlurTexCoords[ 3] = v_texcoord + vec2( 0.004 * strength, 0.0);\nvBlurTexCoords[ 4] = v_texcoord + vec2( 0.008 * strength, 0.0);\nvBlurTexCoords[ 5] = v_texcoord + vec2( 0.012 * strength, 0.0);");
			Shader.addInclude("parts/ColorAdd_ps_uniform.glsl","uniform vec4 colorAdd;\n");
			Shader.addInclude("parts/ColorAdd_ps_logic.glsl","gl_FragColor = vec4(colorAdd.rgb,colorAdd.a*gl_FragColor.a);");
			var vs,ps;
			vs="attribute vec4 position;\nattribute vec2 texcoord;\nuniform vec2 size;\nuniform mat4 mmat;\nvarying vec2 v_texcoord;\n\n#include?BLUR_FILTER  \"parts/BlurFilter_vs_uniform.glsl\";\nvoid main() {\n  vec4 pos=mmat*position;\n  gl_Position =vec4((pos.x/size.x-0.5)*2.0,(0.5-pos.y/size.y)*2.0,pos.z,1.0);\n  v_texcoord = texcoord;\n  #include?BLUR_FILTER  \"parts/BlurFilter_vs_logic.glsl\";\n}";
			ps="precision mediump float;\n//precision highp float;\nvarying vec2 v_texcoord;\nuniform sampler2D texture;\nuniform float alpha;\n#include?BLUR_FILTER  \"parts/BlurFilter_ps_uniform.glsl\";\n#include?COLOR_FILTER \"parts/ColorFilter_ps_uniform.glsl\";\n#include?GLOW_FILTER \"parts/GlowFilter_ps_uniform.glsl\";\n#include?COLOR_ADD \"parts/ColorAdd_ps_uniform.glsl\";\n\nvoid main() {\n   vec4 color= texture2D(texture, v_texcoord);\n   color.a*=alpha;\n   gl_FragColor=color;\n   #include?COLOR_ADD \"parts/ColorAdd_ps_logic.glsl\";   \n   #include?BLUR_FILTER  \"parts/BlurFilter_ps_logic.glsl\";\n   #include?COLOR_FILTER \"parts/ColorFilter_ps_logic.glsl\";\n   #include?GLOW_FILTER \"parts/GlowFilter_ps_logic.glsl\";\n}";
			Shader.preCompile(0,0x01,vs,ps,null);
			vs="attribute vec4 position;\nuniform vec2 size;\nuniform mat4 mmat;\nvoid main() {\n  vec4 pos=mmat*position;\n  gl_Position =vec4((pos.x/size.x-0.5)*2.0,(0.5-pos.y/size.y)*2.0,pos.z,1.0);\n}";
			ps="precision mediump float;\nuniform vec4 color;\nuniform float alpha;\n#include?COLOR_FILTER \"parts/ColorFilter_ps_uniform.glsl\";\nvoid main() {\n	vec4 a = vec4(color.r, color.g, color.b, color.a);\n	a.w = alpha;\n	gl_FragColor = a;\n	#include?COLOR_FILTER \"parts/ColorFilter_ps_logic.glsl\";\n}";
			Shader.preCompile(0,0x02,vs,ps,null);
			vs="attribute vec4 position;\nattribute vec3 a_color;\nuniform mat4 mmat;\nuniform mat4 u_mmat2;\nuniform vec2 size;\nvarying vec3 color;\nvoid main(){\n  vec4 pos=mmat*u_mmat2*position;\n  gl_Position =vec4((pos.x/size.x-0.5)*2.0,(0.5-pos.y/size.y)*2.0,pos.z,1.0);\n  color=a_color;\n}";
			ps="precision mediump float;\n//precision mediump float;\nvarying vec3 color;\nuniform float alpha;\nvoid main(){\n	//vec4 a=vec4(color.r, color.g, color.b, 1);\n	//a.a*=alpha;\n    gl_FragColor=vec4(color.r, color.g, color.b, alpha);\n}";
			Shader.preCompile(0,0x04,vs,ps,null);
		}

		return Shader2D;
	})()


	//此类可以减少代码
	//class laya.webgl.shapes.BasePoly
	var BasePoly=(function(){
		function BasePoly(x,y,width,height,edges,color,borderWidth,borderColor,round){
			//this.x=NaN;
			//this.y=NaN;
			//this.r=NaN;
			//this.width=NaN;
			//this.height=NaN;
			//this.edges=NaN;
			this.r0=0
			//this.color=0;
			//this.borderColor=NaN;
			//this.borderWidth=NaN;
			//this.round=0;
			this.fill=true;
			this.r1=Math.PI / 2;
			(round===void 0)&& (round=0);
			this.x=x;
			this.y=y;
			this.width=width;
			this.height=height;
			this.edges=edges;
			this.color=color;
			this.borderWidth=borderWidth;
			this.borderColor=borderColor;
		}

		__class(BasePoly,'laya.webgl.shapes.BasePoly');
		var __proto=BasePoly.prototype;
		Laya.imps(__proto,{"laya.webgl.shapes.IShape":true})
		__proto.getData=function(ib,vb,start){
			var indices=[];
			var verts=[];
			this.circle(verts,indices,start);
			if (this.fill){
				(this.borderWidth > 0)&& this.createLoopLine(verts,indices,this.borderWidth,start+verts.length / 5);
				ib.append(new Uint16Array(indices));
				vb.append(new Float32Array(verts));
			}
			else{
				var outV=[];
				var outI=[];
				this.createLoopLine(verts,indices,this.borderWidth,start,outV,outI);
				ib.append(new Uint16Array(outI));
				vb.append(new Float32Array(outV));
			}
		}

		__proto.circle=function(outVert,outIndex,start){
			var x=this.x,y=this.y,edges=this.edges,seg=(Math.PI *2)/ edges;
			var w=this.width,h=this.height,color=this.color;
			var r=((color >> 16)& 0x0000ff)/ 255,g=((color >> 8)& 0xff)/ 255,b=(color & 0x0000ff)/ 255;
			outVert.push(x,y,r,g,b);
			for (var i=0;i < edges;i++){
				outVert.push(x+Math.sin(seg *i)*w,y+Math.cos(seg *i)*h);
				outVert.push(r,g,b);
			}
			for (i=0;i < edges;i++){
				outIndex.push(start,start+i+1,start+i+2);
			}
			outIndex[outIndex.length-1]=start+1;
		}

		__proto.sector=function(outVert,outIndex,start){
			var x=this.x,y=this.y,edges=this.edges,seg=(this.r1-this.r0)/ edges;
			var w=this.width,h=this.height,color=this.color;
			var r=((color >> 16)& 0x0000ff)/ 255,g=((color >> 8)& 0xff)/ 255,b=(color & 0x0000ff)/ 255;
			outVert.push(x,y,r,g,b);
			for (var i=0;i < edges+1;i++){
				outVert.push(x+Math.sin(seg *i+this.r0)*w,y+Math.cos(seg *i+this.r0)*h);
				outVert.push(r,g,b);
			}
			for (i=0;i < edges;i++){
				outIndex.push(start,start+i+1,start+i+2);
			}
		}

		//outIndex[outIndex.length-1]=start+1;
		__proto.createFanLine=function(p,indices,lineWidth,len,outVertex,outIndex){
			var points=p.concat();
			var result=outVertex ? outVertex :p;
			var color=this.borderColor;
			var r=((color >> 16)& 0x0000ff)/ 255,g=((color >> 8)& 0xff)/ 255,b=(color & 0x0000ff)/ 255;
			var firstPoint=[points[0],points[1]];
			var lastPoint=[points[points.length-5],points[points.length-4]];
			var midPointX=lastPoint[0]+(firstPoint[0]-lastPoint[0])*0.5;
			var midPointY=lastPoint[1]+(firstPoint[1]-lastPoint[1])*0.5;
			points.unshift(midPointX,midPointY,0,0,0);
			points.push(midPointX,midPointY,0,0,0);
			var length=points.length / 5;
			var iStart=len,w=lineWidth / 2;
			var px,py,p1x,p1y,p2x,p2y,p3x,p3y;
			var perpx,perpy,perp2x,perp2y,perp3x,perp3y;
			var a1,b1,c1,a2,b2,c2;
			var denom,pdist,dist;
			p1x=points[0];
			p1y=points[1];
			p2x=points[5];
			p2y=points[6];
			perpx=-(p1y-p2y);
			perpy=p1x-p2x;
			dist=Math.sqrt(perpx *perpx+perpy *perpy);
			perpx=perpx / dist *w;
			perpy=perpy / dist *w;
			result.push(p1x-perpx,p1y-perpy,r,g,b,p1x+perpx,p1y+perpy,r,g,b);
			for (var i=1;i < length-1;i++){
				p1x=points[(i-1)*5];
				p1y=points[(i-1)*5+1];
				p2x=points[(i)*5];
				p2y=points[(i)*5+1];
				p3x=points[(i+1)*5];
				p3y=points[(i+1)*5+1];
				perpx=-(p1y-p2y);
				perpy=p1x-p2x;
				dist=Math.sqrt(perpx *perpx+perpy *perpy);
				perpx=perpx / dist *w;
				perpy=perpy / dist *w;
				perp2x=-(p2y-p3y);
				perp2y=p2x-p3x;
				dist=Math.sqrt(perp2x *perp2x+perp2y *perp2y);
				perp2x=perp2x / dist *w;
				perp2y=perp2y / dist *w;
				a1=(-perpy+p1y)-(-perpy+p2y);
				b1=(-perpx+p2x)-(-perpx+p1x);
				c1=(-perpx+p1x)*(-perpy+p2y)-(-perpx+p2x)*(-perpy+p1y);
				a2=(-perp2y+p3y)-(-perp2y+p2y);
				b2=(-perp2x+p2x)-(-perp2x+p3x);
				c2=(-perp2x+p3x)*(-perp2y+p2y)-(-perp2x+p2x)*(-perp2y+p3y);
				denom=a1 *b2-a2 *b1;
				if (Math.abs(denom)< 0.1){
					denom+=10.1;
					result.push(p2x-perpx,p2y-perpy,r,g,b,p2x+perpx,p2y+perpy,r,g,b);
					continue ;
				}
				px=(b1 *c2-b2 *c1)/ denom;
				py=(a2 *c1-a1 *c2)/ denom;
				pdist=(px-p2x)*(px-p2x)+(py-p2y)+(py-p2y);
				result.push(px,py,r,g,b,p2x-(px-p2x),p2y-(py-p2y),r,g,b);
			}
			indices=outIndex ? outIndex :indices;
			var groupLen=this.edges+3;
			for (i=1;i < groupLen;i++){
				indices.push(iStart+(i-1)*2,iStart+(i-1)*2+1,iStart+i *2+1,iStart+i *2+1,iStart+i *2,iStart+(i-1)*2);
			}
			indices.push(iStart+(i-1)*2,iStart+(i-1)*2+1,iStart+1,iStart+1,iStart,iStart+(i-1)*2);
			return result;
		}

		//用于画线
		__proto.createLine2=function(p,indices,lineWidth,len,outVertex,indexCount){
			var points=p.concat();
			var result=outVertex;
			var color=this.borderColor;
			var r=((color >> 16)& 0x0000ff)/ 255,g=((color >> 8)& 0xff)/ 255,b=(color & 0x0000ff)/ 255;
			var length=points.length / 2;
			var iStart=len,w=lineWidth / 2;
			var px,py,p1x,p1y,p2x,p2y,p3x,p3y;
			var perpx,perpy,perp2x,perp2y,perp3x,perp3y;
			var a1,b1,c1,a2,b2,c2;
			var denom,pdist,dist;
			p1x=points[0];
			p1y=points[1];
			p2x=points[2];
			p2y=points[3];
			perpx=-(p1y-p2y);
			perpy=p1x-p2x;
			dist=Math.sqrt(perpx *perpx+perpy *perpy);
			perpx=perpx / dist *w;
			perpy=perpy / dist *w;
			result.push(p1x-perpx+this.x,p1y-perpy+this.y,r,g,b,p1x+perpx+this.x,p1y+perpy+this.y,r,g,b);
			for (var i=1;i < length-1;i++){
				p1x=points[(i-1)*2];
				p1y=points[(i-1)*2+1];
				p2x=points[(i)*2];
				p2y=points[(i)*2+1];
				p3x=points[(i+1)*2];
				p3y=points[(i+1)*2+1];
				perpx=-(p1y-p2y);
				perpy=p1x-p2x;
				dist=Math.sqrt(perpx *perpx+perpy *perpy);
				perpx=perpx / dist *w;
				perpy=perpy / dist *w;
				perp2x=-(p2y-p3y);
				perp2y=p2x-p3x;
				dist=Math.sqrt(perp2x *perp2x+perp2y *perp2y);
				perp2x=perp2x / dist *w;
				perp2y=perp2y / dist *w;
				a1=(-perpy+p1y)-(-perpy+p2y);
				b1=(-perpx+p2x)-(-perpx+p1x);
				c1=(-perpx+p1x)*(-perpy+p2y)-(-perpx+p2x)*(-perpy+p1y);
				a2=(-perp2y+p3y)-(-perp2y+p2y);
				b2=(-perp2x+p2x)-(-perp2x+p3x);
				c2=(-perp2x+p3x)*(-perp2y+p2y)-(-perp2x+p2x)*(-perp2y+p3y);
				denom=a1 *b2-a2 *b1;
				if (Math.abs(denom)< 0.1){
					denom+=10.1;
					result.push(p2x-perpx+this.x,p2y-perpy+this.y,r,g,b,p2x+perpx+this.x,p2y+perpy+this.y,r,g,b);
					continue ;
				}
				px=(b1 *c2-b2 *c1)/ denom;
				py=(a2 *c1-a1 *c2)/ denom;
				pdist=(px-p2x)*(px-p2x)+(py-p2y)+(py-p2y);
				result.push(px+this.x,py+this.y,r,g,b,p2x-(px-p2x)+this.x,p2y-(py-p2y)+this.y,r,g,b);
			}
			p1x=points[points.length-4];
			p1y=points[points.length-3];
			p2x=points[points.length-2];
			p2y=points[points.length-1];
			perpx=-(p1y-p2y);
			perpy=p1x-p2x;
			dist=Math.sqrt(perpx *perpx+perpy *perpy);
			perpx=perpx / dist *w;
			perpy=perpy / dist *w;
			result.push(p2x-perpx+this.x,p2y-perpy+this.y,r,g,b,p2x+perpx+this.x,p2y+perpy+this.y,r,g,b);
			var groupLen=indexCount;
			for (i=1;i < groupLen;i++){
				indices.push(iStart+(i-1)*2,iStart+(i-1)*2+1,iStart+i *2+1,iStart+i *2+1,iStart+i *2,iStart+(i-1)*2);
			}
			return result;
		}

		//用于比如 扇形 不带两直线
		__proto.createLine=function(p,indices,lineWidth,len){
			var points=p.concat();
			var result=p;
			var color=this.borderColor;
			var r=((color >> 16)& 0x0000ff)/ 255,g=((color >> 8)& 0xff)/ 255,b=(color & 0x0000ff)/ 255;
			points.splice(0,5);
			var length=points.length / 5;
			var iStart=len,w=lineWidth / 2;
			var px,py,p1x,p1y,p2x,p2y,p3x,p3y;
			var perpx,perpy,perp2x,perp2y,perp3x,perp3y;
			var a1,b1,c1,a2,b2,c2;
			var denom,pdist,dist;
			p1x=points[0];
			p1y=points[1];
			p2x=points[5];
			p2y=points[6];
			perpx=-(p1y-p2y);
			perpy=p1x-p2x;
			dist=Math.sqrt(perpx *perpx+perpy *perpy);
			perpx=perpx / dist *w;
			perpy=perpy / dist *w;
			result.push(p1x-perpx,p1y-perpy,r,g,b,p1x+perpx,p1y+perpy,r,g,b);
			for (var i=1;i < length-1;i++){
				p1x=points[(i-1)*5];
				p1y=points[(i-1)*5+1];
				p2x=points[(i)*5];
				p2y=points[(i)*5+1];
				p3x=points[(i+1)*5];
				p3y=points[(i+1)*5+1];
				perpx=-(p1y-p2y);
				perpy=p1x-p2x;
				dist=Math.sqrt(perpx *perpx+perpy *perpy);
				perpx=perpx / dist *w;
				perpy=perpy / dist *w;
				perp2x=-(p2y-p3y);
				perp2y=p2x-p3x;
				dist=Math.sqrt(perp2x *perp2x+perp2y *perp2y);
				perp2x=perp2x / dist *w;
				perp2y=perp2y / dist *w;
				a1=(-perpy+p1y)-(-perpy+p2y);
				b1=(-perpx+p2x)-(-perpx+p1x);
				c1=(-perpx+p1x)*(-perpy+p2y)-(-perpx+p2x)*(-perpy+p1y);
				a2=(-perp2y+p3y)-(-perp2y+p2y);
				b2=(-perp2x+p2x)-(-perp2x+p3x);
				c2=(-perp2x+p3x)*(-perp2y+p2y)-(-perp2x+p2x)*(-perp2y+p3y);
				denom=a1 *b2-a2 *b1;
				if (Math.abs(denom)< 0.1){
					denom+=10.1;
					result.push(p2x-perpx,p2y-perpy,r,g,b,p2x+perpx,p2y+perpy,r,g,b);
					continue ;
				}
				px=(b1 *c2-b2 *c1)/ denom;
				py=(a2 *c1-a1 *c2)/ denom;
				pdist=(px-p2x)*(px-p2x)+(py-p2y)+(py-p2y);
				result.push(px,py,r,g,b,p2x-(px-p2x),p2y-(py-p2y),r,g,b);
			}
			p1x=points[points.length-10];
			p1y=points[points.length-9];
			p2x=points[points.length-5];
			p2y=points[points.length-4];
			perpx=-(p1y-p2y);
			perpy=p1x-p2x;
			dist=Math.sqrt(perpx *perpx+perpy *perpy);
			perpx=perpx / dist *w;
			perpy=perpy / dist *w;
			result.push(p2x-perpx,p2y-perpy,r,g,b,p2x+perpx,p2y+perpy,r,g,b);
			var groupLen=this.edges+1;
			for (i=1;i < groupLen;i++){
				indices.push(iStart+(i-1)*2,iStart+(i-1)*2+1,iStart+i *2+1,iStart+i *2+1,iStart+i *2,iStart+(i-1)*2);
			}
			return result;
		}

		//闭合路径
		__proto.createLoopLine=function(p,indices,lineWidth,len,outVertex,outIndex){
			var points=p.concat();
			var result=outVertex ? outVertex :p;
			var color=this.borderColor;
			var r=((color >> 16)& 0x0000ff)/ 255,g=((color >> 8)& 0xff)/ 255,b=(color & 0x0000ff)/ 255;
			points.splice(0,5);
			var firstPoint=[points[0],points[1]];
			var lastPoint=[points[points.length-5],points[points.length-4]];
			var midPointX=lastPoint[0]+(firstPoint[0]-lastPoint[0])*0.5;
			var midPointY=lastPoint[1]+(firstPoint[1]-lastPoint[1])*0.5;
			points.unshift(midPointX,midPointY,0,0,0);
			points.push(midPointX,midPointY,0,0,0);
			var length=points.length / 5;
			var iStart=len,w=lineWidth / 2;
			var px,py,p1x,p1y,p2x,p2y,p3x,p3y;
			var perpx,perpy,perp2x,perp2y,perp3x,perp3y;
			var a1,b1,c1,a2,b2,c2;
			var denom,pdist,dist;
			p1x=points[0];
			p1y=points[1];
			p2x=points[5];
			p2y=points[6];
			perpx=-(p1y-p2y);
			perpy=p1x-p2x;
			dist=Math.sqrt(perpx *perpx+perpy *perpy);
			perpx=perpx / dist *w;
			perpy=perpy / dist *w;
			result.push(p1x-perpx,p1y-perpy,r,g,b,p1x+perpx,p1y+perpy,r,g,b);
			for (var i=1;i < length-1;i++){
				p1x=points[(i-1)*5];
				p1y=points[(i-1)*5+1];
				p2x=points[(i)*5];
				p2y=points[(i)*5+1];
				p3x=points[(i+1)*5];
				p3y=points[(i+1)*5+1];
				perpx=-(p1y-p2y);
				perpy=p1x-p2x;
				dist=Math.sqrt(perpx *perpx+perpy *perpy);
				perpx=perpx / dist *w;
				perpy=perpy / dist *w;
				perp2x=-(p2y-p3y);
				perp2y=p2x-p3x;
				dist=Math.sqrt(perp2x *perp2x+perp2y *perp2y);
				perp2x=perp2x / dist *w;
				perp2y=perp2y / dist *w;
				a1=(-perpy+p1y)-(-perpy+p2y);
				b1=(-perpx+p2x)-(-perpx+p1x);
				c1=(-perpx+p1x)*(-perpy+p2y)-(-perpx+p2x)*(-perpy+p1y);
				a2=(-perp2y+p3y)-(-perp2y+p2y);
				b2=(-perp2x+p2x)-(-perp2x+p3x);
				c2=(-perp2x+p3x)*(-perp2y+p2y)-(-perp2x+p2x)*(-perp2y+p3y);
				denom=a1 *b2-a2 *b1;
				if (Math.abs(denom)< 0.1){
					denom+=10.1;
					result.push(p2x-perpx,p2y-perpy,r,g,b,p2x+perpx,p2y+perpy,r,g,b);
					continue ;
				}
				px=(b1 *c2-b2 *c1)/ denom;
				py=(a2 *c1-a1 *c2)/ denom;
				pdist=(px-p2x)*(px-p2x)+(py-p2y)+(py-p2y);
				result.push(px,py,r,g,b,p2x-(px-p2x),p2y-(py-p2y),r,g,b);
			}
			if (outIndex){
				indices=outIndex;
			};
			var groupLen=this.edges+1;
			for (i=1;i < groupLen;i++){
				indices.push(iStart+(i-1)*2,iStart+(i-1)*2+1,iStart+i *2+1,iStart+i *2+1,iStart+i *2,iStart+(i-1)*2);
			}
			indices.push(iStart+(i-1)*2,iStart+(i-1)*2+1,iStart+1,iStart+1,iStart,iStart+(i-1)*2);
			return result;
		}

		return BasePoly;
	})()


	/**
	*...
	*@author River
	*/
	//class laya.webgl.submit.Submit
	var Submit=(function(){
		function Submit(renderType){
			//this._renderType=0;
			//this._selfVb=null;
			//this._ib=null;
			//this._blendFn=null;
			//this._vb=null;
			//this._startIdx=0;
			//this._numEle=0;
			//this._submitID=NaN;
			//this._mergID=0;
			//this.shaderValue=null;
			(renderType===void 0)&& (renderType=1);
			this._renderType=renderType;
		}

		__class(Submit,'laya.webgl.submit.Submit');
		var __proto=Submit.prototype;
		Laya.imps(__proto,{"laya.webgl.submit.ISubmit":true})
		__proto.releaseRender=function(){
			var cache=Submit._cache;
			cache[cache._length++]=this;
			this.shaderValue.release();
			this._submitID=-1;
			this._vb=null;
		}

		__proto.getRenderType=function(){
			return this._renderType;
		}

		__proto.renderSubmit=function(){
			if (this._numEle===0)return 1;
			if (this.shaderValue.textureHost){
				if (!this.shaderValue.textureHost.bitmap||!this.shaderValue.textureHost.source)
					return 1;
				this.shaderValue.texture=this.shaderValue.textureHost.source;
			}
			this._ib.upload_bind();
			this._vb.upload_bind();
			this.shaderValue.upload();
			var gl=WebGL.mainContext;
			if (Submit.activeBlendFunction!==this._blendFn){
				gl.enable(0x0BE2);
				this._blendFn(gl);
				Submit.activeBlendFunction=this._blendFn;
			}
			Stat.drawCall++;
			Stat.trianglesFaces+=this._numEle / 3;
			gl.drawElements(0x0004,this._numEle,0x1403,this._startIdx);
			return 1;
		}

		Submit.__init__=function(){
			var s=Submit.RENDERBASE=new Submit(-1);
			s.shaderValue=new Value2D(0,0);
			s.shaderValue.ALPHA=-1234;
		}

		Submit.create=function(context,submitID,mergID,ib,vb,pos,sv){
			var o=Submit._cache._length?Submit._cache[--Submit._cache._length]:new Submit();
			if (vb==null){
				vb=o._selfVb || (o._selfVb=new Buffer(0x8892));
				vb.clear();
				pos=0;
			}
			o._ib=ib;
			o._vb=vb;
			o._submitID=submitID;
			o._mergID=mergID;
			o._startIdx=pos *CONST3D2D.BYTES_PIDX;
			o._numEle=0;
			var blendType=context._nBlendType;
			o._blendFn=context._targets?BlendMode.targetFns[blendType]:BlendMode.fns[blendType];
			o.shaderValue=sv;
			o.shaderValue.setValue(context._shader2D);
			var filters=context._shader2D.filters;
			filters && o.shaderValue.setFilters(filters);
			return o;
		}

		Submit.createShape=function(ctx,ib,vb,numEle,offset,sv){
			var o=(!Submit._cache._length)?(new Submit()):Submit._cache[--Submit._cache._length];
			o._ib=ib;
			o._vb=vb;
			o._numEle=numEle;
			o._startIdx=offset;
			o.shaderValue=sv;
			o.shaderValue.setValue(ctx._shader2D);
			var blendType=ctx._nBlendType;
			o._blendFn=ctx._targets?BlendMode.targetFns[blendType]:BlendMode.fns[blendType];
			return o;
		}

		Submit.TYPE_2D=1;
		Submit.TYPE_CANVAS=3;
		Submit.TYPE_CMDSETRT=4;
		Submit.TYPE_CUSTOM=5;
		Submit.TYPE_BLURRT=6;
		Submit.TYPE_CMDDESTORYPRERT=7;
		Submit.TYPE_DISABLESTENCIL=8;
		Submit.TYPE_OTHERIBVB=9;
		Submit.TYPE_PRIMITIVE=10;
		Submit.TYPE_RT=11;
		Submit.TYPE_BLUR_RT=12;
		Submit.TYPE_TARGET=13;
		Submit.TYPE_CHANGE_VALUE=14;
		Submit.TYPE_SHAPE=15;
		Submit.RENDERBASE=null
		Submit.activeBlendFunction=null;
		Submit._cache=(Submit._cache=[],Submit._cache._length=0,Submit._cache);
		return Submit;
	})()


	//class laya.webgl.submit.SubmitCMD
	var SubmitCMD=(function(){
		function SubmitCMD(){
			this.fun=null;
			this.args=null;
		}

		__class(SubmitCMD,'laya.webgl.submit.SubmitCMD');
		var __proto=SubmitCMD.prototype;
		Laya.imps(__proto,{"laya.webgl.submit.ISubmit":true})
		//debugger;
		__proto.renderSubmit=function(){
			this.fun.apply(null,this.args);
			return 1;
		}

		__proto.getRenderType=function(){
			return 0;
		}

		__proto.releaseRender=function(){
			var cache=SubmitCMD._cache;
			cache[cache._length++]=this;
		}

		SubmitCMD.create=function(args,fun){
			var o=SubmitCMD._cache._length?SubmitCMD._cache[--SubmitCMD._cache._length]:new SubmitCMD();
			o.fun=fun;
			o.args=args;
			return o;
		}

		SubmitCMD._cache=(SubmitCMD._cache=[],SubmitCMD._cache._length=0,SubmitCMD._cache);
		return SubmitCMD;
	})()


	//class laya.webgl.submit.SubmitCMDScope
	var SubmitCMDScope=(function(){
		function SubmitCMDScope(){
			this.variables={};
		}

		__class(SubmitCMDScope,'laya.webgl.submit.SubmitCMDScope');
		var __proto=SubmitCMDScope.prototype;
		__proto.getValue=function(name){
			return this.variables[name];
		}

		__proto.addValue=function(name,value){
			return this.variables[name]=value;
		}

		__proto.setValue=function(name,value){
			if(this.variables.hasOwnProperty(name)){
				return this.variables[name]=value;
			}
			return null;
		}

		__proto.clear=function(){
			for(var key in this.variables){
				delete this.variables[key];
			}
		}

		__proto.recycle=function(){
			this.clear();
			SubmitCMDScope.POOL.push(this);
		}

		SubmitCMDScope.create=function(){
			var scope=SubmitCMDScope.POOL.pop();
			scope||(scope=new SubmitCMDScope());
			return scope;
		}

		SubmitCMDScope.POOL=[];
		return SubmitCMDScope;
	})()


	/**
	*...
	*@author wk
	*/
	//class laya.webgl.submit.SubmitOtherIBVB
	var SubmitOtherIBVB=(function(){
		function SubmitOtherIBVB(){
			this.offset=0;
			//this._vb=null;
			//this._ib=null;
			//this._blendFn=null;
			//this._mat=null;
			//this._shader=null;
			//this._shaderValue=null;
			//this._numEle=0;
			this.startIndex=0;
			;
			this._mat=Matrix.create();
		}

		__class(SubmitOtherIBVB,'laya.webgl.submit.SubmitOtherIBVB');
		var __proto=SubmitOtherIBVB.prototype;
		Laya.imps(__proto,{"laya.webgl.submit.ISubmit":true})
		__proto.releaseRender=function(){
			var cache=SubmitOtherIBVB._cache;
			cache[cache._length++]=this;
		}

		__proto.getRenderType=function(){
			return 9;
		}

		__proto.renderSubmit=function(){
			if (this._shaderValue.textureHost){
				var source=this._shaderValue.textureHost.source;
				if (!source)return 1;
				this._shaderValue.texture=source;
			}
			this._ib.upload_bind();
			this._vb.upload_bind();
			var w=RenderState2D.worldMatrix4;
			var wmat=Matrix.TEMP;
			Matrix.mulPre(this._mat,w[0],w[1],w[4],w[5],w[12],w[13],wmat);
			var tmp=RenderState2D.worldMatrix4=SubmitOtherIBVB.tempMatrix4;
			tmp[0]=wmat.a;
			tmp[1]=wmat.b;
			tmp[4]=wmat.c;
			tmp[5]=wmat.d;
			tmp[12]=wmat.tx;
			tmp[13]=wmat.ty;
			this._shader._offset=this.offset;
			this._shaderValue.refresh();
			this._shader.upload(this._shaderValue);
			this._shader._offset=0;
			var gl=WebGL.mainContext;
			if (Submit.activeBlendFunction!==this._blendFn){
				gl.enable(0x0BE2);
				this._blendFn(gl);
				Submit.activeBlendFunction=this._blendFn;
			}
			Stat.drawCall++;
			Stat.trianglesFaces+=this._numEle/3;
			gl.drawElements(0x0004,this._numEle,0x1403,this.startIndex);
			RenderState2D.worldMatrix4=w;
			Shader.activeShader=null;
			return 1;
		}

		SubmitOtherIBVB.create=function(context,vb,ib,numElement,shader,shaderValue,startIndex,offset){
			var o=(!SubmitOtherIBVB._cache._length)?(new SubmitOtherIBVB()):SubmitOtherIBVB._cache[--SubmitOtherIBVB._cache._length];
			o._ib=ib;
			o._vb=vb;
			o._numEle=numElement;
			o._shader=shader;
			o._shaderValue=shaderValue;
			var blendType=context._nBlendType;
			o._blendFn=context._targets?BlendMode.targetFns[blendType]:BlendMode.fns[blendType];
			o.startIndex=startIndex;
			o.offset=offset;
			return o;
		}

		SubmitOtherIBVB._cache=(SubmitOtherIBVB._cache=[],SubmitOtherIBVB._cache._length=0,SubmitOtherIBVB._cache);
		SubmitOtherIBVB.tempMatrix4=[
		1,0,0,0,
		0,1,0,0,
		0,0,1,0,
		0,0,0,1,];
		return SubmitOtherIBVB;
	})()


	//class laya.webgl.submit.SubmitScissor
	var SubmitScissor=(function(){
		function SubmitScissor(){
			this.submitIndex=0;
			this.submitLength=0;
			this.context=null;
			this.clipRect=new Rectangle();
			this.screenRect=new Rectangle();
		}

		__class(SubmitScissor,'laya.webgl.submit.SubmitScissor');
		var __proto=SubmitScissor.prototype;
		Laya.imps(__proto,{"laya.webgl.submit.ISubmit":true})
		__proto._scissor=function(x,y,w,h){
			var m=RenderState2D.worldMatrix4;
			var a=m[0],d=m[5],tx=m[12],ty=m[13];
			x=x *a+tx;
			y=y *d+ty;
			w *=a;
			h *=d;
			if (w < 1 || h < 1){
				return false;
			};
			var r=x+w;
			var b=y+h;
			x < 0 && (x=0,w=r-x);
			y < 0 && (y=0,h=b-y);
			var screen=RenderState2D.worldClipRect;
			x=Math.max(x,screen.x);
			y=Math.max(y,screen.y);
			w=Math.min(r,screen.right)-x;
			h=Math.min(b,screen.bottom)-y;
			if (w < 1 || h < 1){
				return false;
			};
			var worldScissorTest=RenderState2D.worldScissorTest;
			this.screenRect.copyFrom(screen);
			screen.x=x;
			screen.y=y;
			screen.width=w;
			screen.height=h;
			RenderState2D.worldScissorTest=true;
			y=RenderState2D.height-y-h;
			WebGL.mainContext.scissor(x,y,w,h);
			WebGL.mainContext.enable(0x0C11);
			this.context.submitElement(this.submitIndex,this.submitIndex+this.submitLength);
			if (worldScissorTest){
				y=RenderState2D.height-this.screenRect.y-this.screenRect.height;
				WebGL.mainContext.scissor(this.screenRect.x,y,this.screenRect.width,this.screenRect.height);
				WebGL.mainContext.enable(0x0C11);
			}
			else{
				WebGL.mainContext.disable(0x0C11);
				RenderState2D.worldScissorTest=false;
			}
			screen.copyFrom(this.screenRect);
			return true;
		}

		__proto._scissorWithTagart=function(x,y,w,h){
			if (w < 1 || h < 1){
				return false;
			};
			var r=x+w;
			var b=y+h;
			x < 0 && (x=0,w=r-x);
			y < 0 && (y=0,h=b-y);
			var screen=RenderState2D.worldClipRect;
			x=Math.max(x,screen.x);
			y=Math.max(y,screen.y);
			w=Math.min(r,screen.right)-x;
			h=Math.min(b,screen.bottom)-y;
			if (w < 1 || h < 1){
				return false;
			};
			var worldScissorTest=RenderState2D.worldScissorTest;
			this.screenRect.copyFrom(screen);
			RenderState2D.worldScissorTest=true;
			screen.x=x;
			screen.y=y;
			screen.width=w;
			screen.height=h;
			y=RenderState2D.height-y-h;
			WebGL.mainContext.scissor(x,y,w,h);
			WebGL.mainContext.enable(0x0C11);
			this.context.submitElement(this.submitIndex,this.submitIndex+this.submitLength);
			if (worldScissorTest){
				y=RenderState2D.height-this.screenRect.y-this.screenRect.height;
				WebGL.mainContext.scissor(this.screenRect.x,y,this.screenRect.width,this.screenRect.height);
				WebGL.mainContext.enable(0x0C11);
			}
			else{
				WebGL.mainContext.disable(0x0C11);
				RenderState2D.worldScissorTest=false;
			}
			screen.copyFrom(this.screenRect);
			return true;
		}

		__proto.renderSubmit=function(){
			this.submitLength=Math.min(this.context._submits._length-1,this.submitLength);
			if (this.submitLength < 1 || this.clipRect.width < 1 || this.clipRect.height < 1)
				return this.submitLength+1;
			if (this.context._targets)
				this._scissorWithTagart(this.clipRect.x,this.clipRect.y,this.clipRect.width,this.clipRect.height);
			else this._scissor(this.clipRect.x,this.clipRect.y,this.clipRect.width,this.clipRect.height);
			return this.submitLength+1;
		}

		__proto.getRenderType=function(){
			return 0;
		}

		__proto.releaseRender=function(){
			var cache=SubmitScissor._cache;
			cache[cache._length++]=this;
			this.context=null;
		}

		SubmitScissor.create=function(context){
			var o=SubmitScissor._cache._length?SubmitScissor._cache[--SubmitScissor._cache._length]:new SubmitScissor();
			o.context=context;
			return o;
		}

		SubmitScissor._cache=(SubmitScissor._cache=[],SubmitScissor._cache._length=0,SubmitScissor._cache);
		return SubmitScissor;
	})()


	//class laya.webgl.submit.SubmitStencil
	var SubmitStencil=(function(){
		function SubmitStencil(){
			this.step=0;
			this.level=0;
		}

		__class(SubmitStencil,'laya.webgl.submit.SubmitStencil');
		var __proto=SubmitStencil.prototype;
		Laya.imps(__proto,{"laya.webgl.submit.ISubmit":true})
		__proto.renderSubmit=function(){
			switch(this.step){
				case 1:
					this.do1();
					break ;
				case 2:
					this.do2();
					break ;
				case 3:
					this.do3();
					break ;
				}
			return 1;
		}

		__proto.getRenderType=function(){
			return 0;
		}

		__proto.releaseRender=function(){
			var cache=SubmitStencil._cache;
			cache[cache._length++]=this;
		}

		__proto.do1=function(){
			var gl=WebGL.mainContext;
			gl.enable(0x0B90);
			gl.clear(0x00000400);
			gl.colorMask(false,false,false,false);
			gl.stencilFunc(0x0202,this.level,0xFF);
			gl.stencilOp(0x1E00,0x1E00,0x1E02);
		}

		//gl.stencilOp(WebGLContext.KEEP,WebGLContext.KEEP,WebGLContext.INVERT);//测试通过给模版缓冲 写入值 一开始是0 现在是 0xFF (模版缓冲中不知道是多少位的数据)
		__proto.do2=function(){
			var gl=WebGL.mainContext;
			gl.stencilFunc(0x0202,this.level+1,0xFF);
			gl.colorMask(true,true,true,true);
			gl.stencilOp(0x1E00,0x1E00,0x1E00);
		}

		__proto.do3=function(){
			var gl=WebGL.mainContext;
			gl.clear(0x00000400);
			gl.disable(0x0B90);
		}

		SubmitStencil.create=function(step){
			var o=SubmitStencil._cache._length?SubmitStencil._cache[--SubmitStencil._cache._length]:new SubmitStencil();
			o.step=step;
			return o;
		}

		SubmitStencil._cache=(SubmitStencil._cache=[],SubmitStencil._cache._length=0,SubmitStencil._cache);
		return SubmitStencil;
	})()


	//class laya.webgl.submit.SubmitTarget
	var SubmitTarget=(function(){
		function SubmitTarget(){
			this._renderType=0;
			this._vb=null;
			this._ib=null;
			this._startIdx=0;
			this._numEle=0;
			this.shaderValue=null;
			this.blendType=0;
			this.proName=null;
			this.scope=null;
		}

		__class(SubmitTarget,'laya.webgl.submit.SubmitTarget');
		var __proto=SubmitTarget.prototype;
		Laya.imps(__proto,{"laya.webgl.submit.ISubmit":true})
		__proto.renderSubmit=function(){
			this._ib.upload_bind();
			this._vb.upload_bind();
			var target=this.scope.getValue(this.proName);
			this.shaderValue.texture=target.source;
			this.shaderValue.upload();
			this.blend();
			Stat.drawCall++;
			Stat.trianglesFaces+=this._numEle/3;
			WebGL.mainContext.drawElements(0x0004,this._numEle,0x1403,this._startIdx);
			return 1;
		}

		__proto.blend=function(){
			if (SubmitTarget.activeBlendType!==this.blendType){
				var gl=WebGL.mainContext;
				gl.enable(0x0BE2);
				BlendMode.fns[this.blendType](gl);
				SubmitTarget.activeBlendType=this.blendType;
			}
		}

		__proto.getRenderType=function(){
			return 0;
		}

		__proto.releaseRender=function(){
			var cache=SubmitTarget._cache;
			cache[cache._length++]=this;
		}

		SubmitTarget.create=function(context,ib,vb,pos,sv,proName){
			var o=SubmitTarget._cache._length?SubmitTarget._cache[--SubmitTarget._cache._length]:new SubmitTarget();
			o._ib=ib;
			o._vb=vb;
			o.proName=proName;
			o._startIdx=pos *CONST3D2D.BYTES_PIDX;
			o._numEle=0;
			o.blendType=context._nBlendType;
			o.shaderValue=sv;
			o.shaderValue.setValue(context._shader2D);
			return o;
		}

		SubmitTarget.activeBlendType=-1;
		SubmitTarget._cache=(SubmitTarget._cache=[],SubmitTarget._cache._length=0,SubmitTarget._cache);
		return SubmitTarget;
	})()


	/**
	*...
	*@author ...
	*/
	//class laya.webgl.text.CharValue
	var CharValue=(function(){
		function CharValue(){
			//this.txtID=NaN;
			//this.font=null;
			//this.fillColor=null;
			//this.borderColor=null;
			//this.lineWidth=0;
			//this.size=NaN;
			//this.scaleX=NaN;
			//this.scaleY=NaN;
		}

		__class(CharValue,'laya.webgl.text.CharValue');
		var __proto=CharValue.prototype;
		__proto.value=function(font,fillColor,borderColor,lineWidth,size,scaleX,scaleY){
			this.font=font;
			this.fillColor=fillColor;
			this.borderColor=borderColor;
			this.lineWidth=lineWidth;
			this.size=size;
			this.scaleX=scaleX;
			this.scaleY=scaleY;
			var key=[font,scaleX,scaleY,lineWidth,fillColor,borderColor].join('`');
			this.txtID=CharValue._keymap[key]
			if (!this.txtID){
				this.txtID=(++CharValue._keymapCount)*0.0000001;
				CharValue._keymap[key]=this.txtID;
			}
		}

		CharValue._keymap={};
		CharValue._keymapCount=1;
		return CharValue;
	})()


	/**
	*...
	*@author laya
	*/
	//class laya.webgl.text.DrawText
	var DrawText=(function(){
		function DrawText(){};
		__class(DrawText,'laya.webgl.text.DrawText');
		DrawText.getChar=function(char,id,drawValue){
			return DrawText._wordsMsg[id]=DrawTextChar.createOneChar(char,drawValue);
		}

		DrawText.drawText=function(ctx,txt,words,curMat,font,textAlign,fillColor,borderColor,lineWidth,x,y){
			if (txt && txt.length===0)return;
			if (words && words.length===0)return;
			DrawText._fontTemp || (DrawText._fontTemp=new FontInContext());
			var i,n;
			var rot=curMat.b==0 && curMat.c==0 ? 0 :1;
			var sx=curMat.a,sy=curMat.d;
			(rot!==0)&& (sx=sy=1);
			sx=sy=1;
			var sx2=1,sy2=1;
			var italic=font.hasType("italic");
			if (sx !=1 || sy !=1 || italic >=0)font=font.copyTo(DrawText._fontTemp);
			italic >=0 && font.removeType("italic");
			if (sx !=1 || sy !=1){
				if (sx > sy){
					font.size=font.size *sx;
					sy2=sy / sx;
					}else {
					font.size=font.size *sy;
					sx2=sx / sy;
				}
				font.size=Math.floor(font.size);
			};
			var width=0;
			var chars=DrawText._charsTemp;
			var oneChar;
			var htmlWord;
			var id;
			var size=Math.floor(font.size / 16+0.5)*16;
			var drawValue=DrawText._drawValue;
			drawValue.value(font,fillColor,borderColor,lineWidth,size,sx2,sy2);
			if (words){
				chars.length=words.length;
				for (i=0,n=words.length;i < n;i++){
					htmlWord=words[i];
					id=htmlWord.charNum+drawValue.txtID;
					chars[i]=oneChar=DrawText._wordsMsg[id] || DrawText.getChar(htmlWord.char,id,drawValue);
					oneChar.active();
				}
				}else {
				chars.length=txt.length;
				for (i=0,n=txt.length;i < n;i++){
					id=txt.charCodeAt(i)+drawValue.txtID;
					chars[i]=oneChar=DrawText._wordsMsg[id] || DrawText.getChar(txt.charAt(i),id,drawValue);
					oneChar.active();
					width+=oneChar.width;
				}
			};
			var curMat2=curMat;
			if (sx !=1 || sy !=1 || italic >=0){
				curMat2=WebGLContext2D._tmpMatrix;
				curMat.copy(curMat2);
			}
			if (sx !=1 || sy !=1){
				var tx=curMat2.tx;
				var ty=curMat2.ty;
				curMat2.scale(1 / sx,1 / sy);
				curMat2.tx=tx;
				curMat2.ty=ty;
				x *=sx;
				y *=sy;
			}
			curMat2.tx |=0;
			curMat2.ty |=0;
			switch (textAlign){
				case "center":
					x-=width / 2;
					break ;
				case "right":
					x-=width;
					break ;
				};
			var dx;
			var uv;
			var bdSz;
			var texture;
			if (words){
				for (i=0,n=chars.length;i < n;i++){
					oneChar=chars[i];
					if (!oneChar.isSpace){
						htmlWord=words[i];
						dx=italic >=0 ? (oneChar.height *0.4):0;
						bdSz=oneChar.borderSize;
						texture=oneChar.texture;
						ctx._drawText(texture,x+htmlWord.x *sx-bdSz,y+htmlWord.y *sy-bdSz,
						texture.width,texture.height,curMat2,0,0,dx,0);
					}
				}
				}else {
				for (i=0,n=chars.length;i < n;i++){
					oneChar=chars[i];
					if (!oneChar.isSpace){
						dx=italic >=0 ? (oneChar.height *0.4):0;
						bdSz=oneChar.borderSize;
						texture=oneChar.texture;
						ctx._drawText(texture,x-bdSz,y-bdSz,
						texture.width,texture.height,curMat2,0,0,dx,0);
					}
					x+=oneChar.width;
				}
			}
		}

		DrawText._wordsMsg={};
		DrawText._charsTemp=new Array;
		DrawText._fontTemp=null;
		__static(DrawText,
		['_drawValue',function(){return this._drawValue=new CharValue();}
		]);
		return DrawText;
	})()


	/**
	*...
	*@author ...
	*/
	//class laya.webgl.text.DrawTextChar
	var DrawTextChar=(function(){
		function DrawTextChar(content,drawValue){
			//this.xs=NaN;
			//this.ys=NaN;
			//this.width=0;
			//this.height=0;
			//this.char=null;
			//this.fillColor=null;
			//this.borderColor=null;
			//this.borderSize=0;
			//this.font=null;
			//this.fontSize=0;
			//this.texture=null;
			//this.lineWidth=0;
			//this.UV=null;
			//this.isSpace=false;
			this.char=content;
			this.isSpace=content===' ';
			this.xs=drawValue.scaleX;
			this.ys=drawValue.scaleY;
			this.font=drawValue.font.toString();
			this.fontSize=drawValue.size;
			this.fillColor=drawValue.fillColor;
			this.borderColor=drawValue.borderColor;
			this.lineWidth=drawValue.lineWidth;
			var bIsConchApp=System.isConchApp;
			if (bIsConchApp){
				canvas=ConchTextCanvas;;
				canvas._source=ConchTextCanvas;;
				canvas._source.canvas=ConchTextCanvas;;
			}
			else{
				this.texture=new Texture(new WebGLCharImage(Browser.canvas.source,this));
				(!AtlasManager.enabled)&& (System.addToAtlas)&& (System.addToAtlas(this.texture,true));
			}
		}

		__class(DrawTextChar,'laya.webgl.text.DrawTextChar');
		var __proto=DrawTextChar.prototype;
		//如果没有开启大图合集则也强制加入图集中
		__proto.active=function(){
			this.texture.active();
		}

		DrawTextChar.createOneChar=function(content,drawValue){
			var char=new DrawTextChar(content,drawValue);
			return char;
		}

		return DrawTextChar;
	})()


	/**
	*...
	*@author laya
	*/
	//class laya.webgl.text.FontInContext
	var FontInContext=(function(){
		function FontInContext(font){
			//this._text=null;
			//this._words=null;
			this._index=0;
			this._size=14;
			this.setFont(font || "14px Arial");
		}

		__class(FontInContext,'laya.webgl.text.FontInContext');
		var __proto=FontInContext.prototype;
		__proto.setFont=function(value){
			this._words=value.split(' ');
			for (var i=0,n=this._words.length;i < n;i++){
				if (this._words[i].indexOf('px')> 0){
					this._index=i;
					break ;
				}
			}
			this._size=Laya.__parseInt(this._words[this._index]);
			this._text=null;
		}

		__proto.hasType=function(name){
			for (var i=0,n=this._words.length;i < n;i++)
			if (this._words[i]===name)return i;
			return-1;
		}

		__proto.removeType=function(name){
			for (var i=0,n=this._words.length;i < n;i++)
			if (this._words[i]===name){
				this._words.splice(i,1);
				if (this._index > i)this._index--;
				break ;
			}
			this._text=null;
		}

		__proto.copyTo=function(dec){
			dec._text=this._text;
			dec._size=this._size;
			dec._index=this._index;
			dec._words=this._words.slice();
			return dec;
		}

		__proto.toString=function(){
			return this._text?this._text:(this._text=this._words.join(' '));
		}

		__getset(0,__proto,'size',function(){
			return this._size;
			},function(value){
			this._size=value;
			this._words[this._index]=value+"px";
			this._text=null;
		});

		FontInContext.EMPTY=new FontInContext();
		return FontInContext;
	})()


	/**
	*...
	*@author laya
	*/
	//class laya.webgl.utils.CONST3D2D
	var CONST3D2D=(function(){
		function CONST3D2D(){};
		__class(CONST3D2D,'laya.webgl.utils.CONST3D2D');
		CONST3D2D.BYTES_PE=window.Float32Array && Float32Array.BYTES_PER_ELEMENT;
		CONST3D2D.BYTES_PIDX=window.Uint16Array && Uint16Array.BYTES_PER_ELEMENT;
		CONST3D2D.defaultMatrix4=[
		1,0,0,0,
		0,1,0,0,
		0,0,1,0,
		0,0,0,1,];
		CONST3D2D.defaultMinusYMatrix4=[
		1,0,0,0,
		0,-1,0,0,
		0,0,1,0,
		0,0,0,1,];
		CONST3D2D.uniformMatrix3=[
		1,0 ,0,0,
		0,1,0,0,
		0,0,1,0];
		CONST3D2D._TMPARRAY=[];
		CONST3D2D._OFFSETX=0;
		CONST3D2D._OFFSETY=0;
		return CONST3D2D;
	})()


	/**
	*...
	*@author laya
	*/
	//class laya.webgl.utils.GlUtils
	var GlUtils=(function(){
		function GlUtils(){};
		__class(GlUtils,'laya.webgl.utils.GlUtils');
		GlUtils.make2DProjection=function(width,height,depth){
			return [
			2.0 / width,0,0,0,
			0,-2.0 / height,0,0,
			0,0,2.0 / depth,0,
			-1,1,0,1,];
		}

		GlUtils.fillIBQuadrangle=function(buffer,count){
			if (count> 65535/4){
				throw Error("IBQuadrangle count:"+count+" must<:"+Math.floor(65535/4));
				return false;
			}
			count=Math.floor(count);
			buffer._resizeBuffer((count+1)*6 *2,false);
			buffer.length=buffer.bufferLength;
			var bufferData=new Uint16Array(buffer.getBuffer());
			var idx=0;
			for (var i=0;i < count;i++){
				bufferData[idx++]=i *4;
				bufferData[idx++]=i *4+2;
				bufferData[idx++]=i *4+1;
				bufferData[idx++]=i *4;
				bufferData[idx++]=i *4+3;
				bufferData[idx++]=i *4+2;
			}
			buffer.setNeedUpload();
			buffer.upload();
			return true;
		}

		GlUtils.expandIBQuadrangle=function(buffer,count){
			buffer.bufferLength >=(count *6 *2)|| GlUtils.fillIBQuadrangle(buffer,count);
		}

		GlUtils.mathCeilPowerOfTwo=function(value){
			value--;
			value |=value >> 1;
			value |=value >> 2;
			value |=value >> 4;
			value |=value >> 8;
			value |=value >> 16;
			value++;
			return value;
		}

		GlUtils.fillQuadrangleImgVb=function(vb,x,y,point4,uv,m,_x,_y){
			'use strict';
			x |=0;y |=0;_x |=0;_y |=0;
			var vpos=(vb._length>>2)+16;
			vb.length=(vpos << 2);
			var vbdata=vb.getFloat32Array();
			vpos-=16;
			vbdata[vpos+2]=uv[0];
			vbdata[vpos+3]=uv[1];
			vbdata[vpos+6]=uv[2];
			vbdata[vpos+7]=uv[3];
			vbdata[vpos+10]=uv[4];
			vbdata[vpos+11]=uv[5];
			vbdata[vpos+14]=uv[6];
			vbdata[vpos+15]=uv[7];
			var a=m.a,b=m.b,c=m.c,d=m.d;
			if (a!==1 || b!==0 || c!==0 || d!==1){
				m.bTransform=true;
				var tx=m.tx+_x,ty=m.ty+_y;
				vbdata[vpos]=(point4[0]+x)*a+(point4[1]+y)*c+tx;
				vbdata[vpos+1]=(point4[0]+x)*b+(point4[1]+y)*d+ty;
				vbdata[vpos+4]=(point4[2]+x)*a+(point4[3]+y)*c+tx;
				vbdata[vpos+5]=(point4[2]+x)*b+(point4[3]+y)*d+ty;
				vbdata[vpos+8]=(point4[4]+x)*a+(point4[5]+y)*c+tx;
				vbdata[vpos+9]=(point4[4]+x)*b+(point4[5]+y)*d+ty;
				vbdata[vpos+12]=(point4[6]+x)*a+(point4[7]+y)*c+tx;
				vbdata[vpos+13]=(point4[6]+x)*b+(point4[7]+y)*d+ty;
			}
			else{
				m.bTransform=false;
				x+=m.tx+_x;
				y+=m.ty+_y;
				vbdata[vpos]=x+point4[0];
				vbdata[vpos+1]=y+point4[1];
				vbdata[vpos+4]=x+point4[2];
				vbdata[vpos+5]=y+point4[3];
				vbdata[vpos+8]=x+point4[4];
				vbdata[vpos+9]=y+point4[5];
				vbdata[vpos+12]=x+point4[6];
				vbdata[vpos+13]=y+point4[7];
			}
			vb._upload=true;
			return true;
		}

		GlUtils.fillTranglesVB=function(vb,x,y,points,m,_x,_y){
			'use strict';
			x |=0;y |=0;_x |=0;_y |=0;
			var vpos=(vb._length >> 2)+points.length;
			vb.length=(vpos << 2);
			var vbdata=vb.getFloat32Array();
			vpos-=points.length;
			var len=points.length;
			var a=m.a,b=m.b,c=m.c,d=m.d;
			for (var i=0;i < len;i+=4){
				vbdata[vpos+i+2]=points[i+2];
				vbdata[vpos+i+3]=points[i+3];
				if (a!==1 || b!==0 || c!==0 || d!==1){
					m.bTransform=true;
					var tx=m.tx+_x,ty=m.ty+_y;
					vbdata[vpos+i]=(points[i]+x)*a+(points[i+1]+y)*c+tx;
					vbdata[vpos+i+1]=(points[i]+x)*b+(points[i+1]+y)*d+ty;
				}
				else{
					m.bTransform=false;
					x+=m.tx+_x;
					y+=m.ty+_y;
					vbdata[vpos+i]=x+points[i];
					vbdata[vpos+i+1]=y+points[i+1];
				}
			}
			vb._upload=true;
			return true;
		}

		GlUtils.fillRectImgVb=function(vb,clip,x,y,width,height,uv,m,_x,_y,dx,dy){
			'use strict';
			var mType=1;
			var toBx,toBy,toEx,toEy;
			var cBx,cBy,cEx,cEy;
			var w0,h0,tx,ty;
			var a=m.a,b=m.b,c=m.c,d=m.d;
			var useClip=false;
			if (a!==1 || b!==0 || c!==0 || d!==1){
				m.bTransform=true;
				if (b===0 && c===0){
					mType=useClip?30:23;
					w0=width+x,h0=height+y;
					tx=m.tx+_x,ty=m.ty+_y;
					toBx=a *x+tx;
					toEx=a *w0+tx;
					toBy=d *y+ty;
					toEy=d *h0+ty;
				}
			}
			else{
				x |=0;y |=0;_x |=0;_y |=0;
				mType=useClip?30:23;
				m.bTransform=false;
				toBx=x+m.tx+_x;
				toEx=toBx+width;
				toBy=y+m.ty+_y;
				toEy=toBy+height;
			}
			if (useClip){
				cBx=clip.x,cBy=clip.y,cEx=clip.width+cBx,cEy=clip.height+cBy;
			}
			if (mType!==1 && (toBx >=cEx || toBy >=cEy || toEx <=cBx || toEy <=cBy))
				return false;
			var vpos=(vb._length >> 2)+16;
			vb.seLength((vpos << 2));
			var vbdata=vb.getFloat32Array();
			vpos-=16;
			vbdata[vpos+2]=uv[0];
			vbdata[vpos+3]=uv[1];
			vbdata[vpos+6]=uv[2];
			vbdata[vpos+7]=uv[3];
			vbdata[vpos+10]=uv[4];
			vbdata[vpos+11]=uv[5];
			vbdata[vpos+14]=uv[6];
			vbdata[vpos+15]=uv[7];
			switch(mType){
				case 1:
					tx=m.tx+_x,ty=m.ty+_y;
					w0=width+x,h0=height+y;
					var w1=x,h1=y;
					var aw1=a *w1,ch1=c *h1,dh1=d *h1,bw1=b *w1;
					var aw0=a *w0,ch0=c *h0,dh0=d *h0,bw0=b *w0;
					vbdata[vpos]=aw1+ch1+tx;
					vbdata[vpos+1]=dh1+bw1+ty;
					vbdata[vpos+4]=aw0+ch1+tx;
					vbdata[vpos+5]=dh1+bw0+ty;
					vbdata[vpos+8]=aw0+ch0+tx;
					vbdata[vpos+9]=dh0+bw0+ty;
					vbdata[vpos+12]=aw1+ch0+tx;
					vbdata[vpos+13]=dh0+bw1+ty;
					break ;
				case 23:
					vbdata[vpos]=toBx+dx;
					vbdata[vpos+1]=toBy;
					vbdata[vpos+4]=toEx+dx;
					vbdata[vpos+5]=toBy;
					vbdata[vpos+8]=toEx;
					vbdata[vpos+9]=toEy;
					vbdata[vpos+12]=toBx;
					vbdata[vpos+13]=toEy;
					break ;
				case 30:
					if (toBx < cBx || toBy < cBy || toEx > cEx || toEy > cEy){
						var dcx=cBx-toBx,dcty=cBy-toBy,decr=toEx-cEx,decb=toEy-cEy;
						if(dcx > 0){toBx=cBx;vbdata[vpos+14]=vbdata[vpos+2]=vbdata[vpos+2]+dcx / (width *a)*(vbdata[vpos+6]-vbdata[vpos+2])};
						if(dcty > 0){toBy=cBy;vbdata[vpos+7]=vbdata[vpos+3]=vbdata[vpos+3]+dcty / (height *d)*(vbdata[vpos+11]-vbdata[vpos+7])};
						if(decr > 0){toEx=cEx;vbdata[vpos+6]=vbdata[vpos+10]=vbdata[vpos+6]-decr / (width *a)*(vbdata[vpos+6]-vbdata[vpos+2])};
						if(decb > 0){toEy=cEy;vbdata[vpos+11]=vbdata[vpos+15]=vbdata[vpos+15]-decb / (height *d)*(vbdata[vpos+11]-vbdata[vpos+7])};
					}
					vbdata[vpos]=toBx+dx;
					vbdata[vpos+1]=toBy;
					vbdata[vpos+4]=toEx+dx;
					vbdata[vpos+5]=toBy;
					vbdata[vpos+8]=toEx;
					vbdata[vpos+9]=toEy;
					vbdata[vpos+12]=toBx;
					vbdata[vpos+13]=toEy;
				}
			vb._upload=true;
			return true;
		}

		GlUtils.fillLineVb=function(vb,clip,fx,fy,tx,ty,width,mat){
			'use strict';
			var linew=width *.5;
			var data=GlUtils._fillLineArray;
			var perpx=-(fy-ty),perpy=fx-tx;
			var dist=Math.sqrt(perpx*perpx+perpy*perpy);
			perpx /=dist,perpy /=dist,perpx *=width,perpy *=width;
			data[0]=fx-perpx,data[1]=fy-perpy,data[4]=fx+perpx,data[5]=fy+perpy,data[8]=tx+perpx,data[9]=ty+perpy,data[12]=tx-perpx,data[13]=ty-perpy;
			mat&&mat.transformPointArray(data,data);
			var vpos=(vb._length >> 2)+16;
			vb.length=(vpos << 2);
			var vbdata=vb.getFloat32Array();
			vbdata.set(data,vpos-16);
			vb._upload=true;
			return true;
		}

		GlUtils._fillLineArray=[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]];
		return GlUtils;
	})()


	/**
	*...
	*@author laya
	*/
	//class laya.webgl.utils.RenderState2D
	var RenderState2D=(function(){
		function RenderState2D(){};
		__class(RenderState2D,'laya.webgl.utils.RenderState2D');
		RenderState2D.mat2MatArray=function(mat,matArray){
			var m=mat;
			var m4=matArray;
			m4[0]=m.a;
			m4[1]=m.b;
			m4[4]=m.c;
			m4[5]=m.d;
			m4[12]=m.tx;
			m4[13]=m.ty;
			return matArray;
		}

		RenderState2D.restoreTempArray=function(){
			RenderState2D.TEMPMAT4_ARRAY[0]=1;
			RenderState2D.TEMPMAT4_ARRAY[1]=0;
			RenderState2D.TEMPMAT4_ARRAY[4]=0;
			RenderState2D.TEMPMAT4_ARRAY[5]=1;
			RenderState2D.TEMPMAT4_ARRAY[12]=0;
			RenderState2D.TEMPMAT4_ARRAY[13]=0;
		}

		RenderState2D.clear=function(){
			RenderState2D.worldScissorTest=false;
			RenderState2D.worldShaderDefinesValue=0;
			RenderState2D.worldFilters=null;
			RenderState2D.worldAlpha=1;
			RenderState2D.worldClipRect.x=RenderState2D.worldClipRect.y=0;
			RenderState2D.worldClipRect.width=RenderState2D.width;
			RenderState2D.worldClipRect.height=RenderState2D.height;
			RenderState2D.curRenderTarget=null;
		}

		RenderState2D._MAXSIZE=99999999;
		RenderState2D.TEMPMAT4_ARRAY=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];
		RenderState2D.worldMatrix4=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];
		RenderState2D.worldAlpha=1.0;
		RenderState2D.worldScissorTest=false;
		RenderState2D.worldFilters=null
		RenderState2D.worldShaderDefinesValue=0;
		RenderState2D.worldClipRect=new Rectangle(0,0,99999999,99999999);
		RenderState2D.curRenderTarget=null
		RenderState2D.width=0;
		RenderState2D.height=0;
		__static(RenderState2D,
		['worldMatrix',function(){return this.worldMatrix=new Matrix();}
		]);
		return RenderState2D;
	})()


	/**
	*...
	*@author laya
	*/
	//class laya.webgl.utils.ShaderCompile
	var ShaderCompile=(function(){
		var ShaderScriptBlock;
		function ShaderCompile(name,vs,ps,nameMap,includeFiles){
			//this._VS=null;
			//this._PS=null;
			//this._VSTXT=null;
			//this._PSTXT=null;
			//this._nameMap=null;
			this._VSTXT=vs;
			this._PSTXT=ps;
			function split (str){
				var words=str.split(' ');
				var out=[];
				for (var i=0;i < words.length;i++)
				words[i].length > 0 && out.push(words[i]);
				return out;
			}
			function c (script){
				var i=0,n=0,ofs=0,words,condition;
				var top=new ShaderScriptBlock(0,null,null,null);
				var parent=top;
				var lines=script.split('\n');
				for (i=0,n=lines.length;i < n;i++){
					var line=lines[i];
					if (line.indexOf("#ifdef")>=0){
						words=split(line);
						parent=new ShaderScriptBlock(1,words[1],"",parent);
						continue ;
					}
					if (line.indexOf("#else")>=0){
						condition=parent.condition;
						parent=new ShaderScriptBlock(2,null,"",parent.parent);
						parent.condition=condition;
						continue ;
					}
					if (line.indexOf("#endif")>=0){
						parent=parent.parent;
						continue ;
					}
					if (line.indexOf("#include")>=0){
						words=split(line);
						var fname=words[1];
						var chr=fname.charAt(0);
						if (chr==='"' || chr==="'"){
							fname=fname.substr(1,fname.length-2);
							ofs=fname.lastIndexOf(chr);
							if (ofs > 0)fname=fname.substr(0,ofs);
						}
						ofs=words[0].indexOf('?');
						var str=ofs > 0?words[0].substr(ofs+1):words[0];
						new ShaderScriptBlock(1,str,includeFiles[fname],parent);
						continue ;
					}
					if (parent.childs.length > 0 && parent.childs[parent.childs.length-1].type===0){
						parent.childs[parent.childs.length-1].text+="\n"+line;
					}
					else new ShaderScriptBlock(0,null,line,parent);
				}
				return top;
			}
			this._VS=c(vs);
			this._PS=c(ps);
			this._nameMap=nameMap;
		}

		__class(ShaderCompile,'laya.webgl.utils.ShaderCompile');
		var __proto=ShaderCompile.prototype;
		__proto.createShader=function(define,shaderName,createShader){
			var defMap={};
			var defineStr="";
			if (define){
				for (var i in define){
					defineStr+="#define "+i+"\n";
					defMap[i]=true;
				}
			};
			var vs=this._VS.toscript(defMap,[]);
			var ps=this._PS.toscript(defMap,[]);
			return (createShader || Shader.create)(defineStr+vs.join('\n'),defineStr+ps.join('\n'),shaderName,this._nameMap);
		}

		ShaderCompile.IFDEF_NO=0;
		ShaderCompile.IFDEF_YES=1;
		ShaderCompile.IFDEF_ELSE=2;
		ShaderCompile.__init$=function(){
			//class ShaderScriptBlock
			ShaderScriptBlock=(function(){
				function ShaderScriptBlock(type,condition,text,parent){
					//this.type=0;
					//this.condition=null;
					//this.text=null;
					//this.parent=null;
					this.childs=new Array;
					this.type=type;
					this.text=text;
					this.parent=parent;
					parent && parent.childs.push(this);
					if (!condition)return;
					var newcondition="";
					var preIsParam=false,isParam=false;
					for (var i=0,n=condition.length;i < n;i++){
						var c=condition.charAt(i);
						isParam="!&|() \t".indexOf(c)< 0;
						if (preIsParam !=isParam){
							isParam && (newcondition+="this.");
							preIsParam=isParam;
						}
						newcondition+=c;
					};
					var fn="(function() {return "+newcondition+";})";
					this.condition=Browser.window.eval(fn);
				}
				__class(ShaderScriptBlock,'');
				var __proto=ShaderScriptBlock.prototype;
				//生成条件判断函数
				__proto.toscript=function(def,out){
					if (this.type===0){
						this.text && out.push(this.text);
					}
					if (this.childs.length < 1 && !this.text)return out;
					if (this.type!==0){
						var ifdef=!!this.condition.call(def);
						this.type===2 && (ifdef=!ifdef);
						if (!ifdef)return out;
						this.text && out.push(this.text);
					}
					this.childs.length>0 && this.childs.forEach(function(o){o.toscript(def,out)});
					return out;
				}
				return ShaderScriptBlock;
			})()
		}

		return ShaderCompile;
	})()


	/**
	*...
	*@author laya
	*/
	//class laya.webgl.WebGL
	var WebGL=(function(){
		function WebGL(){};
		__class(WebGL,'laya.webgl.WebGL');
		WebGL.enable=function(){
			if (!WebGL.isWebGLSupported())return false;
			HTMLImage=WebGLImage;
			HTMLCanvas=WebGLCanvas;
			HTMLSubImage=WebGLSubImage;
			System.changeDefinition("HTMLImage",WebGLImage);
			System.changeDefinition("HTMLCanvas",WebGLCanvas);
			System.changeDefinition("HTMLSubImage",WebGLSubImage);
			Render.WebGL=WebGL;
			System.createRenderSprite=function (type,next){
				return new RenderSprite3D(type,next);
			}
			System.createWebGLContext2D=function (c){
				return new WebGLContext2D(c);
			}
			System.changeWebGLSize=function (width,height){
				laya.webgl.WebGL.onStageResize(width,height);
			}
			System.createGraphics=function (){
				return new GraphicsGL();
			};
			var action=System.createFilterAction;
			System.createFilterAction=action ? action :function (type){
				return new ColorFilterActionGL()
			}
			Render.clear=function (color){
				RenderState2D.worldScissorTest && laya.webgl.WebGL.mainContext.disable(0x0C11);
				var c=Color.create(color)._color;
				Render.context.ctx.clearBG(c[0],c[1],c[2],c[3]);
				RenderState2D.clear();
			}
			System.addToAtlas=function (texture,force){
				(force===void 0)&& (force=false);
				var bitmap=texture.bitmap;
				var isEnable=AtlasManager.enabled || force;
				var bMerge=false;
				if (System.isConchApp){
					bMerge=(Render.isWebGl && isEnable && ((bitmap instanceof laya.webgl.resource.WebGLImage )|| bitmap==ConchTextCanvas)&& bitmap.width < AtlasManager.atlasLimitWidth && bitmap.height < AtlasManager.atlasLimitHeight);
					}else {
					bMerge=(Render.isWebGl && isEnable && ((bitmap instanceof laya.webgl.resource.WebGLImage )|| (bitmap instanceof laya.webgl.resource.WebGLSubImage )|| (bitmap instanceof laya.webgl.resource.WebGLCharImage ))&& bitmap.width < AtlasManager.atlasLimitWidth && bitmap.height < AtlasManager.atlasLimitHeight);
				}
				if (bMerge){
					bitmap.createOwnSource=false;
					(bitmap.resourceManager)&& (bitmap.resourceManager.removeResource(bitmap));
					if (System.isConchApp && bitmap==ConchTextCanvas){
						console.log(">>>>conchApp resotre todo todo");
						}else {
						bitmap.on("recovered",this,function(bitmap){
							(AtlasManager.enable)&& (AtlasManager.instance.addToAtlas(texture));
						});
					}
				}
			}
			System.drawToCanvas=function (sprite,_renderType,canvasWidth,canvasHeight,offsetX,offsetY){
				var renderTarget=new RenderTarget2D(canvasWidth,canvasHeight,false,0x1908,0x1401,0);
				renderTarget.start();
				renderTarget.clear(1.0,0.0,0.0,1.0);
				sprite.render(Render.context,-offsetX,RenderState2D.height-canvasHeight-offsetY);
				Render.context.flush();
				renderTarget.end();
				var pixels=renderTarget.getData(0,0,renderTarget.width,renderTarget.height);
				renderTarget.dispose();
				return pixels;
			}
			System.createFilterAction=function (type){
				var action;
				switch (type){
					case 0x20:
						action=new ColorFilterActionGL();
						break ;
					}
				return action;
			}
			Filter._filter=function (sprite,context,x,y){
				var next=this._next;
				if (next){
					var filters=sprite.filters,len=filters.length;
					if (len==1 && filters[0].type==0x20){
						context.ctx.save();
						context.ctx.setFilters(sprite.filters);
						next._fun.call(next,sprite,context,x,y);
						context.ctx.restore();
						return;
					}
				}
			}
			return true;
		}

		WebGL.isWebGLSupported=function(){
			var canvas=Browser.createElement('canvas');
			var gl;
			var names=["webgl","experimental-webgl","webkit-3d","moz-webgl"];
			for (var i=0;i < names.length;i++){
				try {
					gl=canvas.getContext(names[i]);
				}catch (e){}
				if (gl)return names[i];
			}
			return null;
		}

		WebGL.onStageResize=function(width,height){
			WebGL.mainContext.viewport(0,0,width,height);
			RenderState2D.width=width;
			RenderState2D.height=height;
			Value2D.needRezise=true;
		}

		WebGL.isExperimentalWebgl=function(){
			return WebGL._isExperimentalWebgl;
		}

		WebGL.addRenderFinish=function(){
			if (WebGL._isExperimentalWebgl){
				Render.finish=function (){
					Render.context.ctx.finish();
				}
			}
		}

		WebGL.init=function(canvas,width,height){
			WebGL.mainCanvas=canvas;
			HTMLCanvas._createContext=function (canvas){
				return new WebGLContext2D(canvas);
			};
			var webGLName=WebGL.isWebGLSupported();
			var gl=WebGL.mainContext=canvas.getContext(webGLName,{stencil:true,alpha:false,antialias:true,premultipliedAlpha:false});
			WebGL._isExperimentalWebgl=(webGLName=="experimental-webgl" && (Browser.onWeiXin || Browser.onMQQBrowser));
			Browser.window.SetupWebglContext && Browser.window.SetupWebglContext(gl);
			WebGL.onStageResize(width,height);
			if (WebGL.mainContext==null)
				throw new Error("webGL getContext err!");
			System.__init__();
			AtlasManager.__init__();
			ShaderDefines2D.__init__();
			Submit.__init__();
			WebGLContext2D.__init__();
			Value2D.__init__();
			Shader2D.__init__();
			Buffer.__int__(gl);
			BlendMode._init_(gl);
		}

		WebGL.mainCanvas=null
		WebGL.mainContext=null
		WebGL.antialias=true;
		WebGL._bg_null=[0,0,0,0];
		WebGL._isExperimentalWebgl=false;
		return WebGL;
	})()


	/**
	*...
	*@author laya
	*/
	//class laya.webgl.WebGLContext
	var WebGLContext=(function(){
		function WebGLContext(){};
		__class(WebGLContext,'laya.webgl.WebGLContext');
		WebGLContext.UseProgram=function(program){
			if (WebGLContext._useProgram===program)return false;
			WebGL.mainContext.useProgram(program);
			WebGLContext._useProgram=program;
			return true;
		}

		WebGLContext.setDepthTest=function(gl,value){
			value!==WebGLContext._depthTest && (WebGLContext._depthTest=value,value?gl.enable(0x0B71):gl.disable(0x0B71));
		}

		WebGLContext.setDepthMask=function(gl,value){
			value!==WebGLContext._depthMask && (WebGLContext._depthMask=value,gl.depthMask(value));
		}

		WebGLContext.setBlend=function(gl,value){
			value!==WebGLContext._blend && (WebGLContext._blend=value,value?gl.enable(0x0BE2):gl.disable(0x0BE2));
		}

		WebGLContext.setBlendFunc=function(gl,sFactor,dFactor){
			(sFactor!==WebGLContext._sFactor||dFactor!==WebGLContext._dFactor)&& (WebGLContext._sFactor=sFactor,WebGLContext._dFactor=dFactor,gl.blendFunc(sFactor,dFactor));
		}

		WebGLContext.setCullFace=function(gl,value){
			value!==WebGLContext._cullFace && (WebGLContext._cullFace=value,value?gl.enable(0x0B44):gl.disable(0x0B44));
		}

		WebGLContext.setFrontFaceCCW=function(gl,value){
			value!==WebGLContext._frontFace && (WebGLContext._frontFace=value,gl.frontFace(value));
		}

		WebGLContext._useProgram=null;
		WebGLContext._depthTest=true;
		WebGLContext._depthMask=1;
		WebGLContext._blend=false;
		WebGLContext._sFactor=1;
		WebGLContext._dFactor=0;
		WebGLContext._cullFace=false;
		WebGLContext._frontFace=0x0901;
		WebGLContext.__init$=function(){
			;
		}

		return WebGLContext;
	})()


	//class laya.ani.bone.Templet
	var Templet=(function(){
		function Templet(data,tex){
			this._vision="";
			//this._usePack=0;
			//this._uv=null;
			//this._bones=null;
			this._anims=[];
			//this._strArr=null;
			this._targetAnim=[];
			this._boneCount=0;
			//this._boneMatrix=null;
			this._textures=[];
			//this._textureWidth=NaN;
			//this._textureHeight=NaN;
			this.frameCount=0;
			this.frameRate=0;
			this.animNames={};
			this._graphicsArrs_=[];
			//this._texture=null;
			this._texture=tex;
			this._textureWidth=tex.width;
			this._textureHeight=tex.height;
			this._execute(data);
		}

		__class(Templet,'laya.ani.bone.Templet');
		var __proto=Templet.prototype;
		__proto._execute=function(data){
			var b=new Byte(data);
			this._vision=[b.getUint8(),b.getUint8(),b.getUint8(),b.getUint8()].join(",");
			this.frameRate=b.getUint8();
			this._usePack=b.getUint8();
			this._strArr=b.getString().split("\n");
			var len=b.getInt16();
			this._uv=b.getInt16Array(b.pos,len *8 *2);
			for (var i=0;i < len;++i){
				var u1=this._texture.uv[0],v1=this._texture.uv[1],u2=this._texture.uv[4],v2=this._texture.uv[5];
				var inAltasUVWidth=(u2-u1),inAltasUVHeight=(v2-v1);
				var uvStart=i *8,l=this._uv[uvStart],u=this._uv[uvStart+1],w=this._uv[uvStart+2],h=this._uv[uvStart+3];
				var oriU1=l / this._textureWidth,oriU2=(l+w)/ this._textureWidth,oriV1=u / this._textureHeight,oriV2=(u+h)/ this._textureHeight;
				var oriUV=[oriU1,oriV1,oriU2,oriV1,oriU2,oriV2,oriU1,oriV2];
				var tex=this._textures[i]=new Texture(this._texture.bitmap,[u1+oriUV[0] *inAltasUVWidth,v1+oriUV[1] *inAltasUVHeight,u2-(1-oriUV[2])*inAltasUVWidth,v1+oriUV[3] *inAltasUVHeight,u2-(1-oriUV[4])*inAltasUVWidth,v2-(1-oriUV[5])*inAltasUVHeight,u1+oriUV[6] *inAltasUVWidth,v2-(1-oriUV[7])*inAltasUVHeight]);
				tex.w=this._uv[uvStart+4];
				tex.h=this._uv[uvStart+5];
				tex.__w=w;
				tex.__h=h;
				tex._offsetX=this._uv[uvStart+6];
				tex._offsetY=this._uv[uvStart+7];
			}
			this._boneCount=len=b.getInt16()
			this._boneMatrix=b.getFloat32Array(b.pos,len *6 *4);
			this._bones=b.getInt16Array(b.pos,len *4 *2);
			len=b.getInt16();
			for (var k=0;k < len;k++){
				var arr=[];
				arr._index_=k;
				this._graphicsArrs_.push(arr);
				var nameIndex=b.getInt16();
				this.animNames[this._strArr[nameIndex]]=k;
				this.frameCount=b.getInt16();
				arr.length=arr._length=this.frameCount;
				var blockNum=b.getInt16();
				this._anims.push(b.getFloat32Array(b.pos,blockNum *Templet.SRC_ANIMLEN *4));
				var outPut=new Float32Array(this.frameCount *this._boneCount *Templet.ANIMLEN);
				this._targetAnim.push(outPut);
				this.interpolation(this._anims[k],outPut,blockNum);
			}
		}

		__proto.planish=function(i,_index_){
			var outAnim=this._targetAnim[_index_];
			var gr=new Graphics();
			var planishMat=[];
			var i_animlen=i *Templet.ANIMLEN;
			for (var j=0;j < this._boneCount;j++){
				var bStart=j *4;
				var mStart=j *6;
				var pIndex=this._bones[bStart];
				var mAStart=j *this.frameCount *Templet.ANIMLEN+i_animlen;
				var mM=this._getMat(this._boneMatrix,mStart);
				var mAM,tmp,outM=new Matrix();
				if (pIndex >-1){
					var mpAStart=pIndex *this.frameCount *Templet.ANIMLEN+i_animlen;
					var mpAM=planishMat[pIndex];
					var nodeType=this._bones[bStart+2];
					switch (nodeType){
						case 0:
							mAM=this._getMat(outAnim,mAStart);
							tmp=Matrix.TEMP;
							var tx=mAM.tx,ty=mAM.ty;
							mAM.setTranslate(0,0);
							Matrix.mul(mAM,mM,tmp);
							tmp.translate(tx,ty);
							Matrix.mul(tmp,mpAM,planishMat[j]=outM);
							mAM=null;
							break ;
						case 1:;
							var texIndex=outAnim[mAStart+7];
							if (texIndex==-1)
								continue ;
							var alpha=outAnim[mAStart+6];
							if (alpha < 0.001)continue ;
							texIndex=outAnim[mAStart+7];
							var tex=this._textures[texIndex];
							mM.tx-=tex._offsetX;
							mM.ty-=tex._offsetY;
							Matrix.mul(mM,mpAM,outM);
							if (alpha < 0.9999){
								gr.save();
								gr.alpha(alpha);
								gr.drawTexture(tex,-tex.w / 2,-tex.w / 2,tex.__w,tex.__h,outM);
								gr.restore();
							}
							else{
								gr.drawTexture(tex,-tex.w / 2,-tex.w / 2,tex.__w,tex.__h,outM);
							}
							break ;
						case 2:
							break ;
						default :
							break ;
						}
				}
				else{
					mAM=this._getMat(outAnim,mAStart);
					Matrix.mul(mAM,mM,planishMat[j]=outM);
				}
			}
			return gr;
		}

		__proto.interpolation=function(input,outPut,blockNum){
			var outFrameNum=0,i=0,j=0,k=0,start=0,duration=0,type=0,outStart=0,delta=NaN,next=0;
			for (i=0;i < blockNum;i++,start+=Templet.SRC_ANIMLEN){
				duration=input[start+6];
				type=input[start+7];
				if (duration > 1){
					next=start+Templet.SRC_ANIMLEN;
					for (j=0;j < duration;j++){
						outStart=outFrameNum++*Templet.ANIMLEN;
						if (type==-1){
							for (k=0;k < 6;k++){
								outPut[outStart+k]=input[start+k];
							}
							outPut[outStart+6]=input[start+8];
							outPut[outStart+7]=input[start+9];
						}
						else{
							for (k=0;k < 6;k++){
								delta=input[next+k]-input[start+k];
								if (k==1 || k==2)
									delta=Arith.formatR(delta);
								delta /=duration;
								outPut[outStart+k]=j *delta+input[start+k];
							}
							delta=(input[next+8]-input[start+8])/ duration;
							outPut[outStart+6]=j *delta+input[start+8];
							outPut[outStart+7]=input[start+9];
						}
					}
				}
				else{
					outStart=outFrameNum++*Templet.ANIMLEN;
					for (j=0;j < 6;j++)
					outPut[outStart+j]=input[start+j];
					outPut[outStart+6]=1;
					outPut[outStart+7]=input[start+9];
				}
			}
		}

		//贴图索引
		__proto._getMat=function(tran,start){
			var mat=new Matrix();
			var a=tran[start],b=tran[start+1],c=tran[start+2],d=tran[start+3],tx=tran[start+4],ty=tran[start+5];
			if (c !=0 || b !=0){
				var cos=Math.cos(b),sin=Math.sin(b);
				mat.setTo(a *cos,a *sin,d *-sin,d *cos,tx,ty);
			}
			else
			mat.setTo(a,b,c,d,tx,ty);
			return mat;
		}

		__getset(0,__proto,'textureWidth',function(){
			return this._textureWidth;
		});

		__getset(0,__proto,'textureHeight',function(){
			return this._textureHeight;
		});

		Templet.ANIMLEN=8;
		Templet.SRC_ANIMLEN=10;
		return Templet;
	})()


	//class laya.editor.core.Wraps.xml.XMLElementList extends Array
	var XMLElementList=(function(_super){
		function XMLElementList(value){
			this._value="";
			this._parentNode=null;
			XMLElementList.__super.call(this);
			__uns(this,['_value','_parentNode']);
			if (value){
				value="<data>"+value+"</data>";
				var list=XMLElementList.create(XMLElement.create(value).childNodes);
				for (var i=0;i < list.length;i++){
					this.push(list[i]);
				}
			}
			Object.defineProperty(this,'length',{value:this.length,writable:true,enumerable:false,configurable:false});
		}

		__class(XMLElementList,'laya.editor.core.Wraps.xml.XMLElementList',Array);
		var __proto=XMLElementList.prototype;
		Laya.imps(__proto,{"laya.editor.core.Wraps.xml.IXMLElement":true})
		__proto.childIndex=function(){
			if (this.lengths()==1){
				var xml=this[0];
				var parent=xml._parentNode;
				if (parent){
					var nodes=parent._childNodes;
					for (var i=0,n=nodes.length;i < n;i++){
						if (nodes[i]==xml){
							return i;
						}
					}
				}
			}
			return-1;
		}

		__proto.getAttributes=function(){
			return this.attributes();
		}

		__proto.attributes=function(){
			return this.getAttribute("*");
		}

		//xml.@name
		__proto.getAttribute=function(name){
			var arr=[],len=this.length;
			for (var i=0;i < len;i++){
				var attributes=this[i]._attributes;
				for (var j=0;j < attributes.length;j++){
					var value=attributes[j]['key'];
					if (name=="*" || value==name){
						arr.push({"key":attributes[j]['key'],"val":attributes[j]['val']});
					}
				}
			}
			if (name!="*"){
				return arr.length>0?arr[0].val:undefined;
			}
			return laya.editor.core.Wraps.xml.XMLElementList.createFromAttribute(arr);
		}

		//xml.@name
		__proto.attribute=function(name){
			return this.getAttribute(name);
		}

		//xml.@name=value;
		__proto.setAttribute=function(name,value){
			if (this.length==1){
				var o;
				for(var $each_o in this[0]._attributes){
					o=this[0]._attributes[$each_o];
					if (o['key']==name){
						o['val']=value;
						return value;
					}
				}
				this[0]._attributes.push({key:name,val:value});
			}
			return null;
		}

		//xml.name;
		__proto.getChildByName=function(name){
			return this.child(name);
		}

		__proto.child=function(name){
			if (!this.length)
				return new XMLElementList();
			var arr=[],len=this.lengths();
			for (var i=0;i < len;i++){
				var nodes=this[i].getChildByName(name);
				(nodes && nodes.length)&& (arr=arr.concat(this[i].getChildByName(name)));
			}
			return XMLElementList.create(arr);
		}

		//xml.(@attribute==value);或者xml.(@attribute!=value)
		__proto.getChildByAttribute=function(attribute,value,equal){
			(equal===void 0)&& (equal=true);
			if (attribute=="" || attribute==null)
				return null;
			if (value=="" || value==null)
				return null;
			var ar=[],len=this.length;
			for (var i=0;i < len;i++){
				var n=this [i];
				for (var j=0;j < n._attributes.length;j++){
					if (n._attributes[j]['key']==attribute){
						if (equal && n._attributes[j]['val']==value){
							ar.push(n);
							}else if (!equal && n._attributes[j]['val'] !=value){
							ar.push(n);
						}
					}
				}
			}
			return laya.editor.core.Wraps.xml.XMLElementList.create(ar);
		}

		__proto.getChildAt=function(index){
			if (!this.length || index > this.length)
				return null;
			else
			return this[index];
		}

		// return this[0].getChildAt(index);
		__proto.children=function(){
			var xl=new XMLElementList();
			var len=this.lengths();
			for (var i=0;i < len;i++){
				var childs=this[i]._childNodes;
				var n=childs.length;
				for (var j=0;j < n;j++){
					xl.push(childs[j]);
				}
				if(n<1){
					xl.push(this[i]);
				}
			}
			return xl;
		}

		__proto.elements=function(name){
			(name===void 0)&& (name="*");
			if (!this.length)
				return new XMLElementList();
			if (name=="*")
				return this.children();
			return this.child(name);
		}

		__proto.appendChild=function(value){
			if ((typeof value=='string')){
				value=XMLElement.create(String(value));
			}
			this.__doAdd__(value);
			return value;
		}

		__proto.__addChild__=function(value){
			if ((value instanceof laya.editor.core.Wraps.xml.XMLElement )){
				var ixl=value._childNodes,len=ixl.length;
				for (var i=0;i < len;i++){
					this.__doAdd__(ixl[i]);
				}
				this.push(value);
				}else if ((value instanceof laya.editor.core.Wraps.xml.XMLElementList )){
				len=value.lengths();
				for (i=0;i < len;i++){
					this.__addChild__(value[i]);
				}
			}
		}

		__proto.__doAdd__=function(value){
			if (this.indexOf(value)!=-1)
				return;
			var n=value._nodeName;
			var x=this[n];
			if ((x instanceof laya.editor.core.Wraps.xml.XMLElementList )){
				x.__addChild__(value);
				}else if ((x instanceof laya.editor.core.Wraps.xml.XMLElement )){
				var tmp=x;
				x=this[n]=new XMLElementList();
				Object.defineProperty(this,[n],{value:this[n],writable:true,enumerable:false,configurable:false});
				x.__addChild__(tmp);
				x.__addChild__(value);
				}else if (!x){
				x=this[n]=new XMLElementList();
				x.__addChild__(value);
				Object.defineProperty(this,[n],{value:this[n],writable:true,enumerable:false,configurable:false});
			}
		}

		__proto.setName=function(str){
			if (this.length==1){
				this[0]._nodeName=str;
			}
		}

		__proto.copyFrom=function(source){
			if (this.lengths()> 1)
				return null;
			var il=((source instanceof laya.editor.core.Wraps.xml.XMLElementList ));
			if (source.lengths()> 1)
				return null;
			if (il)
				this[0].copyFrom(source.getChildAt(0));
			else
			this[0].copyFrom(source);
			return this [0];
		}

		__proto.hasOwnProperty=function(pName){
			if (this.length==0){
				return this[0].hasOwnProperty(pName);
				}else {
				var x;
				for(var $each_x in this){
					x=this[$each_x];
					if (x['hasOwnProperty'](pName))
						return true;
				}
			}
			return false;
		}

		__proto.setChildByName=function(nName,value){
			return null;
		}

		// return this;
		__proto.hasComplexContent=function(){
			return this.length > 0;
		}

		__proto.hasSimpleContent=function(){
			var len=this.length;
			for (var i=0;i < len;i++){
				if (this['_nodeValue'] !=null){
					return true
				}
			}
			return false
		}

		__proto.name=function(){
			if (this.length==1)
				return this[0].name();
			return null;
		}

		__proto.lengths=function(){
			for (var i=this.length-1;i >=0;i--){
				if (this[i]==undefined)
					this.splice(i,1);
			}
			return this.length;
		}

		__proto.toString=function(){
			var str="";
			if (this.lengths()){
				if (this.length==1){
					str+=this[0].toString();
					}else {
					for (var i=0;i < this.length;i++){
						if (this.length > 1)
							str+=this[i].getString();
					}
				}
			}
			return str;
		}

		__proto.toXMLString=function(){
			var str="";
			for (var i=0;i < this.length;i++){
				str+=this[i].toXMLString();
			}
			return str;
		}

		__proto.parent=function(){
			return this._parentNode;
		}

		__proto.copy=function(){
			var list=new XMLElementList(this.toXMLString());
			return list;
		}

		__proto.getString=function(){
			var str="";
			str=this.toXMLString();
			return str;
		}

		__proto.comments=function(){
			return null;
		}

		__proto.contains=function(value){
			return true;
		}

		__getset(0,__proto,'localName',function(){
			return null
			},function(str){
			if (this.length==1){
				this[0]._nodeName=str;
			}
		});

		__getset(0,__proto,'nodeType',function(){
			return "*";
		});

		__getset(0,__proto,'value',function(){
			if (this.length==1){
				return this[0]._nodeValue;
			}
			return "";
			},function(str){
			if (this.length==1){
				this[0]._nodeValue=str;
			}
		});

		__getset(0,__proto,'childNodes',function(){
			return null;
		});

		__getset(0,__proto,'nodeName',function(){
			return null;
		});

		__uns(__proto,['childIndex','getAttributes','attributes','getAttribute','attribute','setAttribute','getChildByName','child','getChildByAttribute','getChildAt','children','elements','appendChild','__addChild__','__doAdd__','setName','copyFrom','hasOwnProperty','setChildByName','hasComplexContent','hasSimpleContent','name','lengths','toString','toXMLString','parent','copy','getString','comments','contains']);
		XMLElementList.create=function(arr){
			var xl=new XMLElementList();
			for (var i=0;i < arr.length;i++){
				xl.__addChild__(arr[i]);
			}
			return xl;
		}

		XMLElementList.createFromAttribute=function(arr){
			var xl=new XMLElementList();
			for (var i=0;i < arr.length;i++){
				var xml=new XMLElement();
				var obj=arr[i];
				xml._nodeName=obj.key;
				xml._nodeValue=obj.val;
				xl.push(xml);
			}
			return xl;
		}

		return XMLElementList;
	})(Array)


	/**
	*<code>Node</code> 类用于创建节点对象，节点是最基本的元素。
	*@author yung
	*/
	//class laya.display.Node extends laya.events.EventDispatcher
	var Node=(function(_super){
		function Node(){
			this.name="";
			this.destroyed=false;
			this._displayInStage=false;
			this._parent=null;
			this._privates=null;
			Node.__super.call(this);
			this._childs=Node.ARRAY_EMPTY;
			this.timer=Laya.timer;
		}

		__class(Node,'laya.display.Node',_super);
		var __proto=Node.prototype;
		/**
		*<p>销毁此对象。</p>
		*@param destroyChild 是否同时销毁子节点，若值为true,则销毁子节点，否则不销毁子节点。
		*/
		__proto.destroy=function(destroyChild){
			(destroyChild===void 0)&& (destroyChild=true);
			this.destroyed=true;
			this._parent && this._parent.removeChild(this);
			if (this._childs){
				if (destroyChild)this.destroyChildren();
				else this.removeChildren();
			}
			this._childs=null;
			this._privates && (this._privates=null);
			this.offAll();
		}

		/**
		*销毁所有子对象，不销毁自己本身。
		*/
		__proto.destroyChildren=function(){
			if (this._childs){
				for (var i=this._childs.length-1;i >-1;i--){
					this._childs[i].destroy(true);
				}
			}
		}

		/**
		*添加子节点。
		*@param node 节点对象
		*@return 返回添加的节点
		*/
		__proto.addChild=function(node){
			if (node===this)return node;
			if (node._parent===this){
				this._childs.splice(this.getChildIndex(node),1);
				this._childs.push(node);
				}else {
				node.parent && node.parent.removeChild(node);
				this._childs===Node.ARRAY_EMPTY && (this._childs=[]);
				this._childs.push(node);
				node.parent=this;
			}
			return node;
		}

		/**
		*批量增加子节点
		*@param ...args 无数子节点
		*/
		__proto.addChildren=function(__args){
			var args=arguments;
			var i=0,n=args.length;
			while (i < n){
				this.addChild(args[i++]);
			}
		}

		/**
		*添加子节点到指定的索引位置。
		*@param node 节点对象。
		*@param index 索引位置。
		*@return 返回添加的节点。
		*/
		__proto.addChildAt=function(node,index){
			if (node===this)return node;
			if (index >=0 && index <=this._childs.length){
				if (node._parent===this){
					this._childs.splice(this.getChildIndex(node),1);
					this._childs.splice(index,0,node);
					}else {
					node.parent && node.parent.removeChild(node);
					this._childs===Node.ARRAY_EMPTY && (this._childs=[]);
					this._childs.splice(index,0,node);
					node.parent=this;
				}
				return node;
				}else {
				throw new Error("appendChildAt:The index is out of bounds");
			}
		}

		/**
		*根据子节点对象，获取子节点的索引位置。
		*@param node 子节点。
		*@return 子节点所在的索引位置。
		*/
		__proto.getChildIndex=function(node){
			return this._childs.indexOf(node);
		}

		/**
		*根据子节点的名字，获取子节点对象。
		*@param name 子节点的名字。
		*@return 节点对象。
		*/
		__proto.getChildByName=function(name){
			var nodes=this._childs;
			for (var i=0,n=nodes.length;i < n;i++){
				var node=nodes[i];
				if (node.name===name)return node;
			}
			return null;
		}

		__proto.getPrivates=function(){
			return this._privates;
		}

		/**
		*根据子节点的索引位置，获取子节点对象。
		*@param index 索引位置
		*@return 子节点
		*/
		__proto.getChildAt=function(index){
			return this._childs[index];
		}

		/**
		*设置子节点的索引位置。
		*@param node 子节点。
		*@param index 新的索引。
		*@return 返回子节点本身。
		*/
		__proto.setChildIndex=function(node,index){
			var childs=this._childs;
			if (index < 0 || index >=childs.length){
				throw new Error("setChildIndex:The index is out of bounds.");
			};
			var oldIndex=this.getChildIndex(node);
			childs.splice(oldIndex,1);
			childs.splice(index,0,node);
			this.childChanged();
			return node;
		}

		/**
		*@private
		*子节点发生改变。
		*/
		__proto.childChanged=function(child){}
		/**
		*删除子节点。
		*@param node 子节点
		*@return 被删除的节点
		*/
		__proto.removeChild=function(node){
			if (!this._childs)return node;
			var index=this._childs.indexOf(node);
			return this.removeChildAt(index);
		}

		/**
		*从父容器删除自己，如已经被删除则不会抛出异常。
		*/
		__proto.removeSelf=function(){
			this._parent && this._parent.removeChild(this);
			return this;
		}

		/**
		*根据子节点名字删除对应的子节点对象，如找不到不会抛出异常。
		*@param name 对象名字。
		*/
		__proto.removeChildByName=function(name){
			var node=this.getChildByName(name);
			node && this.removeChild(node);
			return node;
		}

		/**
		*根据子节点索引位置，删除对应的子节点对象。
		*@param index 节点索引位置。
		*@return 被删除的节点。
		*/
		__proto.removeChildAt=function(index){
			var node=this.getChildAt(index);
			if (node){
				this._childs.splice(index,1);
				node.parent=null;
			}
			return node;
		}

		/**
		*删除所有子对象。
		*/
		__proto.removeChildren=function(beginIndex,endIndex){
			(beginIndex===void 0)&& (beginIndex=0);
			(endIndex===void 0)&& (endIndex=0x7fffffff);
			if (this._childs.length > 0){
				var childs=this._childs;
				if (beginIndex===0 && endIndex >=n){
					var arr=childs;
					this._childs=Node.ARRAY_EMPTY;
					}else {
					arr=childs.splice(beginIndex,endIndex-beginIndex);
				}
				for (var i=0,n=arr.length;i < n;i++){
					arr[i].parent=null;
				}
			}
			return this;
		}

		/**
		*替换子节点。
		*@internal 将传入的新节点对象替换到已有子节点索引位置处。
		*@param newNode 新节点。
		*@param oldNode 老节点。
		*@return 返回新节点。
		*/
		__proto.replaceChild=function(newNode,oldNode){
			var index=this._childs.indexOf(oldNode);
			if (index >-1){
				this._childs.splice(index,1,newNode);
				oldNode.parent=null;
				newNode.parent=this;
				return newNode;
			}
			return null;
		}

		/**@private */
		__proto._setDisplay=function(value){
			if (this._displayInStage!==value){
				this._displayInStage=value;
				if (value)this.event("display");
				else this.event("undisplay");
			}
		}

		/**
		*@private
		*设置对象是否可见(是否在渲染列表中)
		*@param node 节点
		*@param display 是否可见
		*/
		__proto._displayChild=function(node,display){
			node._setDisplay(display);
			var childs=node._childs;
			if (childs){
				for (var i=childs.length-1;i >-1;i--){
					var child=childs[i];
					child._setDisplay(display);
					child.numChildren && this._displayChild(child,display);
				}
			}
		}

		/**
		*询问是否为某类型的某值。
		*<p>常用来对对象类型进行快速判断。</p>
		*@param type
		*@param value
		*@return
		*/
		__proto.ask=function(type,value){
			return type==1 ? (value==1):false;
		}

		/**
		*当前容器是否包含 <code>node</code> 节点。
		*@param node 某一个节点 <code>Node</code>。
		*@return 一个布尔值表示是否包含<code>node</code>节点。
		*/
		__proto.contains=function(node){
			if (node===this)return true;
			while (node){
				if (node.parent===this.parent)return true;
				node=node.parent;
			}
			return false;
		}

		/**
		*定时重复执行某函数。
		*@param delay 间隔时间(单位毫秒)。
		*@param caller 执行域(this)。
		*@param method 结束时的回调方法。
		*@param args 回调参数。
		*@param coverBefore 是否覆盖之前的延迟执行，默认为false。
		*/
		__proto.timerLoop=function(delay,caller,method,args,coverBefore){
			(coverBefore===void 0)&& (coverBefore=false);
			this.timer._create(false,true,delay,caller,method,args,coverBefore);
		}

		/**
		*定时执行某函数一次。
		*@param delay 延迟时间(单位毫秒)。
		*@param caller 执行域(this)。
		*@param method 结束时的回调方法。
		*@param args 回调参数。
		*@param coverBefore 是否覆盖之前的延迟执行，默认为false。
		*/
		__proto.timerOnce=function(delay,caller,method,args,coverBefore){
			(coverBefore===void 0)&& (coverBefore=false);
			this.timer._create(false,false,delay,caller,method,args,coverBefore);
		}

		/**
		*定时重复执行某函数(基于帧率)。
		*@param delay 间隔几帧(单位为帧)。
		*@param caller 执行域(this)。
		*@param method 结束时的回调方法。
		*@param args 回调参数。
		*@param coverBefore 是否覆盖之前的延迟执行，默认为false。
		*/
		__proto.frameLoop=function(delay,caller,method,args,coverBefore){
			(coverBefore===void 0)&& (coverBefore=false);
			this.timer._create(true,true,delay,caller,method,args,coverBefore);
		}

		/**
		*定时执行一次某函数(基于帧率)。
		*@param delay 延迟几帧(单位为帧)。
		*@param caller 执行域(this)
		*@param method 结束时的回调方法
		*@param args 回调参数
		*@param coverBefore 是否覆盖之前的延迟执行，默认为false
		*/
		__proto.frameOnce=function(delay,caller,method,args,coverBefore){
			(coverBefore===void 0)&& (coverBefore=false);
			this.timer._create(true,false,delay,caller,method,args,coverBefore);
		}

		/**
		*清理定时器。
		*@param caller 执行域(this)。
		*@param method 结束时的回调方法。
		*/
		__proto.clearTimer=function(caller,method){
			this.timer.clear(caller,method);
		}

		/**
		*子对象数量。
		*/
		__getset(0,__proto,'numChildren',function(){
			return this._childs.length;
		});

		/**父节点。*/
		__getset(0,__proto,'parent',function(){
			return this._parent;
			},function(value){
			if (this._parent!==value){
				if (value){
					this._parent=value;
					this.event("added");
					value.displayInStage && this._displayChild(this,true);
					value.childChanged(this);
					}else {
					this.event("removed");
					this._parent.childChanged();
					this._displayChild(this,false);
					this._parent=value;
				}
			}
		});

		/**表示是否在显示列表中显示。是否在显示渲染列表中。*/
		__getset(0,__proto,'displayInStage',function(){
			return this._displayInStage;
		});

		Node.ASK_CLASS=1;
		Node.ASK_VALUE_NODE=1;
		Node.ASK_VALUE_SPRITE=2;
		Node.ASK_VALUE_HTMLELEMENT=3;
		Node.ASK_VALUE_SPRITE3D=100;
		Node.ARRAY_EMPTY=[];
		return Node;
	})(EventDispatcher)


	/**拖动事件类*/
	//class laya.editor.core.events.DragEvent extends laya.events.Event
	var DragEvent=(function(_super){
		function DragEvent(type,dragInitiator,data,bubbles,cancelable){
			this._data=null;
			this._dragInitiator=null;
			this.hitList=null;
			DragEvent.__super.call(this);
			(bubbles===void 0)&& (bubbles=true);
			(cancelable===void 0)&& (cancelable=false);
			this.type=type;
			this._dragInitiator=dragInitiator;
			this._data=data;
		}

		__class(DragEvent,'laya.editor.core.events.DragEvent',_super);
		var __proto=DragEvent.prototype;
		__proto.clone=function(){
			return new DragEvent(this.type,this._dragInitiator,this._data);
		}

		/**拖动的源对象*/
		__getset(0,__proto,'dragInitiator',function(){
			return this._dragInitiator;
			},function(value){
			this._dragInitiator=value;
		});

		/**拖动传递的数据*/
		__getset(0,__proto,'data',function(){
			return this._data;
			},function(value){
			this._data=value;
		});

		DragEvent.DRAG_START="dragStart";
		DragEvent.DRAG_DROP="dragDrop";
		DragEvent.Draging_Hit="Draging_Hit";
		DragEvent.DRAG_COMPLETE="dragComplete";
		DragEvent.DRAG_MOVE="dragMove";
		__static(DragEvent,
		['TEMP',function(){return this.TEMP=new DragEvent("dragDrop");}
		]);
		return DragEvent;
	})(Event)


	/**UI事件类*/
	//class laya.editor.core.events.UIEvent extends laya.events.Event
	var UIEvent=(function(_super){
		function UIEvent(type,data,bubbles,cancelable){
			this._data=null;
			UIEvent.__super.call(this);
			(bubbles===void 0)&& (bubbles=false);
			(cancelable===void 0)&& (cancelable=false);
			this.type=type;
			this._data=data;
		}

		__class(UIEvent,'laya.editor.core.events.UIEvent',_super);
		var __proto=UIEvent.prototype;
		__proto.clone=function(){
			return new UIEvent(this.type,this._data);
		}

		/**事件数据*/
		__getset(0,__proto,'data',function(){
			return this._data;
			},function(value){
			this._data=value;
		});

		UIEvent.MOVE="move";
		UIEvent.RENDER_COMPLETED="renderCompleted";
		UIEvent.SHOW_TIP="showTip";
		UIEvent.HIDE_TIP="hideTip";
		UIEvent.IMAGE_LOADED="imageLoaded";
		UIEvent.SCROLL="scroll";
		UIEvent.FRAME_CHANGED="frameChanged";
		UIEvent.ITEM_RENDER="listRender";
		UIEvent.CHANGING="changing";
		return UIEvent;
	})(Event)


	/**
	*本类用于模块间消息传递
	*@author ww
	*/
	//class ide.managers.Notice extends laya.events.EventDispatcher
	var Notice=(function(_super){
		function Notice(){
			Notice.__super.call(this);
		}

		__class(Notice,'ide.managers.Notice',_super);
		Notice.notify=function(type,data){
			console.log("notify:",type,data);
			Notice.I.event(type,data);
		}

		Notice.listen=function(type,_scope,fun,args,cancelBefore){
			(cancelBefore===void 0)&& (cancelBefore=false);
			if(cancelBefore)Notice.cancel(type,_scope,fun);
			Notice.I.on(type,_scope,fun,args);
		}

		Notice.cancel=function(type,_scope,fun){
			Notice.I.off(type,_scope,fun);
		}

		__static(Notice,
		['I',function(){return this.I=new Notice();}
		]);
		return Notice;
	})(EventDispatcher)


	/**
	*使用Audio标签播放声音
	*@author ww
	*/
	//class laya.media.h5audio.AudioSound extends laya.events.EventDispatcher
	var AudioSound=(function(_super){
		function AudioSound(){
			this.url=null;
			this.audio=null;
			this.loaded=false;
			AudioSound.__super.call(this);
		}

		__class(AudioSound,'laya.media.h5audio.AudioSound',_super);
		var __proto=AudioSound.prototype;
		/**
		*释放声音
		*
		*/
		__proto.dispose=function(){
			var ad=AudioSound._audioCache[this.url];
			if (ad){
				ad.src="";
				delete AudioSound._audioCache[this.url];
			}
		}

		/**
		*加载声音
		*@param url
		*
		*/
		__proto.load=function(url){
			this.url=url;
			var ad=AudioSound._audioCache[url];
			if (ad && ad.readyState >=2){
				this.event("complete");
				return;
			}
			if (!ad){
				ad=Browser.createElement("audio");
				ad.src=url;
				AudioSound._audioCache[url]=ad;
			}
			ad.addEventListener("canplaythrough",onLoaded);
			ad.addEventListener("error",onErr);
			var me=this;
			function onLoaded (){
				offs();
				me.loaded=true;
				me.event("complete");
			}
			function onErr (){
				offs();
				me.event("error");
			}
			function offs (){
				ad.removeEventListener("canplaythrough",onLoaded);
				ad.removeEventListener("error",onErr);
			}
			this.audio=ad;
			ad.load();
		}

		/**
		*播放声音
		*@param startTime 起始时间
		*@param loops 循环次数
		*@return
		*
		*/
		__proto.play=function(startTime,loops){
			(startTime===void 0)&& (startTime=0);
			(loops===void 0)&& (loops=0);
			if (!this.url)return null;
			var ad;
			ad=AudioSound._audioCache[this.url];
			if (!ad)return null;
			ad.autoplay=true;
			var tAd;
			tAd=Pool.getItem(this.url);
			tAd=tAd?tAd:ad.cloneNode();
			var channel=new AudioSoundChannel(tAd);
			channel.url=this.url;
			channel.loops=loops;
			channel.startTime=startTime;
			channel.play();
			SoundManager.addChannel(channel);
			return channel;
		}

		AudioSound._audioCache={};
		return AudioSound;
	})(EventDispatcher)


	/**
	*声音播放控制
	*@author ww
	*/
	//class laya.media.SoundChannel extends laya.events.EventDispatcher
	var SoundChannel=(function(_super){
		function SoundChannel(){
			this.url=null;
			this.loops=0;
			this.startTime=NaN;
			this.isStopped=false;
			this.completeHandler=null;
			SoundChannel.__super.call(this);
		}

		__class(SoundChannel,'laya.media.SoundChannel',_super);
		var __proto=SoundChannel.prototype;
		/**
		*播放
		*
		*/
		__proto.play=function(){}
		/**
		*停止
		*
		*/
		__proto.stop=function(){}
		/**
		*设置音量
		*@param v
		*
		*/
		/**
		*获取音量
		*@return
		*
		*/
		__getset(0,__proto,'volume',function(){
			return 1;
			},function(v){
		});

		/**
		*获取当前播放时间
		*@return
		*
		*/
		__getset(0,__proto,'position',function(){
			return 0;
		});

		return SoundChannel;
	})(EventDispatcher)


	/**
	*声音类
	*@author ww
	*/
	//class laya.media.Sound extends laya.events.EventDispatcher
	var Sound=(function(_super){
		function Sound(){Sound.__super.call(this);;
		};

		__class(Sound,'laya.media.Sound',_super);
		var __proto=Sound.prototype;
		/**
		*加载声音
		*@param url
		*
		*/
		__proto.load=function(url){}
		/**
		*播放声音
		*@param startTime 开始时间,单位秒
		*@param loops 循环次数,0表示一直循环
		*@return
		*
		*/
		__proto.play=function(startTime,loops){
			(startTime===void 0)&& (startTime=0);
			(loops===void 0)&& (loops=0);
			return null;
		}

		/**
		*释放声音资源
		*
		*/
		__proto.dispose=function(){}
		return Sound;
	})(EventDispatcher)


	/**
	*web audio api方式播放声音
	*@author ww
	*/
	//class laya.media.webaudio.WebAudioSound extends laya.events.EventDispatcher
	var WebAudioSound=(function(_super){
		function WebAudioSound(){
			this.url=null;
			this.loaded=false;
			this.data=null;
			this.audioBuffer=null;
			WebAudioSound.__super.call(this);
		}

		__class(WebAudioSound,'laya.media.webaudio.WebAudioSound',_super);
		var __proto=WebAudioSound.prototype;
		/**
		*加载声音
		*@param url
		*
		*/
		__proto.load=function(url){
			var me=this;
			this.url=url;
			this.audioBuffer=WebAudioSound._dataCache[url];
			if (this.audioBuffer){
				_loaded();
				return;
			};
			var request=new Browser.window.XMLHttpRequest();
			request.open("GET",url,true);
			request.responseType="arraybuffer";
			request.onload=function (){
				me.data=request.response;
				WebAudioSound.buffs.push({"buffer":me.data,"loaded":_loaded,"err":_err,"me":me,"url":me.url});
				WebAudioSound.decode();
			};
			request.send();
			function _loaded (){
				WebAudioSound._dataCache[url]=me.audioBuffer;
				me.loaded=true;
				me.event("complete");
			}
			function _err (){
				me.event("error");
			}
		}

		/**
		*播放声音
		*@param startTime 起始时间
		*@param loops 循环次数
		*@return
		*
		*/
		__proto.play=function(startTime,loops,channel){
			(startTime===void 0)&& (startTime=0);
			(loops===void 0)&& (loops=0);
			channel=channel ? channel :new WebAudioSoundChannel();
			if (!this.audioBuffer){
				if (this.url){
					this.once("complete",this,this.play,[startTime,loops,channel]);
					this.load(this.url);
				}
			}
			channel.url=this.url;
			channel.loops=loops;
			channel["audioBuffer"]=this.audioBuffer;
			channel.startTime=startTime;
			channel.play();
			SoundManager.addChannel(channel);
			return channel;
		}

		__proto.dispose=function(){
			delete WebAudioSound._dataCache[this.url];
		}

		WebAudioSound.decode=function(){
			if (WebAudioSound.buffs.length <=0 || WebAudioSound.isDecoding){
				return;
			}
			WebAudioSound.isDecoding=true;
			WebAudioSound.tInfo=WebAudioSound.buffs.shift();
			WebAudioSound.ctx.decodeAudioData(WebAudioSound.tInfo["buffer"],WebAudioSound._done,WebAudioSound._fail);
		}

		WebAudioSound._done=function(audioBuffer){
			WebAudioSound.tInfo["me"].audioBuffer=audioBuffer;
			if (WebAudioSound.tInfo["loaded"]){
				WebAudioSound.tInfo["loaded"]();
			}
			WebAudioSound.isDecoding=false;
			WebAudioSound.decode();
		}

		WebAudioSound._fail=function(){
			if (WebAudioSound.tInfo["err"]){
				WebAudioSound.tInfo["err"]();
			}
			WebAudioSound.isDecoding=false;
			WebAudioSound.decode();
		}

		WebAudioSound.buffs=[];
		WebAudioSound.isDecoding=false;
		WebAudioSound.tInfo=null
		WebAudioSound._dataCache={};
		__static(WebAudioSound,
		['window',function(){return this.window=Browser.window;},'webAudioOK',function(){return this.webAudioOK=WebAudioSound.window["AudioContext"] || WebAudioSound.window["webkitAudioContext"] || WebAudioSound.window["mozAudioContext"];},'ctx',function(){return this.ctx=WebAudioSound.webAudioOK ? new (WebAudioSound.window["AudioContext"] || WebAudioSound.window["webkitAudioContext"] || WebAudioSound.window["mozAudioContext"])():undefined;}
		]);
		return WebAudioSound;
	})(EventDispatcher)


	/**
	*HTTP请求
	*@author yung
	*/
	//class laya.net.HttpRequest extends laya.events.EventDispatcher
	var HttpRequest=(function(_super){
		function HttpRequest(){
			this._responseType=null;
			this._data=null;
			HttpRequest.__super.call(this);
			this._http=new Browser.window.XMLHttpRequest();
		}

		__class(HttpRequest,'laya.net.HttpRequest',_super);
		var __proto=HttpRequest.prototype;
		/**
		*发送请求
		*@param url 请求的地址
		*@param data 发送的数据，可选
		*@param method 发送数据方式，值为"get"或"post"，默认为get方式
		*@param responseType 返回消息类型，可设置为"text"，"json"，"xml","arraybuffer"
		*@param headers 头信息，key value数组，比如["Content-Type","application/json"]
		*/
		__proto.send=function(url,data,method,responseType,headers){
			(method===void 0)&& (method="get");
			(responseType===void 0)&& (responseType="text");
			this._responseType=responseType;
			this._data=null;
			var _this=this;
			var http=this._http;
			http.open(method,url,true);
			if (headers){
				for (var i=0;i < headers.length;i++){
					http.setRequestHeader(headers[i++],headers[i]);
				}
				}else {
				if (!data || (typeof data=='string'))http.setRequestHeader("Content-Type","application/x-www-form-urlencoded");
				else http.setRequestHeader("Content-Type","application/json");
			}
			http.responseType=responseType!=="arraybuffer" ? "text" :"arraybuffer";
			http.onerror=function (e){
				_this.onError(e);
			}
			http.onabort=function (e){
				_this.onAbort(e);
			}
			http.onprogress=function (e){
				_this.onProgress(e);
			}
			http.onload=function (e){
				_this.onLoad(e);
			}
			http.send(data);
		}

		__proto.onProgress=function(e){
			if (e && e.lengthComputable)this.event("progress",e.loaded / e.total);
		}

		__proto.onAbort=function(e){
			this.error("Request was aborted by user");
		}

		__proto.onError=function(e){
			this.error("Request failed Status:"+this._http.status+" text:"+this._http.statusText);
		}

		__proto.onLoad=function(e){
			var http=this._http;
			var status=http.status!==undefined ? http.status :200;
			if (status===200 || status===204 || status===0){
				this.complete();
				}else {
				this.error("["+http.status+"]"+http.statusText+":"+http.responseURL);
			}
		}

		__proto.error=function(message){
			this.clear();
			this.event("error",message);
		}

		__proto.complete=function(){
			this.clear();
			if (this._responseType==="json"){
				this._data=JSON.parse(this._http.responseText);
				}else if (this._responseType==="xml"){
				var dom=new Browser.window.DOMParser();
				this._data=dom.parseFromString(this._http.responseText,"text/xml");
				}else {
				this._data=this._http.response || this._http.responseText;
			}
			this.event("complete",(this._data instanceof Array)? [this._data] :this._data);
		}

		__proto.clear=function(){
			var http=this._http;
			http.onerror=http.onabort=http.onprogress=http.onload=null;
		}

		/**返回的数据*/
		__getset(0,__proto,'data',function(){
			return this._data;
		});

		/**请求的地址*/
		__getset(0,__proto,'url',function(){
			return this._http.responseURL;
		});

		return HttpRequest;
	})(EventDispatcher)


	/**
	*加载器，实现了文本，JSON，XML,二进制,图像的加载及管理
	*@author yung
	*/
	//class laya.net.Loader extends laya.events.EventDispatcher
	var Loader=(function(_super){
		function Loader(){
			this._data=null;
			this._url=null;
			this._type=null;
			this._cache=false;
			this._http=null;
			Loader.__super.call(this);
		}

		__class(Loader,'laya.net.Loader',_super);
		var __proto=Loader.prototype;
		/**
		*加载资源
		*@param url 地址
		*@param type 类型，如果为null，则根据文件后缀，自动分析类型
		*@param cache 是否缓存数据
		*/
		__proto.load=function(url,type,cache){
			(cache===void 0)&& (cache=true);
			url=URL.formatURL(url);
			this._url=url;
			this._type=type || (type=this.getTypeFromUrl(url));
			this._cache=cache;
			this._data=null;
			if (Loader.loadedMap[url]){
				this._data=Loader.loadedMap[url];
				this.event("progress",1);
				this.event("complete",this._data);
				return;
			}
			if (type==="image")
				return this._loadImage(url);
			if (type==="sound")
				return this._loadSound(url);
			if (!this._http){
				this._http=new HttpRequest();
				this._http.on("progress",this,this.onProgress);
				this._http.on("error",this,this.onError);
				this._http.on("complete",this,this.onLoaded);
			}
			this._http.send(url,null,"get",type!=="atlas" ? type :"json");
		}

		__proto.getTypeFromUrl=function(url){
			Loader._extReg.lastIndex=url.lastIndexOf(".");
			var result=Loader._extReg.exec(url);
			if (result && result.length > 1){
				return Loader.typeMap[result[1].toLowerCase()];
			}
			console.log("Not recognize the resources suffix",url);
			return "text";
		}

		__proto._loadImage=function(url){
			var image=new HTMLImage();
			var _this=this;
			image.onload=function (){
				clear();
				_this.onLoaded(image);
			};
			image.onerror=function (){
				clear();
				_this.event("error","Load image filed");
			}
			function clear (){
				image.onload=null;
				image.onerror=null;
			}
			image.src=url;
		}

		__proto._loadSound=function(url){
			var _$this=this;
			var sound=new Sound();
			var _this=this;
			sound.on("complete",this,soundOnload);
			sound.on("error",this,soundOnErr);
			sound.load(url);
			function soundOnload (){
				clear();
				_this.onLoaded(sound);
			}
			function soundOnErr (){
				clear();
				_this.event("error","Load sound filed");
			}
			function clear (){
				sound.off("complete",_$this,soundOnload);
				sound.off("error",_$this,soundOnErr);
			}
		}

		__proto.onProgress=function(value){
			this.event("progress",value);
		}

		__proto.onError=function(message){
			this.event("error",message);
		}

		__proto.onLoaded=function(data){
			var type=this._type;
			if (type==="image"){
				this.complete(new Texture(data));
				}else if (type==="sound"){
				this.complete(data);
				}else if (type==="texture"){
				this.complete(new Texture(data));
				}else if (type==="atlas"){
				var toloadPics;
				if (!data.src){
					if (!this._data){
						this._data=data;
						if (data.meta && data.meta.image){
							toloadPics=data.meta.image.split(",");
							var folderPath;
							var split;
							split=this._url.indexOf("/")>=0 ? "/" :"\\";
							var idx=0;
							idx=this._url.lastIndexOf(split);
							if (idx >=0){
								folderPath=this._url.substr(0,idx+1);
								}else {
								folderPath="";
							};
							var i=0,len=0;
							len=toloadPics.length;
							for (i=0;i < len;i++){
								toloadPics[i]=folderPath+toloadPics[i];
							}
							}else{
							toloadPics=[this._url.replace(".json",".png")];
						}
						data.toLoads=toloadPics;
						data.pics=[];
					}
					return this._loadImage(URL.formatURL(toloadPics.pop()));
					}else {
					this._data.pics.push(data);
					if (this._data.toLoads.length > 0){
						return this._loadImage(URL.formatURL(this._data.toLoads.pop()));
					};
					var frames=this._data.frames;
					var directory=(this._data.meta && this._data.meta.prefix)? URL.basePath+this._data.meta.prefix :this._url.substring(0,this._url.lastIndexOf("."))+"/";
					var pics;
					pics=this._data.pics;
					var tPic;
					var map=Loader.atlasMap[this._url] || (Loader.atlasMap[this._url]=[]);
					var needSub=Config.atlasEnable && Render.isWebGl;
					for (var name in frames){
						var obj=frames[name];
						tPic=pics[obj.frame.idx ? obj.frame.idx :0];
						var url=directory+name;
						Loader.loadedMap[url]=Texture.create(tPic,obj.frame.x,obj.frame.y,obj.frame.w,obj.frame.h,obj.spriteSourceSize.x,obj.spriteSourceSize.y);
						map.push(Loader.loadedMap[url]);
					}
					this.complete(this._data);
				}
				}else {
				this.complete(data);
			}
		}

		__proto.complete=function(data){
			this._data=data;
			Loader._loaders.push(this);
			if (!Loader._isWorking)Loader.checkNext();
		}

		__proto._endLoad=function(){
			if (this._cache)Loader.loadedMap[this._url]=this._data;
			this.event("progress",1);
			this.event("complete",(this.data instanceof Array)? [this.data] :this.data);
		}

		/**是否缓存，只读*/
		__getset(0,__proto,'cache',function(){
			return this._cache;
		});

		/**返回的数据*/
		__getset(0,__proto,'data',function(){
			return this._data;
		});

		/**加载地址，只读*/
		__getset(0,__proto,'url',function(){
			return this._url;
		});

		/**加载类型，只读*/
		__getset(0,__proto,'type',function(){
			return this._type;
		});

		Loader.checkNext=function(){
			Loader._isWorking=true;
			var startTimer=Browser.now();
			var thisTimer=startTimer;
			while (Loader._startIndex < Loader._loaders.length){
				thisTimer=Browser.now();
				Loader._loaders[Loader._startIndex]._endLoad();
				Loader._startIndex++;
				if (Browser.now()-startTimer > Loader.maxTimeOut){
					console.log("loader callback cost a long time:"+(Browser.now()-startTimer)+")"+" url="+Loader._loaders[Loader._startIndex-1].url);
					Laya.timer.frameOnce(1,null,Loader.checkNext);
					return;
				}
			}
			Loader._loaders.length=0;
			Loader._startIndex=0;
			Loader._isWorking=false;
		}

		Loader.clearRes=function(url){
			url=URL.formatURL(url);
			var arr=Loader.atlasMap[url];
			if (arr){
				for (var i=0,n=arr.length;i <n;i++){
					var tex=arr[i];
					if (tex)tex.destroy();
				}
				arr.length=0;
				delete Loader.atlasMap[url];
			}
			delete Loader.loadedMap[url];
		}

		Loader.getRes=function(url){
			return Loader.loadedMap[URL.formatURL(url)];
		}

		Loader.getAtlas=function(url){
			return Loader.atlasMap[URL.formatURL(url)];
		}

		Loader.cacheRes=function(url,data){
			Loader.loadedMap[URL.formatURL(url)]=data;
		}

		Loader.basePath="";
		Loader.TEXT="text";
		Loader.JSOn="json";
		Loader.XML="xml";
		Loader.BUFFER="arraybuffer";
		Loader.IMAGE="image";
		Loader.SOUND="sound";
		Loader.TEXTURE="texture";
		Loader.ATLAS="atlas";
		Loader.typeMap={"png":"image","jpg":"image","txt":"text","json":"json","xml":"xml","als":"atlas"};
		Loader.loadedMap={};
		Loader.atlasMap={};
		Loader._loaders=[];
		Loader._isWorking=false;
		Loader._startIndex=0;
		Loader.maxTimeOut=100;
		Loader._extReg=/\.(\w+)\??/g;
		return Loader;
	})(EventDispatcher)


	/**
	*<p> <code>LoaderManager</code> 类用于用于批量加载资源、数据。</p>
	*<p>批量加载器，单例，可以通过Laya.loader访问。</p>
	*多线程(默认5个线程)，5个优先级(0最快，4最慢,默认为1)
	*某个资源加载失败后，会按照最低优先级重试加载(属性retryNum决定重试几次)，如果重试后失败，则调用complete函数，并返回null
	*@author yung
	*/
	//class laya.net.LoaderManager extends laya.events.EventDispatcher
	var LoaderManager=(function(_super){
		var ResInfo;
		function LoaderManager(){
			this.retryNum=1;
			this.maxLoader=5;
			this._loaders=[];
			this._loaderCount=0;
			this._resInfos=[];
			this._resMap={};
			this._infoPool=[];
			this._maxPriority=5;
			this._failRes={};
			LoaderManager.__super.call(this);
			for (var i=0;i < this._maxPriority;i++)this._resInfos[i]=[];
		}

		__class(LoaderManager,'laya.net.LoaderManager',_super);
		var __proto=LoaderManager.prototype;
		/**
		*加载资源
		*@param url 地址，或者数组
		*@param type 类型
		*@param complete 结束回调，如果加载失败，则返回null
		*@param progress 进度回调，回调参数为当前文件加载的进度信息(0-1)
		*@param priority 优先级，0-4，五个优先级，0优先级最高，默认为1
		*@param cache 是否缓存加载结果
		*/
		__proto.load=function(url,complete,progress,type,priority,cache){
			(priority===void 0)&& (priority=1);
			(cache===void 0)&& (cache=true);
			if ((url instanceof Array))return this._loadAssets(url,complete,progress,cache);
			var content=Loader.getRes(url);
			if (content !=null){
				complete && complete.runWith(content);
				this._loaderCount || this.event("complete");
				}else {
				var info=this._resMap[url];
				if (!info){
					info=this._infoPool.length ? this._infoPool.pop():new ResInfo();
					info.url=url;
					info.type=type;
					info.cache=cache;
					complete && info.on("complete",complete.caller,complete.method,complete.args);
					progress && info.on("progress",progress.caller,progress.method,progress.args);
					this._resMap[url]=info;
					priority=priority < this._maxPriority ? priority :this._maxPriority-1;
					this._resInfos[priority].push(info);
					this._next();
					}else {
					complete && info.on("complete",complete.caller,complete.method,complete.args);
					progress && info.on("progress",progress.caller,progress.method,progress.args);
				}
			}
			return this;
		}

		__proto._next=function(){
			if (this._loaderCount >=this.maxLoader)return;
			for (var i=0;i < this._maxPriority;i++){
				var infos=this._resInfos[i];
				if (infos.length > 0)return this._doLoad(infos.shift())
			}
			this._loaderCount || this.event("complete");
		}

		__proto._doLoad=function(resInfo){
			this._loaderCount++;
			var loader=this._loaders.length ? this._loaders.pop():new Loader();
			loader.on("complete",null,onLoaded);
			loader.on("progress",null,function(num){
				resInfo.event("progress",num);
			});
			loader.on("error",null,function(msg){
				onLoaded(null);
			});
			var _this=this;
			function onLoaded (data){
				loader.offAll();
				_this._loaders.push(loader);
				_this._endLoad(resInfo,data);
				_this._loaderCount--;
				_this._next();
			}
			loader.load(resInfo.url,resInfo.type,resInfo.cache);
		}

		__proto._endLoad=function(resInfo,content){
			if (content===null){
				var errorCount=this._failRes[resInfo.url] || 0;
				if (errorCount < this.retryNum){
					console.log("[warn]Retry to load:",resInfo.url);
					this._failRes[resInfo.url]=errorCount+1;
					this._resInfos[this._maxPriority-1].push(resInfo);
					return;
					}else {
					console.log("[error]Failed to load:",resInfo.url);
					this.event("error",resInfo.url);
				}
			}
			delete this._resMap[resInfo.url];
			resInfo.event("complete",content);
			resInfo.offAll();
			this._infoPool.push(resInfo);
		}

		/**
		*清理缓存
		*@param url 地址
		*/
		__proto.clearRes=function(url){
			Loader.clearRes(url);
		}

		/**
		*获取已加载资源(如有缓存)
		*@param url 地址
		*@return 返回资源
		*/
		__proto.getRes=function(url){
			return Loader.getRes(url);
		}

		/**清理当前未完成的加载*/
		__proto.clearUnLoaded=function(){
			this._resInfos.length=0;
			this._loaderCount=0;
			this._resMap={};
		}

		/**加载数组里面的资源
		*@param arr 简单：["a.png","b.png"]，复杂[{url:"a.png",type:Loader.IMAGE,size:100,priority:1},{url:"b.json",type:Loader.JSOn,size:50,priority:1}]*/
		__proto._loadAssets=function(arr,complete,progress,cache){
			(cache===void 0)&& (cache=true);
			var itemCount=arr.length;
			var loadedSize=0;
			var totalSize=0;
			var items=[];
			for (var i=0;i < itemCount;i++){
				var item=arr[i];
				if ((typeof item=='string'))item={url:item,type:"image",size:1,priority:1};
				if (!item.size)item.size=1;
				item.progress=0;
				totalSize+=item.size;
				items.push(item);
				var progressHandler=progress ? Handler.create(this,loadProgress,[item]):null;
				this.load(item.url,Handler.create(item,loadComplete,[item]),progressHandler,item.type,item.priority || 1,cache);
			}
			function loadComplete (item,content){
				loadedSize++;
				item.progress=1;
				if (loadedSize===itemCount && complete){
					complete.run();
				}
			}
			function loadProgress (item,value){
				if (progress !=null){
					item.progress=value;
					var num=0;
					for (var j=0;j < itemCount;j++){
						var item1=items[j];
						num+=item1.size *item1.progress;
					};
					var v=num / totalSize;
					progress.runWith(v);
				}
			}
			return this;
		}

		LoaderManager.cacheRes=function(url,data){
			Loader.cacheRes(url,data);
		}

		LoaderManager.__init$=function(){
			//class ResInfo extends laya.events.EventDispatcher
			ResInfo=(function(_super){
				function ResInfo(){
					this.url=null;
					this.type=null;
					this.cache=false;
					ResInfo.__super.call(this);
				}
				__class(ResInfo,'',_super);
				return ResInfo;
			})(EventDispatcher)
		}

		return LoaderManager;
	})(EventDispatcher)


	/**
	*...
	*@author
	*/
	//class laya.resource.Resource extends laya.events.EventDispatcher
	var Resource=(function(_super){
		function Resource(){
			this._id=0;
			this._name=null;
			this._resourceManager=null;
			this._lastUseFrameCount=0;
			this._memorySize=0;
			this._released=false;
			this.lock=false;
			Resource.__super.call(this);
			this._$1__id=Resource._uniqueIDCounter;
			Resource._uniqueIDCounter++;
			Resource._loadedResources.push(this);
			Resource._isLoadedResourcesSorted=false;
			this._released=true;
			this.lock=false;
			this._memorySize=0;
			this._lastUseFrameCount=-1;
			(ResourceManager.currentResourceManager)&& (ResourceManager.currentResourceManager.addResource(this));
		}

		__class(Resource,'laya.resource.Resource',_super);
		var __proto=Resource.prototype;
		Laya.imps(__proto,{"laya.resource.IDispose":true})
		/**重新创建资源，override it,同时修改memorySize属性,通常保留super.recreateResource()!*/
		__proto.recreateResource=function(){
			this.compoleteCreate();
		}

		/**销毁资源，override it,同时修改memorySize属性!*/
		__proto.detoryResource=function(){}
		/**
		*激活资源，使用资源前应先调用此函数激活
		*@param forceCreate 是否强制创建
		*/
		__proto.activeResource=function(forceCreate){
			(forceCreate===void 0)&& (forceCreate=false);
			this._lastUseFrameCount=Stat.loopCount;
			if (this._released || forceCreate){
				this.recreateResource();
			}
		}

		/**
		*释放资源
		*@return 是否成功释放
		*/
		__proto.releaseResource=function(){
			if (this.lock)
				return false;
			if (!this._released){
				this.detoryResource();
				this._released=true;
				this._lastUseFrameCount=-1;
				this.event("released",this);
			}
			return true;
		}

		/**
		*设置唯一名字,如果名字重复则自动加上“-copy”
		*@param newName 名字
		*/
		__proto.setUniqueName=function(newName){
			var isUnique=true;
			for (var i=0;i < Resource._loadedResources.length;i++){
				if (Resource._loadedResources[i]._name!==newName || Resource._loadedResources[i]===this)
					continue ;
				isUnique=false;
				return;
			}
			if (isUnique){
				if (this.name !=newName){
					this.name=newName;
					Resource._isLoadedResourcesSorted=false;
				}
				}else{
				this.setUniqueName(newName.concat("-copy"));
			}
		}

		/**彻底清理资源,注意会强制解锁清理*/
		__proto.dispose=function(){
			if (this._resourceManager!==null)
				throw new Error("附属于resourceManager的资源不能独立释放！");
			this.lock=false;
			this.releaseResource();
			var index=Resource._loadedResources.indexOf(this);
			if (index!==-1){
				Resource._loadedResources.splice(index,1);
				Resource._isLoadedResourcesSorted=false;
			}
		}

		/**完成资源激活*/
		__proto.compoleteCreate=function(){
			this._released=false;
			this.event("recovered",this);
		}

		/**
		*获取唯一标识ID
		*@return 编号
		*/
		__getset(0,__proto,'id',function(){
			return this._$1__id;
		});

		/**
		*获取距离上次使用帧率
		*@return 距离上次使用帧率
		*/
		__getset(0,__proto,'lastUseFrameCount',function(){
			return this._lastUseFrameCount;
		});

		/**
		*设置名字
		*@param value 名字
		*/
		/**
		*获取名字
		*@return 名字
		*/
		__getset(0,__proto,'name',function(){
			return this._name;
			},function(value){
			if ((value || value!=="")&& this.name!==value){
				this._name=value;
				Resource._isLoadedResourcesSorted=false;
			}
		});

		/**
		*获取资源管理员
		*@return 资源管理员
		*/
		__getset(0,__proto,'resourceManager',function(){
			return this._resourceManager;
		});

		/**
		*设置内存尺寸(as3中属性不能使用protected，开发者避免修改，或待优化)
		*@param value 尺寸
		*/
		/**
		*获取占用内存尺寸
		*@return 占用内存尺寸
		*/
		__getset(0,__proto,'memorySize',function(){
			return this._memorySize;
			},function(value){
			var offsetValue=value-this._memorySize;
			this._memorySize=value;
			this.event("memorychanged",offsetValue);
		});

		/**
		*获取是否已释放
		*@return 是否已释放
		*/
		__getset(0,__proto,'released',function(){
			return this._released;
		});

		/**
		*返回本类型排序后的已载入资源
		*@return 本类型排序后的已载入资源
		*/
		__getset(1,Resource,'sortedLoadedResourcesByName',function(){
			if (!Resource._isLoadedResourcesSorted){
				Resource._isLoadedResourcesSorted=true;
				Resource._loadedResources.sort(Resource.compareResourcesByName);
			}
			return Resource._loadedResources;
		},laya.events.EventDispatcher._$SET_sortedLoadedResourcesByName);

		Resource.getLoadedResourceByIndex=function(index){
			return Resource._loadedResources[index];
		}

		Resource.getLoadedResourcesCount=function(){
			return Resource._loadedResources.length;
		}

		Resource.compareResourcesByName=function(left,right){
			if (left===right)
				return 0;
			var x=left.name;
			var y=right.name;
			if (x===null){
				if (y===null)
					return 0;
				else
				return-1;
				}else {
				if (y==null)
					return 1;
				else {
					var retval=x.localeCompare(y);
					if (retval !=0)
						return retval;
					else {
						right.setUniqueName(y);
						y=right.name;
						return x.localeCompare(y);
					}
				}
			}
		}

		Resource.animationCache={};
		Resource.meshCache={};
		Resource._uniqueIDCounter=-2147483648;
		Resource._loadedResources=[];
		Resource._isLoadedResourcesSorted=false;
		return Resource;
	})(EventDispatcher)


	/**
	*纹理
	*@author yung
	*/
	//class laya.resource.Texture extends laya.events.EventDispatcher
	var Texture=(function(_super){
		function Texture(bitmapResource,uv,canInAtlas){
			//this.bitmap=null;
			//this.uv=null;
			//this._loaded=false;
			this._w=0;
			this._h=0;
			this.offsetX=0;
			this.offsetY=0;
			this.canInAtlas=true;
			(canInAtlas===void 0)&& (canInAtlas=true);
			Texture.__super.call(this);
			this.set(bitmapResource,uv,canInAtlas);
		}

		__class(Texture,'laya.resource.Texture',_super);
		var __proto=Texture.prototype;
		__proto.set=function(bitmapResource,uv,canInAtlas){
			(canInAtlas===void 0)&& (canInAtlas=true);
			this.bitmap=bitmapResource;
			this.uv=uv || Texture.DEF_UV;
			canInAtlas=canInAtlas;
			if (bitmapResource){
				this._w=bitmapResource.width;
				this._h=bitmapResource.height;
				this._loaded=this._w > 0;
				var _this=this;
				if (this._loaded){
					(System.addToAtlas && canInAtlas)&& (System.addToAtlas(_this));
					}else {
					var bm=bitmapResource;
					if (((bm instanceof laya.resource.HTMLImage ))&& (bm.image))
						bm.image.addEventListener('load',function(e){
						(System.addToAtlas && canInAtlas)&& (System.addToAtlas(_this));
					},false);
				}
			}
		}

		/**激活资源*/
		__proto.active=function(){
			this.bitmap.activeResource();
		}

		/**销毁*/
		__proto.destroy=function(){
			this.bitmap=null;
		}

		/**
		*从一个图片加载
		*@param url 图片地址
		*/
		__proto.load=function(url){
			var _$this=this;
			this._loaded=false;
			var fileBitmap=(this.bitmap || (this.bitmap=new HTMLImage()));
			var _this=this;
			fileBitmap.onload=function (){
				fileBitmap.onload=null;
				_this._loaded=true;
				_$this._w=fileBitmap.width;
				_$this._h=fileBitmap.height;
				_this.event("loaded",this);
				(System.addToAtlas && _$this.canInAtlas)&& (System.addToAtlas(_this));
			};
			fileBitmap.src=URL.formatURL(url);
		}

		/**实际高度*/
		__getset(0,__proto,'height',function(){
			if (this._h)return this._h;
			return (this.uv && this.uv!==Texture.DEF_UV)? (this.uv[5]-this.uv[1])*this.bitmap.height :this.bitmap.height;
			},function(value){
			this._h=value;
		});

		/**
		*是否加载成功，只能表示初次载入成功（通常包含下载和载入）,并不能完全表示资源是否可立即使用（资源管理机制释放影响等）
		*@return 是否成功
		*/
		__getset(0,__proto,'loaded',function(){
			return this._loaded;
		});

		__getset(0,__proto,'released',function(){
			return this.bitmap.released;
		});

		//临时代码，万江项目需要，日后删掉
		__getset(0,__proto,'repeat',null,function(value){
			var bitm=this.bitmap;
			bitm.repeat=value;
		});

		/**激活并获取资源*/
		__getset(0,__proto,'source',function(){
			this.bitmap.activeResource();
			return this.bitmap.source;
		});

		/**实际宽度*/
		__getset(0,__proto,'width',function(){
			if (this._w)return this._w;
			return (this.uv && this.uv!==Texture.DEF_UV)? (this.uv[2]-this.uv[0])*this.bitmap.width :this.bitmap.width;
			},function(value){
			this._w=value;
		});

		Texture.moveUV=function(offsetX,offsetY,uv){
			for (var i=0;i < 8;i+=2){
				uv[i]+=offsetX;
				uv[i+1]+=offsetY;
			}
			return uv;
		}

		Texture.create=function(source,x,y,width,height,offsetX,offsetY,canInAtlas){
			(offsetX===void 0)&& (offsetX=0);
			(offsetY===void 0)&& (offsetY=0);
			(canInAtlas===void 0)&& (canInAtlas=true);
			var uv=source.uv || Texture.DEF_UV;
			var bitmapResource=source.bitmap || source;
			var tex=new Texture(bitmapResource,null,canInAtlas);
			tex.width=width;
			tex.height=height;
			tex.offsetX=offsetX;
			tex.offsetY=offsetY;
			var dwidth=1 / bitmapResource.width;
			var dheight=1 / bitmapResource.height;
			x *=dwidth;
			y *=dheight;
			width *=dwidth;
			height *=dheight;
			var u1=tex.uv[0],v1=tex.uv[1],u2=tex.uv[4],v2=tex.uv[5];
			var inAltasUVWidth=(u2-u1),inAltasUVHeight=(v2-v1);
			var oriUV=Texture.moveUV(uv[0],uv[1],[x,y,x+width,y,x+width,y+height,x,y+height]);
			tex.uv=[u1+oriUV[0] *inAltasUVWidth,v1+oriUV[1] *inAltasUVHeight,u2-(1-oriUV[2])*inAltasUVWidth,v1+oriUV[3] *inAltasUVHeight,u2-(1-oriUV[4])*inAltasUVWidth,v2-(1-oriUV[5])*inAltasUVHeight,u1+oriUV[6] *inAltasUVWidth,v2-(1-oriUV[7])*inAltasUVHeight];
			return tex;
		}

		Texture.TEXTURE2D=1;
		Texture.TEXTURE3D=2;
		Texture.DEF_UV=[0,0,1.0,0,1.0,1.0,0,1.0];
		Texture.INV_UV=[0,1,1.0,1,1.0,0.0,0,0.0];
		return Texture;
	})(EventDispatcher)


	/**
	*<code>UIEvent</code> 类用来定义UI组件类的事件类型。
	*@author yung
	*
	*/
	//class laya.ui.UIEvent extends laya.events.Event
	var UIEvent1=(function(_super){
		function UIEvent(){UIEvent.__super.call(this);;
		};

		__class(UIEvent,'laya.ui.UIEvent',_super,'UIEvent1');
		UIEvent.SHOW_TIP="showtip";
		UIEvent.HIDE_TIP="hidetip";
		return UIEvent;
	})(Event)


	/**
	*
	*@author ww
	*@version 1.0
	*
	*@created 2016-3-22 下午7:18:25
	*/
	//class laya.ide.viewer.CodeScene extends laya.ide.viewer.SceneBase
	var CodeScene=(function(_super){
		function CodeScene(){
			CodeScene.__super.call(this);
			console.log("codeScene init");
		}

		__class(CodeScene,'laya.ide.viewer.CodeScene',_super);
		var __proto=CodeScene.prototype;
		__proto.setUp=function(parent){
			console.log("codeScene setUp");
			CodeViewManager.I.show();
			CodeViewManager.openFile(this.pagePath);
		}

		__proto.removeSelf=function(){
			_super.prototype.removeSelf.call(this);
			console.log("codeScene removeSelf");
			CodeViewManager.I.hide();
		}

		__getset(0,__proto,'pagePath',_super.prototype._$get_pagePath,function(path){
			_super.prototype._$set_pagePath.call(this,path);
		});

		return CodeScene;
	})(SceneBase)


	/**
	*粒子编辑页面
	*@author ww
	*@version 1.0
	*
	*@created 2015-10-21 下午7:51:20
	*/
	//class laya.ide.viewer.ParticleScene extends laya.ide.viewer.SceneBase
	var ParticleScene=(function(_super){
		function ParticleScene(){
			ParticleScene.__super.call(this);
		}

		__class(ParticleScene,'laya.ide.viewer.ParticleScene',_super);
		var __proto=ParticleScene.prototype;
		__proto.setUp=function(parent){
			console.log("ParticleScene setUp");
			this.addRenderFrame();
		}

		__proto.open=function(){
			_super.prototype.open.call(this);
			console.log("ParticleScene open");
			DialogTools.showOpenFile("打开粒子文件",Utils1.bind(this.openFile,this),DialogTools.getOpenParticleO());
		}

		__proto.openFile=function(file){
			console.log("openParticleFile",file);
			if(file){
				var jsonStr=FileTools.readFile(file[0]);
				var data=ObjectTools.getObj(jsonStr);
				ViewRenderManager.render.setData(data);
				var particleData;
				particleData=ObjectTools.flatObj(data);
				Notice.notify("PropPanel_setByObj",[particleData,ParticleScene.ParticleType]);
				console.log("configJson:",ObjectTools.getJsonString(data));
			}
		}

		__proto.save=function(){
			_super.prototype.save.call(this);
			if (this.pagePath){
				this.saveFile(this.pagePath);
				}else{
				DialogTools.showSave("保存粒子配置文件","particle.json",Utils1.bind(this.saveFile,this));
			}
		}

		__proto.onResClick=function(data){
			console.log("resClick here:",data);
		}

		//ViewRenderManager.render.updateData(updateData);
		__proto.renderDragDrop=function(e){
			_super.prototype.renderDragDrop.call(this,e);
			console.log("renderDragDrop");
			if(e.data&&e.data.type=="res"){
				if(ResFileManager.isResFile(e.data.asset))
					this.changeValue("textureName",FileManager.getRelativePath(SystemSetting.assetsPath,e.data.asset));
			}
		}

		__proto.propChange=function(key,data){
			_super.prototype.propChange.call(this,key,data);
			this.particleValueChange(key,data)
		}

		__proto.changeTextureByPath=function(path){
			var updateData;
			updateData={};
			updateData.type="texture";
			updateData.url=path;
			ViewRenderManager.render.updateData(updateData);
		}

		__proto.saveFile=function(file){
			console.log("saveParticleFile:",file);
			if(file){
				var data=ViewRenderManager.render.getRenderData();
				FileTools.createFile(file,ObjectTools.getJsonString(data));
				MessageManager.instance.show("保存成功");
				this._changed=false;
				StateManager.setChangeState(this.pagePath,false);
				Laya.stage.event("pageSaved");
				Laya.stage.event("pageChanged");
			}
		}

		__proto.addRenderFrame=function(){
			console.log("addRenderFrame");
			ViewRenderManager.setRender("renders/particle/editor.max.html");
			this.show();
			ViewRenderManager.eDispatcher.once("complete",this,this.initParticleEditor);
		}

		//changeTest();
		__proto.initParticleEditor=function(){
			this._changed=false;
			var data;
			if(this.pagePath){
				console.log("dataFromFile:",this.pagePath);
				if(StateManager.has(this.pagePath)){
					data=StateManager.getState(this.pagePath).now();
					}else{
					var jsonStr=FileTools.readFile(this.pagePath);
					data=ObjectTools.getObj(jsonStr);
					StateManager.updateState(this.pagePath,data);
				}
				}else{
				console.log("dataFromRender");
				data=ViewRenderManager.render.getRenderData();
			}
			console.log("reanderData:",data);
			console.log("flatData:",ObjectTools.flatObj(data));
			var particleData;
			particleData=ObjectTools.flatObj(data);
			Notice.notify("PropPanel_setByObj",[particleData,ParticleScene.ParticleType]);
			this.renderByData(data);
		}

		__proto.renderByData=function(data){
			var updateData;
			updateData={};
			updateData.type="init";
			updateData.url=FileTools.getAbsPath(this.pagePath);
			updateData.base=FileTools.getAbsPath(SystemSetting.assetsPath+FileTools.getSep());
			updateData.data=data;
			ViewRenderManager.render.getStage()["bgColor"]=data.backColor;
			ViewRenderManager.render.updateData(updateData);
			Notice.notify("SHOW_DISPLAY_TREE",[ViewRenderManager.render.getStage()]);
		}

		__proto.goBack=function(){
			_super.prototype.goBack.call(this);
			var data=StateManager.getState(this.pagePath).back();
			if(!data){
				console.log("当前不可回退");
				return;
			};
			var particleData;
			particleData=ObjectTools.flatObj(data);
			Notice.notify("PropPanel_setByObj",[particleData,ParticleScene.ParticleType]);
			this.setRenderData(data);
		}

		__proto.goForward=function(){
			_super.prototype.goForward.call(this);
			var data=StateManager.getState(this.pagePath).forward();
			if(!data){
				console.log("当前不可前进");
				return;
			};
			var particleData;
			particleData=ObjectTools.flatObj(data);
			Notice.notify("PropPanel_setByObj",[particleData,ParticleScene.ParticleType]);
			this.setRenderData(data);
		}

		__proto.changeValue=function(key,value){
			var data=ViewRenderManager.render.getRenderData();
			if(data.hasOwnProperty(key)){
				ObjectTools.setKeyValue(data,key,value);
			};
			var particleData;
			particleData=ObjectTools.flatObj(data);
			Notice.notify("PropPanel_setByObj",[particleData,ParticleScene.ParticleType]);
			this.particleValueChange(key,value);
		}

		__proto.particleValueChange=function(key,value){
			console.log("particleValueChange:",key,value);
			var data=ViewRenderManager.render.getRenderData();
			if (key=="textureFileName"){
				ObjectTools.setKeyValue(data,key,value);
				this.changeTextureByPath(value);
				this._changed=true;
				StateManager.updateState(this.pagePath,data);
				Laya.stage.event("pageChanged");
				return;
				}else{
				ObjectTools.setKeyValue(data,key,ObjectTools.getAutoValue(value));
				StateManager.updateState(this.pagePath,data);
			}
			this.setRenderData(data);
		}

		__proto.setRenderData=function(data){
			this.renderByData(data);
			this._changed=true;
			StateManager.setChangeState(this.pagePath,true);
			console.log("configJson:",ObjectTools.getJsonString(data));
			Laya.stage.event("pageChanged");
		}

		__getset(0,__proto,'hasChange',function(){
			return StateManager.hasChange(this.pagePath);
		});

		ParticleScene.ParticleType="Particle";
		return ParticleScene;
	})(SceneBase)


	/**
	*
	*@author ww
	*@version 1.0
	*
	*@created 2016-2-23 上午11:06:53
	*/
	//class laya.ide.viewer.SceneEditorScene extends laya.ide.viewer.SceneBase
	var SceneEditorScene=(function(_super){
		function SceneEditorScene(){
			this._parent=null;
			this._ui=null;
			SceneEditorScene.__super.call(this);
		}

		__class(SceneEditorScene,'laya.ide.viewer.SceneEditorScene',_super);
		var __proto=SceneEditorScene.prototype;
		__proto.setUp=function(parent){
			_super.prototype.setUp.call(this);
			this._parent=parent;
			this.createUI();
		}

		__proto.createUI=function(){
			this._ui=new Sprite();
			var txt=new Text();
			txt.text="我是场景编辑器";
			txt.pos(100,100);
			txt.color="#ff0000";
			this._ui.addChild(txt);
			if(this._ui){
				this._ui["top"]=0;
				this._ui["left"]=0;
			}
		}

		//_ui["right"]=0;
		__proto.removeSelf=function(){
			_super.prototype.removeSelf.call(this);
			if(this._ui)this._ui.removeSelf();
		}

		__proto.show=function(){
			if(this._parent&&this._ui){
				this._parent.addChild(this._ui);
			}
		}

		return SceneEditorScene;
	})(SceneBase)


	/**
	*显示对象页
	*@author ww
	*@version 1.0
	*
	*@created 2015-11-28 上午10:36:33
	*/
	//class laya.ide.viewer.UIPageScene extends laya.ide.viewer.SceneBase
	var UIPageScene=(function(_super){
		function UIPageScene(){
			this._parent=null;
			this._ui=null;
			UIPageScene.__super.call(this);
		}

		__class(UIPageScene,'laya.ide.viewer.UIPageScene',_super);
		var __proto=UIPageScene.prototype;
		__proto.setUp=function(parent){
			_super.prototype.setUp.call(this);
			this._parent=parent;
			this._ui=this.data;
			if(this._ui){
				this._ui["top"]=0;
				this._ui["left"]=0;
			}
		}

		//_ui["right"]=0;
		__proto.removeSelf=function(){
			_super.prototype.removeSelf.call(this);
			if(this._ui)this._ui.removeSelf();
		}

		__proto.show=function(){
			if(this._parent&&this._ui){
				this._parent.addChild(this._ui);
			}
		}

		return UIPageScene;
	})(SceneBase)


	/**
	*iFrame页
	*@author ww
	*@version 1.0
	*
	*@created 2015-11-27 下午7:55:01
	*/
	//class laya.ide.viewer.WebPageScene extends laya.ide.viewer.SceneBase
	var WebPageScene=(function(_super){
		function WebPageScene(){
			WebPageScene.__super.call(this);
		}

		__class(WebPageScene,'laya.ide.viewer.WebPageScene',_super);
		var __proto=WebPageScene.prototype;
		__proto.setUp=function(parent){
			_super.prototype.setUp.call(this);
			this.addRenderFrame();
		}

		__proto.addRenderFrame=function(){
			console.log("addRenderFrame");
			ViewRenderManager.setRender(this.pagePath);
			ViewRenderManager.show();
			ViewRenderManager.eDispatcher.once("complete",this,this.initWebScene);
		}

		//changeTest();
		__proto.initWebScene=function(){
			console.log("webPageSceneAdded");
		}

		return WebPageScene;
	})(SceneBase)


	/**
	*<code>CSSStyle</code> 类是元素CSS样式定义类。
	*@author laya
	*/
	//class laya.display.css.CSSStyle extends laya.display.css.Style
	var CSSStyle=(function(_super){
		function CSSStyle(ower){
			this._bgground=null;
			this._border=null;
			//this._ower=null;
			this._rect=null;
			this.lineHeight=0;
			CSSStyle.__super.call(this);
			this._padding=CSSStyle._PADDING;
			this._spacing=CSSStyle._SPACING;
			this._aligns=CSSStyle._ALIGNS;
			this._font=Font.EMPTY;
			this._ower=ower;
		}

		__class(CSSStyle,'laya.display.css.CSSStyle',_super);
		var __proto=CSSStyle.prototype;
		/**@inheritDoc */
		__proto.destroy=function(){
			this._ower=null;
			this._font=null;
			this._rect=null;
		}

		/**
		*复制传入的 CSSStyle 属性值。
		*@param src
		*/
		__proto.inherit=function(src){
			this._font=src._font;
			this._spacing=src._spacing===CSSStyle._SPACING ? CSSStyle._SPACING :src._spacing.slice();
			this.lineHeight=src.lineHeight;
		}

		/**@private */
		__proto._widthAuto=function(){
			return (this._type & 0x40000)!==0;
		}

		/**@inheritDoc */
		__proto.widthed=function(sprite){
			return (this._type & 0x8)!=0;
		}

		__proto._calculation=function(type,value){
			if (value.indexOf('%')< 0)return false;
			var ower=this._ower;
			var parent=ower.parent;
			var rect=this._rect;
			function getValue (pw,w,nums){
				return (pw *nums[0]+w *nums[1]+nums[2]);
			}
			function onParentResize (type){
				var pw=parent.width,w=ower.width;
				rect.width && (ower.width=getValue(pw,w,rect.width));
				rect.height && (ower.height=getValue(pw,w,rect.height));
				rect.left && (ower.x=getValue(pw,w,rect.left));
				rect.top && (ower.y=getValue(pw,w,rect.top));
			}
			if (rect===null){
				parent._getCSSStyle()._type |=0x80000;
				parent.on("resize",this,onParentResize);
				this._rect=rect={input:{}};
			};
			var nums=value.split(' ');
			nums[0]=parseFloat(nums[0])/ 100;
			if (nums.length==1)
				nums[1]=nums[2]=0;
			else {
				nums[1]=parseFloat(nums[1])/ 100;
				nums[2]=parseFloat(nums[2]);
			}
			rect[type]=nums;
			rect.input[type]=value;
			onParentResize(type);
			return true;
		}

		/**
		*
		*@param sprite
		*@return
		*/
		__proto.heighted=function(sprite){
			return (this._type & 0x2000)!=0;
		}

		/**
		*设置宽高。
		*@param w
		*@param h
		*/
		__proto.size=function(w,h){
			var ower=this._ower;
			var resize=false;
			if (w!==-1 && w !=this._ower.width){
				this._type |=0x8;
				this._ower.width=w;
				resize=true;
			}
			if (h!==-1 && h !=this._ower.height){
				this._type |=0x2000;
				this._ower.height=h;
				resize=true;
			}
			if (resize){
				ower.layoutLater();
				(this._type & 0x80000)&& ower.event("resize",this);
			}
		}

		/**@private */
		__proto._getAlign=function(){
			return this._aligns[0];
		}

		/**@private */
		__proto._getValign=function(){
			return this._aligns[1];
		}

		/**@private */
		__proto._getCssFloat=function(){
			return (this._type & 0x8000)!=0 ? 0x8000 :0;
		}

		__proto._createFont=function(){
			return (this._type & 0x1000)? this._font :(this._type |=0x1000,this._font=new Font(this._font));
		}

		/**@inheritDoc */
		__proto.render=function(sprite,context,x,y){
			var w=sprite.width;
			var h=sprite.height;
			this._bgground && this._bgground.color !=null && context.ctx.fillRect(x,y,w,h,this._bgground.color);
			this._border && this._border.color && context.drawRect(x,y,w,h,this._border.color.strColor,this._border.size);
		}

		/**@inheritDoc */
		__proto.getCSSStyle=function(){
			return this;
		}

		/**
		*设置CSS样式字符串。
		*@param text
		*/
		__proto.cssText=function(text){
			this.attrs(CSSStyle.parseOneCSS(text,';'));
		}

		/**
		*根据传入的属性名、属性值列表，设置此对象的属性值。
		*@param attrs
		*/
		__proto.attrs=function(attrs){
			if (attrs){
				for (var i=0,n=attrs.length;i < n;i++){
					var attr=attrs[i];
					this[attr[0]]=attr[1];
				}
			}
		}

		/**
		*定义 X 轴、Y 轴移动转换。
		*@param x
		*@param y
		*/
		__proto.translate=function(x,y){
			this._tf===Style._TF_EMPTY && (this._tf=Style._createTransform());
			this._tf.translateX=x;
			this._tf.translateY=y;
		}

		/**
		*定义 缩放转换。
		*@param x
		*@param y
		*/
		__proto.scale=function(x,y){
			this._tf===Style._TF_EMPTY && (this._tf=Style._createTransform());
			this._tf.scaleX=x;
			this._tf.scaleY=y;
		}

		/**@private */
		__proto._enableLayout=function(){
			return (this._type & 0x2)===0 && (this._type & 0x4)===0;
		}

		/**
		*水平对齐方式。
		*/
		__getset(0,__proto,'align',function(){
			return CSSStyle._aligndef[this._aligns[0]];
			},function(value){
			this._aligns===CSSStyle._ALIGNS && (this._aligns=[0,0,0]);
			this._aligns[0]=CSSStyle._aligndef[value];
		});

		/**@inheritDoc */
		__getset(0,__proto,'paddingTop',function(){
			return this.padding[0];
		});

		__getset(0,__proto,'block',_super.prototype._$get_block,function(value){
			value ? (this._type |=0x1):(this._type &=(~0x1));
		});

		/**
		*边距信息。
		*/
		__getset(0,__proto,'padding',function(){
			return this._padding;
			},function(value){
			this._padding=value;
		});

		/**
		*表示宽度。
		*/
		__getset(0,__proto,'width',null,function(w){
			this._type |=0x8;
			if ((typeof w=='string')){
				var offset=w.indexOf('auto');
				if (offset >=0){
					this._type |=0x40000;
					w=w.substr(0,offset);
				}
				if (this._calculation("width",w))return;
				w=Laya.__parseInt(w);
			}
			this.size(w,-1);
		});

		/**
		*表示高度。
		*/
		__getset(0,__proto,'height',null,function(h){
			this._type |=0x2000;
			if ((typeof h=='string')){
				if (this._calculation("height",h))return;
				h=Laya.__parseInt(h);
			}
			this.size(-1,h);
		});

		__getset(0,__proto,'_scale',null,function(value){
			this._ower.scale(value[0],value[1]);
		});

		/**
		*浮动方向。
		*/
		__getset(0,__proto,'cssFloat',function(){
			return (this._type & 0x8000)!=0 ? "right" :"left";
			},function(value){
			this.lineElement=false;
			value==="right" ? (this._type |=0x8000):(this._type &=(~0x8000));
		});

		/**
		*字体、字号。
		*/
		__getset(0,__proto,'font',function(){
			return this._font.toString();
			},function(value){
			this._createFont().set(value);
		});

		__getset(0,__proto,'lineElement',function(){
			return (this._type & 0x10000)!=0;
			},function(value){
			value ? (this._type |=0x10000):(this._type &=(~0x10000));
		});

		/**
		*垂直对齐方式。
		*/
		__getset(0,__proto,'valign',function(){
			return CSSStyle._valigndef[this._aligns[1]];
			},function(value){
			this._aligns===CSSStyle._ALIGNS && (this._aligns=[0,0,0]);
			this._aligns[1]=CSSStyle._valigndef[value];
		});

		/**
		*边框属性。
		*/
		__getset(0,__proto,'border',function(){
			return this._border ? this._border.value :"";
			},function(value){
			if (value=='none'){
				this._border=null;
				return;
			}
			this._border || (this._border={});
			this._border.value=value;
			var values=value.split(' ');
			this._border.color=Color.create(values[values.length-1]);
			if (values.length==1){
				this._border.size=1;
				this._border.type='solid';
				return;
			};
			var i=0;
			if (values[0].indexOf('px')> 0){
				this._border.size=Laya.__parseInt(values[0]);
				i++;
			}else this._border.size=1;
			this._border.type=values[i];
			this._ower._renderType |=0x80;
		});

		/**
		*行间距。
		*/
		__getset(0,__proto,'leading',function(){
			return this._spacing[1];
			},function(d){
			((typeof d=='string'))&& (d=Laya.__parseInt(d+""));
			this._spacing===CSSStyle._SPACING && (this._spacing=[0,0]);
			this._spacing[1]=d;
		});

		/**
		*表示左边距。
		*/
		__getset(0,__proto,'left',null,function(value){
			var ower=this._ower;
			if (((typeof value=='string'))){
				if (value==="center")
					value="50% -50% 0";
				else if (value==="right")
				value="100% -100% 0";
				if (this._calculation("left",value))return;
				value=Laya.__parseInt(value);
			}
			ower.x=value;
		});

		/**
		*元素的定位类型。
		*/
		__getset(0,__proto,'position',function(){
			return (this._type & 0x4)? "absolute" :"";
			},function(value){
			value=="absolute" ? (this._type |=0x4):(this._type &=~0x4);
		});

		/**
		*表示上边距。
		*/
		__getset(0,__proto,'top',null,function(value){
			var ower=this._ower;
			if (((typeof value=='string'))){
				if (value==="middle")
					value="50% -50% 0";
				else if (value==="bottom")
				value="100% -100% 0";
				if (this._calculation("top",value))return;
				value=Laya.__parseInt(value);
			}
			ower.y=value;
		});

		/**
		*设置如何处理元素内的空白。
		*/
		__getset(0,__proto,'whiteSpace',function(){
			return (this._type & 0x20000)? "nowrap" :"";
			},function(type){
			type==="nowrap" && (this._type |=0x20000);
			type==="none" && (this._type &=~0x20000);
		});

		/**
		*表示是否换行。
		*/
		__getset(0,__proto,'wordWrap',function(){
			return (this._type & 0x20000)===0;
			},function(value){
			value ? (this._type &=~0x20000):(this._type |=0x20000);
		});

		/**
		*表示是否加粗。
		*/
		__getset(0,__proto,'bold',function(){
			return this._font.bold;
			},function(value){
			this._createFont().bold=value;
		});

		/**
		*<p>指定文本字段是否是密码文本字段。</p>
		*如果此属性的值为 true，则文本字段被视为密码文本字段，并使用星号而不是实际字符来隐藏输入的字符。如果为 false，则不会将文本字段视为密码文本字段。
		*/
		__getset(0,__proto,'password',function(){
			return this._font.password;
			},function(value){
			this._createFont().password=value;
		});

		/**
		*设置文本的粗细。
		*/
		__getset(0,__proto,'weight',null,function(value){
			this._createFont().weight=value;
		});

		/**
		*间距。
		*/
		__getset(0,__proto,'letterSpacing',function(){
			return this._spacing[0];
			},function(d){
			((typeof d=='string'))&& (d=Laya.__parseInt(d+""));
			this._spacing===CSSStyle._SPACING && (this._spacing=[0,0]);
			this._spacing[0]=d;
		});

		/**
		*字体大小。
		*/
		__getset(0,__proto,'fontSize',function(){
			return this._font.size;
			},function(value){
			this._createFont().size=value;
		});

		/**
		*表示是否为斜体。
		*/
		__getset(0,__proto,'italic',function(){
			return this._font.italic;
			},function(value){
			this._createFont().italic=value;
		});

		/**
		*字体系列。
		*/
		__getset(0,__proto,'fontFamily',function(){
			return this._font.family;
			},function(value){
			this._createFont().family=value;
		});

		/**
		*字体粗细。
		*/
		__getset(0,__proto,'fontWeight',function(){
			return this._font.weight;
			},function(value){
			this._createFont().weight=value;
		});

		/**
		*添加到文本的修饰。
		*/
		__getset(0,__proto,'textDecoration',function(){
			return this._font.decoration;
			},function(value){
			this._createFont().decoration=value;
		});

		/**
		*字体颜色。
		*/
		__getset(0,__proto,'color',function(){
			return this._font.color;
			},function(value){
			this._createFont().color=value;
		});

		/**
		*<p>描边颜色，以字符串表示。</p>
		*@default "#000000";
		*/
		__getset(0,__proto,'strokeColor',function(){
			return this._font.stroke[1];
			},function(value){
			if (this._createFont().stroke===Font._STROKE)this._font.stroke=[0,"#000000"];
			this._font.stroke[1]=value;
		});

		/**
		*边框的颜色。
		*/
		__getset(0,__proto,'borderColor',function(){
			return (this._border && this._border.color)? this._border.color.strColor :null;
			},function(value){
			this._border || (this._border={size:1,type:'solid'});
			this._border.color=(value==null)? null :Color.create(value);
			this._ower._renderType |=0x80;
		});

		/**
		*<p>描边宽度（以像素为单位）。</p>
		*默认值0，表示不描边。
		*@default 0
		*/
		__getset(0,__proto,'stroke',function(){
			return this._font.stroke[0];
			},function(value){
			if (this._createFont().stroke===Font._STROKE)this._font.stroke=[0,"#000000"];
			this._font.stroke[0]=value;
		});

		/**
		*背景颜色。
		*/
		__getset(0,__proto,'backgroundColor',function(){
			return this._bgground ? this._bgground.color :"";
			},function(value){
			if (value==='none')this._bgground=null;
			else (this._bgground || (this._bgground={}),this._bgground.color=value);
			this._ower._renderType |=0x80;
		});

		/**@inheritDoc */
		__getset(0,__proto,'absolute',function(){
			return (this._type & 0x4)!==0;
		});

		__getset(0,__proto,'background',null,function(value){
			this._bgground || (this._bgground={});
			this._bgground.color=value;
			this._type |=0x4000;
			this._ower._renderType |=0x80;
		});

		/**@inheritDoc */
		__getset(0,__proto,'paddingLeft',function(){
			return this.padding[3];
		});

		/**
		*规定元素应该生成的框的类型。
		*/
		__getset(0,__proto,'display',null,function(value){
			switch (value){
				case '':
					this._type &=~0x2;
					this.visible=true;
					break ;
				case 'none':
					this._type |=0x2;
					this.visible=false;
					this._ower.layoutLater();
					break ;
				}
		});

		/**@inheritDoc */
		__getset(0,__proto,'transform',_super.prototype._$get_transform,function(value){
			(value==='none')? (this._tf=Style._TF_EMPTY):this.attrs(CSSStyle.parseOneCSS(value,','));
		});

		__getset(0,__proto,'_translate',null,function(value){
			this.translate(value[0],value[1]);
		});

		__getset(0,__proto,'_rotate',null,function(value){
			this._ower.rotation=value;
		});

		CSSStyle.parseOneCSS=function(text,clipWord){
			var out=[];
			var attrs=text.split(clipWord);
			var valueArray;
			for (var i=0,n=attrs.length;i < n;i++){
				var attr=attrs[i];
				var ofs=attr.indexOf(':');
				var name=attr.substr(0,ofs).replace(/^\s+|\s+$/g,'');
				var value=attr.substr(ofs+1).replace(/^\s+|\s+$/g,'');
				var one=[name,value];
				switch (name){
					case 'italic':
					case 'bold':
						one[1]=value=="true";
						break ;
					case 'line-height':
						one[0]='lineHeight';
						one[1]=Laya.__parseInt(value);
						break ;
					case 'font-size':
						one[0]='fontSize';
						one[1]=Laya.__parseInt(value);
						break ;
					case 'padding':
						valueArray=value.split(' ');
						valueArray.length > 1 || (valueArray[1]=valueArray[2]=valueArray[3]=valueArray[0]);
						one[1]=[Laya.__parseInt(valueArray[0]),Laya.__parseInt(valueArray[1]),Laya.__parseInt(valueArray[2]),Laya.__parseInt(valueArray[3])];
						break ;
					case 'rotate':
						one[0]="_rotate";
						one[1]=parseFloat(value);
						break ;
					case 'scale':
						valueArray=value.split(' ');
						one[0]="_scale";
						one[1]=[parseFloat(valueArray[0]),parseFloat(valueArray[1])];
						break ;
					case 'translate':
						valueArray=value.split(' ');
						one[0]="_translate";
						one[1]=[Laya.__parseInt(valueArray[0]),Laya.__parseInt(valueArray[1])];
						break ;
					default :
						(one[0]=CSSStyle._CSSTOVALUE[name])|| (one[0]=name);
					}
				out.push(one);
			}
			return out;
		}

		CSSStyle.parseCSS=function(text,uri){
			var one;
			while ((one=CSSStyle._parseCSSRegExp.exec(text))!=null){
				CSSStyle.styleSheets[one[1]]=CSSStyle.parseOneCSS(one[2],';');
			}
		}

		CSSStyle.EMPTY=new CSSStyle(null);
		CSSStyle.styleSheets={};
		CSSStyle.ALIGN_CENTER=1;
		CSSStyle.ALIGN_RIGHT=2;
		CSSStyle.VALIGN_MIDDLE=1;
		CSSStyle.VALIGN_BOTTOM=2;
		CSSStyle._CSS_BLOCK=0x1;
		CSSStyle._DISPLAY_NONE=0x2;
		CSSStyle._ABSOLUTE=0x4;
		CSSStyle._WIDTH_SET=0x8;
		CSSStyle._PADDING=[0,0,0,0];
		CSSStyle._RECT=[-1,-1,-1,-1];
		CSSStyle._SPACING=[0,0];
		CSSStyle._ALIGNS=[0,0,0];
		CSSStyle.ADDLAYOUTED=0x200;
		CSSStyle._NEWFONT=0x1000;
		CSSStyle._HEIGHT_SET=0x2000;
		CSSStyle._BACKGROUND_SET=0x4000;
		CSSStyle._FLOAT_RIGHT=0x8000;
		CSSStyle._LINE_ELEMENT=0x10000;
		CSSStyle._NOWARP=0x20000;
		CSSStyle._WIDTHAUTO=0x40000;
		CSSStyle._LISTERRESZIE=0x80000;
		CSSStyle._aligndef={'left':0,'center':1,'right':2,0:'left',1:'center',2:'right'};
		CSSStyle._valigndef={'top':0,'middle':1,'bottom':2,0:'top',1:'middle',2:'bottom'};
		CSSStyle._CSSTOVALUE={'letter-spacing':'letterSpacing','line-spacing':'lineSpacing','white-space':'whiteSpace','line-height':'lineHeight','scale-x':'scaleX','scale-y':'scaleY','translate-x':'translateX','translate-y':'translateY','font-family':'fontFamily','font-weight':'fontWeight','vertical-align':'valign','text-decoration':'textDecoration','background-color':'backgroundColor','border-color':'borderColor','float':'cssFloat'};
		CSSStyle._parseCSSRegExp=new RegExp("([\.\#]\\w+)\\s*{([\\s\\S]*?)}","g");
		return CSSStyle;
	})(Style)


	/**
	*颜色变化滤镜
	*@author ww
	*@version 1.0
	*
	*@created 2015-9-18 上午10:52:10
	*/
	//class laya.filters.ColorFilter extends laya.filters.Filter
	var ColorFilter=(function(_super){
		function ColorFilter(mat){
			//this._elements=null;
			ColorFilter.__super.call(this);
			if (!mat){
				this._elements=ColorFilter.DEFAULT._elements;
				return;
			}
			this._elements=new Float32Array(20);
			for (var i=0;i < 20;i++){
				this._elements[i]=mat[i];
			}
			this._action=System.createFilterAction(0x20);
			this._action.data=this;
		}

		__class(ColorFilter,'laya.filters.ColorFilter',_super);
		var __proto=ColorFilter.prototype;
		Laya.imps(__proto,{"laya.filters.IFilter":true})
		__getset(0,__proto,'type',function(){
			return 0x20;
		});

		__getset(0,__proto,'action',function(){
			return this._action;
		});

		__static(ColorFilter,
		['DEFAULT',function(){return this.DEFAULT=new ColorFilter([1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0]);},'GRAY',function(){return this.GRAY=new ColorFilter([0.3,0.59,0.11,0,0,0.3,0.59,0.11,0,0,0.3,0.59,0.11,0,0,0,0,0,1,0]);}
		]);
		return ColorFilter;
	})(Filter)


	/**
	*<code>AutoBitmap</code> 类是用于表示位图图像或绘制图形的显示对象。
	*
	*<p>封装了位置，宽高及九宫格的处理，供UI组件使用。</p>
	*
	*@author lai
	*/
	//class laya.ui.AutoBitmap extends laya.display.Graphics
	var AutoBitmap=(function(_super){
		function AutoBitmap(){
			this.autoCacheCmd=true;
			this._width=0;
			this._height=0;
			this._source=null;
			this._sizeGrid=null;
			AutoBitmap.__super.call(this);
		}

		__class(AutoBitmap,'laya.ui.AutoBitmap',_super);
		var __proto=AutoBitmap.prototype;
		/**@inheritDoc */
		__proto.destroy=function(){
			_super.prototype.destroy.call(this);
			this._source=null;
			this._sizeGrid=null;
		}

		/**
		*@private
		*修改纹理资源。
		*/
		__proto.changeSource=function(){
			var source=this._source;
			if (!source)return;
			var width=this.width;
			var height=this.height;
			var sizeGrid=this._sizeGrid;
			var sw=source.width;
			var sh=source.height;
			if (!sizeGrid || (sw===width && sh===height)){
				this.clear();
				this.drawTexture(source,0,0,width,height);
				}else {
				source.$_GID || (source.$_GID=Utils1.getGID());
				var key=source.$_GID+"."+width+"."+height+"."+sizeGrid.join(".");
				if (AutoBitmap.cmdCaches[key]){
					this.cmds=AutoBitmap.cmdCaches[key];
					return;
				}
				this.clear();
				var top=sizeGrid[0];
				var right=sizeGrid[1];
				var bottom=sizeGrid[2];
				var left=sizeGrid[3];
				if (left+right > width){
					right=0;
				}
				left && top && this.drawTexture(AutoBitmap.getTexture(source,0,0,left,top),0,0,left,top);
				right && top && this.drawTexture(AutoBitmap.getTexture(source,sw-right,0,right,top),width-right,0,right,top);
				left && bottom && this.drawTexture(AutoBitmap.getTexture(source,0,sh-bottom,left,bottom),0,height-bottom,left,bottom);
				right && bottom && this.drawTexture(AutoBitmap.getTexture(source,sw-right,sh-bottom,right,bottom),width-right,height-bottom,right,bottom);
				top && this.drawTexture(AutoBitmap.getTexture(source,left,0,sw-left-right,top),left,0,width-left-right,top);
				bottom && this.drawTexture(AutoBitmap.getTexture(source,left,sh-bottom,sw-left-right,bottom),left,height-bottom,width-left-right,bottom);
				left && this.drawTexture(AutoBitmap.getTexture(source,0,top,left,sh-top-bottom),0,top,left,height-top-bottom);
				right && this.drawTexture(AutoBitmap.getTexture(source,sw-right,top,right,sh-top-bottom),width-right,top,right,height-top-bottom);
				this.drawTexture(AutoBitmap.getTexture(source,left,top,sw-left-right,sh-top-bottom),left,top,width-left-right,height-top-bottom);
				if (this.autoCacheCmd)AutoBitmap.cmdCaches[key]=this._cmds;
			}
			this._repaint();
		}

		/**
		*当前实例的有效缩放网格数据。
		*<p>如果设置为null,则在应用任何缩放转换时，将正常缩放整个显示对象。</p>
		*<p>数据格式：[上边距,右边距,下边距,左边距,是否重复填充(值为0：不重复填充，1：重复填充)]。
		*<ul><li>例如：[4,4,4,4,1]</li></ul></p>
		*<p> <code>sizeGrid</code> 的值如下所示：
		*<ol>
		*<li>上边距</li>
		*<li>右边距</li>
		*<li>下边距</li>
		*<li>左边距</li>
		*<li>是否重复填充(值为0：不重复填充，1：重复填充)</li>
		*</ol></p>
		*<p>当定义 <code>sizeGrid</code> 属性时，该显示对象被分割到以 <code>sizeGrid</code> 数据中的"上边距,右边距,下边距,左边距" 组成的矩形为基础的具有九个区域的网格中，该矩形定义网格的中心区域。网格的其它八个区域如下所示：
		*<ul>
		*<li>矩形上方的区域</li>
		*<li>矩形外的右上角</li>
		*<li>矩形左侧的区域</li>
		*<li>矩形右侧的区域</li>
		*<li>矩形外的左下角</li>
		*<li>矩形下方的区域</li>
		*<li>矩形外的右下角</li>
		*<li>矩形外的左上角</li>
		*</ul>
		*同时也支持3宫格，比如0,4,0,4,1为水平3宫格，4,0,4,0,1为垂直3宫格，3宫格性能比9宫格高。
		*</p>
		*
		*@param value
		*/
		__getset(0,__proto,'sizeGrid',function(){
			return this._sizeGrid;
			},function(value){
			this._sizeGrid=value;
			Laya.timer.callLater(this,this.changeSource);
		});

		/**
		*对象的纹理资源。
		*
		*@see laya.resource.Texture
		*@return
		*/
		__getset(0,__proto,'source',function(){
			return this._source;
			},function(value){
			if (value){
				this._source=value
				Laya.timer.callLater(this,this.changeSource);
				}else {
				this._source=null;
				this.clear();
			}
		});

		/**
		*表示显示对象的宽度，以像素为单位。
		*/
		__getset(0,__proto,'width',function(){
			if (this._width)return this._width;
			if (this._source)return this._source.width;
			return 0;
			},function(value){
			this._width=value;
			Laya.timer.callLater(this,this.changeSource);
		});

		/**
		*表示显示对象的高度，以像素为单位。
		*/
		__getset(0,__proto,'height',function(){
			if (this._height)return this._height;
			if (this._source)return this._source.height;
			return 0;
			},function(value){
			this._height=value;
			Laya.timer.callLater(this,this.changeSource);
		});

		AutoBitmap.getTexture=function(source,x,y,width,height){
			source.$GID || (source.$GID=Utils1.getGID())
			var key=source.$GID+"."+x+"."+y+"."+width+"."+height;
			var texture=AutoBitmap.textureCache[key];
			if (!texture){
				texture=AutoBitmap.textureCache[key]=Texture.create(source,x,y,width,height);
			}
			return texture;
		}

		AutoBitmap.clearCache=function(){
			AutoBitmap.cmdCaches={};
			AutoBitmap.textureCache={};
		}

		AutoBitmap.cmdCaches={};
		AutoBitmap.textureCache={};
		return AutoBitmap;
	})(Graphics)


	/**
	*
	*@author ww
	*@version 1.0
	*
	*@created 2015-12-21 下午4:37:29
	*/
	//class laya.particle.emitter.Emitter2D extends laya.particle.emitter.EmitterBase
	var Emitter2D=(function(_super){
		function Emitter2D(_template){
			this.settiong=null;
			this._posRange=null;
			this._canvasTemplate=null;
			this._emitFun=null;
			Emitter2D.__super.call(this);
			this._particleTemplate=_template;
			this.settiong=_template.settings;
			this._posRange=this.settiong.positionVariance;
			if((_template instanceof laya.particle.ParticleTemplate2D )){
				this._emitFun=this.webGLEmit;
			}else
			if((_template instanceof laya.particle.ParticleTemplateCanvas )){
				this._canvasTemplate=_template;
				this._emitFun=this.canvasEmit;
			}
		}

		__class(Emitter2D,'laya.particle.emitter.Emitter2D',_super);
		var __proto=Emitter2D.prototype;
		__proto.emit=function(){
			_super.prototype.emit.call(this);
			if(this._emitFun!=null)
				this._emitFun();
		}

		__proto.getRandom=function(value){
			return (Math.random()*2-1)*value;
		}

		__proto.webGLEmit=function(){
			var pos=new Float32Array(3);
			pos[0]=this.getRandom(this._posRange[0]);
			pos[1]=this.getRandom(this._posRange[1]);
			pos[2]=this.getRandom(this._posRange[2]);
			var v=new Float32Array(3);
			v[0]=0;
			v[1]=0;
			v[2]=0;
			this._particleTemplate.addParticleArray(pos,v);
		}

		__proto.canvasEmit=function(){
			var pos=new Float32Array(3);
			pos[0]=this.getRandom(this._posRange[0]);
			pos[1]=this.getRandom(this._posRange[1]);
			pos[2]=this.getRandom(this._posRange[2]);
			var v=new Float32Array(3);
			v[0]=0;
			v[1]=0;
			v[2]=0;
			this._particleTemplate.addParticleArray(pos,v);
		}

		return Emitter2D;
	})(EmitterBase)


	/**
	*...
	*@author laya
	*/
	//class laya.particle.ParticleTemplateWebGL extends laya.particle.ParticleTemplateBase
	var ParticleTemplateWebGL=(function(_super){
		function ParticleTemplateWebGL(parSetting){
			this._vertices=null;
			this._vertexBuffer=null;
			this._indexBuffer=null;
			this._floatCountPerVertex=23;
			this._firstActiveElement=0;
			this._firstNewElement=0;
			this._firstFreeElement=0;
			this._firstRetiredElement=0;
			this._currentTime=0;
			this._drawCounter=0;
			ParticleTemplateWebGL.__super.call(this);
			this.settings=parSetting;
		}

		__class(ParticleTemplateWebGL,'laya.particle.ParticleTemplateWebGL',_super);
		var __proto=ParticleTemplateWebGL.prototype;
		__proto.initialize=function(){
			this._vertices=new Float32Array(this.settings.maxPartices *this._floatCountPerVertex *4);
			var particleOffset=0;
			for (var i=0;i < this.settings.maxPartices;i++){
				var random=Math.random();
				var cornerYSegement=1.0 / this.settings.textureCount;
				var cornerY=NaN;
				for (cornerY=0;cornerY < this.settings.textureCount;cornerY+=cornerYSegement){
					if (random < cornerY+cornerYSegement)
						break ;
				}
				particleOffset=i *this._floatCountPerVertex *4;
				this._vertices[particleOffset+this._floatCountPerVertex *0+0]=-1;
				this._vertices[particleOffset+this._floatCountPerVertex *0+1]=-1;
				this._vertices[particleOffset+this._floatCountPerVertex *0+2]=0;
				this._vertices[particleOffset+this._floatCountPerVertex *0+3]=cornerY;
				this._vertices[particleOffset+this._floatCountPerVertex *1+0]=1;
				this._vertices[particleOffset+this._floatCountPerVertex *1+1]=-1;
				this._vertices[particleOffset+this._floatCountPerVertex *1+2]=1;
				this._vertices[particleOffset+this._floatCountPerVertex *1+3]=cornerY;
				this._vertices[particleOffset+this._floatCountPerVertex *2+0]=1;
				this._vertices[particleOffset+this._floatCountPerVertex *2+1]=1;
				this._vertices[particleOffset+this._floatCountPerVertex *2+2]=1;
				this._vertices[particleOffset+this._floatCountPerVertex *2+3]=cornerY+cornerYSegement;
				this._vertices[particleOffset+this._floatCountPerVertex *3+0]=-1;
				this._vertices[particleOffset+this._floatCountPerVertex *3+1]=1;
				this._vertices[particleOffset+this._floatCountPerVertex *3+2]=0;
				this._vertices[particleOffset+this._floatCountPerVertex *3+3]=cornerY+cornerYSegement;
			}
		}

		__proto.loadContent=function(){
			this._vertexBuffer=new Buffer(0x8892,null,null,0x88E8);
			var indexes=new Uint16Array(this.settings.maxPartices *6);
			for (var i=0;i < this.settings.maxPartices;i++){
				indexes[i *6+0]=(i *4+0);
				indexes[i *6+1]=(i *4+1);
				indexes[i *6+2]=(i *4+2);
				indexes[i *6+3]=(i *4+0);
				indexes[i *6+4]=(i *4+2);
				indexes[i *6+5]=(i *4+3);
			}
			this._indexBuffer=new Buffer(0x8893,null);
			this._indexBuffer.length=0;
			this._indexBuffer.append(indexes);
			this._indexBuffer.upload();
		}

		__proto.update=function(elapsedTime){
			this._currentTime+=elapsedTime / 1000;
			this.retireActiveParticles();
			this.freeRetiredParticles();
			if (this._firstActiveElement==this._firstFreeElement)
				this._currentTime=0;
			if (this._firstRetiredElement==this._firstActiveElement)
				this._drawCounter=0;
		}

		__proto.retireActiveParticles=function(){
			var particleDuration=this.settings.duration;
			while (this._firstActiveElement !=this._firstNewElement){
				var index=this._firstActiveElement *this._floatCountPerVertex *4+22;
				var particleAge=this._currentTime-this._vertices[index];
				if (particleAge < particleDuration)
					break ;
				this._vertices[index]=this._drawCounter;
				this._firstActiveElement++;
				if (this._firstActiveElement >=this.settings.maxPartices)
					this._firstActiveElement=0;
			}
		}

		__proto.freeRetiredParticles=function(){
			while (this._firstRetiredElement !=this._firstActiveElement){
				var age=this._drawCounter-this._vertices[this._firstRetiredElement *this._floatCountPerVertex *4+22];
				if (age < 3)
					break ;
				this._firstRetiredElement++;
				if (this._firstRetiredElement >=this.settings.maxPartices)
					this._firstRetiredElement=0;
			}
		}

		__proto.addNewParticlesToVertexBuffer=function(){
			this._vertexBuffer.length=0;
			this._vertexBuffer.setdata(this._vertices);
			var start=0;
			if (this._firstNewElement < this._firstFreeElement){
				start=this._firstNewElement *4 *this._floatCountPerVertex *4;
				this._vertexBuffer.subUpload(start,start,start+(this._firstFreeElement-this._firstNewElement)*4 *this._floatCountPerVertex *4);
			}
			else{
				start=this._firstNewElement *4 *this._floatCountPerVertex *4;
				this._vertexBuffer.subUpload(start,start,start+(this.settings.maxPartices-this._firstNewElement)*4 *this._floatCountPerVertex *4);
				if (this._firstFreeElement > 0){
					this._vertexBuffer.setNeedUpload();
					this._vertexBuffer.subUpload(0,0,this._firstFreeElement *4 *this._floatCountPerVertex *4);
				}
			}
			this._firstNewElement=this._firstFreeElement;
		}

		__proto.addParticleArray=function(position,velocity){
			var nextFreeParticle=this._firstFreeElement+1;
			if (nextFreeParticle >=this.settings.maxPartices)
				nextFreeParticle=0;
			if (nextFreeParticle===this._firstRetiredElement)
				return;
			var particleData=ParticleData.Create(this.settings,position,velocity,this._currentTime);
			var startIndex=this._firstFreeElement *this._floatCountPerVertex *4;
			for (var i=0;i < 4;i++){
				var j=0,offset=0;
				for (j=0,offset=4;j < 3;j++)
				this._vertices[startIndex+i *this._floatCountPerVertex+offset+j]=particleData.position[j];
				for (j=0,offset=7;j < 3;j++)
				this._vertices[startIndex+i *this._floatCountPerVertex+offset+j]=particleData.velocity[j];
				for (j=0,offset=10;j < 4;j++)
				this._vertices[startIndex+i *this._floatCountPerVertex+offset+j]=particleData.color[j];
				for (j=0,offset=14;j < 3;j++)
				this._vertices[startIndex+i *this._floatCountPerVertex+offset+j]=particleData.sizeRotation[j];
				for (j=0,offset=17;j < 4;j++)
				this._vertices[startIndex+i *this._floatCountPerVertex+offset+j]=particleData.radiusRadian[j];
				this._vertices[startIndex+i *this._floatCountPerVertex+21]=particleData.durationAddScale;
				this._vertices[startIndex+i *this._floatCountPerVertex+22]=particleData.time;
			}
			this._firstFreeElement=nextFreeParticle;
		}

		return ParticleTemplateWebGL;
	})(ParticleTemplateBase)


	/**
	*...
	*@author ww
	*/
	//class laya.particle.ParticleTemplateCanvas extends laya.particle.ParticleTemplateBase
	var ParticleTemplateCanvas=(function(_super){
		function ParticleTemplateCanvas(parSetting){
			this._ready=false;
			this.textureList=[];
			this.particleList=[];
			this.pX=0;
			this.pY=0;
			this.activeParticles=[];
			this.deadParticles=[];
			this.iList=[];
			this._maxNumParticles=0;
			this.textureWidth=NaN;
			this.dTextureWidth=NaN;
			this.colorChange=true;
			this.step=1/60;
			this.canvasShader=new CanvasShader();
			ParticleTemplateCanvas.__super.call(this);
			this.settings=parSetting;
			this._maxNumParticles=parSetting.maxPartices;
			this.texture=new Texture();
			this.texture.on("loaded",this,this.textureLoaded);
			this.texture.load(parSetting.textureName);
		}

		__class(ParticleTemplateCanvas,'laya.particle.ParticleTemplateCanvas',_super);
		var __proto=ParticleTemplateCanvas.prototype;
		__proto.textureLoaded=function(e){
			this.setTexture(this.texture);
			this._ready=true;
		}

		__proto.clear=function(clearTexture){
			(clearTexture===void 0)&& (clearTexture=true);
			this.deadParticles.length=0;
			this.activeParticles.length=0;
			this.textureList.length=0;
		}

		/**
		*设置纹理
		*@param texture
		*
		*/
		__proto.setTexture=function(texture){
			this.texture=texture;
			this.textureWidth=texture.width;
			this.dTextureWidth=1/this.textureWidth;
			this.pX=-texture.width*0.5;
			this.pY=-texture.height*0.5;
			this.textureList=ParticleTemplateCanvas.changeTexture(texture,this.textureList);
			this.particleList.length=0;
			this.deadParticles.length=0;
			this.activeParticles.length=0;
		}

		/**
		*创建一个粒子数据
		*@return
		*
		*/
		__proto._createAParticleData=function(position,velocity){
			this.canvasShader.u_EndVelocity=this.settings.endVelocity;
			this.canvasShader.u_Gravity=this.settings.gravity;
			this.canvasShader.u_Duration=this.settings.duration;
			var particle;
			particle=ParticleData.Create(this.settings,position,velocity,0);
			this.canvasShader.a_RadiusRadian=particle.radiusRadian;
			this.canvasShader.a_Position=particle.position;
			this.canvasShader.a_SizeRotation=particle.sizeRotation;
			this.canvasShader.a_Color=particle.color;
			this.canvasShader.a_Velocity=particle.velocity;
			this.canvasShader.a_AgeAddScale=particle.durationAddScale;
			this.canvasShader.oSize=this.textureWidth;
			var rst=new CMDParticle();
			var i=0,len=this.settings.duration/(1+particle.durationAddScale);
			var params=[];
			var mStep=NaN;
			for(i=0;i<len;i+=this.step){
				params.push(this.canvasShader.getData(i));
			}
			rst.id=this.particleList.length;
			this.particleList.push(rst);
			rst.setCmds(params);
			return rst;
		}

		__proto.addParticleArray=function(position,velocity){
			if(!this._ready)return;
			var tParticle;
			if(this.particleList.length<this._maxNumParticles){
				tParticle=this._createAParticleData(position,velocity);
				this.iList[tParticle.id]=0;
				this.activeParticles.push(tParticle);
				}else{
				if(this.deadParticles.length>0){
					tParticle=this.deadParticles.pop();
					this.iList[tParticle.id]=0;
					this.activeParticles.push(tParticle);
				}
			}
		}

		__proto.advanceTime=function(passedTime){
			(passedTime===void 0)&& (passedTime=1);
			if(!this._ready)return;
			var particleList=this.activeParticles;
			var pool=this.deadParticles;
			var i=0,len=particleList.length;
			var tcmd;
			var tI=0;
			var iList=this.iList;
			for(i=len-1;i>-1;i--){
				tcmd=particleList[i];
				tI=iList[tcmd.id];
				if(tI>=tcmd.maxIndex){
					tI=0;
					particleList.splice(i,1);
					pool.push(tcmd);
					}else{
					tI+=1;
				}
				iList[tcmd.id]=tI;
			}
		}

		__proto.render=function(context,x,y){
			if(!this._ready)return;
			if(this.activeParticles.length<1)return;
			if(this.textureList.length<2)return;
			this.canvasRender(context,x,y);
		}

		__proto.noColorRender=function(context,x,y){
			var particleList=this.activeParticles;
			var i=0,len=particleList.length;
			var tcmd;
			var tParam;
			var tAlpha=NaN;
			var px=this.pX,py=this.pY;
			var pw=-px*2,ph=-py*2;
			var tI=0;
			var textureList=this.textureList;
			var iList=this.iList;
			var preAlpha=NaN;
			context.translate(x,y);
			preAlpha=context.ctx.globalAlpha;
			for(i=0;i<len;i++){
				tcmd=particleList[i];
				tI=iList[tcmd.id];
				tParam=tcmd.cmds[tI];
				if ((tAlpha=tParam[1])<=0.01)continue ;
				context.setAlpha(preAlpha*tAlpha);
				context.drawTextureWithTransform(this.texture,px,py,pw,ph,tParam[2]);
			}
			context.setAlpha(preAlpha);
			context.translate(-x,-y);
		}

		__proto.canvasRender=function(context,x,y){
			var particleList=this.activeParticles;
			var i=0,len=particleList.length;
			var tcmd;
			var tParam;
			var tAlpha=NaN;
			var px=this.pX,py=this.pY;
			var pw=-px*2,ph=-py*2;
			var tI=0;
			var textureList=this.textureList;
			var iList=this.iList;
			var preAlpha=NaN;
			var preB;
			context.translate(x,y);
			preAlpha=context.ctx.globalAlpha;
			preB=context.ctx.globalCompositeOperation;
			context.blendMode("lighter");
			for(i=0;i<len;i++){
				tcmd=particleList[i];
				tI=iList[tcmd.id];
				tParam=tcmd.cmds[tI];
				if ((tAlpha=tParam[1])<=0.01)continue ;
				context.save();
				context.transformByMatrix(tParam[2]);
				if(tParam[3]>0.01){
					context.setAlpha(preAlpha*tParam[3]);
					context.drawTexture(textureList[0],px,py,pw,ph);
				}
				if(tParam[4]>0.01){
					context.setAlpha(preAlpha*tParam[4]);
					context.drawTexture(textureList[1],px,py,pw,ph);
				}
				if(tParam[5]>0.01){
					context.setAlpha(preAlpha*tParam[5]);
					context.drawTexture(textureList[2],px,py,pw,ph);
				}
				context.restore();
			}
			context.setAlpha(preAlpha);
			context.translate(-x,-y);
			context.blendMode(preB);
		}

		ParticleTemplateCanvas.changeTexture=function(texture,rst){
			if(!rst)rst=[];
			rst.length=0;
			Utils1.setValueArr(rst,PicTool.getRGBPic(texture));
			return rst;
		}

		return ParticleTemplateCanvas;
	})(ParticleTemplateBase)


	//class laya.particle.shader.ParticleShader extends laya.webgl.shader.Shader
	var ParticleShader=(function(_super){
		function ParticleShader(){
			ParticleShader.__super.call(this,ParticleShader.vs,ParticleShader.ps,"ParticleShader");
		}

		__class(ParticleShader,'laya.particle.shader.ParticleShader',_super);
		__static(ParticleShader,
		['vs',function(){return this.vs="attribute vec4 a_CornerTextureCoordinate;\nattribute vec3 a_Position;\nattribute vec3 a_Velocity;\nattribute vec4 a_Color;\nattribute vec3 a_SizeRotation;\nattribute vec4 a_RadiusRadian;\nattribute float a_AgeAddScale;\nattribute float a_Time;\n\nvarying vec4 v_Color;\nvarying vec2 v_TextureCoordinate;\n\nuniform  float u_CurrentTime;\nuniform float u_Duration;\nuniform float u_EndVelocity;\nuniform vec3 u_Gravity;\n\n#ifdef PARTICLE3D\n uniform mat4 u_WorldMat;\n uniform mat4 u_View;\n uniform mat4 u_Projection;\n uniform vec2 u_ViewportScale;\n#else\n uniform vec2 size;\n uniform mat4 mmat;\n#endif\n\nvec4 ComputeParticlePosition(in vec3 position, in vec3 velocity,in float age,in float normalizedAge)\n{\n\n   float startVelocity = length(velocity);//起始标量速度\n   float endVelocity = startVelocity * u_EndVelocity;//结束标量速度\n\n   float velocityIntegral = startVelocity * normalizedAge +(endVelocity - startVelocity) * normalizedAge *normalizedAge/2.0;//计算当前速度的标量（单位空间），vt=v0*t+(1/2)*a*(t^2)\n   \n   vec3 addPosition = normalize(velocity) * velocityIntegral * u_Duration;//计算受自身速度影响的位置，转换标量到矢量    \n   addPosition += u_Gravity * age * normalizedAge;//计算受重力影响的位置\n   \n   float radius=mix(a_RadiusRadian.x, a_RadiusRadian.y, normalizedAge); //计算粒子受半径和角度影响（无需计算角度和半径时，可用宏定义优化屏蔽此计算）\n   float radianHorizontal =a_RadiusRadian.z*normalizedAge;\n   float radianVertical =a_RadiusRadian.w*normalizedAge;\n   \n   float r =cos(radianVertical)* radius;\n   addPosition.y += sin(radianVertical) * radius;\n	\n   addPosition.x += cos(radianHorizontal) *r;\n   addPosition.z += sin(radianHorizontal) *r;\n  \n   #ifdef PARTICLE3D\n   position+=addPosition;\n    return  u_Projection*u_View*u_WorldMat*(vec4(position, 1.0));\n   #else\n   addPosition.y=-addPosition.y;//2D粒子位置更新需要取负，2D粒子坐标系Y轴正向朝上\n   position+=addPosition;\n    return vec4(position.xy,0.0,1.0);\n   #endif\n}\n\nfloat ComputeParticleSize(in float startSize,in float endSize, in float normalizedAge)\n{    \n    float size = mix(startSize, endSize, normalizedAge);\n    \n	#ifdef PARTICLE3D\n    //Project the size into screen coordinates.\n     return size * u_Projection[1][1];\n	#else\n	 return size;\n	#endif\n}\n\nmat2 ComputeParticleRotation(in float rot,in float age)\n{    \n    float rotation =rot * age;\n    //计算2x2旋转矩阵.\n    float c = cos(rotation);\n    float s = sin(rotation);\n    return mat2(c, -s, s, c);\n}\n\nvec4 ComputeParticleColor(in vec4 color,in float normalizedAge)\n{\n    //硬编码设置，使粒子淡入很快，淡出很慢,6.7的缩放因子把置归一在0到1之间，可以谷歌x*(1-x)*(1-x)*6.7的制图表\n    color.a *= normalizedAge * (1.0-normalizedAge) * (1.0-normalizedAge) * 6.7;\n   \n    return color;\n}\n\nvoid main()\n{\n   float age = u_CurrentTime - a_Time;\n   age *= 1.0 + a_AgeAddScale;\n   float normalizedAge = clamp(age / u_Duration,0.0,1.0);\n   gl_Position = ComputeParticlePosition(a_Position, a_Velocity, age, normalizedAge);//计算粒子位置\n   float pSize = ComputeParticleSize(a_SizeRotation.x,a_SizeRotation.y, normalizedAge);\n   mat2 rotation = ComputeParticleRotation(a_SizeRotation.z, age);\n	\n   #ifdef PARTICLE3D\n	gl_Position.xy += (rotation*a_CornerTextureCoordinate.xy) * pSize * u_ViewportScale;\n   #else\n	gl_Position.xy += (rotation*a_CornerTextureCoordinate.xy) * pSize;\n    gl_Position=vec4((gl_Position.x/size.x-0.5)*2.0,(0.5-gl_Position.y/size.y)*2.0,0.0,1.0);\n   #endif\n   \n   v_Color = ComputeParticleColor(a_Color, normalizedAge);\n   v_TextureCoordinate =a_CornerTextureCoordinate.zw;\n}\n\n";},'ps',function(){return this.ps="precision highp float;\nvarying vec4 v_Color;\nvarying vec2 v_TextureCoordinate;\nuniform sampler2D u_texture;\n\nvoid main()\n{	\n	gl_FragColor=texture2D(u_texture,v_TextureCoordinate)*v_Color;\n}";}
		]);
		return ParticleShader;
	})(Shader)


	/**
	*...
	*@author laya
	*/
	//class laya.webgl.shader.d2.value.Value2D extends laya.webgl.shader.ShaderValue
	var Value2D=(function(_super){
		function Value2D(mainID,subID){
			this.size=[0,0];
			this.alpha=1.0;
			this.mmat=null;
			this.ALPHA=1.0;
			this.shader=null;
			this.mainID=0;
			this.subID=0;
			this.filters=null;
			this.textureHost=null;
			this.texture=null;
			this.fillStyle=null;
			this.color=null;
			this.strokeStyle=null;
			this.colorAdd=null;
			this.glTexture=null;
			this.u_mmat2=null;
			this._inClassCache=null;
			this._cacheID=0;
			Value2D.__super.call(this);
			this.defines=new ShaderDefines2D();
			this.position=Value2D._POSITION;
			this.mainID=mainID;
			this.subID=subID;
			this.textureHost=null;
			this.texture=null;
			this.fillStyle=null;
			this.color=null;
			this.strokeStyle=null;
			this.colorAdd=null;
			this.glTexture=null;
			this.u_mmat2=null;
			this._cacheID=mainID|subID;
			this._inClassCache=Value2D._cache[this._cacheID];
			if (mainID>0 && !this._inClassCache){
				this._inClassCache=Value2D._cache[this._cacheID]=[];
				this._inClassCache._length=0;
			}
			this.clear();
		}

		__class(Value2D,'laya.webgl.shader.d2.value.Value2D',_super);
		var __proto=Value2D.prototype;
		__proto.setValue=function(value){}
		//throw new Error("todo in subclass");
		__proto.refresh=function(){
			var size=this.size;
			size[0]=RenderState2D.width;
			size[1]=RenderState2D.height;
			this.alpha=this.ALPHA *RenderState2D.worldAlpha;
			this.mmat=RenderState2D.worldMatrix4;
			return this;
		}

		__proto._ShaderWithCompile=function(){
			try{
				return Shader.withCompile(0,this.mainID,this.defines.toString(),this.mainID | this.defines._value | RenderState2D.worldShaderDefinesValue,Shader2X.create);
			}
			catch (e){
			}
			return null;
		}

		__proto._withWorldShaderDefinesValue=function(){
			try{
				var sd=Shader.sharders [this.mainID | this.defines._value | RenderState2D.worldShaderDefinesValue] || this._ShaderWithCompile();
				var worldFilters=RenderState2D.worldFilters;
				var n=worldFilters.length,f;
				for (var i=0;i < n;i++){
					((f=worldFilters[i]))&& f.action.setValue(this);
				}
			}
			catch (e){
			}
		}

		__proto.upload=function(){
			var sd;
			var renderstate2d=RenderState2D;
			this.alpha=this.ALPHA *renderstate2d.worldAlpha;
			renderstate2d.worldShaderDefinesValue?this._withWorldShaderDefinesValue()
			:(sd=Shader.sharders [this.mainID | this.defines._value] || this._ShaderWithCompile());
			var params;
			if (Shader.activeShader!==sd){
				this.mmat=renderstate2d.worldMatrix4;
				if (renderstate2d.width!==sd._shaderValueWidth || renderstate2d.height!==sd._shaderValueHeight){
					this.size[0]=sd._shaderValueWidth=renderstate2d.width;
					this.size[1]=sd._shaderValueHeight=renderstate2d.height;
				}
				else params=sd._params2dQuick2 || sd._make2dQuick2();
				sd.upload(this,params);
			}
			else{
				var needResize=laya.webgl.shader.d2.value.Value2D.needRezise;
				if (needResize){
					this.size[0]=sd._shaderValueWidth=renderstate2d.width;
					this.size[1]=sd._shaderValueHeight=renderstate2d.height;
					var preParams=sd._params2dQuick1;
					sd._params2dQuick1=null;
					params=sd._make2dQuick1();
					sd.upload(this,params);
					sd._params2dQuick1=preParams;
				}
				else{
					params=(sd._params2dQuick1)|| sd._make2dQuick1();
					sd.upload(this,params);
				}
			}
		}

		__proto.setFilters=function(value){
			if (!value)return;
			this.filters=value;
			var n=value.length,f;
			for (var i=0;i < n;i++){
				f=value[i]
				if (f){
					this.defines.add(f.type);
					f.action.setValue(this);
				}
			}
		}

		__proto.clear=function(){
			this.defines.setValue(this.subID);
		}

		__proto.release=function(){
			this._inClassCache[this._inClassCache._length++]=this;
			this.clear();
		}

		Value2D._initone=function(type,classT){
			Value2D._typeClass[type]=classT;
			Value2D._cache[type]=[];
			Value2D._cache[type]._length=0;
		}

		Value2D.__init__=function(){
			Value2D._POSITION=[2,0x1406,false,4 *CONST3D2D.BYTES_PE,0];
			Value2D._TEXCOORD=[2,0x1406,false,4 *CONST3D2D.BYTES_PE,2 *CONST3D2D.BYTES_PE];
			Value2D._initone(0x02,Color2dSV);
			Value2D._initone(0x04,PrimitiveSV);
			Value2D._initone(0x01,TextureSV);
			Value2D._initone(0x01 | 0x40,TextSV);
			Value2D._initone(0x01 | 0x08,TextureSV);
		}

		Value2D.create=function(mainType,subType){
			var types=Value2D._cache[mainType|subType];
			if (types._length)
				return types[--types._length];
			else
			return new Value2D._typeClass[mainType|subType](subType);
		}

		Value2D.reset=function(){
			(laya.webgl.shader.d2.value.Value2D.needRezise)&& (laya.webgl.shader.d2.value.Value2D.needRezise=false);
		}

		Value2D._POSITION=null
		Value2D._TEXCOORD=null
		Value2D.needRezise=false;
		Value2D._cache=[];
		Value2D._typeClass=[];
		return Value2D;
	})(ShaderValue)


	//class laya.webgl.display.GraphicsGL extends laya.display.Graphics
	var GraphicsGL=(function(_super){
		function GraphicsGL(){
			GraphicsGL.__super.call(this);
		}

		__class(GraphicsGL,'laya.webgl.display.GraphicsGL',_super);
		var __proto=GraphicsGL.prototype;
		__proto.setShader=function(shader){
			this._saveToCmd(Render.context._setShader,arguments);
		}

		__proto.setIBVB=function(x,y,ib,vb,numElement,shader){
			this._saveToCmd(Render.context._setIBVB,arguments);
		}

		__proto.drawParticle=function(x,y,ps){
			var pt=System.createParticleTemplate2D(ps);
			pt.x=x;
			pt.y=y;
			this._saveToCmd(Render.context.drawParticle,[pt]);
		}

		return GraphicsGL;
	})(Graphics)


	/**
	*...
	*@author laya
	*/
	//class laya.webgl.canvas.WebGLContext2D extends laya.resource.Context
	var WebGLContext2D=(function(_super){
		var ContextParams;
		function WebGLContext2D(c){
			this._x=0;
			this._y=0;
			this._id=++WebGLContext2D._COUNT;
			//this._other=null;
			this._drawCount=1;
			this._maxNumEle=0;
			this._clear=false;
			this._submits=[];
			this._mergeID=0;
			this._curSubmit=null;
			this._ib=null;
			this._vb=null;
			//this._curMat=null;
			this._nBlendType=0;
			//this._save=null;
			//this._targets=null;
			this._saveMark=null;
			WebGLContext2D.__super.call(this);
			this._path=new Path();
			this._width=99999999;
			this._height=99999999;
			this._clipRect=WebGLContext2D.MAXCLIPRECT;
			this._shader2D=new Shader2D();
			this.drawTexture=this._drawTextureM;
			this._canvas=c;
			this._curMat=Matrix.create();
			this._ib=Buffer.QuadrangleIB;
			this._vb=new Buffer(0x8892);
			this._vb.getFloat32Array();
			this._other=ContextParams.DEFAULT;
			this._save=[SaveMark.Create(this)];
			this._save.length=10;
			this.clear();
		}

		__class(WebGLContext2D,'laya.webgl.canvas.WebGLContext2D',_super);
		var __proto=WebGLContext2D.prototype;
		__proto.clearBG=function(r,g,b,a){
			var gl=WebGL.mainContext;
			gl.clearColor(r,g,b,a);
			gl.clear(0x00004000 | 0x00000100);
		}

		__proto._getSubmits=function(){
			return this._submits;
		}

		__proto.destroy=function(){
			this._curMat && this._curMat.destroy();
			this._targets && this._targets.destroy();
			this._vb && this._vb.releaseResource();
			this._ib && (this._ib !=Buffer.QuadrangleIB)&& this._ib.releaseResource();
		}

		__proto.clear=function(){
			this._vb.clear();
			this._targets && (this._targets.repaint=true);
			this._other=ContextParams.DEFAULT;
			this._clear=true;
			this._mergeID=0;
			this._repaint=false;
			this._drawCount=1;
			this._other.lineWidth=this._shader2D.ALPHA=1.0;
			this._nBlendType=0;
			this._clipRect=WebGLContext2D.MAXCLIPRECT;
			this._curSubmit=Submit.RENDERBASE;
			this._shader2D.glTexture=null;
			this._shader2D.fillStyle=this._shader2D.strokeStyle=DrawStyle.DEFAULT;
			for (var i=0,n=this._submits._length;i < n;i++)
			this._submits[i].releaseRender();
			this._submits._length=0;
			this._curMat.identity();
			this._other.clear();
			this._saveMark=this._save[0];
			this._save._length=1;
		}

		__proto.size=function(w,h){
			this._width=w;
			this._height=h;
			this._targets && (this._targets.size(w,h));
		}

		__proto._getTransformMatrix=function(){
			return this._curMat;
		}

		__proto.translate=function(x,y){
			if (x!==0 || y!==0){
				SaveTranslate.save(this);
				if (this._curMat.bTransform){
					SaveTransform.save(this);
					this._curMat.transformPoint(x,y,Point.TEMP);
					x=Point.TEMP.x;
					y=Point.TEMP.y;
				}
				this._x+=x;
				this._y+=y;
			}
		}

		__proto.save=function(){
			this._save[this._save._length++]=SaveMark.Create(this);
		}

		__proto.restore=function(){
			var sz=this._save._length;
			if (sz < 1)
				return;
			for (var i=sz-1;i >=0;i--){
				var o=this._save[i];
				o.restore(this);
				if (o.isSaveMark()){
					this._save._length=i;
					return;
				}
			}
		}

		__proto.measureText=function(text){
			return Utils1.measureText(text,this._other.font.toString());
		}

		__proto._fillText=function(txt,words,x,y,fontStr,color,textAlign){
			var shader=this._shader2D;
			var curShader=this._curSubmit.shaderValue;
			var font=fontStr ? (WebGLContext2D._fontTemp.setFont(fontStr),WebGLContext2D._fontTemp):this._other.font;
			if (AtlasManager.enabled){
				if (shader.ALPHA!==curShader.ALPHA)
					shader.glTexture=null;
				DrawText.drawText(this,txt,words,this._curMat,font,textAlign || this._other.textAlign,color,null,-1,x,y);
				}else {
				var preDef=this._shader2D.defines.getValue();
				var colorAdd=color ? Color.create(color)._color :shader.colorAdd;
				if (shader.ALPHA!==curShader.ALPHA || colorAdd!==shader.colorAdd || curShader.colorAdd!==shader.colorAdd){
					shader.glTexture=null;
					shader.colorAdd=colorAdd;
				}
				shader.defines.add(0x40);
				DrawText.drawText(this,txt,words,this._curMat,font,textAlign || this._other.textAlign,null,null,-1,x,y);
				shader.defines.setValue(preDef);
			}
		}

		__proto.fillWords=function(words,x,y,fontStr,color){
			words.length > 0 && this._fillText(null,words,x,y,fontStr,color,null);
		}

		__proto.fillText=function(txt,x,y,fontStr,color,textAlign){
			txt.length > 0 && this._fillText(txt,null,x,y,fontStr,color,textAlign);
		}

		__proto.strokeText=function(txt,x,y,fontStr,color,lineWidth,textAlign){
			if (txt.length===0)
				return;
			var shader=this._shader2D;
			var curShader=this._curSubmit.shaderValue;
			var font=fontStr ? (WebGLContext2D._fontTemp.setFont(fontStr),WebGLContext2D._fontTemp):this._other.font;
			if (AtlasManager.enabled){
				if (shader.ALPHA!==curShader.ALPHA){
					shader.glTexture=null;
				}
				DrawText.drawText(this,txt,null,this._curMat,font,textAlign || this._other.textAlign,null,color,lineWidth || 1,x,y);
				}else {
				var preDef=this._shader2D.defines.getValue();
				var colorAdd=color ? Color.create(color)._color :shader.colorAdd;
				if (shader.ALPHA!==curShader.ALPHA || colorAdd!==shader.colorAdd || curShader.colorAdd!==shader.colorAdd){
					shader.glTexture=null;
					shader.colorAdd=colorAdd;
				}
				shader.defines.add(0x40);
				DrawText.drawText(this,txt,null,this._curMat,font,textAlign || this._other.textAlign,null,color,lineWidth || 1,x,y);
				shader.defines.setValue(preDef);
			}
		}

		__proto.fillBorderText=function(txt,x,y,fontStr,fillColor,borderColor,lineWidth,textAlign){
			if (txt.length===0)
				return;
			if (!AtlasManager.enabled){
				this.strokeText(txt,x,y,fontStr,borderColor,lineWidth,textAlign);
				this.fillText(txt,x,y,fontStr,fillColor,textAlign);
				return;
			};
			var shader=this._shader2D;
			var curShader=this._curSubmit.shaderValue;
			if (shader.ALPHA!==curShader.ALPHA)
				shader.glTexture=null;
			var font=fontStr ? (WebGLContext2D._fontTemp.setFont(fontStr),WebGLContext2D._fontTemp):this._other.font;
			DrawText.drawText(this,txt,null,this._curMat,font,textAlign || this._other.textAlign,fillColor,borderColor,lineWidth || 1,x,y);
		}

		__proto.fillRect=function(x,y,width,height,fillStyle){
			var vb=this._vb;
			if (GlUtils.fillRectImgVb(vb,this._clipRect,x,y,width,height,Texture.DEF_UV,this._curMat,this._x,this._y,0,0)){
				var pre=this._shader2D.fillStyle;
				fillStyle && (this._shader2D.fillStyle=new DrawStyle(fillStyle));
				var shader=this._shader2D;
				var curShader=this._curSubmit.shaderValue;
				if (shader.fillStyle!==curShader.fillStyle || shader.ALPHA!==curShader.ALPHA){
					shader.glTexture=null;
					var submit=this._curSubmit=Submit.create(this,0,this._mergeID,this._ib,vb,((vb._length-16 *4)/ 32)*3,Value2D.create(0x02,0));
					submit.shaderValue.color=shader.fillStyle._color._color;
					submit.shaderValue.ALPHA=shader.ALPHA;
					this._submits[this._submits._length++]=submit;
				}
				this._curSubmit._numEle+=6;
				this._shader2D.fillStyle=pre;
			}
		}

		__proto.setShader=function(shader){
			SaveBase.save(this,0x80000,this._shader2D,true);
			this._shader2D.shader=shader;
		}

		__proto.setFilters=function(value){
			SaveBase.save(this,0x100000,this._shader2D,true);
			this._shader2D.filters=value;
			this._curSubmit=Submit.RENDERBASE;
			this._mergeID=this._drawCount;
		}

		__proto._findSameSubmit=function(submitID){
			for (var i=this._submits._length-1;i >=0;i--){
				var submit=this._submits [i];
				if (submit._mergID && submit._mergID!==this._mergeID)break ;
				if (submit._submitID===submitID){
					return submit;
				}
			}
			return null;
		}

		__proto._drawTextureM=function(tex,x,y,width,height,tx,ty,m){
			if (!(tex.loaded && tex.bitmap && tex.source)){
				this._targets && (this._targets.repaint=true);
				return;
			};
			var webGLImg=tex.bitmap;
			var shader=this._shader2D;
			var curShader=this._curSubmit.shaderValue;
			this._drawCount++;
			if (shader.glTexture!==webGLImg || shader.ALPHA!==curShader.ALPHA){
				shader.glTexture=webGLImg;
				var vb=this._vb;
				var submit=null;
				var submitID=NaN;
				var vbSize=(vb._length / 32)*3;
				if (this._mergeID){
					submitID=webGLImg._id+shader.ALPHA / 10;
					submit=this._findSameSubmit(submitID);
					vb=null;
				}
				if (!submit){
					submit=Submit.create(this,submitID,this._mergeID,this._ib,vb,vbSize,Value2D.create(0x01,0));
					this._submits[this._submits._length++]=submit;
					submit.shaderValue.textureHost=tex;
				}
				this._curSubmit=submit;
			}
			if (GlUtils.fillRectImgVb(this._curSubmit._vb || this._vb,this._clipRect,x+tx+tex.offsetX,y+ty+tex.offsetY,width || tex.width,height || tex.height,tex.uv,m || this._curMat,this._x,this._y,0,0)){
				this._curSubmit._numEle+=6;
				this._maxNumEle=Math.max(this._maxNumEle,this._curSubmit._numEle);
			}
		}

		/**
		*请保证图片已经在内存
		*@param ... args
		*/
		__proto.drawImage=function(__args){
			var args=arguments;
			var img=args[0];
			var tex=(img.__texture || (img.__texture=new Texture(new WebGLImage(img))));
			tex.uv=Texture.DEF_UV;
			switch (args.length){
				case 3:
					if (!img.__width){
						img.__width=img.width;
						img.__height=img.height
					}
					this.drawTexture(tex,args[1],args[2],img.__width,img.__height,0,0);
					break ;
				case 5:
					this.drawTexture(tex,args[1],args[2],args[3],args[4],0,0);
					break ;
				case 9:;
					var x1=args[1] / img.__width;
					var x2=(args[1]+args[3])/ img.__width;
					var y1=args[2] / img.__height;
					var y2=(args[2]+args[4])/ img.__height;
					tex.uv=[x1,y1,x2,y1,x2,y2,x1,y2];
					this.drawTexture(tex,args[5],args[6],args[7],args[8],0,0);
					break ;
				}
		}

		__proto._drawText=function(tex,x,y,width,height,m,tx,ty,dx,dy){
			var webGLImg=tex.bitmap;
			var shader=this._shader2D;
			var curShader=this._curSubmit.shaderValue;
			this._drawCount++;
			if (shader.glTexture!==webGLImg){
				shader.glTexture=webGLImg;
				var vb=this._vb;
				var submit=null;
				var submitID=NaN;
				var vbSize=(vb._length / 32)*3;
				if (this._mergeID){
					submitID=webGLImg._id+shader.ALPHA / 10+(AtlasManager.enabled ? 0 :(shader.colorAdd.__id / 10000));
					submit=this._findSameSubmit(submitID);
					vb=null;
				}
				if (!submit){
					if (AtlasManager.enabled){
						submit=Submit.create(this,submitID,this._mergeID,this._ib,vb,vbSize,Value2D.create(0x01,0));
						}else {
						submit=Submit.create(this,submitID,this._mergeID,this._ib,vb,vbSize,TextSV.create());
						submit.shaderValue.colorAdd=shader.colorAdd;
						submit.shaderValue.defines.add(0x40);
					}
					submit.shaderValue.textureHost=tex;
					this._submits[this._submits._length++]=submit;
				}
				this._curSubmit=submit;
			}
			tex.active();
			if (GlUtils.fillRectImgVb(this._curSubmit._vb || this._vb,this._clipRect,x+tx,y+ty,width || tex.width,height || tex.height,tex.uv,m || this._curMat,this._x,this._y,dx,dy)){
				this._curSubmit._numEle+=6;
				this._maxNumEle=Math.max(this._maxNumEle,this._curSubmit._numEle);
			}
		}

		__proto.drawTextureWithTransform=function(tex,x,y,width,height,transform,tx,ty){
			var curMat=this._curMat;
			(tx!==0 || ty!==0)&& (this._x=tx *curMat.a+ty *curMat.c,this._y=ty *curMat.d+tx *curMat.b);
			if (transform && curMat.bTransform){
				Matrix.mul(transform,curMat,WebGLContext2D._tmpMatrix);
				transform=WebGLContext2D._tmpMatrix;
				transform._checkTransform();
				}else {
				this._x+=curMat.tx;
				this._y+=curMat.ty;
			}
			this._drawTextureM(tex,x,y,width,height,0,0,transform);
			this._x=this._y=0;
		}

		__proto.fillQuadrangle=function(tex,x,y,point4,m){
			var submit=this._curSubmit;
			var vb=this._vb;
			var shader=this._shader2D;
			var curShader=submit.shaderValue;
			if (tex.bitmap){
				var t_tex=tex.bitmap;
				if (shader.glTexture !=t_tex || shader.ALPHA!==curShader.ALPHA){
					shader.glTexture=t_tex;
					submit=this._curSubmit=Submit.create(this,0,this._mergeID,this._ib,vb,((vb._length)/ 32)*3,Value2D.create(0x01,0));
					submit.shaderValue.glTexture=t_tex;
					this._submits[this._submits._length++]=submit;
				}
				GlUtils.fillQuadrangleImgVb(vb,x,y,point4,tex.uv,m || this._curMat,this._x,this._y);
				}else {
				if (!submit.shaderValue.fillStyle || !submit.shaderValue.fillStyle.equal(tex)|| shader.ALPHA!==curShader.ALPHA){
					shader.glTexture=null;
					submit=this._curSubmit=Submit.create(this,0,this._mergeID,this._ib,vb,((vb._length)/ 32)*3,Value2D.create(0x02,0));
					submit.shaderValue.defines.add(0x02);
					submit.shaderValue.fillStyle=new DrawStyle(tex);
					this._submits[this._submits._length++]=submit;
				}
				GlUtils.fillQuadrangleImgVb(vb,x,y,point4,Texture.DEF_UV,m || this._curMat,this._x,this._y);
			}
			submit._numEle+=6;
		}

		__proto.drawTexture2=function(x,y,pivotX,pivotY,transform,alpha,blendMode,args){
			var curMat=this._curMat;
			this._x=x *curMat.a+y *curMat.c;
			this._y=y *curMat.d+x *curMat.b;
			if (transform && curMat.bTransform){
				Matrix.mul(transform,curMat,WebGLContext2D._tmpMatrix);
				transform=WebGLContext2D._tmpMatrix;
			}
			if (alpha===1 && !blendMode)
				this._drawTextureM(args[0],args[1]-pivotX,args[2]-pivotY,args[3],args[4],0,0,transform);
			else {
				var preAlpha=this._shader2D.ALPHA;
				var preblendType=this._nBlendType;
				this._shader2D.ALPHA=alpha;
				blendMode && (this._nBlendType=BlendMode.TOINT(blendMode));
				this._drawTextureM(args[0],args[1]-pivotX,args[2]-pivotY,args[3],args[4],0,0,transform);
				this._shader2D.ALPHA=preAlpha;
				this._nBlendType=preblendType;
			}
			this._x=this._y=0;
		}

		__proto.drawCanvas=function(canvas,x,y,width,height){
			var src=canvas.context;
			if (src._targets){
				this._submits[this._submits._length++]=SubmitCanvas.create(src,0,null);
				this._curSubmit=Submit.RENDERBASE;
				src._targets.drawTo(this,x,y,width,height);
				}else {
				var submit=this._submits[this._submits._length++]=SubmitCanvas.create(src,this._shader2D.ALPHA,this._shader2D.filters);
				var sx=width / canvas.width;
				var sy=height / canvas.height;
				var mat=submit._matrix;
				this._curMat.copy(mat);
				sx !=1 && sy !=1 && mat.scale(sx,sy);
				var tx=mat.tx,ty=mat.ty;
				mat.tx=mat.ty=0;
				mat.transformPoint(x,y,Point.TEMP);
				mat.translate(Point.TEMP.x+tx,Point.TEMP.y+ty);
				this._curSubmit=Submit.RENDERBASE;
			}
			if (Config.showCanvasMark){
				this.save();
				this.lineWidth=4;
				this.strokeStyle=src._targets ? "yellow" :"green";
				this.strokeRect(x-1,y-1,width+2,height+2);
				this.strokeRect(x,y,width,height);
				this.restore();
			}
		}

		__proto.transform=function(a,b,c,d,tx,ty){
			SaveTransform.save(this);
			Matrix.mul(Matrix.TEMP.setTo(a,b,c,d,tx,ty),this._curMat,this._curMat);
			this._curMat._checkTransform();
		}

		__proto.setTransformByMatrix=function(value){
			value.copy(this._curMat);
		}

		__proto.transformByMatrix=function(value){
			SaveTransform.save(this);
			Matrix.mul(value,this._curMat,this._curMat);
			this._curMat._checkTransform();
		}

		__proto.rotate=function(angle){
			SaveTransform.save(this);
			this._curMat.rotate(angle);
		}

		__proto.scale=function(scaleX,scaleY){
			SaveTransform.save(this);
			this._curMat.scale(scaleX,scaleY);
		}

		__proto.clipRect=function(x,y,width,height){
			width *=this._curMat.a;
			height *=this._curMat.d;
			var p=Point.TEMP;
			this._curMat.transformPoint(x,y,p);
			var submit=this._curSubmit=SubmitScissor.create(this);
			this._submits[this._submits._length++]=submit;
			submit.submitIndex=this._submits._length;
			submit.submitLength=9999999;
			SaveClipRect.save(this,submit);
			var clip=this._clipRect;
			var x1=clip.x,y1=clip.y;
			var r=p.x+width,b=p.y+height;
			x1 < p.x && (clip.x=p.x);
			y1 < p.y && (clip.y=p.y);
			clip.width=Math.min(r,x1+clip.width)-clip.x;
			clip.height=Math.min(b,y1+clip.height)-clip.y;
			this._shader2D.glTexture=null;
			submit.clipRect.copyFrom(clip);
			this._curSubmit=Submit.RENDERBASE;
			this._mergeID=0;
		}

		__proto.setIBVB=function(x,y,ib,vb,numElement,mat,shader,shaderValues,startIndex,offset){
			(startIndex===void 0)&& (startIndex=0);
			(offset===void 0)&& (offset=0);
			(ib===null)&& (GlUtils.expandIBQuadrangle(this._ib,(vb.length / (4 *16)+8)),ib=this._ib);
			if (!shaderValues || !shader)
				throw Error("setIBVB must input:shader shaderValues");
			var submit=SubmitOtherIBVB.create(this,vb,ib,numElement,shader,shaderValues,startIndex,offset);
			mat || (mat=Matrix.EMPTY);
			mat.translate(x,y);
			Matrix.mul(mat,this._curMat,submit._mat);
			mat.translate(-x,-y);
			this._submits[this._submits._length++]=submit;
			this._curSubmit=Submit.RENDERBASE;
		}

		__proto.addRenderObject=function(o){
			this._submits[this._submits._length++]=o;
		}

		__proto.fillTrangles=function(tex,x,y,points,m){
			var submit=this._curSubmit;
			var vb=this._vb;
			var shader=this._shader2D;
			var curShader=submit.shaderValue;
			var length=points.length >> 4;
			var t_tex=tex.bitmap;
			if (shader.glTexture !=t_tex || shader.ALPHA!==curShader.ALPHA){
				submit=this._curSubmit=Submit.create(this,0,this._mergeID,this._ib,vb,((vb._length)/ 32)*3,Value2D.create(0x01,0));
				submit.shaderValue.textureHost=tex;
				this._submits[this._submits._length++]=submit;
			}
			GlUtils.fillTranglesVB(vb,x,y,points,m || this._curMat,this._x,this._y);
			submit._numEle+=length *6;
		}

		__proto.arc=function(x,y,r,sAngle,eAngle,counterclockwise){
			(counterclockwise===void 0)&& (counterclockwise=true);
		}

		// debugger;
		__proto.fill=function(){}
		// debugger;
		__proto.closePath=function(){}
		__proto.beginPath=function(){
			this._other=this._other.make();
			this._other.path || (this._other.path=new Path());
			this._other.path.clear();
		}

		__proto.rect=function(x,y,width,height){
			this._other=this._other.make();
			this._other.path || (this._other.path=new Path());
			this._other.path.rect(x,y,width,height);
		}

		__proto.strokeRect=function(x,y,width,height,lineWidth){
			(lineWidth===void 0)&& (lineWidth=1);
			this.line(x,y,x+width,y,lineWidth / 2,this._curMat);
			this.line(x+width,y,x+width,y+height,lineWidth / 2,this._curMat);
			this.line(x,y,x,y+height,lineWidth / 2,this._curMat);
			this.line(x,y+height,x+width,y+height,lineWidth / 2,this._curMat);
		}

		__proto.clip=function(){}
		// debugger;
		__proto.stroke=function(){
			if (this._other!==ContextParams.DEFAULT){
				if (this._other.path._rect){
					var r=this._other.path._rect;
					this.strokeRect(r.x,r.y,r.width,r.height,this._other.lineWidth);
				}
				this._other.path.clear();
			}
		}

		__proto.moveTo=function(x,y){
			this._other.path._x=x;
			this._other.path._y=y;
		}

		__proto.lineTo=function(x,y){
			this.line(this._other.path._x,this._other.path._y,x,y,this._other.lineWidth / 2,this._curMat);
		}

		__proto.line=function(fromX,fromY,toX,toY,lineWidth,mat){
			var submit=this._curSubmit;
			var vb=this._vb;
			if (GlUtils.fillLineVb(vb,this._clipRect,fromX,fromY,toX,toY,lineWidth,mat)){
				var shader=this._shader2D;
				var curShader=submit.shaderValue;
				if (shader.strokeStyle!==curShader.strokeStyle || shader.ALPHA!==curShader.ALPHA){
					shader.glTexture=null;
					submit=this._curSubmit=Submit.create(this,0,this._mergeID,this._ib,vb,((vb._length-16 *4)/ 32)*3,Value2D.create(0x02,0));
					submit.shaderValue.strokeStyle=shader.strokeStyle;
					submit.shaderValue.mainID=0x02;
					submit.shaderValue.ALPHA=shader.ALPHA;
					this._submits[this._submits._length++]=submit;
				}
				submit._numEle+=6;
			}
		}

		__proto.submitElement=function(start,end){
			var renderList=this._submits;
			end < 0 && (end=renderList._length);
			while (start < end){
				start+=renderList[start].renderSubmit();
			}
		}

		__proto.finish=function(){
			WebGL.mainContext.finish();
		}

		__proto.flush=function(){
			this._ib.upload_bind();
			var maxNum=Math.max(this._vb.length / (4 *16),this._maxNumEle / 6)+8;
			if (maxNum > (this._ib.bufferLength / (6 *2))){
				GlUtils.expandIBQuadrangle(this._ib,maxNum);
			}
			this._vb.upload_bind();
			this.submitElement(0,this._submits._length);
			this._path.reset();
			Value2D.reset();
			this._curSubmit=Submit.RENDERBASE;
			return this._submits._length;
		}

		__proto.fan=function(x,y,r,sAngle,eAngle,fillColor,lineColor){
			this._path.fan(x,y,r,sAngle,eAngle,fillColor,this._other.lineWidth ? this._other.lineWidth :1,lineColor);
			this._path.update();
			var submit=Submit.createShape(this,this._path.ib,this._path.vb,this._path.count,this._path.offset,Value2D.create(0x04,0));
			this._submits[this._submits._length++]=submit;
		}

		__proto.drawPoly=function(x,y,r,edges,boderColor,lineWidth,color){
			this._path.polygon(x,y,r,edges,color,lineWidth ? lineWidth :1,boderColor);
			this._path.update();
			var submit=Submit.createShape(this,this._path.ib,this._path.vb,this._path.count,this._path.offset,Value2D.create(0x04,0));
			submit.shaderValue.ALPHA=this._shader2D.ALPHA;
			submit.shaderValue.u_mmat2=RenderState2D.mat2MatArray(this._curMat,RenderState2D.TEMPMAT4_ARRAY);
			this._submits[this._submits._length++]=submit;
		}

		__proto.drawPath=function(x,y,points,color,lineWidth){
			this._path.drawPath(x,y,points,color,lineWidth);
			this._path.update();
			var submit=Submit.createShape(this,this._path.ib,this._path.vb,this._path.count,this._path.offset,Value2D.create(0x04,0));
			this._submits[this._submits._length++]=submit;
		}

		__proto.drawParticle=function(x,y,pt){
			pt.x=x;
			pt.y=y;
			this._submits[this._submits._length++]=pt;
		}

		__proto.drawLines=function(x,y,points,color,lineWidth){
			var tmp=Point.TEMP;
			this._curMat.transformPoint(x,y,tmp);
			if (this._curMat.bTransform){
				points=points.concat();
				this._curMat.transformPointArrayScale(points,points);
			}
			this._path.drawPath(tmp.x,tmp.y,points,color,lineWidth);
			this._path.update();
			var submit=Submit.createShape(this,this._path.ib,this._path.vb,this._path.count,this._path.offset,Value2D.create(0x04,0));
			this._submits[this._submits._length++]=submit;
		}

		__getset(0,__proto,'asBitmap',null,function(value){
			if (value){
				this._targets || (this._targets=new RenderTargetMAX());
				this._targets.repaint=true;
				if (!this._width || !this._height)throw Error("asBitmap no size!");
				this._targets.size(this._width,this._height);
			}else this._targets=null;
		});

		__getset(0,__proto,'fillStyle',function(){
			return this._shader2D.fillStyle;
			},function(value){
			this._shader2D.fillStyle.equal(value)|| (SaveBase.save(this,0x2,this._shader2D,false),this._shader2D.fillStyle=new DrawStyle(value));
		});

		/*,_shader2D.ALPHA=1*/
		__getset(0,__proto,'globalCompositeOperation',function(){
			return BlendMode.NAMES[this._nBlendType];
			},function(value){
			var n=BlendMode.TOINT[value];
			n==null || (this._nBlendType===n)|| (SaveBase.save(this,0x10000,this,true),this._curSubmit=Submit.RENDERBASE,this._nBlendType=n);
		});

		__getset(0,__proto,'textAlign',function(){
			return this._other.textAlign;
			},function(value){
			(this._other.textAlign===value)|| (this._other=this._other.make(),SaveBase.save(this,0x8000,this._other,false),this._other.textAlign=value);
		});

		__getset(0,__proto,'globalAlpha',function(){
			return this._shader2D.ALPHA;
			},function(value){
			value=Math.floor(value *1000)/ 1000;
			if (value !=this._shader2D.ALPHA){
				SaveBase.save(this,0x1,this._shader2D,true);
				this._shader2D.ALPHA=value;
			}
		});

		__getset(0,__proto,'textBaseline',function(){
			return this._other.textBaseline;
			},function(value){
			(this._other.textBaseline===value)|| (this._other=this._other.make(),SaveBase.save(this,0x4000,this._other,false),this._other.textBaseline=value);
		});

		__getset(0,__proto,'enableMerge',function(){
			return this._mergeID > 0;
			},function(value){
			SaveBase.save(this,0x2000,this,true);
			this._mergeID=this._drawCount;
		});

		__getset(0,__proto,'strokeStyle',function(){
			return this._shader2D.strokeStyle;
			},function(value){
			this._shader2D.strokeStyle.equal(value)|| (SaveBase.save(this,0x200,this._shader2D,false),this._shader2D.strokeStyle=new DrawStyle(value));
		});

		__getset(0,__proto,'lineWidth',function(){
			return this._other.lineWidth;
			},function(value){
			(this._other.lineWidth===value)|| (this._other=this._other.make(),SaveBase.save(this,0x100,this._other,false),this._other.lineWidth=value);
		});

		__getset(0,__proto,'font',null,function(str){
			if (str==this._other.font.toString())
				return;
			this._other=this._other.make();
			SaveBase.save(this,0x8,this._other,false);
			this._other.font===FontInContext.EMPTY ? (this._other.font=new FontInContext(str)):(this._other.font.setFont(str));
		});

		WebGLContext2D.__init__=function(){
			ContextParams.DEFAULT=new ContextParams();
		}

		WebGLContext2D._SUBMITVBSIZE=32000;
		WebGLContext2D._MAXSIZE=99999999;
		WebGLContext2D._RECTVBSIZE=16;
		WebGLContext2D.MAXCLIPRECT=new Rectangle(0,0,99999999,99999999);
		WebGLContext2D._COUNT=0;
		WebGLContext2D._tmpMatrix=new Matrix();
		__static(WebGLContext2D,
		['_fontTemp',function(){return this._fontTemp=new FontInContext();},'_drawStyleTemp',function(){return this._drawStyleTemp=new DrawStyle(null);}
		]);
		WebGLContext2D.__init$=function(){
			//class ContextParams
			ContextParams=(function(){
				function ContextParams(){
					this.lineWidth=1;
					this.path=null;
					this.textAlign=null;
					this.textBaseline=null;
					this.font=FontInContext.EMPTY;
				}
				__class(ContextParams,'');
				var __proto=ContextParams.prototype;
				__proto.clear=function(){
					this.lineWidth=1;
					this.path && this.path.clear();
					this.textAlign=this.textBaseline=null;
					this.font=FontInContext.EMPTY;
				}
				__proto.make=function(){
					return this===ContextParams.DEFAULT ? new ContextParams():this;
				}
				ContextParams.DEFAULT=null
				return ContextParams;
			})()
		}

		return WebGLContext2D;
	})(Context)


	/**
	*...
	*@author laya
	*/
	//class laya.webgl.utils.RenderSprite3D extends laya.renders.RenderSprite
	var RenderSprite3D=(function(_super){
		function RenderSprite3D(type,next){
			RenderSprite3D.__super.call(this,type,next);
		}

		__class(RenderSprite3D,'laya.webgl.utils.RenderSprite3D',_super);
		var __proto=RenderSprite3D.prototype;
		__proto.onCreate=function(type){
			switch (type){
				case 0x20:
					this._fun=this._blend;
					return;
				case 0x08:
					this._fun=this._transform;
					return;
				}
		}

		// }
		__proto._blend=function(sprite,context,x,y){
			var style=sprite._style;
			var submit,next
			context.ctx.save();
			if (sprite.mask){
				submit=SubmitStencil.create(1);
				context.addRenderObject(submit);
				sprite.mask.render(context,x,y);
				submit=SubmitStencil.create(2);
				context.addRenderObject(submit);
				next=this._next;
				next._fun.call(next,sprite,context,x,y);
				submit=SubmitStencil.create(3);
				context.ctx._curSubmit=Submit.RENDERBASE;
				context.addRenderObject(submit);
			}
			else{
				context.ctx.globalCompositeOperation=style.blendMode;
				next=this._next;
				next._fun.call(next,sprite,context,x,y);
			}
			context.ctx.restore();
		}

		// }
		__proto._transform=function(sprite,context,x,y){
			'use strict';
			var transform=sprite.transform,_next=this._next;
			if (transform && _next !=RenderSprite.NORENDER){
				var ctx=context.ctx;
				var style=sprite._style;
				transform.tx=x;
				transform.ty=y;
				var m2=ctx._getTransformMatrix();
				var m1=m2.clone();
				Matrix.mul(transform,m2,m2);
				m2._checkTransform();
				_next._fun.call(_next,sprite,context,0,0);
				m1.copy(m2);
				m1.destroy();
				transform.tx=transform.ty=0;
			}else
			_next._fun.call(_next,sprite,context,x,y);
		}

		return RenderSprite3D;
	})(RenderSprite)


	/**
	*@author wk
	*/
	//class laya.webgl.shader.d2.filters.ColorFilter extends laya.webgl.shader.Shader
	var ColorFilter1=(function(_super){
		function ColorFilter(){
			var vs="attribute vec4 position;\nattribute vec2 texcoord;\nuniform  mat4 mmat;\nuniform vec2 size;\nvarying vec2 v_texcoord;\nvoid main() {\n  gl_Position =mmat*vec4((position.x/size.x-0.5)*2.0,(0.5-position.y/size.y)*2.0,position.z,1.0);\n  v_texcoord = texcoord;\n}";
			var ps="precision mediump float;\nvarying vec2 v_texcoord;\nuniform sampler2D texture;\nuniform float alpha;\nuniform float u_colorMatrix[20];\n\nvoid main(){\n 	vec4 rgba=gl_FragColor= texture2D(texture, v_texcoord)*vec4(1,1,1,alpha);\n   gl_FragColor.r =rgba.r*u_colorMatrix[0]+rgba.g*u_colorMatrix[1]+rgba.b*u_colorMatrix[2]+rgba.a*u_colorMatrix[3]+u_colorMatrix[4];\n   gl_FragColor.g =rgba.r*u_colorMatrix[5]+rgba.g*u_colorMatrix[6]+rgba.b*u_colorMatrix[7]+rgba.a*u_colorMatrix[8]+u_colorMatrix[9];\n   gl_FragColor.b =rgba.r*u_colorMatrix[10]+rgba.g*u_colorMatrix[11]+rgba.b*u_colorMatrix[12]+rgba.a*u_colorMatrix[13]+u_colorMatrix[14];\n   gl_FragColor.a =rgba.r*u_colorMatrix[15]+rgba.g*u_colorMatrix[16]+rgba.b*u_colorMatrix[17]+rgba.a*u_colorMatrix[18]+u_colorMatrix[19];	   \n}\n";
			ColorFilter.__super.call(this,vs,ps,"colorFilter");
		}

		__class(ColorFilter,'laya.webgl.shader.d2.filters.ColorFilter',_super,'ColorFilter1');
		return ColorFilter;
	})(Shader)


	/**
	*@author wk
	*/
	//class laya.webgl.shader.d2.filters.GlowFilterShader extends laya.webgl.shader.Shader
	var GlowFilterShader=(function(_super){
		function GlowFilterShader(){
			var vs="attribute vec4 position;\nattribute vec2 texcoord;\nuniform vec2 size;\nuniform  mat4 mmat;\nuniform  mat4 pmat;\nvarying vec2  v_texcoord;\nvoid main(){\n gl_Position =mmat*vec4((position.x/size.x-0.5)*2.0,(0.5-position.y/size.y)*2.0,position.z,1.0);\n  v_texcoord = texcoord;\n}";
			var ps="precision mediump float;\nconst int c_FilterTime = 9;\nconst float c_Gene = (1.0/(1.0 + 2.0*(0.93 + 0.8 + 0.7 + 0.6 + 0.5 + 0.4 + 0.3 + 0.2 + 0.1)));\nuniform sampler2D texture;\nconst bool u_FiterMode=true;\nconst float u_GlowGene=1.5;\nconst vec4 u_GlowColor=vec4(1.0,0.0,0.0,0.5);\nconst float u_FilterOffset=2.0;\nconst float u_TexSpaceU=1.0/10.0;\nconst float u_TexSpaceV=1.0/10.0;\nvarying vec2 v_texcoord;\nvoid main()\n{\n	float aryAttenuation[c_FilterTime];\n	aryAttenuation[0] = 0.93;\n	aryAttenuation[1] = 0.8;\n	aryAttenuation[2] = 0.7;\n	aryAttenuation[3] = 0.6;\n	aryAttenuation[4] = 0.5;\n	aryAttenuation[5] = 0.4;\n	aryAttenuation[6] = 0.3;\n	aryAttenuation[7] = 0.2;\n	aryAttenuation[8] = 0.1;\n	vec4 vec4Color = texture2D(texture, v_texcoord)*c_Gene;\n	vec2 vec2FilterDir;\n	if(u_FiterMode)\n	  vec2FilterDir = vec2(u_FilterOffset*u_TexSpaceU/9.0, 0.0);\n	else\n		vec2FilterDir =  vec2(0.0, u_FilterOffset*u_TexSpaceV/9.0);\n	vec2 vec2Step = vec2FilterDir;\n	for(int i = 0;i< c_FilterTime; ++i){\n		vec4Color += texture2D(texture, v_texcoord + vec2Step)*aryAttenuation[i]*c_Gene;\n		vec4Color += texture2D(texture, v_texcoord - vec2Step)*aryAttenuation[i]*c_Gene;\n		vec2Step += vec2FilterDir;\n	}\n	if(u_FiterMode)\n		gl_FragColor = vec4Color.a*u_GlowColor*u_GlowGene;\n	else\n		gl_FragColor = vec4Color.a*u_GlowColor;\n}";
			GlowFilterShader.__super.call(this,vs,ps,"glowFilter");
		}

		__class(GlowFilterShader,'laya.webgl.shader.d2.filters.GlowFilterShader',_super);
		return GlowFilterShader;
	})(Shader)


	/**
	*...
	*@author laya
	*/
	//class laya.webgl.shader.d2.Shader2X extends laya.webgl.shader.Shader
	var Shader2X=(function(_super){
		function Shader2X(vs,ps,saveName,nameMap){
			this._params2dQuick1=null;
			this._params2dQuick2=null;
			this._shaderValueWidth=0;
			this._shaderValueHeight=0;
			this._shaderValueAlpha=NaN;
			Shader2X.__super.call(this,vs,ps,saveName,nameMap);
		}

		__class(Shader2X,'laya.webgl.shader.d2.Shader2X',_super);
		var __proto=Shader2X.prototype;
		__proto.upload2dQuick1=function(shaderValue){
			this.upload(shaderValue,this._params2dQuick1 || this._make2dQuick1());
		}

		__proto._make2dQuick1=function(){
			try{
				if (!this._params2dQuick1){
					this._program || this.compile();
					this._params2dQuick1=[];
					var params=this._params,one;
					for (var i=0,n=params.length;i < n;i++){
						one=params[i];
						if ((!Value2D.needRezise&&one.name==="size")|| one.name==="al2pha" || one.name==="mmat" || one.name==="position" || one.name==="texcoord")continue ;
						this._params2dQuick1.push(one);
					}
				}
				return this._params2dQuick1;
			}
			catch (e){
			}
			return null;
		}

		__proto.upload2dQuick2=function(shaderValue){
			this.upload(shaderValue,this._params2dQuick2 || this._make2dQuick2());
		}

		__proto._make2dQuick2=function(){
			try{
				if (!this._params2dQuick2){
					this._program || this.compile();
					this._params2dQuick2=[];
					var params=this._params,one;
					for (var i=0,n=params.length;i < n;i++){
						one=params[i];
						if ((one.name==="size")|| one.name==="al2pha")continue ;
						this._params2dQuick2.push(one);
					}
				}
				return this._params2dQuick2;
			}
			catch (e){
			}
			return null;
		}

		Shader2X.create=function(vs,ps,saveName,nameMap){
			return new Shader2X(vs,ps,saveName,nameMap);
		}

		return Shader2X;
	})(Shader)


	//class laya.filters.webgl.ColorFilterActionGL extends laya.filters.webgl.FilterActionGL
	var ColorFilterActionGL=(function(_super){
		function ColorFilterActionGL(){
			this.data=null;
			ColorFilterActionGL.__super.call(this);
		}

		__class(ColorFilterActionGL,'laya.filters.webgl.ColorFilterActionGL',_super);
		var __proto=ColorFilterActionGL.prototype;
		Laya.imps(__proto,{"laya.filters.IFilterActionGL":true})
		__proto.setValue=function(shader){
			shader.u_colorMatrix=this.data._elements;
		}

		return ColorFilterActionGL;
	})(FilterActionGL)


	//class laya.webgl.atlas.Atlaser extends laya.webgl.atlas.AtlasGrid
	var Atlaser=(function(_super){
		function Atlaser(gridNumX,gridNumY,width,height,atlasID){
			this._atlasCanvas=null;
			this._inAtlasTextureKey=null;
			this._inAtlasTextureValue=null;
			this._webGLImages=null;
			Atlaser.__super.call(this,gridNumX,gridNumY,atlasID);
			this._inAtlasTextureKey=[];
			this._inAtlasTextureValue=[];
			this._webGLImages=[];
			this._atlasCanvas=new AtlasWebGLCanvas();
			this._atlasCanvas.width=width;
			this._atlasCanvas.height=height;
			this._atlasCanvas.activeResource();
		}

		__class(Atlaser,'laya.webgl.atlas.Atlaser',_super);
		var __proto=Atlaser.prototype;
		/**
		*
		*@param inAtlasRes
		*@return 是否已经存在队列中
		*/
		__proto.addToAtlasTexture=function(bitmap,offsetX,offsetY){
			((bitmap instanceof laya.webgl.resource.WebGLImage ))&& (this._webGLImages.push(bitmap));
			bitmap.offsetX=offsetX;
			bitmap.offsetY=offsetY;
			this._atlasCanvas.texSubImage2D(bitmap,offsetX,offsetY,bitmap.image || bitmap.canvas);
			((bitmap instanceof laya.webgl.resource.WebGLImage ))&& (bitmap._image=null);
			((bitmap instanceof laya.webgl.resource.WebGLCharImage ))&&(bitmap.canvas=null);
			((bitmap instanceof laya.webgl.resource.WebGLSubImage ))&&(bitmap.canvas=null);
		}

		//_canvas为复用暂不清空
		__proto.addToAtlas=function(inAtlasRes){
			this._inAtlasTextureKey.push(inAtlasRes);
			this._inAtlasTextureValue.push(inAtlasRes.bitmap);
			inAtlasRes.bitmap=this._atlasCanvas;
		}

		__proto.clear=function(){
			for (var i=0,n=this._inAtlasTextureKey.length;i < n;i++){
				this._inAtlasTextureKey[i].bitmap=this._inAtlasTextureValue[i];
				this._inAtlasTextureKey[i].bitmap.releaseResource();
			}
			this._inAtlasTextureKey.length=0;
			this._inAtlasTextureValue.length=0;
			this._webGLImages.length=0;
		}

		__proto.destroy=function(){
			this.clear();
			this._atlasCanvas.releaseResource();
		}

		__getset(0,__proto,'texture',function(){
			return this._atlasCanvas;
		});

		__getset(0,__proto,'webGLImages',function(){
			return this._webGLImages;
		});

		return Atlaser;
	})(AtlasGrid)


	/**
	*...
	*@author laya
	*/
	//class laya.webgl.shader.d2.ShaderDefines2D extends laya.webgl.shader.ShaderDefines
	var ShaderDefines2D=(function(_super){
		function ShaderDefines2D(){
			ShaderDefines2D.__super.call(this,ShaderDefines2D._name2int,ShaderDefines2D._int2name,ShaderDefines2D._int2nameMap);
		}

		__class(ShaderDefines2D,'laya.webgl.shader.d2.ShaderDefines2D',_super);
		ShaderDefines2D.__init__=function(){
			ShaderDefines2D.reg("TEXTURE2D",0x01);
			ShaderDefines2D.reg("COLOR2D",0x02);
			ShaderDefines2D.reg("PRIMITIVE",0x04);
			ShaderDefines2D.reg("GLOW_FILTER",0x08);
			ShaderDefines2D.reg("BLUR_FILTER",0x10);
			ShaderDefines2D.reg("COLOR_FILTER",0x20);
			ShaderDefines2D.reg("COLOR_ADD",0x40);
		}

		ShaderDefines2D.reg=function(name,value){
			ShaderDefines._reg(name,value,ShaderDefines2D._name2int,ShaderDefines2D._int2name);
		}

		ShaderDefines2D.toText=function(value,_int2name,_int2nameMap){
			return ShaderDefines._toText(value,_int2name,_int2nameMap);
		}

		ShaderDefines2D.toInt=function(names){
			return ShaderDefines._toInt(names,ShaderDefines2D._name2int);
		}

		ShaderDefines2D.TEXTURE2D=0x01;
		ShaderDefines2D.COLOR2D=0x02;
		ShaderDefines2D.PRIMITIVE=0x04;
		ShaderDefines2D.FILTERGLOW=0x08;
		ShaderDefines2D.FILTERBLUR=0x10;
		ShaderDefines2D.FILTERCOLOR=0x20;
		ShaderDefines2D.COLORADD=0x40;
		ShaderDefines2D._name2int={};
		ShaderDefines2D._int2name=[];
		ShaderDefines2D._int2nameMap=[];
		return ShaderDefines2D;
	})(ShaderDefines)


	//class laya.webgl.shapes.Circle extends laya.webgl.shapes.BasePoly
	var Circle=(function(_super){
		function Circle(x,y,r,color,borderWidth,borderColor,fill){
			Circle.__super.call(this,x,y,r,r,80,color,borderWidth,borderColor);
			this.fill=fill;
		}

		__class(Circle,'laya.webgl.shapes.Circle',_super);
		return Circle;
	})(BasePoly)


	//class laya.webgl.shapes.Ellipse extends laya.webgl.shapes.BasePoly
	var Ellipse=(function(_super){
		function Ellipse(x,y,width,height,color,borderWidth,borderColor){
			Ellipse.__super.call(this,x,y,width,height,40,color,borderWidth,borderColor);
		}

		__class(Ellipse,'laya.webgl.shapes.Ellipse',_super);
		return Ellipse;
	})(BasePoly)


	//class laya.webgl.shapes.Fan extends laya.webgl.shapes.BasePoly
	var Fan=(function(_super){
		function Fan(x,y,r,r0,r1,color,borderWidth,borderColor,round){
			(round===void 0)&& (round=0);
			Fan.__super.call(this,x,y,r,r,30,color,borderWidth,borderColor,round);
			this.r0=r0;
			this.r1=r1;
		}

		__class(Fan,'laya.webgl.shapes.Fan',_super);
		var __proto=Fan.prototype;
		__proto.getData=function(ib,vb,start){
			var indices=[];
			var verts=[];
			this.sector(verts,indices,start);
			if(this.fill){
				(this.borderWidth>0)&&(this.borderColor!=-1)&&this.createFanLine(verts,indices,this.borderWidth,start+verts.length/5,null,null);
				ib.append(new Uint16Array(indices));
				vb.append(new Float32Array(verts));
			}
			else{
				var outV=[];
				var outI=[];
				(this.borderColor!=-1)&&(this.borderWidth>0)&&this.createFanLine(verts,indices,this.borderWidth,start,outV,outI);
				ib.append(new Uint16Array(outI));
				vb.append(new Float32Array(outV));
			}
		}

		return Fan;
	})(BasePoly)


	//class laya.webgl.shapes.Line extends laya.webgl.shapes.BasePoly
	var Line=(function(_super){
		function Line(x,y,points,color,borderWidth){
			this.points
			Line.__super.call(this,x,y,0,0,0,color,borderWidth,color,0);
			this.points=points;
		}

		__class(Line,'laya.webgl.shapes.Line',_super);
		var __proto=Line.prototype;
		__proto.getData=function(ib,vb,start){
			var indices=[];
			var verts=[];
			(this.borderWidth > 0)&& this.createLine2(this.points,indices,this.borderWidth,start,verts,this.points.length / 2);
			ib.append(new Uint16Array(indices));
			vb.append(new Float32Array(verts));
		}

		return Line;
	})(BasePoly)


	//class laya.webgl.shapes.Polygon extends laya.webgl.shapes.BasePoly
	var Polygon=(function(_super){
		function Polygon(x,y,r,edges,color,borderWidth,borderColor){
			Polygon.__super.call(this,x,y,r,r,edges,color,borderWidth,borderColor);
		}

		__class(Polygon,'laya.webgl.shapes.Polygon',_super);
		return Polygon;
	})(BasePoly)


	//class laya.webgl.shapes.Rect extends laya.webgl.shapes.BasePoly
	var Rect1=(function(_super){
		function Rect(x,y,width,height,color,borderWidth,borderColor){
			Rect.__super.call(this,x+width / 2,y+height / 2,width / 2,height / 2,4,color,borderWidth,borderColor);
		}

		__class(Rect,'laya.webgl.shapes.Rect',_super,'Rect1');
		return Rect;
	})(BasePoly)


	/**
	*...
	*@author wk
	*/
	//class laya.webgl.submit.SubmitCanvas extends laya.webgl.submit.Submit
	var SubmitCanvas=(function(_super){
		function SubmitCanvas(){
			//this._ctx_src=null;
			//this._alpha=NaN;
			this._filters=[];
			//this._shaderDefines=null;
			SubmitCanvas.__super.call(this);
			this._matrix=new Matrix();
			this._matrix4=CONST3D2D.defaultMatrix4.concat();
		}

		__class(SubmitCanvas,'laya.webgl.submit.SubmitCanvas',_super);
		var __proto=SubmitCanvas.prototype;
		__proto.renderSubmit=function(){
			if (this._ctx_src._targets){
				this._ctx_src._targets.flush(this._ctx_src);
				return 1;
			};
			var preAlpha=RenderState2D.worldAlpha;
			var preMatrix4=RenderState2D.worldMatrix4;
			var preMatrix=RenderState2D.worldMatrix;
			var preFilters=RenderState2D.worldFilters;
			var preShaderDefinesValue=RenderState2D.worldShaderDefinesValue;
			var m=this._matrix;
			var m4=this._matrix4;
			var mout=Matrix.TEMP;
			Matrix.mul(m,preMatrix,mout);
			m4[0]=mout.a;
			m4[1]=mout.b;
			m4[4]=mout.c;
			m4[5]=mout.d;
			m4[12]=mout.tx;
			m4[13]=mout.ty;
			RenderState2D.worldMatrix=mout.clone();
			RenderState2D.worldMatrix4=m4;
			RenderState2D.worldAlpha=RenderState2D.worldAlpha *this._alpha;
			if (this._filters.length){
				RenderState2D.worldFilters=this._filters;
				RenderState2D.worldShaderDefinesValue=this._shaderDefines._value;
			}
			this._ctx_src.flush();
			RenderState2D.worldAlpha=preAlpha;
			RenderState2D.worldMatrix4=preMatrix4;
			RenderState2D.worldMatrix.destroy();
			RenderState2D.worldMatrix=preMatrix;
			RenderState2D.worldFilters=preFilters;
			RenderState2D.worldShaderDefinesValue=preShaderDefinesValue;
			return 1;
		}

		__proto.releaseRender=function(){
			var cache=SubmitCanvas._cache;
			cache[cache._length++]=this;
		}

		__proto.getRenderType=function(){
			return 3;
		}

		SubmitCanvas.create=function(ctx_src,alpha,filters){
			var o=(!SubmitCanvas._cache._length)?(new SubmitCanvas()):SubmitCanvas._cache[--SubmitCanvas._cache._length];
			o._ctx_src=ctx_src;
			o._alpha=alpha;
			if (filters && filters.length){
				o._shaderDefines || (o._shaderDefines=new ShaderDefines(SubmitCanvas._name2int,SubmitCanvas._int2name,SubmitCanvas._int2nameMap));
				var n=filters.length;
				o._filters.length=n;
				var f;
				for (var i=0;i < n;i++){
					o._filters[i]=f=filters[i];
					o._shaderDefines.add(f.type);
				}
			}
			else o._filters.length=0;
			return o;
		}

		SubmitCanvas._name2int={};
		SubmitCanvas._int2name=[];
		SubmitCanvas._int2nameMap=[];
		SubmitCanvas._cache=(SubmitCanvas._cache=[],SubmitCanvas._cache._length=0,SubmitCanvas._cache);
		return SubmitCanvas;
	})(Submit)


	/**
	*<p> <code>Sprite</code> 类是基本显示列表构造块：一个可显示图形并且也可包含子项的显示列表节点。</p>
	*
	*@example 以下示例代码，创建了一个 <code>Text</code> 实例。
	*<p>[EXAMPLE-AS-BEGIN]</p>
	*<listing version="3.0">
	*package
	*{
		*import laya.display.Sprite;
		*import laya.events.Event;
		*
		*public class Sprite_Example
		*{
			*private var sprite:Sprite;
			*private var shape:Sprite
			*
			*public function Sprite_Example()
			*{
				*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
				*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
				*onInit();
				*}
			*
			*private function onInit():void
			*{
				*sprite=new Sprite();//创建一个 Sprite 类的实例对象 sprite 。
				*sprite.loadImage("resource/ui/bg.png");//加载并显示图片。
				*sprite.x=200;//设置 sprite 对象相对于父容器的水平方向坐标值。
				*sprite.y=200;//设置 sprite 对象相对于父容器的垂直方向坐标值。
				*sprite.pivotX=0;//设置 sprite 对象的水平方法轴心点坐标。
				*sprite.pivotY=0;//设置 sprite 对象的垂直方法轴心点坐标。
				*Laya.stage.addChild(sprite);//将此 sprite 对象添加到显示列表。
				*sprite.on(Event.CLICK,this,onClickSprite);//给 sprite 对象添加点击事件侦听。
				*
				*shape=new Sprite();//创建一个 Sprite 类的实例对象 sprite 。
				*shape.graphics.drawRect(0,0,100,100,"#ccff00","#ff0000",2);//绘制一个有边框的填充矩形。
				*shape.x=400;//设置 shape 对象相对于父容器的水平方向坐标值。
				*shape.y=200;//设置 shape 对象相对于父容器的垂直方向坐标值。
				*shape.width=100;//设置 shape 对象的宽度。
				*shape.height=100;//设置 shape 对象的高度。
				*shape.pivotX=50;//设置 shape 对象的水平方法轴心点坐标。
				*shape.pivotY=50;//设置 shape 对象的垂直方法轴心点坐标。
				*Laya.stage.addChild(shape);//将此 shape 对象添加到显示列表。
				*shape.on(Event.CLICK,this,onClickShape);//给 shape 对象添加点击事件侦听。
				*}
			*
			*private function onClickSprite():void
			*{
				*trace("点击 sprite 对象。");
				*sprite.rotation+=5;//旋转 sprite 对象。
				*}
			*
			*private function onClickShape():void
			*{
				*trace("点击 shape 对象。");
				*shape.rotation+=5;//旋转 shape 对象。
				*}
			*}
		*}
	*</listing>
	*<listing version="3.0">
	*var sprite;
	*var shape;
	*Sprite_Example();
	*function Sprite_Example()
	*{
		*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
		*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
		*onInit();
		*}
	*function onInit()
	*{
		*sprite=new laya.display.Sprite();//创建一个 Sprite 类的实例对象 sprite 。
		*sprite.loadImage("resource/ui/bg.png");//加载并显示图片。
		*sprite.x=200;//设置 sprite 对象相对于父容器的水平方向坐标值。
		*sprite.y=200;//设置 sprite 对象相对于父容器的垂直方向坐标值。
		*sprite.pivotX=0;//设置 sprite 对象的水平方法轴心点坐标。
		*sprite.pivotY=0;//设置 sprite 对象的垂直方法轴心点坐标。
		*Laya.stage.addChild(sprite);//将此 sprite 对象添加到显示列表。
		*sprite.on(Event.CLICK,this,onClickSprite);//给 sprite 对象添加点击事件侦听。
		*shape=new laya.display.Sprite();//创建一个 Sprite 类的实例对象 sprite 。
		*shape.graphics.drawRect(0,0,100,100,"#ccff00","#ff0000",2);//绘制一个有边框的填充矩形。
		*shape.x=400;//设置 shape 对象相对于父容器的水平方向坐标值。
		*shape.y=200;//设置 shape 对象相对于父容器的垂直方向坐标值。
		*shape.width=100;//设置 shape 对象的宽度。
		*shape.height=100;//设置 shape 对象的高度。
		*shape.pivotX=50;//设置 shape 对象的水平方法轴心点坐标。
		*shape.pivotY=50;//设置 shape 对象的垂直方法轴心点坐标。
		*Laya.stage.addChild(shape);//将此 shape 对象添加到显示列表。
		*shape.on(laya.events.Event.CLICK,this,onClickShape);//给 shape 对象添加点击事件侦听。
		*}
	*function onClickSprite()
	*{
		*console.log("点击 sprite 对象。");
		*sprite.rotation+=5;//旋转 sprite 对象。
		*}
	*function onClickShape()
	*{
		*console.log("点击 shape 对象。");
		*shape.rotation+=5;//旋转 shape 对象。
		*}
	*</listing>
	*<listing version="3.0">
	*import Sprite=laya.display.Sprite;
	*class Sprite_Example {
		*private sprite:Sprite;
		*private shape:Sprite
		*public Sprite_Example(){
			*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*this.onInit();
			*}
		*private onInit():void {
			*this.sprite=new Sprite();//创建一个 Sprite 类的实例对象 sprite 。
			*this.sprite.loadImage("resource/ui/bg.png");//加载并显示图片。
			*this.sprite.x=200;//设置 sprite 对象相对于父容器的水平方向坐标值。
			*this.sprite.y=200;//设置 sprite 对象相对于父容器的垂直方向坐标值。
			*this.sprite.pivotX=0;//设置 sprite 对象的水平方法轴心点坐标。
			*this.sprite.pivotY=0;//设置 sprite 对象的垂直方法轴心点坐标。
			*Laya.stage.addChild(this.sprite);//将此 sprite 对象添加到显示列表。
			*this.sprite.on(laya.events.Event.CLICK,this,this.onClickSprite);//给 sprite 对象添加点击事件侦听。
			*
			*this.shape=new Sprite();//创建一个 Sprite 类的实例对象 sprite 。
			*this.shape.graphics.drawRect(0,0,100,100,"#ccff00","#ff0000",2);//绘制一个有边框的填充矩形。
			*this.shape.x=400;//设置 shape 对象相对于父容器的水平方向坐标值。
			*this.shape.y=200;//设置 shape 对象相对于父容器的垂直方向坐标值。
			*this.shape.width=100;//设置 shape 对象的宽度。
			*this.shape.height=100;//设置 shape 对象的高度。
			*this.shape.pivotX=50;//设置 shape 对象的水平方法轴心点坐标。
			*this.shape.pivotY=50;//设置 shape 对象的垂直方法轴心点坐标。
			*Laya.stage.addChild(this.shape);//将此 shape 对象添加到显示列表。
			*this.shape.on(laya.events.Event.CLICK,this,this.onClickShape);//给 shape 对象添加点击事件侦听。
			*}
		*
		*private onClickSprite():void {
			*console.log("点击 sprite 对象。");
			*this.sprite.rotation+=5;//旋转 sprite 对象。
			*}
		*
		*private onClickShape():void {
			*console.log("点击 shape 对象。");
			*this.shape.rotation+=5;//旋转 shape 对象。
			*}
		*}
	*</listing>
	*@author yung
	*
	*/
	//class laya.display.Sprite extends laya.display.Node
	var Sprite=(function(_super){
		function Sprite(){
			this.mouseThrough=false;
			this._transform=null;
			this._tfChanged=false;
			this._x=0;
			this._y=0;
			this._width=0;
			this._height=0;
			this._repaint=1;
			this._mouseEnableState=0;
			this._enableRenderMerge=false;
			this._zOrder=0;
			this._graphics=null;
			this._renderType=0;
			this.autoSize=false;
			this.optimizeFloat=false;
			Sprite.__super.call(this);
			this._style=Style.EMPTY;
			this._$P=Sprite.PropEmpty;
		}

		__class(Sprite,'laya.display.Sprite',_super);
		var __proto=Sprite.prototype;
		Laya.imps(__proto,{"laya.display.ILayout":true})
		/**@inheritDoc */
		__proto.destroy=function(destroyChild){
			(destroyChild===void 0)&& (destroyChild=true);
			_super.prototype.destroy.call(this,destroyChild);
			this._style && this._style.destroy();
			this._transform=null;
			this._style=null;
			this._graphics=null;
			this._$P=null
		}

		/**根据Z进行重新排序。*/
		__proto.updateOrder=function(){
			Utils1.updateOrder(this._childs)&& this.repaint();
		}

		/**在设置cacheAsBtimap=true或者staticCache=true的情况下，调用此方法会重新刷新缓存*/
		__proto.reCache=function(){
			if (this._$P.cacheCanvas)this._$P.cacheCanvas.reCache=true;
		}

		__proto.setBounds=function(bound){
			this.get$P().uBounds=bound;
		}

		/**
		*获取本对象在父容器坐标系的矩形显示区域。
		*计算量较大，尽量少用。
		*@return 矩形区域
		*/
		__proto.getBounds=function(){
			return Rectangle._getWrapRec(this.boundPointsToParent(),Rectangle.TEMP);
		}

		/**
		*获取本对象在自己坐标系的矩形显示区域。
		*计算量较大，尽量少用。
		*@return 矩形区域
		*/
		__proto.getSelfBounds=function(){
			return Rectangle._getWrapRec(this._getBoundPointsM(false),Rectangle.TEMP);
		}

		/**
		*批量操作点坐标。
		*@param pList 坐标列表。
		*@param x x轴偏移量。
		*@param y y轴偏移量。
		*
		*/
		__proto.transPointList=function(pList,x,y){
			var i=0,len=pList.length;
			for (i=0;i < len;i+=2){
				pList[i]+=x;
				pList[i+1]+=y;
			}
		}

		/**
		*获取本对象在父容器坐标系的显示区域多边形顶点列表。
		*当显示对象链中有旋转时，返回多边形顶点列表，无旋转时返回矩形的四个顶点。
		*@param ifRotate 之前的对象链中是否有旋转。
		*@return 顶点列表
		*/
		__proto.boundPointsToParent=function(ifRotate){
			(ifRotate===void 0)&& (ifRotate=false);
			var pX=0,pY=0;
			if (this._style){
				pX=this._style.translateX;
				pY=this._style.translateY;
				ifRotate=ifRotate || (this._style.rotate!==0);
				if (this._style.scrollRect){
					pX+=this._style.scrollRect.x;
					pY+=this._style.scrollRect.y;
				}
			};
			var pList=this._getBoundPointsM(ifRotate);
			if (!pList || pList.length < 1)return pList;
			if (pList.length !=8){
				pList=ifRotate ? GrahamScan.scanPList(pList):Rectangle._getWrapRec(pList,Rectangle.TEMP)._getBoundPoints();
			}
			if (!this.transform){
				this.transPointList(pList,this.x-pX,this.y-pY);
				return pList;
			};
			var tPoint=Point.TEMP;
			var rst=[];
			var i=0,len=pList.length;
			for (i=0;i < len;i+=2){
				tPoint.x=pList[i];
				tPoint.y=pList[i+1];
				this.toParentPoint(tPoint);
				rst.push(tPoint.x,tPoint.y);
			}
			return rst;
		}

		/**
		*返回此实例中的绘图对象（ <code>Graphics</code> ）的显示区域。
		*@return
		*
		*/
		__proto.getGraphicBounds=function(){
			if (!this._graphics)return Rectangle.EMPTY;
			return this._graphics.getBounds();
		}

		/**
		*@private
		*获取自己坐标系的显示区域多边形顶点列表
		*@param ifRotate 当前的显示对象链是否由旋转
		*@return 顶点列表
		*/
		__proto._getBoundPointsM=function(ifRotate){
			(ifRotate===void 0)&& (ifRotate=false);
			if (this._$P.uBounds)return this._$P.uBounds._getBoundPoints();
			if (!this._$P.temBM)this.get$P().temBM=[];
			var pList=this._graphics ? this._graphics.getBoundPoints():Utils1.clearArr(this._$P.temBM);
			var child;
			var cList;
			for (var i=0,n=this.numChildren;i < n;i++){
				child=this.getChildAt(i);
				if ((child instanceof laya.display.Sprite )&& child.visible==true){
					cList=child.boundPointsToParent(ifRotate);
					if (cList)
						pList=pList ? Utils1.concatArr(pList,cList):cList;
				}
			}
			return pList;
		}

		/**
		*获取样式。
		*@return
		*@private
		*/
		__proto.getStyle=function(){
			this._style===Style.EMPTY && (this._style=new Style());
			return this._style;
		}

		/**@private */
		__proto.get$P=function(){
			this._$P===Sprite.PropEmpty && (this._$P={});
			return this._$P;
		}

		/**
		*设置样式。
		*@param value
		*/
		__proto.setStyle=function(value){
			this._style=value;
		}

		/**@private */
		__proto._adjustTransform=function(){
			'use strict';
			this._tfChanged=false;
			var style=this._style;
			var sx=style.scaleX,sy=style.scaleY;
			var m;
			if (style.rotate || sx!==1 || sy!==1 || style.skewX || style.skewY){
				m=this._transform || (this._transform=Matrix.create());
				m.bTransform=true;
				if (style.rotate){
					var angle=style.rotate *0.0174532922222222;
					var cos=m.cos=Math.cos(angle);
					var sin=m.sin=Math.sin(angle);
					m.a=sx *cos;
					m.b=sx *sin;
					m.c=-sy *sin;
					m.d=sy *cos;
					m.tx=m.ty=0;
					return m;
					}else {
					m.a=sx;
					m.d=sy;
					m.c=m.b=m.tx=m.ty=0;
					if (style.skewX || style.skewY){
						return m.skew(style.skewX *0.0174532922222222,style.skewY *0.0174532922222222);
					}
					return m;
				}
				}else {
				this._transform && this._transform.destroy();
				this._transform=null;
				this._renderType &=~0x08;
			}
			return m;
		}

		/**
		*设置坐标位置。
		*@param x X轴坐标
		*@param y Y轴坐标
		*@return 返回对象本身
		*/
		__proto.pos=function(x,y){
			if (this._x!==x || this._y!==y){
				this.x=x;
				this.y=y;
			}
			return this;
		}

		/**
		*设置轴心点。
		*@param x X轴心点
		*@param y Y轴心点
		*@return 返回对象本身
		*/
		__proto.pivot=function(x,y){
			this.pivotX=x;
			this.pivotY=y;
			return this;
		}

		/**
		*设置宽高。
		*@param width 宽度
		*@param hegiht 高度
		*@return 返回对象本身
		*/
		__proto.size=function(width,height){
			this.width=width;
			this.height=height;
			return this;
		}

		/**
		*设置缩放。
		*@param scaleX X轴缩放比例
		*@param scaleY Y轴缩放比例
		*@return 返回对象本身
		*/
		__proto.scale=function(scaleX,scaleY){
			this.scaleX=scaleX;
			this.scaleY=scaleY;
			return this;
		}

		/**
		*设置倾斜角度。
		*@param skewX 水平倾斜角度
		*@param skewY 垂直倾斜角度
		*@return 返回对象本身
		*/
		__proto.skew=function(skewX,skewY){
			this.skewX=this.scaleX;
			this.skewY=this.scaleY;
			return this;
		}

		/**@private */
		__proto._removeRenderType=function(type){
			((this._renderType & type)==type)&& (this._renderType &=~type);
		}

		/**@private */
		__proto._addRenderType=function(type){
			this._renderType |=type;
		}

		/**
		*更新、呈现显示对象。
		*@param context
		*@param x
		*@param y
		*/
		__proto.render=function(context,x,y){
			Stat.spriteDraw++;
			RenderSprite.renders[this._renderType]._fun(this,context,x+this._x,y+this._y);
			this._repaint=0;
		}

		/**
		*绘制 <code>Sprite</code> 到 <code>canvas</code> 上。
		*@param canvasWidth 画布宽度。
		*@param canvasHeight 画布高度。
		*@param x 绘制的X轴偏移量。
		*@param y 绘制的Y轴偏移量。
		*@return
		*/
		__proto.drawToCanvas=function(canvasWidth,canvasHeight,offsetX,offsetY){
			return System.drawToCanvas(this,this._renderType,canvasWidth,canvasHeight,offsetX,offsetY);
		}

		/**
		*自定义更新、呈现显示对象。
		*【注意】不要在此函数内增加或删除树节点，否则会树节点遍历照成影响
		*@param context
		*@param x
		*@param y
		*/
		__proto.customRender=function(context,x,y){}
		/**
		*应用滤镜。
		*/
		__proto.applyFilters=function(){
			if (Render.isWebGl)return;
			var _filters;
			_filters=this._$P.filters;
			if (!_filters || _filters.length < 1)return;
			for (var i=0,n=_filters.length;i < n;i++){
				_filters[i].action.apply(this._$P.cacheCanvas);
			}
		}

		/**@inheritDoc */
		__proto.ask=function(type,value){
			return type==1 ? (value==2):false;
		}

		/**
		*本地坐标转全局坐标
		*@param point 要转换的点
		*@return 转换后的点
		*/
		__proto.localToGlobal=function(point,createNewPoint){
			(createNewPoint===void 0)&& (createNewPoint=false);
			if (!this._displayInStage || !point)return point;
			if (createNewPoint===true){
				point=new Point(point.x,point.y);
			};
			var ele=this;
			while (ele){
				if (ele==Laya.stage)break ;
				point=ele.toParentPoint(point);
				ele=ele.parent;
			}
			return point;
		}

		/**
		*全局坐标转本地坐标
		*@param point 要转换的点
		*@return 转换后的点
		*/
		__proto.globalToLocal=function(point,createNewPoint){
			(createNewPoint===void 0)&& (createNewPoint=false);
			if (!this._displayInStage || !point)return point;
			if (createNewPoint===true){
				point=new Point(point.x,point.y);
			};
			var ele=this;
			var list=[];
			while (ele){
				if (ele==Laya.stage)break ;
				list.push(ele);
				ele=ele.parent;
			};
			var i=list.length-1;
			while (i >=0){
				ele=list[i];
				point=ele.fromParentPoint(point);
				i--;
			}
			return point;
		}

		/**
		*将本地坐标系坐标转换到父容器坐标系
		*@param point 要转换的点
		*@return 转换后的点
		*/
		__proto.toParentPoint=function(point){
			if (!point)return point;
			point.x-=this.pivotX;
			point.y-=this.pivotY;
			if (this.transform){
				this._transform.transformPoint(point.x,point.y,point);
			}
			point.x+=this._x;
			point.y+=this._y;
			var scroll=this._style.scrollRect;
			if (scroll){
				point.x-=scroll.x;
				point.y-=scroll.y;
			}
			return point;
		}

		/**
		*将父容器坐标系坐标转换到本地坐标系
		*@param point 要转换的点
		*@return 转换后的点
		*/
		__proto.fromParentPoint=function(point){
			if (!point)return point;
			point.x-=this._x;
			point.y-=this._y;
			var scroll=this._style.scrollRect;
			if (scroll){
				point.x+=scroll.x;
				point.y+=scroll.y;
			}
			if (this.transform){
				this._transform.invertTransformPoint(point);
			}
			point.x+=this.pivotX;
			point.y+=this.pivotY;
			return point;
		}

		/**
		*
		*增加事件监听，如果侦听鼠标事件，则会自动设置自己和父亲节点的mouseEnable=true
		*@param type 事件类型，可以参考Event类定义
		*@param caller 执行域(this域)，默认为监听对象的this域
		*@param listener 回调方法，如果为空，则移除所有type类型的事件监听
		*@param args 回调参数
		*@return 返回对象本身
		*/
		__proto.on=function(type,caller,listener,args){
			if (this._mouseEnableState!==1 && this.isMouseEvent(type)){
				if (this._displayInStage)this._$2__onDisplay();
				else laya.events.EventDispatcher.prototype.once.call(this,"display",this,this._$2__onDisplay);
			}
			return laya.events.EventDispatcher.prototype.on.call(this,type,caller,listener,args);
		}

		/**
		*增加一次性事件监听，执行后会自动移除监听，如果侦听鼠标事件，则会自动设置自己和父亲节点的mouseEnable=true
		*@param type 事件类型，可以参考Event类定义
		*@param caller 执行域(this域)，默认为监听对象的this域
		*@param listener 回调方法，如果为空，则移除所有type类型的事件监听
		*@param args 回调参数
		*@return 返回对象本身
		*/
		__proto.once=function(type,caller,listener,args){
			if (this._mouseEnableState!==1 && this.isMouseEvent(type)){
				if (this._displayInStage)this._$2__onDisplay();
				else laya.events.EventDispatcher.prototype.once.call(this,"display",this,this._$2__onDisplay);
			}
			return laya.events.EventDispatcher.prototype.once.call(this,type,caller,listener,args);
		}

		/**@private */
		__proto._$2__onDisplay=function(){
			if (this._mouseEnableState!==1){
				var ele=this;
				while (ele && ele._mouseEnableState!==1){
					ele.mouseEnabled=true;
					ele=ele.parent;
				}
			}
		}

		/**
		*加载并显示一个图片【注意】同一对象调用多次，会导致渲染多张图片。
		*@param url 图片地址。
		*@param x 显示图片的x位置
		*@param y 显示图片的y位置
		*@param width 显示图片的宽度，设置为0表示使用图片默认宽度
		*@param height 显示图片的高度，设置为0表示使用图片默认高度
		*@param complete 加载完成回调
		*@return 返回精灵对象本身
		*/
		__proto.loadImage=function(url,x,y,width,height,complete){
			var _$this=this;
			(x===void 0)&& (x=0);
			(y===void 0)&& (y=0);
			(width===void 0)&& (width=0);
			(height===void 0)&& (height=0);
			function loaded (image){
				if (!_$this._width && !_$this._height)
					_$this.size(width || image.width,height || image.height);
				_$this.repaint();
				complete && complete.run();
			}
			this.graphics.loadImage(url,x,y,width,height,loaded);
			return this;
		}

		/**cacheAsBitmap=true时，手动重新缓存本对象。*/
		__proto.repaint=function(){
			(this._repaint===0)&& (this._repaint=1,this.parentRepaint(this));
		}

		/**
		*获取是否重新缓存。
		*@return
		*/
		__proto.isRepaint=function(){
			return (this._repaint!==0)&& this._$P.cacheCanvas && this._$P.cacheCanvas.reCache;
		}

		/**@inheritDoc */
		__proto.childChanged=function(child){
			this._renderType |=0x800;
			if (child && (child).zOrder)Laya.timer.callLater(this,this.updateOrder);
			this.repaint();
		}

		/**cacheAsBitmap=true时，手动重新缓存父对象。 */
		__proto.parentRepaint=function(child){
			var p=this._parent;
			p && p._repaint===0 && (p._repaint=1,p.parentRepaint(this));
		}

		/**
		*开始拖动此对象。
		*@param area 拖动区域，此区域为当前对象注册点活动区域（不包括对象宽高），可选。
		*@param hasInertia 鼠标松开后，是否还惯性滑动，默认为false，可选。
		*@param elasticDistance 橡皮筋效果的距离值，0为无橡皮筋效果，默认为0，可选。
		*@param elasticBackTime 橡皮筋回弹时间，单位为毫秒，默认为300毫秒，可选。
		*@param data 拖动事件携带的数据，可选。
		*@param disableMouseEvent 禁用其他对象的鼠标检测，默认为false，设置为true能提高性能
		*/
		__proto.startDrag=function(area,hasInertia,elasticDistance,elasticBackTime,data,disableMouseEvent){
			(hasInertia===void 0)&& (hasInertia=false);
			(elasticDistance===void 0)&& (elasticDistance=0);
			(elasticBackTime===void 0)&& (elasticBackTime=300);
			(disableMouseEvent===void 0)&& (disableMouseEvent=false);
			this._$P.dragging || (this.get$P().dragging=new Dragging());
			this._$P.dragging.start(this,area,hasInertia,elasticDistance,elasticBackTime,data,disableMouseEvent);
		}

		/**停止拖动此对象。*/
		__proto.stopDrag=function(){
			this._$P.dragging && this._$P.dragging.stop();
		}

		/**@private */
		__proto._setDisplay=function(value){
			if (!value && this._$P.cacheCanvas && this._$P.cacheCanvas.ctx){
				this._$P.cacheCanvas.ctx.destroy();
				this._$P.cacheCanvas.ctx=null;
			};
			var fc=this["_filterCache"];
			fc && (fc.destroy(),fc.recycle(),this["_filterCache"]=null);
			_super.prototype._setDisplay.call(this,value);
		}

		/**
		*检测某个点是否在此对象内。
		*@param x 全局x坐标。
		*@param y 全局y坐标。
		*@return 表示是否在对象内。
		*/
		__proto.hitTestPoint=function(x,y){
			var point=this.globalToLocal(Point.TEMP.setTo(x,y));
			var rect=this._$P.hitArea ? this._$P.hitArea :Rectangle.EMPTY.setTo(0,0,this._width,this._height);
			return rect.contains(point.x,point.y);
		}

		/**获得相对于本对象上的鼠标坐标信息。*/
		__proto.getMousePoint=function(){
			return this.globalToLocal(Point.TEMP.setTo(Laya.stage.mouseX,Laya.stage.mouseY));
		}

		/**@private */
		__proto._getWords=function(){
			return null;
		}

		/**@private */
		__proto._addChildsToLayout=function(out){
			var words=this._getWords();
			if (words==null && this._childs.length==0)return false;
			words && words.forEach(function(o){
				out.push(o);
			});
			this._childs.forEach(function(o){
				o._style._enableLayout()&& o._addToLayout(out);
			});
			return true;
		}

		/**@private */
		__proto._addToLayout=function(out){
			if (this._style.absolute)return;
			this._style.block ? out.push(this):(this._addChildsToLayout(out)&& (this.x=this.y=0));
		}

		/**@private */
		__proto._isChar=function(){
			return false;
		}

		/**@private */
		__proto._getCSSStyle=function(){
			return this._style.getCSSStyle();
		}

		/**
		*通过属名设置对应属性的值。
		*@param name 属性名。
		*@param value 属性值。
		*/
		__proto.setValue=function(name,value){
			switch (name){
				case 'x':
					this.x=parseFloat(value);
					break ;
				case 'y':
					this.y=parseFloat(value);
					break ;
				case 'width':
					this.width=parseFloat(value);
					break ;
				case 'height':
					this.height=parseFloat(value);
					break ;
				default :
					this[name]=value;
				}
		}

		/**
		*@private
		*/
		__proto.layoutLater=function(){
			this.parent && (this.parent).layoutLater();
		}

		/**
		*功能同cacheAs
		*/
		__getset(0,__proto,'cacheAsBitmap',function(){
			return this.cacheAs!=="none";
			},function(value){
			this.cacheAs=value ? "normal" :"none";
		});

		/**显示对象的滚动矩形范围。*/
		__getset(0,__proto,'scrollRect',function(){
			return this._style.scrollRect;
			},function(value){
			this.getStyle().scrollRect=value;
			this.repaint();
			if (value)this._renderType |=0x40;
			else this._renderType &=~0x40;
		});

		/**
		*表示显示对象的显示高度，以像素为单位。
		*@return
		*
		*/
		__getset(0,__proto,'viewHeight',function(){
			return this.height *this._style.scaleY;
		});

		/**指定显示对象是否缓存为静态图像，cacheAsBitmap=true时，子对象发生变化，会自动重新缓存，同时也可以手动调用reCache方法更新缓存。
		*建议把不经常变化的复杂内容缓存为静态图像，能极大提高渲染性能，有"none"，"normal"和"bitmap"三个值可选
		*<p>默认为"none"，不做任何缓存。</p>
		*<p>当值为"normal"时，canvas下进行画布缓存，webgl模式下进行命令缓存。</p>
		*<p>当值为"bitmap"时，canvas下进行依然是画布缓存，webgl模式下使用renderTarget缓存。</p>
		*webgl下renderTarget缓存模式有最大2048大小限制，会额外增加内存开销，不断重绘时开销比较大，但是会减少drawcall，渲染性能最高。
		*webgl下命令缓存模式只会减少节点遍历及命令组织，不会减少drawcall，性能中等。
		*/
		__getset(0,__proto,'cacheAs',function(){
			return this._$P.cacheCanvas==null ? "none" :this._$P.cacheCanvas.type;
			},function(value){
			if (value===(this._$P.cacheCanvas ? this._$P.cacheCanvas.type :"none"))return;
			if (value!=="none"){
				this._$P.cacheCanvas || (this.get$P().cacheCanvas=Pool.getItemByClass("cacheCanvas",Object));
				this._$P.cacheCanvas.type=value;
				this._$P.cacheCanvas.reCache=true;
				this._renderType |=0x10;
				}else {
				if (this._$P.cacheCanvas)Pool.recover("cacheCanvas",this._$P.cacheCanvas);
				this._$P.cacheCanvas=null;
				this._renderType &=~0x10;
			}
			this.repaint();
		});

		/**cacheAsBitmap=true时此值才有效，staticCache=true时，子对象变化时不会自动更新缓存，只能通过调用reCache方法手动刷新*/
		__getset(0,__proto,'staticCache',function(){
			return this._$P.staticCache;
			},function(value){
			this._$P.staticCache=value;
			if (!value && this._$P.cacheCanvas){
				this._$P.cacheCanvas.reCache=true;
			}
		});

		/**表示显示对象相对于父容器的水平方向坐标值。*/
		__getset(0,__proto,'x',function(){
			return this._x;
			},function(value){
			var p=this._parent;
			this._x!==value && (this._x=value,p && p._repaint===0 && (p._repaint=1,p.parentRepaint(this)));
		});

		/**表示显示对象相对于父容器的垂直方向坐标值。*/
		__getset(0,__proto,'y',function(){
			return this._y;
			},function(value){
			var p=this._parent;
			this._y!==value && (this._y=value,p && p._repaint===0 && (p._repaint=1,p.parentRepaint(this)));
		});

		/**水平倾斜角度，默认值为0。*/
		__getset(0,__proto,'skewX',function(){
			return this._style.skewX;
			},function(value){
			var style=this.getStyle();
			if (style.skewX!==value){
				style.skewX=value;
				this._tfChanged=true;
				this._renderType |=0x08;
				var p=this._parent;
				p && p._repaint===0 && (p._repaint=1,p.parentRepaint(this));
			}
		});

		/**
		*表示显示对象的宽度，以像素为单位。
		*@return
		*/
		__getset(0,__proto,'width',function(){
			if (!this.autoSize)return this._width;
			return this.getSelfBounds().width;
			},function(value){
			this._width!==value && (this._width=value,this.repaint());
		});

		/**
		*表示显示对象的高度，以像素为单位。
		*@return
		*/
		__getset(0,__proto,'height',function(){
			if (!this.autoSize)return this._height;
			return this.getSelfBounds().height;
			},function(value){
			this._height!==value && (this._height=value,this.repaint());
		});

		/**
		*表示显示对象的显示宽度，以像素为单位。
		*@return
		*
		*/
		__getset(0,__proto,'viewWidth',function(){
			return this.width *this._style.scaleX;
		});

		/**X轴缩放值，默认值为1。*/
		__getset(0,__proto,'scaleX',function(){
			return this._style.scaleX;
			},function(value){
			var style=this.getStyle();
			if (style.scaleX!==value){
				style.scaleX=value;
				this._tfChanged=true;
				this._renderType |=0x08;
				var p=this._parent;
				p && p._repaint===0 && (p._repaint=1,p.parentRepaint(this));
			}
		});

		/**手动设置的可点击区域。*/
		__getset(0,__proto,'hitArea',function(){
			return this._$P.hitArea;
			},function(value){
			this.get$P().hitArea=value;
		});

		/**旋转角度，默认值为0。*/
		__getset(0,__proto,'rotation',function(){
			return this._style.rotate;
			},function(value){
			var style=this.getStyle();
			if (style.rotate!==value){
				style.rotate=value;
				this._tfChanged=true;
				this._renderType |=0x08;
				var p=this._parent;
				p && p._repaint===0 && (p._repaint=1,p.parentRepaint(this));
			}
		});

		/**Y轴缩放值，默认值为1。*/
		__getset(0,__proto,'scaleY',function(){
			return this._style.scaleY;
			},function(value){
			var style=this.getStyle();
			if (style.scaleY!==value){
				style.scaleY=value;
				this._tfChanged=true;
				this._renderType |=0x08;
				var p=this._parent;
				p && p._repaint===0 && (p._repaint=1,p.parentRepaint(this));
			}
		});

		/**指定要使用的混合模式。*/
		__getset(0,__proto,'blendMode',function(){
			return this._style.blendMode;
			},function(value){
			this.getStyle().blendMode=value;
			this._renderType |=0x20;
			this.parentRepaint(this);
		});

		/**垂直倾斜角度，默认值为0。*/
		__getset(0,__proto,'skewY',function(){
			return this._style.skewY;
			},function(value){
			var style=this.getStyle();
			if (style.skewY!==value){
				style.skewY=value;
				this._tfChanged=true;
				this._renderType |=0x08;
				var p=this._parent;
				p && p._repaint===0 && (p._repaint=1,p.parentRepaint(this));
			}
		});

		/**
		*对象的矩阵信息。
		*/
		__getset(0,__proto,'transform',function(){
			return this._tfChanged ? this._adjustTransform():this._transform;
			},function(value){
			this._tfChanged=false;
			this._transform=value;
			if (value)this._renderType |=0x08;
			else this._renderType &=~0x08;
			this.parentRepaint(this);
		});

		/**X轴心点的位置，默认为0，轴心点会影响对象位置，缩放，旋转。*/
		__getset(0,__proto,'pivotX',function(){
			return this._style.translateX;
			},function(value){
			this.getStyle().translateX=value;
			this.repaint();
		});

		/**Y轴心点的位置，默认为0，轴心点会影响对象位置，缩放，旋转。*/
		__getset(0,__proto,'pivotY',function(){
			return this._style.translateY;
			},function(value){
			this.getStyle().translateY=value;
			this.repaint();
		});

		/**透明度，值为0-1，默认为1表示不透明。*/
		__getset(0,__proto,'alpha',function(){
			return this._style.alpha;
			},function(value){
			if (this._style.alpha!==value){
				value=value < 0 ? 0 :(value > 1 ? 1 :value);
				this.getStyle().alpha=value;
				if (value!==1)this._renderType |=0x04;
				else this._renderType &=~0x04;
				this.parentRepaint(this);
			}
		});

		/**表示是否可见，默认为true。*/
		__getset(0,__proto,'visible',function(){
			return this._style.visible;
			},function(value){
			if (this._style.visible!==value){
				this.getStyle().visible=value;
				this.parentRepaint(this);
			}
		});

		/**绘图对象。*/
		__getset(0,__proto,'graphics',function(){
			this._renderType |=0x100;
			return this._graphics || (this.graphics=System.createGraphics());
			},function(value){
			if (this._graphics)this._graphics._sp=null;
			this._graphics=value;
			if (value){
				value._sp=this;
				this._renderType |=0x100;
				if (value.empty())this._renderType &=~0x01;
				}else {
				this._renderType &=~0x100;
				this._renderType &=~0x01;
			}
			this.repaint();
		});

		/**滤镜集合。*/
		__getset(0,__proto,'filters',function(){
			return this._$P.filters;
			},function(value){
			value && value.length===0 && (value=null);
			if (this._$P.filters==value)return;
			this.get$P().filters=value ? value.slice():null;
			if (Render.isWebGl){
				if (value && value.length){
					this._renderType |=0x02;
					}else {
					this._renderType &=~0x02;
				}
				this.repaint();
				return;
			}
			this.cacheAsBitmap=value && value.length > 0;
			this.repaint();
		});

		/**遮罩。*/
		__getset(0,__proto,'mask',function(){
			return this._$P._mask;
			},function(value){
			this.cacheAsBitmap=true;
			this.get$P()._mask=value;
			this._renderType |=0x20;
			this.parentRepaint(this);
		});

		/**对舞台 <code>stage</code> 的引用。*/
		__getset(0,__proto,'stage',function(){
			return Laya.stage;
		});

		/**
		*是否接受鼠标事件。
		*默认为false，如果监听鼠标事件，则会自动设置本对象及父节点的 mouseEnable 都为 true。
		**/
		__getset(0,__proto,'mouseEnabled',function(){
			return this._mouseEnableState > 1;
			},function(value){
			this._mouseEnableState=value ? 2 :1;
		});

		/**允许webgl绘制时指令合并优化。*/
		__getset(0,__proto,'enableRenderMerge',function(){
			return this._enableRenderMerge;
			},function(value){
			if (Render.isWebGl){
				if (value){
					this._renderType |=0x400;
					}else {
					this._renderType &=~0x400;
				}
				this._enableRenderMerge=value;
			}
		});

		/**
		*表示鼠标在此对象上的Y轴坐标信息。
		*/
		__getset(0,__proto,'mouseY',function(){
			return this.getMousePoint().y;
		});

		/**
		*表示鼠标在此对象上的X轴坐标信息。
		*/
		__getset(0,__proto,'mouseX',function(){
			return this.getMousePoint().x;
		});

		/**z排序，更改此值，能按照值大小显示先后顺序。*/
		__getset(0,__proto,'zOrder',function(){
			return this._zOrder;
			},function(value){
			if (this._zOrder !=value){
				this._zOrder=value;
				this._parent && Laya.timer.callLater(this._parent,this.updateOrder);
			}
		});

		Sprite.fromImage=function(url){
			return new Sprite().loadImage(url);
		}

		Sprite.PropEmpty={};
		return Sprite;
	})(Node)


	/**
	*audio标签播放声音的音轨控制
	*@author ww
	*/
	//class laya.media.h5audio.AudioSoundChannel extends laya.media.SoundChannel
	var AudioSoundChannel=(function(_super){
		function AudioSoundChannel(audio){
			this._audio=null;
			this._onEnd=null;
			this._resumePlay=null;
			AudioSoundChannel.__super.call(this);
			this._onEnd=Utils1.bind(this.onEnd,this);
			this._resumePlay=Utils1.bind(this.resumePlay,this);
			audio.addEventListener("ended",this._onEnd);
			this._audio=audio;
		}

		__class(AudioSoundChannel,'laya.media.h5audio.AudioSoundChannel',_super);
		var __proto=AudioSoundChannel.prototype;
		__proto.onEnd=function(){
			if (this.loops==1){
				if (this.completeHandler){
					this.completeHandler.run();
					this.completeHandler=null;
				}
				this.stop();
				this.event("complete");
				return;
			}
			if (this.loops > 0){
				this.loops--;
			}
			this.play();
		}

		__proto.resumePlay=function(){
			this._audio.removeEventListener("canplay",this._resumePlay);
			try {
				this._audio.currentTime=this.startTime;
				this._audio.play();
				}catch (e){
				this.event("error");
			}
		}

		/**
		*播放
		*/
		__proto.play=function(){
			try {
				this._audio.currentTime=this.startTime;
				}catch (e){
				this._audio.addEventListener("canplay",this._resumePlay);
				return;
			}
			this._audio.play();
		}

		/**
		*停止播放
		*
		*/
		__proto.stop=function(){
			this.isStopped=true;
			SoundManager.removeChannel(this);
			this.completeHandler=null;
			if (!this._audio)
				return;
			this._audio.pause();
			this._audio.removeEventListener("ended",this._onEnd);
			Pool.recover(this.url,this._audio);
			this._audio=null;
		}

		/**
		*当前播放到的位置
		*@return
		*
		*/
		__getset(0,__proto,'position',function(){
			if (!this._audio)
				return 0;
			return this._audio.currentTime;
		});

		/**
		*设置音量
		*@param v
		*
		*/
		/**
		*获取音量
		*@return
		*
		*/
		__getset(0,__proto,'volume',function(){
			if (!this._audio)return 1;
			return this._audio.volume;
			},function(v){
			if (!this._audio)return;
			this._audio.volume=v;
		});

		return AudioSoundChannel;
	})(SoundChannel)


	/**
	*web audio api方式播放声音的音轨控制
	*@author ww
	*/
	//class laya.media.webaudio.WebAudioSoundChannel extends laya.media.SoundChannel
	var WebAudioSoundChannel=(function(_super){
		function WebAudioSoundChannel(){
			this.audioBuffer=null;
			this.gain=null;
			this.bufferSource=null;
			this._currentTime=0;
			this._volume=1;
			this._startTime=0;
			this._onPlayEnd=null;
			this.context=WebAudioSound.ctx;
			WebAudioSoundChannel.__super.call(this);
			this._onPlayEnd=Utils1.bind(this.onPlayEnd,this);
			if (this.context["createGain"]){
				this.gain=this.context["createGain"]();
				}else {
				this.gain=this.context["createGainNode"]();
			}
		}

		__class(WebAudioSoundChannel,'laya.media.webaudio.WebAudioSoundChannel',_super);
		var __proto=WebAudioSoundChannel.prototype;
		/**
		*播放声音
		*
		*/
		__proto.play=function(){
			if (this.bufferSource){
				this.bufferSource.disconnect();
				this.bufferSource.onended=null;
				this.bufferSource=null;
			}
			if (!this.audioBuffer)return;
			var context=this.context;
			var gain=this.gain;
			var bufferSource=context.createBufferSource();
			this.bufferSource=bufferSource;
			bufferSource.buffer=this.audioBuffer;
			bufferSource.connect(gain);
			if(gain)
				gain.disconnect();
			gain.connect(context.destination);
			bufferSource.onended=this._onPlayEnd;
			this._startTime=Browser.now();
			this.gain.gain.value=this._volume;
			if (this.loops==0){
				bufferSource.loop=true;
			}
			bufferSource.start(0,this.startTime);
			this._currentTime=0;
		}

		__proto.onPlayEnd=function(){
			if (this.loops==1){
				if (this.completeHandler){
					this.completeHandler.run();
					this.completeHandler=null;
				}
				this.stop();
				this.event("complete");
				return;
			}
			if (this.loops > 0){
				this.loops--;
			}
			this.play();
		}

		/**
		*停止播放
		*
		*/
		__proto.stop=function(){
			if (this.bufferSource){
				var sourceNode=this.bufferSource;
				if (sourceNode.stop){
					sourceNode.stop(0);
					}else {
					sourceNode.noteOff(0);
				}
				this.bufferSource.disconnect();
				this.bufferSource=null;
				this.audioBuffer=null;
			}
			if(this.gain)
				this.gain.disconnect();
			this.isStopped=true;
			SoundManager.removeChannel(this);
			this.completeHandler=null;
		}

		/**
		*获取当前播放位置
		*@return
		*
		*/
		__getset(0,__proto,'position',function(){
			if (this.bufferSource){
				return (Browser.now()-this._startTime)/ 1000+this.startTime;
			}
			return 0;
		});

		/**
		*设置音量
		*@param v
		*
		*/
		/**
		*获取音量
		*@return
		*
		*/
		__getset(0,__proto,'volume',function(){
			return this._volume;
			},function(v){
			if (this.isStopped){
				return;
			}
			this._volume=v;
			this.gain.gain.value=v;
		});

		return WebAudioSoundChannel;
	})(SoundChannel)


	/**
	*...
	*@author laya
	*/
	//class laya.resource.Bitmap extends laya.resource.Resource
	var Bitmap=(function(_super){
		function Bitmap(){
			//this._source=null;
			//this._w=NaN;
			//this._h=NaN;
			//this._id=0;
			Bitmap.__super.call(this);
			this._w=0;
			this._h=0;
			this._id=++Bitmap.__count;
		}

		__class(Bitmap,'laya.resource.Bitmap',_super);
		var __proto=Bitmap.prototype;
		/***复制资源,此方法为浅复制*/
		__proto.copyTo=function(dec){
			dec._source=this._source;
			dec._w=this._w;
			dec._h=this._h;
		}

		/**彻底清理资源*/
		__proto.dispose=function(){
			this._resourceManager.removeResource(this);
			_super.prototype.dispose.call(this);
		}

		/***
		*获取HTML Image或HTML Canvas或WebGL Texture
		*@return HTML Image或HTML Canvas或WebGL Texture
		*/
		__getset(0,__proto,'source',function(){
			return this._source;
		});

		/***
		*获取图片宽度
		*@return 图片宽度
		*/
		__getset(0,__proto,'width',function(){
			return this._w;
		});

		/***
		*获取图片高度
		*@return 图片高度
		*/
		__getset(0,__proto,'height',function(){
			return this._h;
		});

		Bitmap.__count=0;
		return Bitmap;
	})(Resource)


	//class laya.particle.ParticleTemplate2D extends laya.particle.ParticleTemplateWebGL
	var ParticleTemplate2D=(function(_super){
		function ParticleTemplate2D(parSetting){
			this.x=0;
			this.y=0;
			this.blendType=1;
			this._startTime=0;
			this.sv=new ParticleShaderValue();
			ParticleTemplate2D.__super.call(this,parSetting);
			this.texture=new Texture();
			this.texture.load(this.settings.textureName);
			this.sv.u_Duration=this.settings.duration;
			this.sv.u_Gravity=this.settings.gravity;
			this.sv.u_EndVelocity=this.settings.endVelocity;
			this.initialize();
			this.loadContent();
		}

		__class(ParticleTemplate2D,'laya.particle.ParticleTemplate2D',_super);
		var __proto=ParticleTemplate2D.prototype;
		Laya.imps(__proto,{"laya.webgl.submit.ISubmit":true})
		__proto.getRenderType=function(){return-111}
		__proto.releaseRender=function(){}
		__proto.addParticleArray=function(position,velocity){
			position[0]+=this.x;
			position[1]+=this.y;
			_super.prototype.addParticleArray.call(this,position,velocity);
		}

		__proto.renderSubmit=function(){
			if (this.texture.loaded){
				this.update(Timer.DELTA);
				this.sv.u_CurrentTime=this._currentTime;
				if (this._firstNewElement !=this._firstFreeElement){
					this.addNewParticlesToVertexBuffer();
				}
				this.blend();
				if (this._firstActiveElement !=this._firstFreeElement){
					var gl=WebGL.mainContext;
					this._vertexBuffer.bind();
					this._indexBuffer.bind();
					this._indexBuffer.upload_bind();
					this._vertexBuffer.upload_bind();
					this.sv.u_texture=this.texture.source;
					this.sv.upload();
					if (this._firstActiveElement < this._firstFreeElement){
						WebGL.mainContext.drawElements(0x0004,(this._firstFreeElement-this._firstActiveElement)*6,0x1403,this._firstActiveElement *6 *2);
					}
					else{
						WebGL.mainContext.drawElements(0x0004,(this.settings.maxPartices-this._firstActiveElement)*6,0x1403,this._firstActiveElement *6 *2);
						if (this._firstFreeElement > 0)
							WebGL.mainContext.drawElements(0x0004,this._firstFreeElement *6,0x1403,0);
					}
					Stat.drawCall++;
				}
				this._drawCounter++;
			}
			return 1;
		}

		__proto.blend=function(){
			if (ParticleTemplate2D.activeBlendType!==this.blendType){
				var gl=WebGL.mainContext;
				gl.enable(0x0BE2);
				BlendMode.fns[this.blendType](gl);
				ParticleTemplate2D.activeBlendType=this.blendType;
			}
		}

		ParticleTemplate2D.activeBlendType=-1;
		return ParticleTemplate2D;
	})(ParticleTemplateWebGL)


	/**
	*...
	*@author laya
	*/
	//class laya.webgl.resource.RenderTarget2D extends laya.resource.Texture
	var RenderTarget2D=(function(_super){
		function RenderTarget2D(width,height,mipMap,surfaceFormat,surfaceType,depthFormat){
			this._type=0;
			this._svWidth=NaN;
			this._svHeight=NaN;
			this._preRenderTarget=null;
			this._alreadyResolved=false;
			this._looked=false;
			this._surfaceFormat=0;
			this._surfaceType=0;
			this._depthFormat=0;
			this._mipMap=false;
			this._destroy=false;
			this._type=1;
			this._w=width;
			this._h=height;
			this._surfaceFormat=surfaceFormat;
			this._surfaceType=surfaceType;
			this._depthFormat=depthFormat;
			this._mipMap=mipMap;
			this._createWebGLRenderTarget();
			this.bitmap.lock=true;
			RenderTarget2D.__super.call(this,this.bitmap,Texture.INV_UV);
		}

		__class(RenderTarget2D,'laya.webgl.resource.RenderTarget2D',_super);
		var __proto=RenderTarget2D.prototype;
		Laya.imps(__proto,{"laya.resource.IDispose":true})
		//TODO:临时......................................................
		__proto.getType=function(){
			return this._type;
		}

		//*/
		__proto.getTexture=function(){
			return this;
		}

		__proto.size=function(w,h){
			if (this._w==w && this._h==h)
				return;
			this._w=w;
			this._h=h;
			this.release();
		}

		__proto.release=function(){
			this.destroy();
		}

		__proto.recycle=function(){
			RenderTarget2D.POOL.push(this);
		}

		__proto.start=function(){
			var gl=WebGL.mainContext;
			this._destroy && this._createWebGLRenderTarget();
			this._preRenderTarget=RenderState2D.curRenderTarget;
			RenderState2D.curRenderTarget=this;
			gl.bindFramebuffer(0x8D40,this.bitmap.frameBuffer);
			this._alreadyResolved=false;
			if (this._type==1){
				gl.viewport(0,0,this._w,this._h);
				this._svWidth=RenderState2D.width;
				this._svHeight=RenderState2D.height;
				RenderState2D.width=this._w;
				RenderState2D.height=this._h;
				Shader.activeShader=null;
			}
			return this;
		}

		__proto.clear=function(r,g,b,a){
			(r===void 0)&& (r=0.0);
			(g===void 0)&& (g=0.0);
			(b===void 0)&& (b=0.0);
			(a===void 0)&& (a=1.0);
			var gl=WebGL.mainContext;
			gl.clearColor(r,g,b,a);
			var clearFlag=0x00004000;
			(this._depthFormat)&& (clearFlag |=0x00000100);
			gl.clear(clearFlag);
		}

		__proto.end=function(){
			var gl=WebGL.mainContext;
			gl.bindFramebuffer(0x8D40,this._preRenderTarget?this._preRenderTarget.bitmap.frameBuffer:null);
			this._alreadyResolved=true;
			RenderState2D.curRenderTarget=this._preRenderTarget;
			if (this._type==1){
				gl.viewport(0,0,this._svWidth,this._svHeight);
				RenderState2D.width=this._svWidth;
				RenderState2D.height=this._svHeight;
				Shader.activeShader=null;
			}
			else gl.viewport(0,0,Laya.stage.width,Laya.stage.height);
		}

		__proto.getData=function(x,y,width,height){
			var gl=WebGL.mainContext;
			gl.bindFramebuffer(0x8D40,(this.bitmap).frameBuffer);
			var canRead=(gl.checkFramebufferStatus(0x8D40)===0x8CD5);
			if (!canRead){
				gl.bindFramebuffer(0x8D40,null);
				return null;
			};
			var pixels=new Uint8Array(this._w *this._h *4);
			gl.readPixels(x,y,width,height,this._surfaceFormat,this._surfaceType,pixels);
			gl.bindFramebuffer(0x8D40,null);
			return pixels;
		}

		/**彻底清理资源,注意会强制解锁清理*/
		__proto.destroy=function(){
			if (!this._destroy){
				this._loaded=false;
				this.bitmap.dispose();
				this.bitmap=null;
				this._destroy=true;
				_super.prototype.destroy.call(this);
			}
		}

		//待测试
		__proto.dispose=function(){}
		__proto._createWebGLRenderTarget=function(){
			this.bitmap=new WebGLRenderTarget(this.width,this.height,this.mipMap,this.surfaceFormat,this.surfaceType,this.depthFormat);
			this.bitmap.activeResource();
			this._alreadyResolved=true;
			this._destroy=false;
			this._loaded=true;
		}

		__getset(0,__proto,'surfaceFormat',function(){
			return this._surfaceFormat;
		});

		__getset(0,__proto,'surfaceType',function(){
			return this._surfaceType;
		});

		__getset(0,__proto,'depthFormat',function(){
			return this._depthFormat;
		});

		__getset(0,__proto,'mipMap',function(){
			return this._mipMap;
		});

		/**返回RenderTarget的Texture*/
		__getset(0,__proto,'source',function(){
			if (this._alreadyResolved)
				return _super.prototype._$get_source.call(this);
			throw new Error("RenderTarget  还未准备好！");
		});

		RenderTarget2D.create=function(w,h,type){
			(type===void 0)&& (type=1);
			var t=RenderTarget2D.POOL.pop();
			t || (t=new RenderTarget2D(w,h,false,0x1908,0x1401,0));
			t._w=w;t._h=h;
			return t;
		}

		RenderTarget2D.TYPE2D=1;
		RenderTarget2D.TYPE3D=2;
		RenderTarget2D.POOL=[];
		return RenderTarget2D;
	})(Texture)


	//class laya.particle.shader.value.ParticleShaderValue extends laya.webgl.shader.d2.value.Value2D
	var ParticleShaderValue=(function(_super){
		function ParticleShaderValue(){
			this.a_CornerTextureCoordinate=[4,0x1406,false,92,0];
			this.a_Position=[3,0x1406,false,92,16];
			this.a_Velocity=[3,0x1406,false,92,28];
			this.a_Color=[4,0x1406,false,92,40];
			this.a_SizeRotation=[3,0x1406,false,92,56];
			this.a_RadiusRadian=[4,0x1406,false,92,68];
			this.a_AgeAddScale=[1,0x1406,false,92,84];
			this.a_Time=[1,0x1406,false,92,88];
			this.u_CurrentTime=NaN;
			this.u_Duration=NaN;
			this.u_Gravity=null;
			this.u_EndVelocity=NaN;
			this.u_texture=null;
			ParticleShaderValue.__super.call(this,0,0);
		}

		__class(ParticleShaderValue,'laya.particle.shader.value.ParticleShaderValue',_super);
		var __proto=ParticleShaderValue.prototype;
		__proto.upload=function(){
			this.refresh();
			ParticleShaderValue.pShader.upload(this);
		}

		__static(ParticleShaderValue,
		['pShader',function(){return this.pShader=new ParticleShader();}
		]);
		return ParticleShaderValue;
	})(Value2D)


	/**
	*...
	*@author laya
	*/
	//class laya.webgl.utils.Buffer extends laya.resource.Resource
	var Buffer=(function(_super){
		function Buffer(glTarget,usage,frome,bufferUsage){
			this._length=0;
			this._upload=true;
			//this._id=0;
			//this._glTarget=null;
			//this._buffer=null;
			//this._glBuffer=null;
			//this._bufferUsage=0;
			//this._floatArray32=null;
			this._uploadSize=0;
			//this._usage=null;
			this._maxsize=0;
			//this._uint16=null;
			(bufferUsage===void 0)&& (bufferUsage=0x88E8);
			Buffer.__super.call(this);
			this.lock=true;
			Buffer._gl=WebGL.mainContext;
			this._$2__id=++Buffer._COUNT;
			this._usage=usage;
			glTarget==0x8893 && (glTarget=0x8893,this._usage="INDEX");
			glTarget==0x8892 && (glTarget=0x8892);
			this._glTarget=glTarget;
			this._bufferUsage=bufferUsage;
			this._buffer=new ArrayBuffer(8);
			frome && this.append(frome);
		}

		__class(Buffer,'laya.webgl.utils.Buffer',_super);
		var __proto=Buffer.prototype;
		__proto.getFloat32Array=function(){
			return this._floatArray32 || (this._floatArray32=new Float32Array(this._buffer));
		}

		__proto.getUint16Array=function(){
			return new Uint16Array(this._buffer);
		}

		__proto.clear=function(){
			this._length=0;
			this._upload=true;
		}

		__proto.append=function(data){
			this._upload=true;
			var szu8=0,n;
			if ((data instanceof Uint8Array)){
				szu8=data.length;
				this._resizeBuffer(this._length+szu8,true);
				n=new Uint8Array(this._buffer,this._length);
				}else if ((data instanceof Float32Array)){
				szu8=data.length *4;
				this._resizeBuffer(this._length+szu8,true);
				n=new Float32Array(this._buffer,this._length);
				}else if ((data instanceof Uint16Array)){
				szu8=data.length *2;
				this._resizeBuffer(this._length+szu8,true);
				n=new Uint16Array(this._buffer,this._length);
			}
			n.set(data,0);
			this._length+=szu8;
			this._floatArray32 && (this._floatArray32=new Float32Array(this._buffer));
		}

		__proto.setdata=function(data){
			this._buffer=data.buffer;
			this._upload=true;
			this._floatArray32 || (this._floatArray32=new Float32Array(this._buffer));
			this._length=this._buffer.byteLength;
		}

		__proto.getBuffer=function(){
			return this._buffer;
		}

		__proto.seLength=function(value){
			if (this._length===value)
				return;
			value <=this._buffer.byteLength || (this._resizeBuffer(value *2+256,true));
			this._length=value;
		}

		__proto._resizeBuffer=function(nsz,copy){
			if (nsz < this._buffer.byteLength)
				return this;
			this.memorySize=this._buffer.byteLength;
			if (copy && this._buffer && this._buffer.byteLength > 0){
				var newbuffer=new ArrayBuffer(nsz);
				var n=new Uint8Array(newbuffer);
				n.set(new Uint8Array(this._buffer),0);
				this._buffer=newbuffer;
			}else
			this._buffer=new ArrayBuffer(nsz);
			this._floatArray32 && (this._floatArray32=new Float32Array(this._buffer));
			this._upload=true;
			return this;
		}

		__proto.setNeedUpload=function(){
			this._upload=true;
		}

		__proto.getNeedUpload=function(){
			return this._upload;
		}

		__proto.bind=function(){
			this.activeResource();
			(Buffer._bindActive[this._glTarget]===this._glBuffer)|| (Buffer._gl.bindBuffer(this._glTarget,Buffer._bindActive[this._glTarget]=this._glBuffer),Shader.activeShader=null);
		}

		__proto.recreateResource=function(){
			this._glBuffer || (this._glBuffer=Buffer._gl.createBuffer());
			this._upload=true;
			this.memorySize=0;
			_super.prototype.recreateResource.call(this);
		}

		__proto.detoryResource=function(){
			if (this._glBuffer){
				var glBuffer=this._glBuffer;
				Laya.timer.frameOnce(1,null,function(){
					WebGL.mainContext.deleteBuffer(glBuffer);
				});
				this._glBuffer=null;
				this._upload=true;
				this._uploadSize=0;
				this.memorySize=0;
			}
		}

		//待调整
		__proto.upload=function(){
			if (!this._upload)
				return false;
			this._upload=false;
			this.bind();
			this._maxsize=Math.max(this._maxsize,this._length);
			if (Stat.loopCount % 30==0){
				if (this._buffer.byteLength > (this._maxsize+64)){
					this.memorySize=this._buffer.byteLength;
					this._buffer=this._buffer.slice(0,this._maxsize+64);
					this._floatArray32 && (this._floatArray32=new Float32Array(this._buffer));
				}
				this._maxsize=this._length;
			}
			if (this._uploadSize < this._buffer.byteLength){
				this._uploadSize=this._buffer.byteLength;
				Buffer._gl.bufferData(this._glTarget,this._uploadSize,this._bufferUsage);
				this.memorySize=this._uploadSize;
			}
			Buffer._gl.bufferSubData(this._glTarget,0,this._buffer);
			Stat.bufferLen+=this._length;
			return true;
		}

		__proto.subUpload=function(offset,dataStart,dataLength){
			(offset===void 0)&& (offset=0);
			(dataStart===void 0)&& (dataStart=0);
			(dataLength===void 0)&& (dataLength=0);
			if (!this._upload)
				return false;
			this._upload=false;
			this.bind();
			this._maxsize=Math.max(this._maxsize,this._length);
			if (Stat.loopCount % 30==0){
				if (this._buffer.byteLength > (this._maxsize+64)){
					this.memorySize=this._buffer.byteLength;
					this._buffer=this._buffer.slice(0,this._maxsize+64);
					this._floatArray32 && (this._floatArray32=new Float32Array(this._buffer));
				}
				this._maxsize=this._length;
			}
			if (this._uploadSize < this._buffer.byteLength){
				this._uploadSize=this._buffer.byteLength;
				Buffer._gl.bufferData(this._glTarget,this._uploadSize,this._bufferUsage);
				this.memorySize=this._uploadSize;
			}
			if (dataStart || dataLength){
				var subBuffer=this._buffer.slice(dataStart,dataLength);
				Buffer._gl.bufferSubData(this._glTarget,offset,subBuffer);
				}else {
				Buffer._gl.bufferSubData(this._glTarget,offset,this._buffer);
			}
			return true;
		}

		__proto.upload_bind=function(){
			(this._upload && this.upload())|| this.bind();
		}

		/**
		*释放CPU中的内存（upload()后确定不再使用时可使用）
		*/
		__proto.disposeCPUData=function(){
			this._buffer=null;
			this._floatArray32=null;
		}

		__proto.dispose=function(){
			this._resourceManager=null;
			_super.prototype.dispose.call(this);
		}

		__getset(0,__proto,'uintArray16',function(){
			this._uint16=new Uint16Array(this._buffer);
			return this._uint16;
		});

		/*调试用*/
		__getset(0,__proto,'bufferLength',function(){
			return this._buffer.byteLength;
		});

		__getset(0,__proto,'length',function(){
			return this._length;
			},function(value){
			if (this._length===value)
				return;
			value <=this._buffer.byteLength || (this._resizeBuffer(value *2+256,true));
			this._length=value;
		});

		__getset(0,__proto,'usage',function(){
			return this._usage;
		});

		Buffer.__int__=function(gl){
			Buffer._gl=gl;
			Buffer.QuadrangleIB=new Buffer(0x8893,"INDEX",null,0x88E4);
			GlUtils.fillIBQuadrangle(Buffer.QuadrangleIB,16);
		}

		Buffer.INDEX="INDEX";
		Buffer.POSITION0="POSITION";
		Buffer.NORMAL0="NORMAL";
		Buffer.COLOR0="COLOR";
		Buffer.UV0="UV";
		Buffer.NEXTUV0="NEXTUV";
		Buffer.UV1="UV1";
		Buffer.NEXTUV1="NEXTUV1";
		Buffer.BLENDWEIGHT0="BLENDWEIGHT";
		Buffer.BLENDINDICES0="BLENDINDICES";
		Buffer.MATRIX0="MATRIX0";
		Buffer.MATRIX1="MATRIX1";
		Buffer.MATRIX2="MATRIX2";
		Buffer.DIFFUSETEXTURE="DIFFUSETEXTURE";
		Buffer.NORMALTEXTURE="NORMALTEXTURE";
		Buffer.SPECULARTEXTURE="SPECULARTEXTURE";
		Buffer.EMISSIVETEXTURE="EMISSIVETEXTURE";
		Buffer.AMBIENTTEXTURE="AMBIENTTEXTURE";
		Buffer.REFLECTTEXTURE="REFLECTTEXTURE";
		Buffer.MATRIXARRAY0="MATRIXARRAY0";
		Buffer.FLOAT0="FLOAT0";
		Buffer.UVAGEX="UVAGEX";
		Buffer.CAMERAPOS="CAMERAPOS";
		Buffer.LUMINANCE="LUMINANCE";
		Buffer.ALPHATESTVALUE="ALPHATESTVALUE";
		Buffer.FOGCOLOR="FOGCOLOR";
		Buffer.FOGSTART="FOGSTART";
		Buffer.FOGRANGE="FOGRANGE";
		Buffer.MATERIALAMBIENT="MATERIALAMBIENT";
		Buffer.MATERIALDIFFUSE="MATERIALDIFFUSE";
		Buffer.MATERIALSPECULAR="MATERIALSPECULAR";
		Buffer.LIGHTDIRECTION="LIGHTDIRECTION";
		Buffer.LIGHTDIRDIFFUSE="LIGHTDIRDIFFUSE";
		Buffer.LIGHTDIRAMBIENT="LIGHTDIRAMBIENT";
		Buffer.LIGHTDIRSPECULAR="LIGHTDIRSPECULAR";
		Buffer.POINTLIGHTPOS="POINTLIGHTPOS";
		Buffer.POINTLIGHTRANGE="POINTLIGHTRANGE";
		Buffer.POINTLIGHTATTENUATION="POINTLIGHTATTENUATION";
		Buffer.POINTLIGHTDIFFUSE="POINTLIGHTDIFFUSE";
		Buffer.POINTLIGHTAMBIENT="POINTLIGHTAMBIENT";
		Buffer.POINTLIGHTSPECULAR="POINTLIGHTSPECULAR";
		Buffer.SPOTLIGHTPOS="SPOTLIGHTPOS";
		Buffer.SPOTLIGHTDIRECTION="SPOTLIGHTDIRECTION";
		Buffer.SPOTLIGHTSPOT="SPOTLIGHTSPOT";
		Buffer.SPOTLIGHTRANGE="SPOTLIGHTRANGE";
		Buffer.SPOTLIGHTATTENUATION="SPOTLIGHTATTENUATION";
		Buffer.SPOTLIGHTDIFFUSE="SPOTLIGHTDIFFUSE";
		Buffer.SPOTLIGHTAMBIENT="SPOTLIGHTAMBIENT";
		Buffer.SPOTLIGHTSPECULAR="SPOTLIGHTSPECULAR";
		Buffer.CORNERTEXTURECOORDINATE="CORNERTEXTURECOORDINATE";
		Buffer.VELOCITY="VELOCITY";
		Buffer.SIZEROTATION="SIZEROTATION";
		Buffer.RADIUSRADIAN="RADIUSRADIAN";
		Buffer.AGEADDSCALE="AGEADDSCALE";
		Buffer.TIME="TIME";
		Buffer.VIEWPORTSCALE="VIEWPORTSCALE";
		Buffer.CURRENTTIME="CURRENTTIME";
		Buffer.DURATION="DURATION";
		Buffer.GRAVITY="GRAVITY";
		Buffer.ENDVELOCITY="ENDVELOCITY";
		Buffer.FLOAT32=4;
		Buffer.SHORT=2;
		Buffer.QuadrangleIB=null
		Buffer._gl=null
		Buffer._bindActive=[];
		Buffer._COUNT=1;
		return Buffer;
	})(Resource)


	//class laya.webgl.shader.d2.value.Color2dSV extends laya.webgl.shader.d2.value.Value2D
	var Color2dSV=(function(_super){
		function Color2dSV(){
			Color2dSV.__super.call(this,0x02,0);
			this.color=[];
		}

		__class(Color2dSV,'laya.webgl.shader.d2.value.Color2dSV',_super);
		var __proto=Color2dSV.prototype;
		__proto.setValue=function(value){
			value.fillStyle&&(this.color=value.fillStyle._color._color);
			value.strokeStyle&&(this.color=value.strokeStyle._color._color);
		}

		return Color2dSV;
	})(Value2D)


	//class laya.webgl.shader.d2.value.TextureSV extends laya.webgl.shader.d2.value.Value2D
	var TextureSV=(function(_super){
		function TextureSV(subID){
			this.u_colorMatrix=null;
			this.texcoord=Value2D._TEXCOORD;
			(subID===void 0)&& (subID=0);
			TextureSV.__super.call(this,0x01,subID);
		}

		__class(TextureSV,'laya.webgl.shader.d2.value.TextureSV',_super);
		var __proto=TextureSV.prototype;
		__proto.setValue=function(vo){
			this.ALPHA=vo.ALPHA;
			vo.filters && this.setFilters(vo.filters);
		}

		__proto.clear=function(){
			this.texture=null;
			this.shader=null;
			this.defines.setValue(0);
		}

		return TextureSV;
	})(Value2D)


	//class laya.webgl.shader.d2.value.PrimitiveSV extends laya.webgl.shader.d2.value.Value2D
	var PrimitiveSV=(function(_super){
		function PrimitiveSV(){
			this.a_color=null;
			PrimitiveSV.__super.call(this,0x04,0);
			this.position=[2,0x1406,false,5 *CONST3D2D.BYTES_PE,0];
			this.a_color=[3,0x1406,false,5 *CONST3D2D.BYTES_PE,2*4];
		}

		__class(PrimitiveSV,'laya.webgl.shader.d2.value.PrimitiveSV',_super);
		return PrimitiveSV;
	})(Value2D)


	/**
	*<code>Component</code> 是ui控件类的基类。
	*
	*
	*<p>生命周期：preinitialize > createChildren > initialize > 组件构造函数</p>
	*/
	//class laya.ui.Component extends laya.display.Sprite
	var Component=(function(_super){
		function Component(){
			this._dataSource=null;
			this._toolTip=null;
			this._tag=null;
			this._disabled=false;
			this._comXml=null;
			Component.__super.call(this);
			this._layout=LayoutStyle.EMPTY;
			this.preinitialize();
			this.createChildren();
			this.initialize();
		}

		__class(Component,'laya.ui.Component',_super);
		var __proto=Component.prototype;
		Laya.imps(__proto,{"laya.ui.IComponent":true})
		/**@inheritDoc */
		__proto.destroy=function(destroyChild){
			(destroyChild===void 0)&& (destroyChild=true);
			_super.prototype.destroy.call(this,destroyChild);
			this._dataSource=this._layout=null;
			this._tag=null;
			this._toolTip=null;
		}

		/**
		*<p>预初始化。</p>
		*@internal 子类可在此函数内设置、修改属性默认值
		*/
		__proto.preinitialize=function(){}
		/**
		*<p>创建并添加控件子节点。</p>
		*@internal 子类可在此函数内创建并添加子节点。
		*/
		__proto.createChildren=function(){}
		/**
		*<p>控件初始化。</p>
		*@internal 在此子对象已被创建，可以对子对象进行修改。
		*/
		__proto.initialize=function(){}
		/**
		*<p>延迟运行指定的函数。</p>
		*<p>在控件被显示在屏幕之前调用，一般用于延迟计算数据。</p>
		*@param method 要执行的函数的名称。例如，functionName。
		*@param args 传递给 <code>method</code> 函数的可选参数列表。
		*
		*@see #runCallLater()
		*/
		__proto.callLater=function(method,args){
			Laya.timer.callLater(this,method,args);
		}

		/**
		*<p>如果有需要延迟调用的函数（通过 <code>callLater</code> 函数设置），则立即执行延迟调用函数。</p>
		*@param method 要执行的函数名称。例如，functionName。
		*@see #callLater()
		*/
		__proto.runCallLater=function(method){
			Laya.timer.runCallLater(this,method);
		}

		/**
		*<p>立即执行影响宽高度量的延迟调用函数。</p>
		*@internal <p>使用 <code>runCallLater</code> 函数，立即执行影响宽高度量的延迟运行函数(使用 <code>callLater</code> 设置延迟执行函数)。</p>
		*@see #callLater()
		*@see #runCallLater()
		*/
		__proto.commitMeasure=function(){}
		/**
		*<p>重新调整对象的大小。</p>
		*/
		__proto.changeSize=function(){
			this.event("resize");
		}

		/**
		*@private
		*<p>获取对象的布局样式。</p>
		*@return
		*/
		__proto.getLayout=function(){
			this._layout===LayoutStyle.EMPTY && (this._layout=new LayoutStyle());
			return this._layout;
		}

		/**
		*对象从显示列表移除的事件侦听处理函数。
		*/
		__proto.onRemoved=function(){
			this.parent.off("resize",this,this.onCompResize);
		}

		/**
		*对象被添加到显示列表的事件侦听处理函数。
		*/
		__proto.onAdded=function(){
			this.parent.on("resize",this,this.onCompResize);
			this.resetLayoutX();
			this.resetLayoutY();
		}

		/**
		*父容器的 <code>Event.RESIZE</code> 事件侦听处理函数。
		*/
		__proto.onCompResize=function(){
			this.resetLayoutX();
			this.resetLayoutY();
		}

		/**
		*<p>重置对象的 <code>X</code> 轴（水平方向）布局。</p>
		*/
		__proto.resetLayoutX=function(){
			var parent=this.parent;
			if (parent){
				var layout=this._layout;
				if (!isNaN(layout.centerX)){
					this.x=(parent.width-this.displayWidth)*0.5+layout.centerX;
					}else if (!isNaN(layout.left)){
					this.x=layout.left;
					if (!isNaN(layout.right)){
						this.width=(parent._width-layout.left-layout.right)/ this.scaleX;
					}
					}else if (!isNaN(layout.right)){
					this.x=parent.width-this.displayWidth-layout.right;
				}
			}
		}

		/**
		*<p>重置对象的 <code>Y</code> 轴（垂直方向）布局。</p>
		*/
		__proto.resetLayoutY=function(){
			var parent=this.parent;
			if (parent){
				var layout=this._layout;
				if (!isNaN(layout.centerY)){
					this.y=(parent.height-this.displayHeight)*0.5+layout.centerY;
					}else if (!isNaN(layout.top)){
					this.y=layout.top;
					if (!isNaN(layout.bottom)){
						this.height=(parent._height-layout.top-layout.bottom)/ this.scaleY;
					}
					}else if (!isNaN(layout.bottom)){
					this.y=parent.height-this.displayHeight-layout.bottom;
				}
			}
		}

		/**
		*对象的 <code>Event.MOUSE_OVER</code> 事件侦听处理函数。
		*/
		__proto.onMouseOver=function(e){
			Laya.stage.event("showtip",this._toolTip);
		}

		/**
		*对象的 <code>Event.MOUSE_OUT</code> 事件侦听处理函数。
		*/
		__proto.onMouseOut=function(e){
			Laya.stage.event("hidetip",this._toolTip);
		}

		/**
		*<p>表示显示对象的宽度，以像素为单位。</p>
		*<p><b>注：</b>当值为0时，宽度为自适应大小。</p>
		*/
		__getset(0,__proto,'width',function(){
			if (this._width)return this._width;
			return this.measureWidth;
			},function(value){
			if (this._width !=value){
				this._width=value;
				this.callLater(this.changeSize);
				if (this._layout.enable && (!isNaN(this._layout.centerX)|| !isNaN(this._layout.right)))this.resetLayoutX();
			}
		});

		/**
		*<p>对象的显示宽度（以像素为单位）。</p>
		*@return
		*@internal #TM
		*/
		__getset(0,__proto,'displayWidth',function(){
			return this.width *this.scaleX;
		});

		/**
		*<p>在父容器中，此对象的水平方向中轴线与父容器的水平方向中心线的距离（以像素为单位）。</p>
		*@return
		*/
		__getset(0,__proto,'centerX',function(){
			return this._layout.centerX;
			},function(value){
			this.getLayout().centerX=value;
			this.layOutEabled=true;
			this.resetLayoutX();
		});

		/**
		*<p>对象的显示高度（以像素为单位）。</p>
		*@return
		*@internal #TM
		*/
		__getset(0,__proto,'displayHeight',function(){
			return this.height *this.scaleY;
		});

		/**
		*<p>显示对象的实际显示区域高度（以像素为单位）。</p>
		*@return
		*/
		__getset(0,__proto,'measureHeight',function(){
			var max=0;
			this.commitMeasure();
			for (var i=this.numChildren-1;i >-1;i--){
				var comp=this.getChildAt(i);
				if (comp.visible){
					max=Math.max(comp.y+comp.height *comp.scaleY,max);
				}
			}
			return max;
		});

		/**
		*<p>显示对象的实际显示区域宽度（以像素为单位）。</p>
		*@return
		*/
		__getset(0,__proto,'measureWidth',function(){
			var max=0;
			this.commitMeasure();
			for (var i=this.numChildren-1;i >-1;i--){
				var comp=this.getChildAt(i);
				if (comp.visible){
					max=Math.max(comp.x+comp.width *comp.scaleX,max);
				}
			}
			return max;
		});

		/**
		*<p>表示显示对象的高度，以像素为单位。</p>
		*<p><b>注：</b>当值为0时，高度为自适应大小。</p>
		*@return
		*/
		__getset(0,__proto,'height',function(){
			if (this._height)return this._height;
			return this.measureHeight;
			},function(value){
			if (this._height !=value){
				this._height=value;
				this.callLater(this.changeSize);
				if (this._layout.enable && (!isNaN(this._layout.centerY)|| !isNaN(this._layout.bottom)))this.resetLayoutY();
			}
		});

		/**@inheritDoc */
		__getset(0,__proto,'scaleX',_super.prototype._$get_scaleX,function(value){
			if (_super.prototype._$get_scaleX.call(this)!=value){
				_super.prototype._$set_scaleX.call(this,value);
				this.callLater(this.changeSize);
				this._layout.enable && this.resetLayoutX();
			}
		});

		/**@inheritDoc */
		__getset(0,__proto,'scaleY',_super.prototype._$get_scaleY,function(value){
			if (_super.prototype._$get_scaleY.call(this)!=value){
				_super.prototype._$set_scaleY.call(this,value);
				this.callLater(this.changeSize);
				this._layout.enable && this.resetLayoutY();
			}
		});

		/**
		*<p>数据赋值，通过对UI赋值来控制UI显示逻辑。</p>
		*<p>简单赋值会更改组件的默认属性，使用大括号可以指定组件的任意属性进行赋值。</p>
		*@example 以下示例中， <code>label1、checkbox1</code> 分别为示例的name属性值。
		<listing version="3.0">
		//默认属性赋值
		dataSource={label1:"改变了label",checkbox1:true};//(更改了label1的text属性值，更改checkbox1的selected属性)。
		//任意属性赋值
		dataSource={label2:{text:"改变了label",size:14},checkbox2:{selected:true,x:10}};
		</listing>
		*@return
		*/
		__getset(0,__proto,'dataSource',function(){
			return this._dataSource;
			},function(value){
			this._dataSource=value;
			for (var prop in this._dataSource){
				if (this.hasOwnProperty(prop)){
					this[prop]=this._dataSource[prop];
				}
			}
		});

		/**
		*
		*@param value
		*/
		/**
		*<p>鼠标悬停提示。</p>
		*<p>可以赋值为文本 <code>String</code> 或函数 <code>Function</code> ，用来实现自定义样式的鼠标提示和参数携带等。</p>
		*@example 以下例子展示了三种鼠标提示：
		<listing version="3.0">
		private var _testTips:TestTipsUI=new TestTipsUI();
		private function testTips():void {
			//简单鼠标提示
			btn2.toolTip="这里是鼠标提示&lt;b&gt;粗体&lt;/b&gt;&lt;br&gt;换行";
			//自定义的鼠标提示
			btn1.toolTip=showTips1;
			//带参数的自定义鼠标提示
			clip.toolTip=new Handler(this,showTips2,["clip"]);
		}

		private function showTips1():void {
			_testTips.label.text="这里是按钮["+btn1.label+"]";
			App.tip.addChild(_testTips);
		}

		private function showTips2(name:String):void {
			_testTips.label.text="这里是"+name;
			App.tip.addChild(_testTips);
		}

		</listing>
		*@return
		*/
		__getset(0,__proto,'toolTip',function(){
			return this._toolTip;
			},function(value){
			if (this._toolTip !=value){
				this._toolTip=value;
				if (value !=null){
					this.on("mouseover",this,this.onMouseOver);
					this.on("mouseout",this,this.onMouseOut);
					}else {
					this.off("mouseover",this,this.onMouseOver);
					this.off("mouseout",this,this.onMouseOut);
				}
			}
		});

		/**
		*<p>从组件顶边到其内容区域顶边之间的垂直距离（以像素为单位）。</p>
		*@return
		*/
		__getset(0,__proto,'top',function(){
			return this._layout.top;
			},function(value){
			this.getLayout().top=value;
			this.layOutEabled=true;
			this.resetLayoutY();
		});

		/**
		*<p>从组件底边到其内容区域底边之间的垂直距离（以像素为单位）。</p>
		*@return
		*/
		__getset(0,__proto,'bottom',function(){
			return this._layout.bottom;
			},function(value){
			this.getLayout().bottom=value;
			this.layOutEabled=true;
			this.resetLayoutY();
		});

		/**
		*<p>从组件左边到其内容区域左边之间的水平距离（以像素为单位）。</p>
		*@return
		*/
		__getset(0,__proto,'left',function(){
			return this._layout.left;
			},function(value){
			this.getLayout().left=value;
			this.layOutEabled=true;
			this.resetLayoutX();
		});

		/**
		*<p>从组件右边到其内容区域右边之间的水平距离（以像素为单位）。</p>
		*@return
		*/
		__getset(0,__proto,'right',function(){
			return this._layout.right;
			},function(value){
			this.getLayout().right=value;
			this.layOutEabled=true;
			this.resetLayoutX();
		});

		/**
		*<p>在父容器中，此对象的垂直方向中轴线与父容器的垂直方向中心线的距离（以像素为单位）。</p>
		*@return
		*/
		__getset(0,__proto,'centerY',function(){
			return this._layout.centerY;
			},function(value){
			this.getLayout().centerY=value;
			this.layOutEabled=true;
			this.resetLayoutY();
		});

		/**
		*<p>对象的标签。</p>
		*@return
		*@internal 冗余字段，可以用来储存数据。
		*/
		__getset(0,__proto,'tag',function(){
			return this._tag;
			},function(value){
			this._tag=value;
		});

		/**
		*<p>指定对象是否可使用布局。</p>
		*<p>如果值为true,则此对象可以使用布局样式，否则不使用布局样式。</p>
		*@param value
		*/
		__getset(0,__proto,'layOutEabled',null,function(value){
			if (this._layout.enable !=value){
				this._layout.enable=value;
				if (!this.hasListener("added")){
					this.on("added",this,this.onAdded);
					this.on("removed",this,this.onRemoved);
				}
			}
		});

		__getset(0,__proto,'comXml',function(){
			return this._comXml;
			},function(value){
			this._comXml=value;
		});

		__getset(0,__proto,'x',_super.prototype._$get_x,function(value){
			_super.prototype._$set_x.call(this,Math.round(value));
		});

		__getset(0,__proto,'y',_super.prototype._$get_y,function(value){
			_super.prototype._$set_y.call(this,Math.round(value));
		});

		/**是否禁用页面(变灰)*/
		__getset(0,__proto,'disabled',function(){
			return this._disabled;
			},function(value){
			if (value!==this._disabled){
				this._disabled=value;
				UIUtils.gray(this,value);
			}
		});

		return Component;
	})(Sprite)


	/**容器线框动画*/
	//class laya.editor.core.BoxEffect extends laya.display.Sprite
	var BoxEffect=(function(_super){
		function BoxEffect(){
			BoxEffect.__super.call(this);
		}

		__class(BoxEffect,'laya.editor.core.BoxEffect',_super);
		var __proto=BoxEffect.prototype;
		/**播放*/
		__proto.play=function(px,py,box,isBack){
			var _$this=this;
			(isBack===void 0)&& (isBack=false);
			var x=box.x;
			var y=box.y;
			var w=box.width;
			var h=box.height;
			var totalTimer=10;
			var currTimer=0;
			Laya.timer.frameLoop(1,null,onEnterFrame);
			function onEnterFrame (e){
				currTimer++;
				console.log("=====================");
				_$this.graphics.clear();
				var t=currTimer / totalTimer;
				if (isBack){
					_$this.graphics.drawRect(x+(px-x)*t,y+(py-y)*t,w *(1-t),h *(1-t),null,"#ff0000");
					}else {
					_$this.graphics.drawRect(px+(x-px)*t,py+(y-py)*t,w *t,h *t,null,"#ff0000");
				}
				if (currTimer >=totalTimer){
					Laya.timer.clear(null,onEnterFrame);
					_$this.remove();
				}
			}
		}

		__proto.remove=function(){
			if (this.parent){
				this.parent.removeChild(this);
			}
		}

		return BoxEffect;
	})(Sprite)


	//class laya.editor.core.DragBox extends laya.display.Sprite
	var DragBox=(function(_super){
		function DragBox(type){
			this._box=null;
			this._target=null;
			this._currDir=null;
			this._type=0;
			this.fixScale=NaN;
			DragBox.__super.call(this);
			this._left=this.drawBlock();
			this._right=this.drawBlock();
			this._top=this.drawBlock();
			this._bottom=this.drawBlock();
			this._topLeft=this.drawBlock();
			this._topRight=this.drawBlock();
			this._bottomLeft=this.drawBlock();
			this._bottomRight=this.drawBlock();
			this._lastPoint=new Point();
			this._type=type=3;
			this.addChild(this._box=this.drawBorder(5000,5000,0xff0000));
			if (type==1 || type==3){
				this.addChild(this._left);
				this.addChild(this._right);
			}
			if (type==2 || type==3){
				this.addChild(this._top);
				this.addChild(this._bottom);
			}
			if (type==3){
				this.addChild(this._topLeft);
				this.addChild(this._topRight);
				this.addChild(this._bottomLeft);
				this.addChild(this._bottomRight);
			}
			this.on("mousedown",this,this.onMouseDown);
			this.mouseThrough=true;
		}

		__class(DragBox,'laya.editor.core.DragBox',_super);
		var __proto=DragBox.prototype;
		__proto.onMouseDown=function(e){
			this._currDir=e.target;
			if(e.nativeEvent.shiftKey){
				this.initFixScale();
			}
			if (this._currDir !=this){
				this._lastPoint.x=Laya.stage.mouseX;
				this._lastPoint.y=Laya.stage.mouseY;
				Laya.stage.on("mousemove",this,this.onMouseMove);
				Laya.stage.on("mouseup",this,this.onMouseUp);
				e.stopPropagation();
			}
		}

		__proto.onMouseUp=function(e){
			Laya.stage.off("mousemove",this,this.onMouseMove);
			Laya.stage.off("mouseup",this,this.onMouseUp);
			var info=(this._target).comXml;
			this.fixScale=-1;
			info.props.x=this._target.x;
			info.props.y=this._target.y;
			info.props.width=this._target.width;
			info.props.height=this._target.height;
			UIPanel.instance.currViewer.design.change(false);
			UIPanel.instance.currViewer.design.changeSelectComp();
		}

		__proto.initFixScale=function(){
			this.fixScale=this._target.height / this._target.width;
		}

		__proto.onMouseMove=function(e){
			var scale=UIPanel.instance.currViewer.scaleView;
			var tx=(Laya.stage.mouseX-this._lastPoint.x)/ scale;
			var ty=(Laya.stage.mouseY-this._lastPoint.y)/ scale;
			var sameScale=false;
			var adptX=NaN;
			var adptY=NaN;
			if(e.nativeEvent.shiftKey){
				if(this.fixScale<0)this.initFixScale();
				adptY=tx *this.fixScale;
				adptX=ty/this.fixScale;
				sameScale=true;
				switch(this._currDir){
					case this._topLeft:
					case this._bottomLeft:
						this._currDir=this._left;
						break ;
					case this._topRight:
					case this._bottomRight:
						this._currDir=this._right;
						break ;
					}
			}
			if (tx !=0 || ty !=0){
				this._lastPoint.x+=tx *scale;
				this._lastPoint.y+=ty *scale;
				var tw=tx / this._target.scaleX;
				var th=ty / this._target.scaleY;
				if (this._currDir==this._left){
					this._target.x+=tx;
					this._target.width-=tw;
					if (sameScale){
						this._target.height=this._target.width*this.fixScale;
					}
					}else if (this._currDir==this._right){
					this._target.width+=tw;
					if (sameScale){
						this._target.height=this._target.width*this.fixScale;
					}
					}else if (this._currDir==this._top){
					this._target.y+=ty;
					this._target.height-=th;
					if (sameScale){
						this._target.width=this._target.height/this.fixScale;
					}
					}else if (this._currDir==this._bottom){
					this._target.height+=th;
					if (sameScale){
						this._target.width=this._target.height/this.fixScale;
					}
					}else if (this._currDir==this._topLeft){
					this._target.x+=tx;
					this._target.y+=ty;
					this._target.width-=tw;
					this._target.height-=th;
					}else if (this._currDir==this._topRight){
					this._target.y+=ty;
					this._target.width+=tw;
					this._target.height-=th;
					}else if (this._currDir==this._bottomLeft){
					this._target.x+=tx;
					this._target.width-=tw;
					this._target.height+=th;
					}else if (this._currDir==this._bottomRight){
					this._target.width+=tw;
					this._target.height+=th;
				}
				if (this._target.width < 1){
					this._target.width=1;
				}
				if (this._target.height < 1){
					this._target.height=1;
				}
				if ((this._target instanceof laya.display.Sprite )){
					var bg=(this._target).getChildByName("bg");
					if (bg){
						bg.width=this._target.width;
						bg.height=this._target.height;
					}
				}
				this._target.width=Math.round(this._target.width);
				this._target.x=Math.round(this._target.x);
				this._target.y=Math.round(this._target.y);
				this._target.height=Math.round(this._target.height);
				this.refresh();
				UIPanel.instance.currViewer.design.refreshStatusInfo();
			}
		}

		/**画矩形*/
		__proto.drawBorder=function(width,height,color,alpha){
			(alpha===void 0)&& (alpha=1);
			var box=new Sprite();
			var g=box.graphics;
			g.clear();
			g.drawRect(0,0,width,height,null,"#"+color);
			return box;
		}

		/**画矩形*/
		__proto.drawBlock=function(){
			var box=new Sprite();
			var g=box.graphics;
			g.clear();
			box.width=DragBox.BLOCK_WIDTH;
			box.height=DragBox.BLOCK_WIDTH;
			g.drawRect(-DragBox.BLOCK_WIDTH *0.5,-DragBox.BLOCK_WIDTH *0.5,DragBox.BLOCK_WIDTH,DragBox.BLOCK_WIDTH,"#ffffff","#ff0000",1);
			box.mouseEnabled=true;
			box.mouseThrough=true;
			return box;
		}

		/**设置对象*/
		__proto.setTarget=function(target){
			this._target=target;
			this.refresh();
		}

		__proto.refresh=function(){
			this.changePoint();
			this.changeSize();
		}

		__proto.changePoint=function(){
			var p=this._target.localToGlobal(new Point());
			var np=(this.parent).globalToLocal(p);
			this.x=np.x;
			this.y=np.y;
		}

		/**设置大小*/
		__proto.changeSize=function(){
			var width=this._target.width *this._target.scaleX;
			var height=this._target.height *this._target.scaleY;
			if (this._box.width !=width || this._box.height !=height){
				this._box.graphics.clear();
				this._box.graphics.drawRect(0,0,Math.abs(width),Math.abs(height),null,"#ff0000");
				this._box.size(width,height);
				this.size(width,height);
				this._box.scaleX=Math.abs(this._box.scaleX)*(this._target.scaleX > 0 ? 1 :-1);
				this._box.scaleY=Math.abs(this._box.scaleY)*(this._target.scaleY > 0 ? 1 :-1);
				this._left.x=0;
				this._left.y=height *0.5;
				this._right.x=width;
				this._right.y=height *0.5;
				this._top.x=width *0.5;
				this._top.y=0;
				this._bottom.x=width *0.5;
				this._bottom.y=height;
				this._topLeft.x=this._topLeft.y=0;
				this._topRight.x=width;
				this._topRight.y=0;
				this._bottomLeft.x=0;
				this._bottomLeft.y=height;
				this._bottomRight.x=width;
				this._bottomRight.y=height;
			}
		}

		DragBox.BLOCK_WIDTH=6;
		return DragBox;
	})(Sprite)


	/**消息管理器
	*@author yung
	*/
	//class laya.editor.manager.MessageManager extends laya.display.Sprite
	var MessageManager=(function(_super){
		function MessageManager(){
			MessageManager.__super.call(this);
			this._vbox=new Box();
			this.addChild(this._vbox);
		}

		__class(MessageManager,'laya.editor.manager.MessageManager',_super);
		var __proto=MessageManager.prototype;
		// mouseEnabled=mouseChildren=false;
		__proto.show=function(msg,color,time){
			(color===void 0)&& (color="00cc00");
			(time===void 0)&& (time=1000);
			var label=new Label();
			label.color="#"+color;
			label.fontSize=14;
			label.text=msg;
			label.y=100;
			this._vbox.addChild(label);
			Tween.to(label,{y:-20},time,Ease.cubicOut);
			Laya.timer.once(time,this,this.clear,[label]);
		}

		__proto.clear=function(label){
			label.removeSelf();
		}

		__getset(1,MessageManager,'instance',function(){
			return MessageManager._instance ? MessageManager._instance :MessageManager._instance=new MessageManager();
		},laya.display.Sprite._$SET_instance);

		MessageManager._instance=null
		return MessageManager;
	})(Sprite)


	/**
	*时间轴帧显示对象
	*@author ww
	*@version 1.0
	*
	*@created 2015-12-5 下午1:33:59
	*/
	//class laya.editor.view.timeline.TimeFrame extends laya.display.Sprite
	var TimeFrame=(function(_super){
		function TimeFrame(){
			this.data=null;
			this._boderColor="#cc00cc";
			this._frame=new Sprite();
			TimeFrame.__super.call(this);
			this._frame.mouseEnabled=true;
			this._frame.width=TimeGrid.frameWidth-0*2;
			this._frame.height=TimeGrid.frameHeight-0*2;
			this._frame.x=0;
			this._frame.y=0;
			this._frame.name="timeFrame";
			this.mouseEnabled=true;
			this.size(1,1);
			this.addChild(this._frame);
			this.on("mouseover",this,this.mouseOver);
			this.on("mouseout",this,this.mouseOut);
		}

		__class(TimeFrame,'laya.editor.view.timeline.TimeFrame',_super);
		var __proto=TimeFrame.prototype;
		__proto.mouseOver=function(e){
			this._boderColor="#ccFFcc";
			this.update();
			DisControlTool.setTop(this);
		}

		__proto.mouseOut=function(e){
			this._boderColor="#cc00cc";
			this.update();
		}

		__proto.update=function(){
			var g;
			g=this._frame.graphics;
			g.clear();
			var color;
			color="#220022";
			switch(this.data.type){
				case 2:
					color="#cccccc";
					break ;
				default :
				}
			g.drawRect(0,0,this._frame.width,this._frame.height,color,this._boderColor,1);
		}

		__proto.setData=function(data){
			this.data=data;
			this.update();
		}

		TimeFrame.Focus_Frame=0;
		TimeFrame.Normal=1;
		TimeFrame.Holder=2;
		TimeFrame.frameBorder=0;
		return TimeFrame;
	})(Sprite)


	//class LayaBuilder extends laya.display.Sprite
	var LayaBuilder=(function(_super){
		function LayaBuilder(){
			this._builderConfig=null;
			this._projectPath=null;
			this._isInitCompleted=false;
			Laya.init(1000,800);
			LayaBuilder.__super.call(this);
			View.regComponent("TreeEx",TreeEx);
			View.regComponent("TextInput",EditorTextInput);
			View.regComponent("Tab",TabEx);
			LayaBuilder.initConfig();
			SkeletonPlayer;
			LayerManager.init();
			Laya.stage.bgColor=null;
			Font.defaultFamily="Arial";
			LayaBuilder.drag=new DragManager();
			LayaBuilder.tip=new TipManager();
			Laya.stage.sizeMode="full";
			this.initBasics();
			this.mouseEnabled=true;
			Slider.label.color="#dddddd";
			LayerManager.stage.addChild(this);
			var pLoads=new PreLoads();
			pLoads.handler=new Handler(this,this.start);
			pLoads.loadRes();
			Notice.listen("IDE_QUIT",this,this.onNativeWindowClosing);
			Browser.window.onbeforeunload=this.beforeClose;
		}

		__class(LayaBuilder,'LayaBuilder',_super);
		var __proto=LayaBuilder.prototype;
		__proto.beforeClose=function(e){
			if(UIPanel.instance.hasChange){
				e.returnValue=false;
				UIPanel.instance.closeAll(LayaBuilder.tryClose);
				}else{
				LayaBuilder.noticeQuite();
			}
		}

		__proto.onStageResize=function(e){
			Render.canvas.width=Browser.clientWidth;
			Render.canvas.height=Browser.clientHeight;
			Laya.timer.once(100,this,this.adpts);
		}

		__proto.adpts=function(){
			this.size(Browser.clientWidth,Browser.clientHeight);
			Render.canvas.width=Browser.clientWidth;
			Render.canvas.height=Browser.clientHeight;
			Laya.timer.once(100,this,this.adptRenderFrame);
		}

		__proto.adptRenderFrame=function(){
			ViewRenderManager.adpt();
			DragBarManager.adpt();
			CodeViewManager.adpt();
		}

		__proto.start=function(){
			this.initApp();
			this.loadConfig();
			this.initBuilder();
			this.onStageResize();
			Laya.stage.on("resize",this,this.onStageResize);
		}

		//uiTestHere();
		__proto.uiTestHere=function(){
			Laya.stage.addChild(DisplayTreePanel.instance);
			DisplayTreePanel.instance.x=300;
			DisplayTreePanel.instance.y=200;
		}

		__proto.initBasics=function(){
			Device.init();
			CMDShell.init();
			FileTools.init();
			console.log("location:",Browser.window.location);
			console.log("appPath:",FileTools.appPath);
			SystemSetting.appPath=FileTools.appPath;
			SystemSetting.tempPath=FileManager.getAppPath("data");
		}

		__proto.initApp=function(){
			ViewRenderManager.init();
			SceneManager.init();
			ContextMenu.init();
			NoticeRouter.init();
			DragBarManager.init();
			DialogTools.init();
			IPCTools.init();
			IPCTools.send("hello",{o:"oo"});
			SystemDragOverManager.init();
			TemplateManager.init();
			CodeManager.init();
			LayoutRecManager.init();
			Notice.notify("SHOW_DISPLAY_TREE",[Laya.stage]);
			CursorManager.init();
			DisResizer.init();
			Laya.timer.once(200,this,this.openFirstPage);
		}

		__proto.openFirstPage=function(){
			Notice.notify("openPAGE",[new NewsPage(),"欢迎页"]);
		}

		__proto.onNativeWindowClosing=function(e){
			SysLog.log("save Builder info projectPath:"+SystemSetting.projectPath);
			this._builderConfig.lang=SystemSetting.lang;
			this._builderConfig.lastProject=SystemSetting.projectPath;
			this._builderConfig.ifShowRuleGrid=SystemSetting.ifShowRuleGrid;
			if(!SystemSetting.projectPath){
				debugger;
			}
			this._builderConfig.lastProjects=[];
			for (var i=0;i < ProjectManager.projectOpened.length && i<5;i++){
				this._builderConfig.lastProjects.push(ProjectManager.projectOpened[i]);
			}
			FileManager.createTxtFile(FileManager.getAppPath("builder.xml"),ObjectTools.getJsonString(this._builderConfig));
			LayoutRecManager.saveLayoutInfo();
		}

		/**全局错误捕捉 */
		__proto.onUncaughtError=function(e){}
		/**处理项目文件被打开*/
		__proto.onInvoke=function(e){
			if (e.arguments.length > 0){
				if (e.arguments.length > 1 && e.arguments[0]=="publish"){
					this._projectPath=e.arguments[1];
					}else {
					var file=new File(e.arguments[0]);
					if (file.extension.toLowerCase()=="laya"){
						this._projectPath=file.nativePath;
					}
				}
				if (this._isInitCompleted){
					ProjectManager.loadProject(this._projectPath);
				}
			}
		}

		__proto.loadConfig=function(){
			var str=FileManager.readTxtFile(FileManager.getAppPath("builder.xml"));
			if (str)this._builderConfig=JSON.parse(str);
			else this._builderConfig={layaout:'',projects:[]};
			this._projectPath=this._builderConfig.lastProject;
			SystemSetting.ifShowRuleGrid=this._builderConfig.ifShowRuleGrid;
			SysLog.log("loadConfig configStr:"+str);
			this.getSysArg();
		}

		__proto.getSysArg=function(){
			IPCTools.setWindow();
			var path;
			path=Browser.window.openPath;
		}

		__proto.initBuilder=function(){
			var iconPath=FileManager.getAppPath("laya/icons/components");
			if (FileTools.exist(iconPath)){
				var arr=FileTools.getDirFiles(iconPath);;
				for (var i=0,n=arr.length;i < n;i++){
					var f=arr[i];
					if (FileTools.getExtensionName(f)=="png"){}
						}
			}
			this.loadComplete();
		}

		__proto.loadComplete=function(loader){
			MessageManager.instance.x=240;
			MessageManager.instance.y=140;
			LayerManager.stage.addChild(MessageManager.instance);
			ShortcutManager.init();
			this.regSystemShortcuts();
			this._isInitCompleted=true;
			ProjectManager.loadProject(this._projectPath,new Handler(this,this.closeLoginPanel));
			ProjectManager.setProjectOpened(this._builderConfig.lastProjects);
		}

		__proto.closeLoginPanel=function(){
			this.visible=true;
		}

		//stage.nativeWindow.alwaysInFront=false;
		__proto.regSystemShortcuts=function(){
			ShortcutManager.addKeyE(78,true,false,"OPEN_ADDPage",null,null,"",AddDocument.instance);
			ShortcutManager.addKey(80,true,false,SetPage.instance.start,null,null,"",SetPage.instance);
			ShortcutManager.addKeyE(68,true,false,"open_adddir",null,null,"",AddDirectory.instance);
			ShortcutManager.addKey(87,true,false,UIPanel.instance.closeCurrPage,null,null,"",UIPanel.instance);
			ShortcutManager.addKey(83,true,false,UIPanel.instance.save,null,null,"",UIPanel.instance);
			ShortcutManager.addKey(83,true,true,UIPanel.instance.saveAll,null,null,"",UIPanel.instance);
			ShortcutManager.addKey(70,true,false,FindAndReplace.instance.start,null,null,"",FindAndReplace.instance);
			ShortcutManager.addKey(79,true,false,ProjectManager.openProject);
			ShortcutManager.addKey(74,true,false,AddProject.instance.start,null,null,"",AddProject.instance);
			ShortcutManager.addKey(67,true,false,UIPanel.instance.copy,null,Design,null,UIPanel.instance);
			ShortcutManager.addKey(86,true,false,UIPanel.instance.pasteComp,[false],Design,null,UIPanel.instance);
			ShortcutManager.addKey(86,true,true,UIPanel.instance.pasteComp,[true],Design,null,UIPanel.instance);
			ShortcutManager.addKey(88,true,false,UIPanel.instance.cut,null,Design,null,UIPanel.instance);
			ShortcutManager.addKey(66,true,false,BoxComp.instance.start,null,Design,"",BoxComp.instance);
			ShortcutManager.addKey(85,true,false,UIPanel.instance.unBoxComp,null,Design,null,UIPanel.instance);
			ShortcutManager.addKey(82,true,false,RepeatComp.instance.start,null,Design,"",RepeatComp.instance);
			ShortcutManager.addKey(65,true,false,UIPanel.instance.selectAll,null,Design,null,UIPanel.instance);
			ShortcutManager.addKey(46,false,false,UIPanel.instance.deleteSelect,null,Design,null,UIPanel.instance);
			ShortcutManager.addKey(90,true,false,UIPanel.instance.goBack,null,Design,"",UIPanel.instance);
			ShortcutManager.addKey(89,true,false,UIPanel.instance.goForward,null,Design,"",UIPanel.instance);
			ShortcutManager.addKey(187,true,false,UIPanel.instance.setScale,[0.1],UIPanel,null,UIPanel.instance);
			ShortcutManager.addKey(189,true,false,UIPanel.instance.setScale,[-0.1],UIPanel,null,UIPanel.instance);
			ShortcutManager.addKey(220,true,false,UIPanel.instance.resizeScale,[1],UIPanel,null,UIPanel.instance);
			ShortcutManager.addKey(13,true,false,UIPanel.instance.preview);
			ShortcutManager.addKeyE(117,false,false,"FRESH_Page");
			ShortcutManager.addKeyE(118,false,false,"FRESH_RES");
			ShortcutManager.addKey(116,false,false,this.refreshResAndPage,null,null,null,this);
			ShortcutManager.addKey(119,false,false,UIPanel.instance.toggleBg,null,null,"",UIPanel.instance);
			ShortcutManager.addKey(82,true,true,UIPanel.instance.switchRuleGrid,null,null,"",UIPanel.instance);
			ShortcutManager.addKey(120,false,false,SetProject.instance.start,null,null,"",SetProject.instance);
			ShortcutManager.addKey(114,false,false,LayoutRecManager.createDefault,null,null,"",LayoutRecManager);
			ShortcutManager.addKey(115,false,false,FindUnUsedRes.instance.start,null,null,"",FindUnUsedRes.instance);
			ShortcutManager.addKey(122,false,false,ExportManager.release,null,null,"",ExportManager);
			ShortcutManager.addKey(123,false,false,ExportManager.export,null,null,"",ExportManager);
			ShortcutManager.addKey(123,true,false,ExportManager.forceExport,null,null,"",ExportManager);
		}

		__proto.refreshResAndPage=function(){
			Notice.notify("FRESH_RES");
			Notice.notify("FRESH_Page");
		}

		__proto.showLoginPanel=function(){}
		LayaBuilder.initConfig=function(){
			UIConfig.touchScrollEnable=false;
			UIConfig.showButtons=false;
			Styles.labelColor="#efefef";
			Styles.buttonLabelColors=["#dddddd","#ffffff","#efefef"];
			Styles.comboBoxItemColors=["#0c6fa6","#e0e7ef","#d2d2d2","#484647","#484647"];
		}

		LayaBuilder.tryClose=function(){
			Device.winFun("close");
		}

		LayaBuilder.noticeQuite=function(){
			Notice.notify("IDE_QUIT");
		}

		LayaBuilder.drag=null
		LayaBuilder.tip=null
		return LayaBuilder;
	})(Sprite)


	/**
	*<p> <code>Animation</code> 类是位图动画,用于创建位图动画。</p>
	*<p> <code>Animation</code> 类可以加载并显示一组位图图片，并组成动画进行播放。</p>
	*
	*@example 以下示例代码，创建了一个 <code>Text</code> 实例。
	*<p>[EXAMPLE-AS-BEGIN]</p>
	*<listing version="3.0">
	*package
	*{
		*import laya.display.Animation;
		*import laya.net.Loader;
		*import laya.utils.Handler;
		*
		*public class Animation_Example
		*{
			*public function Animation_Example()
			*{
				*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
				*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
				*init();//初始化
				*}
			*
			*private function init():void
			*{
				*var animation:Animation=new Animation();//创建一个 Animation 类的实例对象 animation 。
				*animation.loadAtlas("resource/ani/fighter.json");//加载图集并播放
				*animation.x=200;//设置 animation 对象的属性 x 的值，用于控制 animation 对象的显示位置。
				*animation.y=200;//设置 animation 对象的属性 x 的值，用于控制 animation 对象的显示位置。
				*animation.interval=30;//设置 animation 对象的动画播放间隔时间，单位：毫秒。
				*animation.play();//播放动画。
				*Laya.stage.addChild(animation);//将 animation 对象添加到显示列表。
				*}
			*}
		*}
	*</listing>
	*<listing version="3.0">
	*Animation_Example();
	*function Animation_Example(){
		*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
		*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
		*init();//初始化
		*}
	*function init()
	*{
		*var animation=new Animation();//创建一个 Animation 类的实例对象 animation 。
		*animation.loadAtlas("resource/ani/fighter.json");//加载图集并播放
		*animation.x=200;//设置 animation 对象的属性 x 的值，用于控制 animation 对象的显示位置。
		*animation.y=200;//设置 animation 对象的属性 x 的值，用于控制 animation 对象的显示位置。
		*animation.interval=30;//设置 animation 对象的动画播放间隔时间，单位：毫秒。
		*animation.play();//播放动画。
		*Laya.stage.addChild(animation);//将 animation 对象添加到显示列表。
		*}
	*</listing>
	*<listing version="3.0">
	*import Loader=laya.net.Loader;
	*import Handler=laya.utils.Handler;
	*class Animation_Example {
		*constructor(){
			*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*Laya.loader.load("resource/ani/fighter.json",Handler.create(this,this.onLoadComplete),null,Loader.ATLAS);
			*}
		*
		*private init():void {
			*var animation:Animation=new Animation();//创建一个 Animation 类的实例对象 animation 。
			*animation.loadAtlas("resource/ani/fighter.json");//加载图集并播放
			*animation.x=200;//设置 animation 对象的属性 x 的值，用于控制 animation 对象的显示位置。
			*animation.y=200;//设置 animation 对象的属性 x 的值，用于控制 animation 对象的显示位置。
			*animation.interval=30;//设置 animation 对象的动画播放间隔时间，单位：毫秒。
			*animation.play();//播放动画。
			*Laya.stage.addChild(animation);//将 animation 对象添加到显示列表。
			*}
		*}
	*</listing>
	*/
	//class laya.display.Animation extends laya.display.Sprite
	var Animation=(function(_super){
		function Animation(){
			this.loop=false;
			this._frames=null;
			this._index=0;
			this._count=0;
			this._isPlaying=false;
			Animation.__super.call(this);
			this.interval=Config.animationInterval;
			this.on("display",this,this._$3__onDisplay);
			this.on("undisplay",this,this._$3__onDisplay);
		}

		__class(Animation,'laya.display.Animation',_super);
		var __proto=Animation.prototype;
		/**@inheritDoc */
		__proto.destroy=function(destroyChild){
			(destroyChild===void 0)&& (destroyChild=true);
			this.stop();
			_super.prototype.destroy.call(this,destroyChild);
			this._frames=null;
		}

		__proto._$3__onDisplay=function(){
			if (this._isPlaying){
				if (this._displayInStage)this.play(this._index,this.loop);
				else this.clearTimer(this,this._frameLoop);
			}
		}

		/**
		*播放动画。
		*/
		__proto.play=function(start,loop){
			(start===void 0)&& (start=0);
			(loop===void 0)&& (loop=true);
			this._isPlaying=true;
			this._index=start;
			this.loop=loop;
			if (this._frames && this._frames.length > 0 && this.interval > 0){
				this.timerLoop(this.interval,this,this._frameLoop,null,true);
			}
		}

		__proto._frameLoop=function(){
			if (this._style.visible){
				this.index=this._index,this._index++;
				if (this._index >=this._count){
					if (this.loop)this._index=0;
					else {
						this._index--;
						this.stop();
					}
					this.event("complete");
				}
			}
		}

		/**
		*停止播放。
		*/
		__proto.stop=function(){
			this._isPlaying=false;
			this.clearTimer(this,this._frameLoop);
		}

		/**
		*加载图片集合，组成动画。
		*@param urls 图片地址集合
		*@return 返回动画本身
		*/
		__proto.loadImages=function(urls){
			var arr=[];
			for (var i=0,n=urls.length;i < n;i++){
				var g=new Graphics();
				g.loadImage(urls[i],0,0);
				arr.push(g);
			}
			this.frames=arr;
			return this;
		}

		/**清理，方便对象复用*/
		__proto.clear=function(){
			this.stop();
			this.graphics=null;
			this._frames=null;
		}

		/**
		*加载并播放一个图集
		*@param url 图集地址
		*@return 返回动画本身
		*/
		__proto.loadAtlas=function(url){
			var _$this=this;
			if (Loader.getAtlas(url))onLoaded();
			else Laya.loader.load(url,Handler.create(null,onLoaded),null,"atlas");
			function onLoaded (){
				var atlas=Loader.getAtlas(url);
				if (atlas && atlas.length){
					var arr=[];
					for (var i=0,n=atlas.length;i < n;i++){
						var g=new Graphics();
						g.drawTexture(atlas[i],0,0);
						arr.push(g);
					}
					_$this.frames=arr;
				}
			}
			return this;
		}

		/**当前播放索引。*/
		__getset(0,__proto,'index',function(){
			return this._index;
			},function(value){
			this._index=value;
			this.graphics=this._frames[value];
		});

		/**动画长度。*/
		__getset(0,__proto,'count',function(){
			return this._count;
		});

		/**Graphics集合*/
		__getset(0,__proto,'frames',function(){
			return this._frames;
			},function(value){
			this._frames=value;
			this._count=value.length;
			this._renderType |=0x100;
			this._renderType &=~0x01;
			this._isPlaying && this.play(this._index,this.loop);
		});

		Animation.fromUrl=function(url,count){
			var result=Animation._urlReg.exec(url);
			var base=result[1];
			var serialNum=result[2];
			var extension=result[3];
			var serialNumBegin=Laya.__parseInt(serialNum);
			var serialNumLength=serialNum.length;
			var urls=[];
			for (var i=0;i < count;i++){
				var countNow=serialNumBegin+i;
				var countString=Utils1.preFixNumber(countNow,serialNumLength);
				urls.push(base+countString+extension);
			}
			return new Animation().loadImages(urls);
		}

		__static(Animation,
		['_urlReg',function(){return this._urlReg=/^(.*?)\{(.*?)\}(.*)$/;}
		]);
		return Animation;
	})(Sprite)


	/**
	*<p> <code>Text</code> 类用于创建显示对象以显示文本。</p>
	*@example 以下示例代码，创建了一个 <code>Text</code> 实例。
	*<p>[EXAMPLE-AS-BEGIN]</p>
	*<listing version="3.0">
	*package
	*{
		*import laya.display.Text;
		*
		*public class Text_Example
		*{
			*public function Text_Example()
			*{
				*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
				*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
				*onInit();
				*}
			*
			*private function onInit():void
			*{
				*var text:Text=new Text();//创建一个 Text 类的实例对象 text 。
				*text.text="这个是一个 Text 文本示例。";
				*text.color="#008fff";//设置 text 的文本颜色。
				*text.font="Arial";//设置 text 的文本字体。
				*text.bold=true;//设置 text 的文本显示为粗体。
				*text.fontSize=30;//设置 text 的字体大小。
				*text.wordWrap=true;//设置 text 的文本自动换行。
				*text.x=100;//设置 text 对象的属性 x 的值，用于控制 text 对象的显示位置。
				*text.y=100;//设置 text 对象的属性 y 的值，用于控制 text 对象的显示位置。
				*text.width=300;//设置 text 的宽度。
				*text.height=200;//设置 text 的高度。
				*text.italic=true;//设置 text 的文本显示为斜体。
				*text.borderColor="#fff000";//设置 text 的文本边框颜色。
				*Laya.stage.addChild(text);//将 text 添加到显示列表。
				*}
			*}
		*}
	*</listing>
	*<p>[EXAMPLE-AS-END]</p>
	*<listing version="3.0">
	*Text_Example();
	*function Text_Example()
	*{
		*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
		*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
		*onInit();
		*}
	*function onInit()
	*{
		*var text=new laya.display.Text();//创建一个 Text 类的实例对象 text 。
		*text.text="这个是一个 Text 文本示例。";
		*text.color="#008fff";//设置 text 的文本颜色。
		*text.font="Arial";//设置 text 的文本字体。
		*text.bold=true;//设置 text 的文本显示为粗体。
		*text.fontSize=30;//设置 text 的字体大小。
		*text.wordWrap=true;//设置 text 的文本自动换行。
		*text.x=100;//设置 text 对象的属性 x 的值，用于控制 text 对象的显示位置。
		*text.y=100;//设置 text 对象的属性 y 的值，用于控制 text 对象的显示位置。
		*text.width=300;//设置 text 的宽度。
		*text.height=200;//设置 text 的高度。
		*text.italic=true;//设置 text 的文本显示为斜体。
		*text.borderColor="#fff000";//设置 text 的文本边框颜色。
		*Laya.stage.addChild(text);//将 text 添加到显示列表。
		*}
	*</listing>
	*<listing version="3.0">
	*class Text_Example {
		*constructor(){
			*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*this.onInit();
			*}
		*private onInit():void {
			*var text:laya.display.Text=new laya.display.Text();//创建一个 Text 类的实例对象 text 。
			*text.text="这个是一个 Text 文本示例。";
			*text.color="#008fff";//设置 text 的文本颜色。
			*text.font="Arial";//设置 text 的文本字体。
			*text.bold=true;//设置 text 的文本显示为粗体。
			*text.fontSize=30;//设置 text 的字体大小。
			*text.wordWrap=true;//设置 text 的文本自动换行。
			*text.x=100;//设置 text 对象的属性 x 的值，用于控制 text 对象的显示位置。
			*text.y=100;//设置 text 对象的属性 y 的值，用于控制 text 对象的显示位置。
			*text.width=300;//设置 text 的宽度。
			*text.height=200;//设置 text 的高度。
			*text.italic=true;//设置 text 的文本显示为斜体。
			*text.borderColor="#fff000";//设置 text 的文本边框颜色。
			*Laya.stage.addChild(text);//将 text 添加到显示列表。
			*}
		*}
	*</listing>
	*@author yung
	*/
	//class laya.display.Text extends laya.display.Sprite
	var Text=(function(_super){
		function Text(){
			this._text=null;
			this._isChanged=false;
			this._textWidth=0;
			this._textHeight=0;
			this._lines=[];
			this._startX=NaN;
			this._startY=NaN;
			this._lastVisibleLineIndex=-1;
			this._clipPoint=null;
			this._currBitmapFont=null;
			Text.__super.call(this);
			this._style=new CSSStyle(this);
			(this._style).wordWrap=false;
		}

		__class(Text,'laya.display.Text',_super);
		var __proto=Text.prototype;
		/**@inheritDoc */
		__proto.destroy=function(destroyChild){
			(destroyChild===void 0)&& (destroyChild=true);
			_super.prototype.destroy.call(this,destroyChild);
			this._lines=null;
		}

		/**
		*@private
		*@inheritDoc
		*
		*/
		__proto._getBoundPointsM=function(ifRotate){
			(ifRotate===void 0)&& (ifRotate=false);
			var rec=Rectangle.TEMP;
			rec.setTo(0,0,this.width,this.height);
			return rec._getBoundPoints();
		}

		/**@inheritDoc */
		__proto.getGraphicBounds=function(){
			var rec=Rectangle.TEMP;
			rec.setTo(0,0,this.width,this.height);
			return rec;
		}

		/**
		*@private
		*@inheritDoc
		**/
		__proto._getCSSStyle=function(){
			return this._style;
		}

		/**
		*设置语言包
		*@param text 文本，可以增加参数，比如"abc{0}efg{1}ijk,123{2}"
		*@param ...args 文本参数，比如"d","h",4
		*/
		__proto.lang=function(text,arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10){
			if (arguments.length < 2){
				this._text=Text.langPacks ? Text.langPacks[text] :text;
				}else {
				for (var i=0,n=arguments.length;i < n;i++){
					text=text.replace("{"+i+"}",arguments[i+1]);
				}
				this._text=text;
			}
		}

		/**
		*渲染文字
		*@param begin 从begin行开始
		*@param visibleLineCount 渲染visibleLineCount行
		*/
		__proto.renderTextAndBg=function(begin,visibleLineCount){
			var graphics=this.graphics;
			graphics.clear();
			var ctxFont=(this.italic ? "italic " :"")+(this.bold ? "bold " :"")+this.fontSize+"px "+this.font;
			Browser.ctx.font=ctxFont;
			var padding=this.padding;
			var startX=padding[3];
			var textAlgin="left";
			var lines=this._lines;
			var lineHeight=this.leading+this.fontSize;
			var tCurrBitmapFont=this._currBitmapFont;
			if (tCurrBitmapFont){
				lineHeight=this.leading+tCurrBitmapFont.getMaxHeight();
			};
			var startY=padding[0];
			if ((!tCurrBitmapFont)&& this._width > 0 && this._textWidth <=this._width){
				if (this.align=="right"){
					textAlgin="right";
					startX=this._width-padding[1];
					}else if (this.align=="center"){
					textAlgin="center";
					startX=this._width *0.5+padding[3]-padding[1];
				}
			}
			if (this._height > 0){
				var tempVAlign=(this._textHeight > this._height)? "top" :this.valign;
				if (tempVAlign==="middle")startY=(this._height-visibleLineCount *lineHeight)*0.5+padding[0]-padding[2];
				else if (tempVAlign==="bottom")startY=this._height-visibleLineCount *lineHeight-padding[2];
			};
			var style=this._style;
			if (tCurrBitmapFont && tCurrBitmapFont.autoScaleSize){
				var bitmapScale=tCurrBitmapFont.fontSize / this.fontSize;
			}
			if (this._clipPoint){
				graphics.save();
				if (tCurrBitmapFont && tCurrBitmapFont.autoScaleSize){
					var tClipWidth=0;
					var tClipHeight=0;
					this._width ? tClipWidth=(this._width-padding[3]-padding[1]):tClipWidth=this._textWidth;
					this._height ? tClipHeight=(this._height-padding[0]-padding[2]):tClipHeight=this._textHeight;
					tClipWidth *=bitmapScale;
					tClipHeight *=bitmapScale;
					graphics.clipRect(padding[3],padding[0],tClipWidth,tClipHeight);
					}else {
					graphics.clipRect(padding[3],padding[0],this._width ? (this._width-padding[3]-padding[1]):this._textWidth,this._height ? (this._height-padding[0]-padding[2]):this._textHeight);
				}
			};
			var x=0,y=0;
			var end=Math.min(this._lines.length,visibleLineCount+begin)|| 1;
			for (var i=begin;i < end;i++){
				var word=lines[i];
				if (style.password){
					var len=word.length;
					word="";
					for (var j=len;j > 0;j--){
						word+="·";
					}
				}
				x=startX-(this._clipPoint ? this._clipPoint.x :0);
				y=startY+lineHeight *i-(this._clipPoint ? this._clipPoint.y :0);
				if (tCurrBitmapFont){
					var tWidth=this.width;
					if (tCurrBitmapFont.autoScaleSize){
						tWidth=this.width *bitmapScale;;
					}
					tCurrBitmapFont.drawText(word,this,x,y,this.align,tWidth);
					}else {
					style.stroke ? graphics.fillBorderText(word,x,y,ctxFont,this.color,style.strokeColor,style.stroke,textAlgin):graphics.fillText(word,x,y,ctxFont,this.color,textAlgin);
				}
			}
			if (tCurrBitmapFont && tCurrBitmapFont.autoScaleSize){
				var tScale=1/bitmapScale;
				this.scale(tScale,tScale);
			}
			if (this._clipPoint)
				graphics.restore();
			this._startX=startX;
			this._startY=startY;
		}

		/**
		*<p>排版文本。</p>
		*<p>进行宽高计算，渲染、重绘文本。</p>
		*/
		__proto.typeset=function(){
			this._isChanged=false;
			if (!this._text){
				this._clipPoint=null;
				this._textWidth=this._textHeight=0;
				this.graphics.clear();
				return;
			}
			Browser.ctx.font=this._getCSSStyle().font;
			this._lines=this.parseWordWrap(this._text);
			this._textWidth=0;
			for (var n=0,len=this._lines.length;n < len;++n){
				var word=this._lines[n];
				if (this._currBitmapFont){
					this._textWidth=Math.max(this._currBitmapFont.getTextWidth(word)+this.padding[3]+this.padding[1],this._textWidth);
					}else {
					this._textWidth=Math.max(Browser.ctx.measureText(word).width+this.padding[3]+this.padding[1],this._textWidth);
				}
			}
			if (this._currBitmapFont){
				this._textHeight=this._lines.length *(this._currBitmapFont.getMaxHeight()+this.leading)+this.padding[0]+this.padding[2];
			}else this._textHeight=this._lines.length *(this.fontSize+this.leading)+this.padding[0]+this.padding[2];
			if (this.checkEnabledViewportOrNot())this._clipPoint || (this._clipPoint=new Point(0,0));
			else this._clipPoint=null;
			this.renderTextAndBg(0,Math.min(this._lines.length,Math.ceil((this.height-this.padding[0]-this.padding[2])/ (this.leading+this.fontSize))));
			this.repaint();
		}

		__proto.checkEnabledViewportOrNot=function(){
			return (this._width > 0 && this._textWidth > this._width)|| (this._height > 0 && this._textHeight > this._height);
		}

		/**
		*快速更改显示文本。不进行排版计算，效率较高。
		*
		*<p>如果只更改文字内容，不更改文字样式，建议使用此接口，能提高效率。</p>
		*@param text 文本内容。
		*
		*/
		__proto.changeText=function(text){
			if (this._text!==text){
				this.lang(text);
				if (this._graphics && this._graphics.replaceText(text)){
					}else {
					this.typeset();
				}
			}
		}

		/**
		*@private
		*分析文本换行。
		*/
		__proto.parseWordWrap=function(text){
			var lines=text.split(/\r|\n|\\n/);
			for (var i=0,n=lines.length;i < n-1;i++)
			lines[i]+="\n";
			var width=this._width;
			if (this._currBitmapFont && this._currBitmapFont.autoScaleSize){
				width=this._width *(this._currBitmapFont.fontSize / this.fontSize);
			};
			var ctx=Browser.ctx;
			var wordWrap=this.wordWrap;
			if (wordWrap && width <=0)width=100;
			if (width <=0 || !wordWrap)
				return lines;
			this._lines.length=0;
			var padding=this.padding;
			var result=this._lines;
			var wordWrapWidth=width-padding[3]-padding[1];
			var maybeIndex=0;
			var execResult;
			var tCurrBitmapFont=this._currBitmapFont;
			var tWidth=0;
			for (i=0,n=lines.length;i < n;i++){
				var word=lines[i];
				var wordWidth=0;
				var startIndex=0;
				tCurrBitmapFont ? tWidth=tCurrBitmapFont.getTextWidth(word):tWidth=ctx.measureText(word).width;
				if (tWidth <=wordWrapWidth){
					result.push(word);
					continue ;
				}
				tCurrBitmapFont ? tWidth=tCurrBitmapFont.getMaxWidth():tWidth=ctx.measureText("阳").width;
				maybeIndex || (maybeIndex=Math.floor(wordWrapWidth / tWidth));
				(maybeIndex==0)&& (maybeIndex=1);
				tCurrBitmapFont ? tWidth=this._currBitmapFont.getTextWidth(word.substring(0,maybeIndex)):tWidth=ctx.measureText(word.substring(0,maybeIndex)).width;
				wordWidth=tWidth;
				for (var j=maybeIndex,m=word.length;j < m;j++){
					tCurrBitmapFont ? tWidth=this._currBitmapFont.getCharWidth(word.charAt(j)):tWidth=ctx.measureText(word.charAt(j)).width;
					wordWidth+=tWidth;
					if (wordWidth > wordWrapWidth){
						var lineString=word.substring(startIndex,j);
						execResult=/\b\w+$/.exec(lineString);
						if (execResult){
							j=execResult.index+startIndex;
							if (execResult.index==0)j+=lineString.length;
							else lineString=word.substring(startIndex,j);
						}
						result.push(lineString);
						startIndex=j;
						if (j+maybeIndex < m){
							j+=maybeIndex;
							tCurrBitmapFont ? tWidth=this._currBitmapFont.getTextWidth(word.substring(startIndex,j)):tWidth=ctx.measureText(word.substring(startIndex,j)).width;
							wordWidth=tWidth;
							j--;
							}else {
							result.push(word.substring(startIndex,m));
							startIndex=-1;
							break ;
						}
					}
				}
				if (startIndex !=-1)result.push(word.substring(startIndex,m));
			}
			return result;
		}

		/**
		*返回字符的位置信息。
		*@param charIndex 索引位置
		*@param out 输出的Point引用
		*@return 返回Point位置信息
		*/
		__proto.getCharPoint=function(charIndex,out){
			this._isChanged && Laya.timer.runCallLater(this,this.typeset);
			var len=0,lines=this._lines,startIndex=0;
			for (var i=0,n=lines.length;i < n;i++){
				len+=lines[i].length;
				if (charIndex < len){
					var line=i;
					break ;
				}
				startIndex=len;
			};
			var ctxFont=(this.italic ? "italic " :"")+(this.bold ? "bold " :"")+this.fontSize+"px "+this.font;
			Browser.ctx.font=ctxFont;
			var width=Browser.ctx.measureText(this._text.substring(startIndex,charIndex)).width;
			var point=out || new Point();
			return point.setTo(this._startX+width-(this._clipPoint ? this._clipPoint.x :0),this._startY+line *(this.fontSize+this.leading)-(this._clipPoint ? this._clipPoint.y :0));
		}

		/**
		*表示文本的高度，以像素为单位。
		*@return
		*
		*/
		__getset(0,__proto,'textHeight',function(){
			this._isChanged && Laya.timer.runCallLater(this,this.typeset);
			return this._textHeight;
		});

		/**
		*@inheritDoc
		*@return
		*
		*/
		__getset(0,__proto,'width',function(){
			if (this._width)return this._width;
			return this.textWidth;
			},function(value){
			_super.prototype._$set_width.call(this,value);
			this.isChanged=true;
		});

		/**
		*文本的字体名称，以字符串形式表示。
		*
		*<p>默认值为："Arial"，可以通过Text.defaultFont设置默认字体。</p>
		*
		*@see Text.defaultFont
		*@return
		*
		*/
		__getset(0,__proto,'font',function(){
			return this._getCSSStyle().fontFamily;
			},function(value){
			if (this._currBitmapFont){
				this._currBitmapFont=null;
				this.scale(1,1);
			}
			if (Text.bitmapFonts && Text.bitmapFonts[value]){
				this._currBitmapFont=Text.bitmapFonts[value];
			}
			this._getCSSStyle().fontFamily=value;
			this.isChanged=true;
		});

		/**
		*@inheritDoc
		*@return
		*
		*/
		__getset(0,__proto,'height',function(){
			if (this._height)return this._height;
			return this.textHeight;
			},function(value){
			_super.prototype._$set_height.call(this,value);
			this.isChanged=true;
		});

		/**
		*垂直行间距（以像素为单位）。
		*@return
		*
		*/
		__getset(0,__proto,'leading',function(){
			return this._getCSSStyle().leading;
			},function(value){
			this._getCSSStyle().leading=value;
			this.isChanged=true;
		});

		/**当前文本的内容字符串。*/
		__getset(0,__proto,'text',function(){
			return this._text;
			},function(value){
			if (this._text!==value){
				this.lang(value+"");
				this.isChanged=true;
				this.event("change");
			}
		});

		/**
		*表示文本的宽度，以像素为单位。
		*@return
		*
		*/
		__getset(0,__proto,'textWidth',function(){
			this._isChanged && Laya.timer.runCallLater(this,this.typeset);
			return this._textWidth;
		});

		/**
		*指定文本的字体大小（以像素为单位）。
		*
		*<p>默认为20像素，可以通过 <code>Text.defaultSize</code> 设置默认大小。</p>
		*@return
		*
		*/
		__getset(0,__proto,'fontSize',function(){
			return this._getCSSStyle().fontSize;
			},function(value){
			this._getCSSStyle().fontSize=value;
			this.isChanged=true;
		});

		/**
		*指定文本是否为粗体字。
		*
		*<p>默认值为 false，这意味着不使用粗体字。如果值为 true，则文本为粗体字。</p>
		*
		*@return
		*
		*/
		__getset(0,__proto,'bold',function(){
			return this._getCSSStyle().bold;
			},function(value){
			this._getCSSStyle().bold=value;
			this.isChanged=true;
		});

		/**
		*表示文本的颜色值。可以通过 <code>Text.defaultColor</code> 设置默认颜色。
		*<p>默认值为黑色。</p>
		*@return
		*
		*/
		__getset(0,__proto,'color',function(){
			return this._getCSSStyle().color;
			},function(value){
			this._getCSSStyle().color=value;
			if (!this._isChanged && this._graphics){
				this._graphics.replaceTextColor(this.color)
				}else {
				this.isChanged=true;
			}
		});

		/**
		*<p>描边颜色，以字符串表示。</p>
		*默认值为 "#000000"（黑色）;
		*@return
		*
		*/
		__getset(0,__proto,'strokeColor',function(){
			return this._getCSSStyle().strokeColor;
			},function(value){
			this._getCSSStyle().strokeColor=value;
			this.isChanged=true;
		});

		/**
		*表示使用此文本格式的文本是否为斜体。
		*
		*<p>默认值为 false，这意味着不使用斜体。如果值为 true，则文本为斜体。</p>
		*@return
		*
		*/
		__getset(0,__proto,'italic',function(){
			return this._getCSSStyle().italic;
			},function(value){
			this._getCSSStyle().italic=value;
			this.isChanged=true;
		});

		/**
		*表示文本的水平显示方式。
		*
		*<p><b>取值：</b>
		*<li>"left"： 居左对齐显示。</li>
		*<li>"center"： 居中对齐显示。</li>
		*<li>"right"： 居右对齐显示。</li>
		*</p>
		*@return
		*
		*/
		__getset(0,__proto,'align',function(){
			return this._getCSSStyle().align;
			},function(value){
			this._getCSSStyle().align=value;
			this.isChanged=true;
		});

		/**
		*表示文本的垂直显示方式。
		*
		*<p><b>取值：</b>
		*<li>"top"： 居顶部对齐显示。</li>
		*<li>"middle"： 居中对齐显示。</li>
		*<li>"bottom"： 居底部对齐显示。</li>
		*</p>
		*@return
		*
		*/
		__getset(0,__proto,'valign',function(){
			return this._getCSSStyle().valign;
			},function(value){
			this._getCSSStyle().valign=value;
			this.isChanged=true;
		});

		/**
		*表示文本是否自动换行，默认为false。
		*
		*<p>若值为true，则自动换行；否则不自动换行。</p>
		*@return
		*
		*/
		__getset(0,__proto,'wordWrap',function(){
			return this._getCSSStyle().wordWrap;
			},function(value){
			this._getCSSStyle().wordWrap=value;
			this.isChanged=true;
		});

		/**
		*边距信息。
		*
		*<p>[上边距，右边距，下边距，左边距]（边距以像素为单位）。</p>
		*@return
		*
		*/
		__getset(0,__proto,'padding',function(){
			return this._getCSSStyle().padding;
			},function(value){
			this._getCSSStyle().padding=value;
			this.isChanged=true;
		});

		/**
		*文本背景颜色，以字符串表示。
		*@return
		*
		*/
		__getset(0,__proto,'bgColor',function(){
			return this._getCSSStyle().backgroundColor;
			},function(value){
			this._getCSSStyle().backgroundColor=value;
			this.isChanged=true;
		});

		/**
		*文本边框背景颜色，以字符串表示。
		*@return
		*
		*/
		__getset(0,__proto,'borderColor',function(){
			return this._getCSSStyle().borderColor;
			},function(value){
			this._getCSSStyle().borderColor=value;
			this.isChanged=true;
		});

		/**
		*<p>描边宽度（以像素为单位）。</p>
		*默认值0，表示不描边。
		*@return
		*
		*/
		__getset(0,__proto,'stroke',function(){
			return this._getCSSStyle().stroke;
			},function(value){
			this._getCSSStyle().stroke=value;
			this.isChanged=true;
		});

		/**
		*<p>指定文本字段是否是密码文本字段。</p>
		*<p>如果此属性的值为 true，则文本字段被视为密码文本字段，并使用星号而不是实际字符来隐藏输入的字符。如果为 false，则不会将文本字段视为密码文本字段。</p>
		*<p>默认值为false。</p>
		*@return
		*
		*/
		__getset(0,__proto,'asPassword',function(){
			return this._getCSSStyle().password;
			},function(value){
			this._getCSSStyle().password=value;
			this.isChanged=true;
		});

		/**
		*一个布尔值，表示文本的属性是否有改变。
		*@param value 是否有改变。若为true表示有改变。
		*
		*/
		__getset(0,__proto,'isChanged',null,function(value){
			if (this._isChanged!==value){
				this._isChanged=value;
				value && Laya.timer.callLater(this,this.typeset);
			}
		});

		/**
		*设置横向滚动量。
		*<p>即使设置超出滚动范围的值，也会被自动限制在可能的最大值处。</p>
		*/
		/**
		*获取横向滚动量。
		*/
		__getset(0,__proto,'scrollX',function(){
			if (!this._clipPoint)return 0;
			return this._clipPoint.x;
			},function(value){
			if (this.textWidth < this._width || !this._clipPoint)return;
			value=value < this.padding[3] ? this.padding[3] :value;
			var maxScrollX=this._textWidth-this._width;
			value=value > maxScrollX ? maxScrollX :value;
			var visibleLineCount=this._height / (this.fontSize+this.leading)| 0+1;
			this._clipPoint.x=value;
			this.renderTextAndBg(this._lastVisibleLineIndex,visibleLineCount);
		});

		/**
		*设置纵向滚动量（px)。即使设置超出滚动范围的值，也会被自动限制在可能的最大值处。
		*/
		/**
		*获取纵向滚动量。
		*/
		__getset(0,__proto,'scrollY',function(){
			if (!this._clipPoint)return 0;
			return this._clipPoint.y;
			},function(value){
			if (this.textHeight < this._height || !this._clipPoint)return;
			value=value < this.padding[0] ? this.padding[0] :value;
			var maxScrollY=this._textHeight-this._height;
			value=value > maxScrollY ? maxScrollY :value;
			var startLine=value / (this.fontSize+this.leading)| 0;
			this._lastVisibleLineIndex=startLine;
			var visibleLineCount=(this._height / (this.fontSize+this.leading)| 0)+1;
			this._clipPoint.y=value;
			this.renderTextAndBg(startLine,visibleLineCount);
		});

		/**
		*获取横向可滚动最大值。
		*/
		__getset(0,__proto,'maxScrollX',function(){
			return (this.textWidth < this._width)? 0 :this._textWidth-this._width;
		});

		/**
		*获取纵向可滚动最大值。
		*/
		__getset(0,__proto,'maxScrollY',function(){
			return (this.textHeight < this._height)? 0 :this._textHeight-this._height;
		});

		Text.registerBitmapFont=function(name,bitmapFont){
			Text.bitmapFonts || (Text.bitmapFonts={});
			Text.bitmapFonts[name]=bitmapFont;
		}

		Text.unregisterBitmapFont=function(name,destory){
			(destory===void 0)&& (destory=true);
			if (Text.bitmapFonts && Text.bitmapFonts[name]){
				var tBitmapFont=Text.bitmapFonts[name];
				if (destory){
					tBitmapFont.destory();
				}
				delete Text.bitmapFonts[name];
			}
		}

		Text.langPacks=null
		Text.bitmapFonts=null
		return Text;
	})(Sprite)


	/**
	*<p> <code>Stage</code> 类是显示对象的根节点。</p>
	*可以通过Laya.stage访问。
	*/
	//class laya.display.Stage extends laya.display.Sprite
	var Stage=(function(_super){
		function Stage(){
			this.focus=null;
			this.frameRate="fast";
			this.canvasRotation=false;
			this._screenMode="none";
			this._scaleMode="noscale";
			this._sizeMode="none";
			this._alignV="top";
			this._alignH="left";
			this._bgColor="black";
			this._useHDRendering=true;
			this._mouseMoveTime=0;
			this._oldSize=null;
			this._renderCount=0;
			Stage.__super.call(this);
			this.offset=new Point();
			this.now=Browser.now();
			this._canvasTransform=new Matrix();
			this._preLoopTime=Browser.now();
			var _$this=this;
			this.mouseEnabled=true;
			this._displayInStage=true;
			var _this=this;
			var window=Browser.window;
			window.addEventListener("resize",function(){
				if (!Input.isInputting){
					_$this.resetCanvas();
					Laya.timer.once(100,_this,_this._changeCanvasSize,null,true);
				}
			})
			window.addEventListener("focus",function(){
				_this.event("focus");
			})
			window.addEventListener("blur",function(){
				_this.event("blur");
			})
			window.addEventListener("orientationchange",function(e){
				_$this.resetCanvas();
				Laya.timer.once(100,_this,_this._changeCanvasSize,null,true);
			})
			this.on("mousemove",this,this._onmouseMove);
		}

		__class(Stage,'laya.display.Stage',_super);
		var __proto=Stage.prototype;
		/**@inheritDoc */
		__proto.size=function(width,height){
			this.width=width;
			this.height=height;
			Laya.timer.callLater(this,this._changeCanvasSize);
			return this;
		}

		/**@private */
		__proto._changeCanvasSize=function(){
			this.setCanvasSize(Browser.clientWidth,Browser.clientHeight);
		}

		__proto.resetCanvas=function(){
			var canvas=Render.canvas;
			var canvasStyle=canvas.source.style;
			canvas.size(1,1);
			canvasStyle.transform=canvasStyle.webkitTransform=canvasStyle.msTransform=canvasStyle.mozTransform=canvasStyle.oTransform="";
			this.visible=false;
		}

		/**
		*设置画布大小。
		*@param canvasWidth 画布宽度。
		*@param canvasHeight 画布高度。
		*/
		__proto.setCanvasSize=function(canvasWidth,canvasHeight){
			this._oldSize || (this._oldSize=new Point(this._width,this._height));
			var rotation=false;
			if (this._screenMode!=="none"){
				var screenType=canvasWidth / canvasHeight < 1 ? "vertical" :"horizontal";
				rotation=screenType!==this._screenMode;
				if (rotation){
					var temp=canvasHeight;
					canvasHeight=canvasWidth;
					canvasWidth=temp;
				}
			}
			this.canvasRotation=rotation;
			var pixelRatio=this._useHDRendering ? Browser.pixelRatio :1;
			var canvas=Render.canvas;
			var canvasStyle=canvas.source.style;
			var mat=this._canvasTransform.identity();
			var pixelWidth=canvasWidth *pixelRatio;
			var pixelHeight=canvasHeight *pixelRatio;
			var screenRatio=canvasWidth / canvasHeight;
			var width=this._oldSize.x;
			var height=this._oldSize.y;
			if (this._sizeMode==="full"){
				width=pixelWidth;
				height=pixelHeight;
				}else if (this._sizeMode==="fullwidth"){
				height=this._oldSize.y;
				width=this._height *screenRatio;
				}else if (this._sizeMode==="fullheight"){
				width=this._oldSize.x;
				height=this._width / screenRatio;
			}
			this._width=width;
			this._height=height;
			canvas.size(width,height);
			System.changeWebGLSize(width,height);
			var scaleX=pixelWidth / this._oldSize.x;
			var scaleY=pixelHeight / this._oldSize.y;
			if (this._scaleMode==="showall"){
				scaleX=scaleY=Math.min(scaleX,scaleY);
				}else if (this._scaleMode==="noborder"){
				scaleX=scaleY=Math.max(scaleX,scaleY);
				}else if (this._scaleMode==="noscale"){
				scaleX=scaleY=1;
			}
			if (scaleX===1 && scaleY===1){
				this.transform && this.transform.identity();
				}else {
				this.transform || (this.transform=new Matrix());
				this.transform.a=scaleX;
				this.transform.d=scaleY;
			}
			if (this._sizeMode==="none"){
				canvas.size(this._oldSize.x *scaleX,this._oldSize.y *scaleY);
				System.changeWebGLSize(canvas.width,canvas.height);
				mat.scale(1 / pixelRatio,1 / pixelRatio);
				if (this._alignH==="left")this.offset.x=0;
				else if (this._alignH==="right")this.offset.x=pixelWidth-canvas.width / pixelRatio;
				else this.offset.x=(pixelWidth-canvas.width)*0.5 / pixelRatio;
				if (this._alignV==="top")this.offset.y=0;
				else if (this._alignV==="bottom")this.offset.y=pixelHeight-canvas.height / pixelRatio;
				else this.offset.y=(pixelHeight-canvas.height)*0.5 / pixelRatio;
				mat.translate(this.offset.x,this.offset.y);
				}else {
				this._width=width / scaleX;
				this._height=height / scaleY;
				mat.scale(canvasWidth / canvas.width,canvasHeight / canvas.height);
			}
			if (rotation){
				if (this._screenMode==="horizontal"){
					mat.rotate(Math.PI / 2);
					mat.translate(canvasHeight,0);
					}else {
					mat.rotate(-Math.PI / 2);
					mat.translate(0,canvasWidth);
				}
			}
			if (mat.a < 0.00000000000001)mat.a=mat.d=0;
			canvasStyle.transformOrigin=canvasStyle.webkitTransformOrigin=canvasStyle.msTransformOrigin=canvasStyle.mozTransformOrigin=canvasStyle.oTransformOrigin="0px 0px 0px";
			canvasStyle.transform=canvasStyle.webkitTransform=canvasStyle.msTransform=canvasStyle.mozTransform=canvasStyle.oTransform="matrix("+mat.toString()+")";
			this.visible=true;
			this._repaint=1;
			this.event("resize");
		}

		/**@inheritDoc */
		__proto.repaint=function(){
			this._repaint=1;
		}

		/**@inheritDoc */
		__proto.parentRepaint=function(child){}
		/**@private */
		__proto._loop=function(){
			this.render(Render.context,0,0);
			return true;
		}

		/**@private */
		__proto._onmouseMove=function(e){
			this._mouseMoveTime=Browser.now();
		}

		/**@inheritDoc */
		__proto.render=function(context,x,y){
			var loopTime=Browser.now();
			if (Log.enable()&& (loopTime-this.now)> 500){
				Log.print("-------------render delay:"+(Browser.now()-this.now)+"  cound:"+this._renderCount);
			}
			this.now=loopTime;
			this._renderCount++;
			var delay=loopTime-this._preLoopTime;
			var isFastMode=(this.frameRate!=="slow");
			var isDoubleLoop=(this._renderCount % 2===0);
			var ctx=Render.context;
			Stat.renderSlow=!isFastMode;
			if (isFastMode || isDoubleLoop){
				Stat.loopCount++;
				MouseManager.instance.runEvent();
				Laya.timer._update();
				if (this._style.visible){
					Render.isWebGl ? ctx.clear():Render.clear(this._bgColor);
					_super.prototype.render.call(this,context,x,y);
				}
			}
			if (this._style.visible && (isFastMode || !isDoubleLoop)){
				Render.isWebGl && Render.clear(this._bgColor);
				context.flush();
				Render.finish();
			}
			this._preLoopTime=loopTime;
		}

		/**
		*<p>缩放模式。</p>
		*
		*<p><ul>取值范围：
		*<li>"noScale" ：不缩放；</li>
		*<li>"exactFit" ：全屏不等比缩放；</li>
		*<li>"showAll" ：最小比例缩放；</li>
		*<li>"noBorder" ：最大比例缩放；</li>
		*</ul></p>
		*默认值为"noScale"。
		**/
		__getset(0,__proto,'scaleMode',function(){
			return this._scaleMode;
			},function(value){
			this._scaleMode=value;
			Laya.timer.callLater(this,this._changeCanvasSize);
		});

		/**舞台的背景颜色，默认为黑色，null为透明。*/
		__getset(0,__proto,'bgColor',function(){
			return this._bgColor;
			},function(value){
			this._bgColor=value;
			if (value){
				Render.canvas.source.style.background=value;
				}else {
				Render.canvas.source.style.background="none";
			}
		});

		/**
		*应用程序大小模式。
		*<p><ul>取值范围：
		*<li>"full"；</li>
		*<li>"none"；</li>
		*</ul></p>
		*默认值为"none"。
		**/
		__getset(0,__proto,'sizeMode',function(){
			return this._sizeMode;
			},function(value){
			this._sizeMode=value;
			Laya.timer.callLater(this,this._changeCanvasSize);
		});

		/**
		*水平对齐方式。
		*<p><ul>取值范围：
		*<li>"left" ：居左对齐；</li>
		*<li>"center" ：居中对齐；</li>
		*<li>"right" ：居右对齐；</li>
		*</ul></p>
		*默认值为"left"。
		**/
		__getset(0,__proto,'alignH',function(){
			return this._alignH;
			},function(value){
			this._alignH=value;
			Laya.timer.callLater(this,this._changeCanvasSize);
		});

		/**
		*垂直对齐方式。
		*<p><ul>取值范围：
		*<li>"top" ：居顶部对齐；</li>
		*<li>"middle" ：居中对齐；</li>
		*<li>"bottom" ：居底部对齐；</li>
		*</ul></p>
		**/
		__getset(0,__proto,'alignV',function(){
			return this._alignV;
			},function(value){
			this._alignV=value;
			Laya.timer.callLater(this,this._changeCanvasSize);
		});

		/**当前视窗X轴缩放大小。*/
		__getset(0,__proto,'clientScaleX',function(){
			return this._transform ? this._transform.a :1;
		});

		/**使用高清渲染，默认为true*/
		__getset(0,__proto,'useHDRendering',function(){
			return this._useHDRendering;
			},function(value){
			this._useHDRendering=value;
			Laya.timer.callLater(this,this._changeCanvasSize);
		});

		/**鼠标在 Stage 上的X坐标。*/
		__getset(0,__proto,'mouseX',function(){
			return Math.round(MouseManager.instance.mouseX / (this._transform ? this._transform.a :1));
		});

		/**鼠标在 Stage 上的Y坐标。*/
		__getset(0,__proto,'mouseY',function(){
			return Math.round(MouseManager.instance.mouseY / (this._transform ? this._transform.d :1));
		});

		/**当前视窗Y轴缩放大小。*/
		__getset(0,__proto,'clientScaleY',function(){
			return this._transform ? this._transform.d :1;
		});

		/**
		*场景布局类型
		*<p><ul>取值范围：
		*<li>"none" ：不更改屏幕</li>
		*<li>"horizontal" ：自动横屏</li>
		*<li>"vertical" ：自动竖屏</li>
		*</ul></p>
		**/
		__getset(0,__proto,'screenMode',function(){
			return this._screenMode;
			},function(value){
			this._screenMode=value;
		});

		Stage.SCALE_NOSCALE="noscale";
		Stage.SCALE_EXACTFIT="exactfit";
		Stage.SCALE_SHOWALL="showall";
		Stage.SCALE_NOBORDER="noborder";
		Stage.SIZE_NONE="none";
		Stage.SIZE_FULL="full";
		Stage.SIZE_FULL_WIDTH="fullwidth";
		Stage.SIZE_FULL_HEIGHT="fullheight";
		Stage.ALIGN_LEFT="left";
		Stage.ALIGN_RIGHT="right";
		Stage.ALIGN_CENTER="center";
		Stage.ALIGN_TOP="top";
		Stage.ALIGN_MIDDLE="middle";
		Stage.ALIGN_BOTTOM="bottom";
		Stage.SCREEN_NONE="none";
		Stage.SCREEN_HORIZONTAL="horizontal";
		Stage.SCREEN_VERTICAL="vertical";
		Stage.FRAME_FAST="fast";
		Stage.FRAME_SLOW="slow";
		Stage.FRAME_MOUSE="mouse";
		Stage.FRAME_AUTO="auto";
		return Stage;
	})(Sprite)


	//class laya.particle.Particle2D extends laya.display.Sprite
	var Particle2D=(function(_super){
		function Particle2D(setting){
			this._particleTemplate=null;
			this._canvasTemplate=null;
			this._emitter=null;
			Particle2D.__super.call(this);
			if (Render.isWebGl){
				this._particleTemplate=new ParticleTemplate2D(setting);
				this.graphics._saveToCmd(Render.context.drawParticle,[this._particleTemplate]);
				}else{
				this._particleTemplate=this._canvasTemplate=new ParticleTemplateCanvas(setting);
				this._renderType |=0x200;
			}
			this._emitter=new Emitter2D(this._particleTemplate);
		}

		__class(Particle2D,'laya.particle.Particle2D',_super);
		var __proto=Particle2D.prototype;
		__proto.play=function(){
			Laya.timer.frameLoop(1,this,this.loop,null,true);
		}

		__proto.stop=function(){
			Laya.timer.clear(this,this.loop);
		}

		__proto.loop=function(){
			this.advanceTime(1/60);
		}

		__proto.advanceTime=function(passedTime){
			(passedTime===void 0)&& (passedTime=1);
			if(this._canvasTemplate){
				this._canvasTemplate.advanceTime(passedTime);
			}
			if (this._emitter){
				this._emitter.advanceTime(passedTime);
			}
		}

		__proto.customRender=function(context,x,y){
			if (this._canvasTemplate){
				this._canvasTemplate.render(context,x,y);
			}
		}

		__getset(0,__proto,'emitter',function(){
			return this._emitter;
		});

		return Particle2D;
	})(Sprite)


	/**
	*...
	*@author ww
	*/
	//class laya.particle.ParticlePlayer extends laya.display.Sprite
	var ParticlePlayer=(function(_super){
		function ParticlePlayer(){
			this.particle=null;
			ParticlePlayer.__super.call(this);
		}

		__class(ParticlePlayer,'laya.particle.ParticlePlayer',_super);
		var __proto=ParticlePlayer.prototype;
		__proto.loadParticleFile=function(fileName){
			Laya.loader.load(fileName,Handler.create(this,this.setParticleSetting));
		}

		__proto.setParticleSetting=function(settings){
			if (this.particle){
				this.particle.stop();
				this.particle.removeSelf();
			}
			this.particle=new Particle2D(settings);
			this.particle.emitter.start();
			this.particle.play();
			this.addChild(this.particle);
		}

		__getset(0,__proto,'file',null,function(path){
			this.loadParticleFile(path);
		});

		return ParticlePlayer;
	})(Sprite)


	/**
	*颜色选取类
	*@author ww
	*/
	//class tools.ColorSelector extends laya.display.Sprite
	var ColorSelector=(function(_super){
		function ColorSelector(){
			this.sideColor=null;
			this.mainColor=null;
			this.demoColor=null;
			this.posSp=null;
			this.hPos=null;
			this.container=null;
			this.isChanging=false;
			this.tColor=null;
			this.tH=NaN;
			ColorSelector.__super.call(this);
			this.container=this;
			this.createUI();
		}

		__class(ColorSelector,'tools.ColorSelector',_super);
		var __proto=ColorSelector.prototype;
		__proto.createUI=function(){
			this.sideColor=new Sprite();
			this.container.addChild(this.sideColor);
			this.posSp=new Sprite();
			this.posSp.pos(100,100);
			this.posSp.graphics.drawCircle(0,0,5,null,"#ff0000");
			this.posSp.graphics.drawCircle(0,0,6,null,"#ffff00");
			this.posSp.autoSize=true;
			this.posSp.cacheAsBitmap=true;
			this.sideColor.addChild(this.posSp);
			this.sideColor.pos(0,0);
			this.sideColor.size(150,150);
			this.sideColor.on("mousedown",this,this.sideColorClick);
			this.sideColor.on("mouseup",this,this.sideColorMouseUp);
			var i=0;
			this.mainColor=new Sprite();
			var g;
			g=this.mainColor.graphics;
			var h=NaN;
			var s=NaN;
			var b=NaN;
			var rgb;
			for (i=0;i < 150;i++){
				rgb=ColorTool.hsb2rgb(i/150*360,1,1);
				g.drawLine(0,i,20,i,ColorTool.getRGBStr(rgb));
			}
			this.mainColor.pos(150+10,0);
			this.mainColor.size(20,i);
			this.mainColor.cacheAsBitmap=true;
			this.hPos=new Sprite();
			this.hPos.graphics.drawPie(0,0,10,-10,10,"#ff0000");
			this.hPos.x=this.mainColor.x+22;
			this.container.addChild(this.hPos);
			this.container.addChild(this.mainColor);
			this.mainColor.on("mousedown",this,this.mainColorClick);
			this.demoColor=new Sprite();
			this.demoColor.pos(this.sideColor.x,this.sideColor.y+this.sideColor.height+10);
			this.demoColor.size(150,20);
			this.container.addChild(this.demoColor);
			this.setColorByRGBStr("#099599");
			this.posSp.on("dragmove",this,this.posDraging);
		}

		// posSp.on(Event.MOUSE_DOWN,this,posMouseDown);
		__proto.posMouseDown=function(e){}
		__proto.posDraging=function(){
			this.updatePosSpAndShowColor();
		}

		__proto.posDragEnd=function(){
			this.isChanging=false;
			this.updatePosSpAndShowColor();
		}

		__proto.setColorByRGBStr=function(rgbStr){
			var rgb;
			rgb=ColorTool.getRGBByRGBStr(rgbStr);
			this.setColor(rgb[0],rgb[1],rgb[2]);
		}

		__proto.setColor=function(red,green,blue,notice){
			(notice===void 0)&& (notice=true);
			var hsb;
			hsb=ColorTool.rgb2hsb(red,green,blue);
			var tRGB;
			tRGB=ColorTool.hsb2rgb(hsb[0],hsb[1],hsb[2]);
			this.setColorByHSB(hsb[0],hsb[1],hsb[2],notice);
		}

		__proto.setColorByHSB=function(h,s,b,notice){
			(notice===void 0)&& (notice=true);
			this.hPos.y=this.mainColor.y+h/360*150;
			this.posSp.x=s *150;
			this.posSp.y=(1-b)*150;
			this.updateSideColor(h,notice);
		}

		__proto.sideColorClick=function(e){
			this.isChanging=true;
			this.posSp.startDrag();
			this.updatePosSpAndShowColor();
		}

		__proto.sideColorMouseUp=function(e){
			this.isChanging=false;
			this.updatePosSpAndShowColor();
		}

		__proto.updatePosSpAndShowColor=function(){
			this.posSp.x=this.sideColor.mouseX;
			this.posSp.y=this.sideColor.mouseY;
			this.updateDemoColor();
		}

		__proto.updateDemoColor=function(notice){
			(notice===void 0)&& (notice=true);
			var h=NaN;
			var s=NaN;
			var b=NaN;
			h=this.tH;
			s=this.posSp.x / 150;
			b=1-this.posSp.y / 150;
			this.tColor=ColorTool.hsb2rgb(h,s,b);
			var g;
			g=this.demoColor.graphics;
			g.clear();
			g.drawRect(0,0,this.demoColor.width,this.demoColor.height,ColorTool.getRGBStr(this.tColor));
			if(this.isChanging)return;
			if(notice)
				this.event("ColorChanged",this);
		}

		__proto.mainColorClick=function(e){
			var yPos=NaN;
			yPos=this.mainColor.mouseY;
			this.hPos.y=yPos+this.mainColor.y;
			var h=NaN;
			h=yPos / 150 *360;
			this.updateSideColor(h);
		}

		__proto.updateSideColor=function(h,notice){
			(notice===void 0)&& (notice=true);
			this.tH=h;
			var s=NaN;
			var b=NaN;
			var g;
			g=this.sideColor.graphics;
			g.clear();
			this.sideColor.cacheAsBitmap=false;
			var rgb;
			rgb=ColorTool.hsb2rgb(h,1,1);
			var gradient=Browser.ctx.createLinearGradient(0,0,80,0);
			gradient.addColorStop(0,"white");
			gradient.addColorStop(1,ColorTool.getRGBStr(rgb));
			this.sideColor.graphics.drawRect(0,0,150,150,gradient);
			this.sideColor.graphics.loadImage("comp/colorpicker_overlay.png",0,0);
			this.sideColor.size(150,150);
			this.sideColor.cacheAsBitmap=true;
			this.updateDemoColor(notice);
		}

		ColorSelector.COLOR_CHANGED="ColorChanged";
		ColorSelector.COLOR_CLEARED="COLOR_CLEARED";
		ColorSelector.RecWidth=150;
		return ColorSelector;
	})(Sprite)


	/**
	*
	*@author ww
	*@version 1.0
	*
	*@created 2015-12-30 下午2:03:32
	*/
	//class tools.comps.ArrowLine extends laya.display.Sprite
	var ArrowLine=(function(_super){
		function ArrowLine(sign){
			this.lineLen=160;
			this.arrowLen=10;
			this.sign="Y";
			this._targetChanger=null;
			this._isMoving=false;
			this.lenControl=new Rect();
			this.rotationControl=new Rect();
			this.lenChanger=ValueChanger.create(this,"lineLen");
			this.lenControlXChanger=ValueChanger.create(this.lenControl,"x");
			(sign===void 0)&& (sign="X");
			ArrowLine.__super.call(this);
			this.sign=sign;
			this.addChild(this.lenControl);
			this.addChild(this.rotationControl);
			this.lenControl.on("mousedown",this,this.controlMouseDown);
			this.drawMe();
		}

		__class(ArrowLine,'tools.comps.ArrowLine',_super);
		var __proto=ArrowLine.prototype;
		__proto.drawMe=function(){
			var g;
			g=this.graphics;
			g.clear();
			g.drawLine(0,0,this.lineLen,0,"#ffff00");
			g.drawLine(this.lineLen,0,this.lineLen-this.arrowLen,-this.arrowLen,"#ff0000");
			g.drawLine(this.lineLen,0,this.lineLen-this.arrowLen,this.arrowLen,"#ff0000");
			g.fillText(this.sign,50,-5,"","#ff0000","left");
			if(this._isMoving&&this._targetChanger){
				g.fillText(this._targetChanger.key+":"+this._targetChanger.value.toFixed(2),this.lineLen-15,-25,"","#ffff00","center");
			}
			this.lenControl.posTo(this.lineLen-15,0);
			this.rotationControl.posTo(this.lineLen+10,0);
			this.size(this.arrowLen,this.lineLen);
		}

		__proto.clearMoveEvents=function(){
			Laya.stage.off("mousemove",this,this.stageMouseMove);
			Laya.stage.off("mouseup",this,this.stageMouseUp);
		}

		__proto.controlMouseDown=function(e){
			this.clearMoveEvents();
			this.lenControlXChanger.record();
			this.lenChanger.record();
			if(this.targetChanger){
				this.targetChanger.record();
			}
			this._isMoving=true;
			Laya.stage.on("mousemove",this,this.stageMouseMove);
			Laya.stage.on("mouseup",this,this.stageMouseUp);
		}

		__proto.stageMouseMove=function(e){
			this.lenControlXChanger.value=this.mouseX;
			this.lenChanger.showValueByScale(this.lenControlXChanger.scaleValue);
			if(this.targetChanger){
				this.targetChanger.showValueByScale(this.lenControlXChanger.scaleValue);
			}
			this.drawMe();
		}

		__proto.stageMouseUp=function(e){
			this._isMoving=false;
			this.noticeChange();
			this.clearMoveEvents();
			this.lenControlXChanger.recover();
			this.lenChanger.recover();
			this.drawMe();
		}

		__proto.noticeChange=function(){
			var dLen=NaN;
			dLen=this.lenChanger.dValue;
			console.log("lenChange:",dLen);
		}

		__getset(0,__proto,'targetChanger',function(){
			return this._targetChanger;
			},function(changer){
			if(this._targetChanger){
				this._targetChanger.dispose();
			}
			this._targetChanger=changer;
		});

		return ArrowLine;
	})(Sprite)


	/**
	*
	*@author ww
	*@version 1.0
	*
	*@created 2015-12-30 下午2:37:05
	*/
	//class tools.comps.Axis extends laya.display.Sprite
	var Axis=(function(_super){
		function Axis(){
			this._target=null;
			this._lenType=
			[
			["width","height"],
			["scaleX","scaleY"]];
			this._type=1;
			this.xAxis=new ArrowLine("X");
			this.yAxis=new ArrowLine("Y");
			this.controlBox=new Rect();
			this._point=new Point();
			this.oPoint=new Point();
			this.myRotationChanger=ValueChanger.create(this,"rotation");
			this.targetRotationChanger=ValueChanger.create(null,"rotation");
			this.stageMouseRotationChanger=new ValueChanger();
			Axis.__super.call(this);
			this.mouseEnabled=true;
			this.size(1,1);
			this.initMe();
			this.xAxis.rotationControl.on("mousedown",this,this.controlMouseDown);
			this.yAxis.rotationControl.on("mousedown",this,this.controlMouseDown);
			this.controlBox.on("mousedown",this,this.controlBoxMouseDown);
			this.on("dragmove",this,this.dragging);
		}

		__class(Axis,'tools.comps.Axis',_super);
		var __proto=Axis.prototype;
		__proto.updateChanges=function(){
			if(this._target){
				var params;
				params=this._lenType[this._type];
				this.xAxis.targetChanger=ValueChanger.create(this._target,params[0]);
				this.yAxis.targetChanger=ValueChanger.create(this._target,params[1]);
			}
		}

		__proto.switchType=function(){
			this._type++;
			this._type=this._type%this._lenType.length;
			this.type=this._type;
		}

		__proto.controlBoxMouseDown=function(e){
			this.startDrag();
		}

		__proto.dragging=function(){
			if (this._target){
				this._point.setTo(this.x,this.y);
				DisControlTool.transPoint(this.parent,this._target.parent,this._point);
				this._target.pos(this._point.x,this._point.y);
			}
		}

		__proto.initMe=function(){
			this.addChild(this.xAxis);
			this.addChild(this.yAxis);
			this.yAxis.rotation=90;
			this.addChild(this.controlBox);
			this.controlBox.posTo(0,0);
		}

		__proto.clearMoveEvents=function(){
			Laya.stage.off("mousemove",this,this.stageMouseMove);
			Laya.stage.off("mouseup",this,this.stageMouseUp);
		}

		__proto.controlMouseDown=function(e){
			this.targetRotationChanger.target=this.target;
			this.clearMoveEvents();
			this.oPoint.setTo(0,0);
			this.myRotationChanger.record();
			this.oPoint=this.localToGlobal(this.oPoint);
			this.stageMouseRotationChanger.value=this.getStageMouseRatation();
			this.stageMouseRotationChanger.record();
			this.targetRotationChanger.record();
			Laya.stage.on("mousemove",this,this.stageMouseMove);
			Laya.stage.on("mouseup",this,this.stageMouseUp);
		}

		__proto.getStageMouseRatation=function(){
			return MathUtil.getRotation(this.oPoint.x,this.oPoint.y,Laya.stage.mouseX,Laya.stage.mouseY);
		}

		__proto.stageMouseMove=function(e){
			this.stageMouseRotationChanger.value=this.getStageMouseRatation();
			var dRotation=NaN;
			dRotation=-this.stageMouseRotationChanger.dValue;
			if(this.target){
				this.targetRotationChanger.showValueByAdd(dRotation);
				}else{
				this.myRotationChanger.showValueByAdd(dRotation);
			}
		}

		__proto.stageMouseUp=function(e){
			this.noticeChange();
			this.clearMoveEvents();
		}

		__proto.noticeChange=function(){
			console.log("rotate:",-this.stageMouseRotationChanger.dValue);
		}

		__getset(0,__proto,'target',function(){
			return this._target;
			},function(tar){
			this._target=tar;
			this.updateChanges();
		});

		__getset(0,__proto,'type',function(){
			return this._type;
			},function(lenType){
			this._type=lenType;
			this.updateChanges();
		});

		return Axis;
	})(Sprite)


	/**
	*
	*@author ww
	*@version 1.0
	*
	*@created 2015-12-30 下午3:23:06
	*/
	//class tools.comps.Rect extends laya.display.Sprite
	var Rect=(function(_super){
		function Rect(){
			this.recWidth=10;
			Rect.__super.call(this);
			this.drawMe();
		}

		__class(Rect,'tools.comps.Rect',_super);
		var __proto=Rect.prototype;
		__proto.drawMe=function(){
			var g;
			g=this.graphics;
			g.clear();
			g.drawRect(0,0,this.recWidth,this.recWidth,"#22ff22");
			this.size(this.recWidth,this.recWidth);
		}

		__proto.posTo=function(x,y){
			this.x=x-this.recWidth*0.5;
			this.y=y-this.recWidth*0.5;
		}

		return Rect;
	})(Sprite)


	/**
	*
	*@author ww
	*@version 1.0
	*
	*@created 2015-9-29 上午11:19:55
	*/
	//class tools.debugUI.DMainPain extends laya.display.Sprite
	var DMainPain=(function(_super){
		function DMainPain(){
			this.outUI=null;
			this.status=null;
			this.m=null;
			this.ActBtnTxts=[
			"上",
			"下",
			"左",
			"右",
			"B",
			"C",
			"E",
			"S",
			"D",
			"U",
			"N",
			"mCMD",
			"allCMD"];
			DMainPain.__super.call(this);
			this.mouseEnabled=true;
			this.autoSize=true;
			this.creates();
		}

		__class(DMainPain,'tools.debugUI.DMainPain',_super);
		var __proto=DMainPain.prototype;
		__proto.creates=function(){
			this.m=new DButton();
			this.m.text="调试输出";
			this.m.x=100;
			this.addChild(this.m);
			this.m.on("mousedown",this,this.mouseDown);
			this.outUI=new TraceOutUI();
			this.outUI.x=160;
			this.addChild(this.outUI);
			this.status=new Text();
			this.addChild(this.status);
			this.updates();
			this.createActButtons();
		}

		__proto.createActButtons=function(){
			var tX=0;
			var tY=0;
			var tBtn;
			var i=0;
			var len=0;
			len=this.ActBtnTxts.length;
			var sx=0;
			var mx=0;
			sx=this.status.x;
			mx=sx+80;
			tX=sx;
			tY=20;
			for(i=0;i<len;i++){
				tBtn=new DButton();
				this.addChild(tBtn);
				tBtn.on("mousedown",this,this.actionBtn,[tBtn]);
				tBtn.text=this.ActBtnTxts[i];
				tBtn.x=tX;
				tBtn.y=tY;
				if(tX>mx){
					tX=sx;
					tY+=tBtn.height+3;
					}else{
					tX+=tBtn.width+3;
				}
			}
		}

		__proto.actionBtn=function(tTarget){
			if((tTarget instanceof tools.debugUI.DButton )){
				DebugTool.dealCMDKey(tTarget.text);
			}
		}

		__proto.updateStatu=function(){
			if(!this.status)return;
			if(DebugTool.target){
				this.status.text=TraceTool.getClassName(DebugTool.target)+":"+DebugTool.target.name;
				}else{
				this.status.text="无";
			}
		}

		__proto.mouseDown=function(e){
			this.outUI.visible=!this.outUI.visible;
			this.updates();
		}

		__proto.updates=function(){
			this.m.text=this.outUI.visible?"关闭输出":"打开输出";
		}

		return DMainPain;
	})(Sprite)


	/**
	*...
	*@author
	*/
	//class laya.resource.FileBitmap extends laya.resource.Bitmap
	var FileBitmap=(function(_super){
		function FileBitmap(){
			this._src=null;
			this._onload=null;
			this._onerror=null;
			FileBitmap.__super.call(this);
		}

		__class(FileBitmap,'laya.resource.FileBitmap',_super);
		var __proto=FileBitmap.prototype;
		/***
		*设置onload函数,override it!
		*@param value onload函数
		*/
		__getset(0,__proto,'onload',null,function(value){
		});

		/**
		*设置文件路径全名
		*@param 文件路径全名
		*/
		/**
		*获取文件路径全名
		*@return 文件路径全名
		*/
		__getset(0,__proto,'src',function(){
			return this._src;
			},function(value){
			this._src=value;
		});

		/***
		*设置onerror函数,override it!
		*@param value onerror函数
		*/
		__getset(0,__proto,'onerror',null,function(value){
		});

		return FileBitmap;
	})(Bitmap)


	/**
	*...
	*@author laya
	*/
	//class laya.resource.HTMLCanvas extends laya.resource.Bitmap
	var HTMLCanvas=(function(_super){
		function HTMLCanvas(type){
			//this._ctx=null;
			this._is2D=false;
			HTMLCanvas.__super.call(this);
			var _$this=this;
			this._source=this;
			if (type==="2D" || (type==="AUTO" && !Render.isWebGl)){
				this._is2D=true;
				this._source=Browser.createElement("canvas");
				var o=this;
				o.getContext=function (contextID,other){
					if (_$this._ctx)return _$this._ctx;
					var ctx=_$this._ctx=_$this._source.getContext(contextID,other);
					if (ctx){
						ctx._canvas=o;
						ctx.size=function (){
						};
					}
					contextID==="2d" && Context._init(o,ctx);
					return ctx;
				}
			}else this._source={};
		}

		__class(HTMLCanvas,'laya.resource.HTMLCanvas',_super);
		var __proto=HTMLCanvas.prototype;
		__proto.clear=function(){
			this._ctx && this._ctx.clear();
		}

		__proto.destroy=function(){
			this._ctx && this._ctx.destroy();
			this._ctx=null;
		}

		__proto.release=function(){}
		__proto._setContext=function(context){
			this._ctx=context;
		}

		__proto.getContext=function(contextID,other){
			return this._ctx ? this._ctx :(this._ctx=HTMLCanvas._createContext(this));
		}

		__proto.copyTo=function(dec){
			_super.prototype.copyTo.call(this,dec);
			(dec)._ctx=this._ctx;
		}

		__proto.getMemSize=function(){
			return 0;
		}

		__proto.size=function(w,h){
			if (this._w !=w || this._h !=h){
				this._w=w;
				this._h=h;
				this._ctx && this._ctx.size(w,h);
				this._source && (this._source.height=h,this._source.width=w);
			}
		}

		__getset(0,__proto,'context',function(){
			return this._ctx;
		});

		//待调整
		__getset(0,__proto,'asBitmap',null,function(value){
		});

		HTMLCanvas.TYPE2D="2D";
		HTMLCanvas.TYPE3D="3D";
		HTMLCanvas.TYPEAUTO="AUTO";
		HTMLCanvas._createContext=null
		return HTMLCanvas;
	})(Bitmap)


	/**
	*...
	*@author ...
	*/
	//class laya.resource.HTMLSubImage extends laya.resource.Bitmap
	var HTMLSubImage=(function(_super){
		function HTMLSubImage(canvas,offsetX,offsetY,width,height,atlasImage,src,createOwnSource){
			HTMLSubImage.__super.call(this);
			(createOwnSource===void 0)&& (createOwnSource=false);
			throw new Error("不允许new！");
		}

		__class(HTMLSubImage,'laya.resource.HTMLSubImage',_super);
		return HTMLSubImage;
	})(Bitmap)


	//class laya.webgl.atlas.AtlasWebGLCanvas extends laya.resource.Bitmap
	var AtlasWebGLCanvas=(function(_super){
		function AtlasWebGLCanvas(){
			AtlasWebGLCanvas.__super.call(this);
			this._resourceManager.removeResource(this);
		}

		__class(AtlasWebGLCanvas,'laya.webgl.atlas.AtlasWebGLCanvas',_super);
		var __proto=AtlasWebGLCanvas.prototype;
		/***重新创建资源*/
		__proto.recreateResource=function(){
			var gl=WebGL.mainContext;
			var glTex=this._source=gl.createTexture();
			gl.bindTexture(0x0DE1,glTex);
			gl.texImage2D(0x0DE1,0,0x1908,this._w,this._h,0,0x1908,0x1401,null);
			gl.texParameteri(0x0DE1,0x2801,0x2601);
			gl.texParameteri(0x0DE1,0x2800,0x2601);
			gl.texParameteri(0x0DE1,0x2802,0x812F);
			gl.texParameteri(0x0DE1,0x2803,0x812F);
			gl.bindTexture(0x0DE1,null);
			this.memorySize=this._w *this._h *4;
			laya.resource.Resource.prototype.recreateResource.call(this);
		}

		/***销毁资源*/
		__proto.detoryResource=function(){
			if (this._source){
				WebGL.mainContext.deleteTexture(this._source);
				this._source=null;
				this.memorySize=0;
			}
		}

		/**采样image到WebGLTexture的一部分*/
		__proto.texSubImage2D=function(source,xoffset,yoffset,bitmap){
			var gl=WebGL.mainContext;
			gl.bindTexture(0x0DE1,this._source);
			(xoffset-1 >=0)&& (gl.texSubImage2D(0x0DE1,0,xoffset-1,yoffset,0x1908,0x1401,bitmap));
			(xoffset+1 <=source.width)&& (gl.texSubImage2D(0x0DE1,0,xoffset+1,yoffset,0x1908,0x1401,bitmap));
			(yoffset-1 >=0)&& (gl.texSubImage2D(0x0DE1,0,xoffset,yoffset-1,0x1908,0x1401,bitmap));
			(yoffset+1 <=source.height)&& (gl.texSubImage2D(0x0DE1,0,xoffset,yoffset+1,0x1908,0x1401,bitmap));
			gl.texSubImage2D(0x0DE1,0,xoffset,yoffset,0x1908,0x1401,bitmap);
			gl.bindTexture(0x0DE1,null);
		}

		/**采样image到WebGLTexture的一部分*/
		__proto.texSubImage2DPixel=function(source,xoffset,yoffset,width,height,pixel){
			var gl=WebGL.mainContext;
			gl.bindTexture(0x0DE1,this._source);
			var pixels=new Uint8Array(pixel.data);
			gl.texSubImage2D(0x0DE1,0,xoffset,yoffset,width,height,0x1908,0x1401,pixels);
			gl.bindTexture(0x0DE1,null);
		}

		/***
		*设置图片宽度
		*@param value 图片宽度
		*/
		__getset(0,__proto,'width',_super.prototype._$get_width,function(value){
			this._w=value;
		});

		/***
		*设置图片高度
		*@param value 图片高度
		*/
		__getset(0,__proto,'height',_super.prototype._$get_height,function(value){
			this._h=value;
		});

		return AtlasWebGLCanvas;
	})(Bitmap)


	/**
	*...
	*@author
	*/
	//class laya.webgl.resource.WebGLCanvas extends laya.resource.Bitmap
	var WebGLCanvas=(function(_super){
		function WebGLCanvas(type){
			//this._ctx=null;
			this._is2D=false;
			//this._canvas=null;
			//this.createOwnSource=false;
			var _$this=this;
			WebGLCanvas.__super.call(this);
			this._canvas=this;
			if (type==="2D" || (type==="AUTO" && !Render.isWebGl)){
				this._is2D=true;
				this._canvas=this._source=Browser.createElement("canvas");
				var o=this;
				o.getContext=function (contextID,other){
					if (_$this._ctx)return _$this._ctx;
					var ctx=_$this._ctx=_$this._canvas.getContext(contextID,other);
					if (ctx){
						ctx._canvas=o;
						ctx.size=function (){
						};
					}
					contextID==="2d" && Context._init(o,ctx);
					return ctx;
				}
			}else this._canvas={};
			this.createOwnSource=true;
			this.lock=true;
		}

		__class(WebGLCanvas,'laya.webgl.resource.WebGLCanvas',_super);
		var __proto=WebGLCanvas.prototype;
		__proto.clear=function(){
			this._ctx && this._ctx.clear();
		}

		__proto.destroy=function(){
			this._ctx && this._ctx.destroy();
			this._ctx=null;
		}

		__proto._setContext=function(context){
			this._ctx=context;
		}

		__proto.getContext=function(contextID,other){
			return this._ctx ? this._ctx :(this._ctx=WebGLCanvas._createContext(this));
		}

		__proto.copyTo=function(dec){
			_super.prototype.copyTo.call(this,dec);
			(dec)._ctx=this._ctx;
		}

		__proto.size=function(w,h){
			if (this._w !=w || this._h !=h){
				this._w=w;
				this._h=h;
				this._ctx && this._ctx.size(w,h);
				this._canvas && (this._canvas.height=h,this._canvas.width=w);
			}
		}

		__proto.recreateResource=function(){
			this.createWebGlTexture();
			laya.resource.Resource.prototype.recreateResource.call(this);
		}

		__proto.detoryResource=function(){
			if (this._source){
				WebGL.mainContext.deleteTexture(this._source);
				this._source=null;
				this.memorySize=0;
			}
		}

		__proto.createWebGlTexture=function(){
			var gl=WebGL.mainContext;
			if (!this._canvas){
				debugger;
				throw "create GLTextur err:no data:"+this._canvas;
			};
			var glTex=this._source=gl.createTexture();
			gl.bindTexture(0x0DE1,glTex);
			gl.texImage2D(0x0DE1,0,0x1908,this._w,this._h,0,0x1908,0x1401,null);
			gl.texParameteri(0x0DE1,0x2800,0x2601);
			gl.texParameteri(0x0DE1,0x2801,0x2601);
			gl.texParameteri(0x0DE1,0x2802,0x812F);
			gl.texParameteri(0x0DE1,0x2803,0x812F);
			this.memorySize=this._w *this._h *4;
			gl.bindTexture(0x0DE1,null);
			this._canvas=null;
		}

		__proto.texSubImage2D=function(webglCanvas,xoffset,yoffset){
			var gl=WebGL.mainContext;
			gl.bindTexture(0x0DE1,this._source);
			gl.texSubImage2D(0x0DE1,0,xoffset,yoffset,0x1908,0x1401,webglCanvas._source);
		}

		/**
		*返回HTML Image,as3无internal货friend，通常禁止开发者修改image内的任何属性
		*@param HTML Image
		*/
		__getset(0,__proto,'canvas',function(){
			return this._canvas;
		});

		__getset(0,__proto,'context',function(){
			return this._ctx;
		});

		__getset(0,__proto,'asBitmap',null,function(value){
			this._ctx && (this._ctx.asBitmap=value);
		});

		WebGLCanvas._createContext=null
		return WebGLCanvas;
	})(Bitmap)


	/**
	*...
	*@author
	*/
	//class laya.webgl.resource.WebGLCharImage extends laya.resource.Bitmap
	var WebGLCharImage=(function(_super){
		function WebGLCharImage(canvas,char){
			//this._ctx=null;
			//this.canvas=null;
			//this.char=null;
			//this.createOwnSource=false;
			this.borderSize=4;
			WebGLCharImage.__super.call(this);
			this.canvas=canvas;
			this.char=char;
			var bIsConchApp=System.isConchApp;
			if (bIsConchApp){
				ctx=ConchTextCanvas;
				}else {
				this._ctx=canvas.getContext('2d',undefined);
			};
			var xs=char.xs,ys=char.ys;
			var t=null;
			if (bIsConchApp){
				this._ctx.font=char.font;
				t=this._ctx.measureText(char.char);
				char.width=t.width1 *xs;
				char.height=t.height *ys;
				}else {
				t=Utils1.measureText(char.char,char.font);
				char.width=t.width *xs;
				char.height=t.height *ys;
			}
			this._w=char.width+this.borderSize *2;
			this._h=char.height+this.borderSize *2;
		}

		__class(WebGLCharImage,'laya.webgl.resource.WebGLCharImage',_super);
		var __proto=WebGLCharImage.prototype;
		__proto.size=function(w,h){
			this._w=w;
			this._h=h;
			this.canvas && (this.canvas.height=h,this.canvas.width=w);
		}

		//canvas为公用，其它地方也可能修改其尺寸
		__proto.recreateResource=function(){
			var char=this.char;
			var bIsConchApp=System.isConchApp;
			var xs=char.xs,ys=char.ys;
			this.size(char.width+this.borderSize *2,char.height+this.borderSize *2);
			if (bIsConchApp){
				var sFont="normal 100 "+char.fontSize+"px Arial";
				if (char.borderColor){
					sFont+=" 1 "+char.borderColor;
				}
				this._ctx.font=sFont;
				this._ctx.textBaseline="top";
				this._ctx.fillStyle=char.fillColor;
				this._ctx.fillText(char.char,this.borderSize,this.borderSize,null,null,null);
				}else {
				this._ctx.save();
				(this._ctx).clearRect(0,0,char.width+this.borderSize *4,char.height+this.borderSize *4);
				this._ctx.font=char.font;
				this._ctx.textBaseline="top";
				if (xs !=1 || ys !=1){
					alert("xs="+xs+",ys="+ys);
					this._ctx.scale(xs,ys);
				}
				this._ctx.translate(this.borderSize,this.borderSize);
				if (char.fillColor && char.borderColor){
					this._ctx.strokeStyle=char.borderColor;
					this._ctx.lineWidth=char.lineWidth;
					this._ctx.strokeText(char.char,0,0,null,null,0,null);
					this._ctx.fillStyle=char.fillColor;
					this._ctx.fillText(char.char,0,0,null,null,null);
					}else {
					if (char.lineWidth===-1){
						this._ctx.fillStyle=char.fillColor ? char.fillColor :"white";
						this._ctx.fillText(char.char,0,0,null,null,null);
						}else {
						this._ctx.strokeStyle=char.borderColor?char.borderColor:'white';
						this._ctx.lineWidth=char.lineWidth;
						this._ctx.strokeText(char.char,0,0,null,null,0,null);
					}
				}
				this._ctx.restore();
			}
			char.borderSize=this.borderSize;
			laya.resource.Resource.prototype.recreateResource.call(this);
		}

		__proto.copyTo=function(dec){
			var d=dec;
			d._ctx=this._ctx;
			d.canvas=this.canvas;
			d.char=this.char;
			_super.prototype.copyTo.call(this,dec);
		}

		return WebGLCharImage;
	})(Bitmap)


	/**
	*...
	*@author laya
	*/
	//class laya.webgl.resource.WebGLRenderTarget extends laya.resource.Bitmap
	var WebGLRenderTarget=(function(_super){
		function WebGLRenderTarget(width,height,mipMap,surfaceFormat,surfaceType,depthFormat){
			//this._frameBuffer=null;
			//this._depthBuffer=null;
			//this._surfaceFormat=0;
			//this._surfaceType=0;
			//this._depthFormat=0;
			//this._mipMap=false;
			(mipMap===void 0)&& (mipMap=false);
			(surfaceFormat===void 0)&& (surfaceFormat=0x1908);
			(surfaceType===void 0)&& (surfaceType=0x1401);
			(depthFormat===void 0)&& (depthFormat=0x81A5);
			WebGLRenderTarget.__super.call(this);
			this._w=width;
			this._h=height;
			this._mipMap=mipMap;
			this._surfaceFormat=surfaceFormat;
			this._surfaceType=surfaceType;
			this._depthFormat=depthFormat;
			this.lock=true;
		}

		__class(WebGLRenderTarget,'laya.webgl.resource.WebGLRenderTarget',_super);
		var __proto=WebGLRenderTarget.prototype;
		__proto.recreateResource=function(){
			var gl=WebGL.mainContext;
			this._frameBuffer || (this._frameBuffer=gl.createFramebuffer());
			this._source || (this._source=gl.createTexture());
			gl.bindTexture(0x0DE1,this._source);
			gl.texImage2D(0x0DE1,0,0x1908,this._w,this._h,0,this._surfaceFormat,this._surfaceType,null);
			gl.texParameteri(0x0DE1,0x2801,0x2601);
			gl.texParameteri(0x0DE1,0x2802,0x812F);
			gl.texParameteri(0x0DE1,0x2803,0x812F);
			var isPot=Arith.isPOT(this._w,this._h);
			if (this._mipMap && isPot){
				gl.texParameteri(0x0DE1,0x2800,0x2703);
				gl.generateMipmap(0x0DE1);
			}
			else{
				gl.texParameteri(0x0DE1,0x2800,0x2601);
				(this._mipMap)&& (this._mipMap=false);
			}
			gl.bindFramebuffer(0x8D40,this._frameBuffer);
			gl.framebufferTexture2D(0x8D40,0x8CE0,0x0DE1,this._source,0);
			if (this._depthFormat){
				this._depthBuffer || (this._depthBuffer=gl.createRenderbuffer());
				gl.bindRenderbuffer(0x8D41,this._depthBuffer);
				gl.renderbufferStorage(0x8D41,this._depthFormat,this._w,this._h);
				gl.framebufferRenderbuffer(0x8D40,0x8D00,0x8D41,this._depthBuffer);
			}
			gl.bindFramebuffer(0x8D40,null);
			gl.bindTexture(0x0DE1,null);
			gl.bindRenderbuffer(0x8D41,null);
			this.memorySize=this._w *this._h *4;
			laya.resource.Resource.prototype.recreateResource.call(this);
		}

		__proto.detoryResource=function(){
			if (this._frameBuffer){
				WebGL.mainContext.deleteTexture(this._source);
				WebGL.mainContext.deleteFramebuffer(this._frameBuffer);
				WebGL.mainContext.deleteRenderbuffer(this._depthBuffer);
				this._source=null;
				this._frameBuffer=null;
				this._depthBuffer=null;
				this.memorySize=0;
			}
		}

		__getset(0,__proto,'frameBuffer',function(){
			return this._frameBuffer;
		});

		__getset(0,__proto,'depthBuffer',function(){
			return this._depthBuffer;
		});

		return WebGLRenderTarget;
	})(Bitmap)


	/**
	*...
	*@author
	*/
	//class laya.webgl.resource.WebGLSubImage extends laya.resource.Bitmap
	var WebGLSubImage=(function(_super){
		function WebGLSubImage(canvas,offsetX,offsetY,width,height,atlasImage,src,createOwnSource){
			//this._ctx=null;
			//this.canvas=null;
			//this.repeat=false;
			//this.mipmap=false;
			//this.minFifter=0;
			//this.magFifter=0;
			//this.createOwnSource=false;
			//this.atlasImage=null;
			this.offsetX=0;
			this.offsetY=0;
			//this.src=null;
			(createOwnSource===void 0)&& (createOwnSource=false);
			WebGLSubImage.__super.call(this);
			this.repeat=true;
			this.mipmap=false;
			this.minFifter=-1;
			this.magFifter=-1;
			this.atlasImage=atlasImage;
			this.canvas=canvas;
			this._ctx=canvas.getContext('2d',undefined);
			this.createOwnSource=createOwnSource;
			this._w=width;
			this._h=height;
			this.offsetX=offsetX;
			this.offsetY=offsetY;
			this.src=src;
			this.activeResource();
		}

		__class(WebGLSubImage,'laya.webgl.resource.WebGLSubImage',_super);
		var __proto=WebGLSubImage.prototype;
		__proto.copyTo=function(dec){
			var d=dec;
			_super.prototype.copyTo.call(this,dec);
			d._ctx=this._ctx;
		}

		__proto.size=function(w,h){
			this._w=w;
			this._h=h;
			this._ctx && this._ctx.size(w,h);
			this.canvas && (this.canvas.height=h,this.canvas.width=w);
		}

		__proto.recreateResource=function(){
			this.size(this._w,this._h);
			this._ctx.drawImage(this.atlasImage,this.offsetX,this.offsetY,this._w,this._h,0,0,this._w,this._h);
			(this.createOwnSource)&& (this.createWebGlTexture());
			laya.resource.Resource.prototype.recreateResource.call(this);
		}

		__proto.createWebGlTexture=function(){
			var gl=WebGL.mainContext;
			if (!this.canvas){
				debugger;
				throw "create GLTextur err:no data:"+this.canvas;
			};
			var glTex=this._source=gl.createTexture();
			gl.bindTexture(0x0DE1,glTex);
			gl.texImage2D(0x0DE1,0,0x1908,0x1908,0x1401,this.canvas);
			var minFifter=this.minFifter;
			var magFifter=this.magFifter;
			var repeat=this.repeat ? 0x2901 :0x812F;
			var isPOT=Arith.isPOT(this.width,this.height);
			if (isPOT){
				if (this.mipmap)
					(minFifter!==-1)|| (minFifter=0x2703);
				else
				(minFifter!==-1)|| (minFifter=0x2601);
				(magFifter!==-1)|| (magFifter=0x2601);
				gl.texParameteri(0x0DE1,0x2800,magFifter);
				gl.texParameteri(0x0DE1,0x2801,minFifter);
				gl.texParameteri(0x0DE1,0x2802,repeat);
				gl.texParameteri(0x0DE1,0x2803,repeat);
				this.mipmap && gl.generateMipmap(0x0DE1);
				}else {
				(minFifter!==-1)|| (minFifter=0x2601);
				(magFifter!==-1)|| (magFifter=0x2601);
				gl.texParameteri(0x0DE1,0x2801,minFifter);
				gl.texParameteri(0x0DE1,0x2800,magFifter);
				gl.texParameteri(0x0DE1,0x2802,0x812F);
				gl.texParameteri(0x0DE1,0x2803,0x812F);
			}
			gl.bindTexture(0x0DE1,null);
			this.canvas=null;
			this.memorySize=this._w *this._h *4;
		}

		__proto.detoryResource=function(){
			if (this.createOwnSource && this._source){
				WebGL.mainContext.deleteTexture(this._source);
				this._source=null;
				this.memorySize=0;
			}
		}

		return WebGLSubImage;
	})(Bitmap)


	//class laya.webgl.shader.d2.value.TextSV extends laya.webgl.shader.d2.value.TextureSV
	var TextSV=(function(_super){
		function TextSV(){
			TextSV.__super.call(this,0x40);
			this.defines.add(0x40);
		}

		__class(TextSV,'laya.webgl.shader.d2.value.TextSV',_super);
		var __proto=TextSV.prototype;
		__proto.release=function(){
			TextSV.pool[TextSV._length++]=this;
			this.clear();
		}

		__proto.clear=function(){
			_super.prototype.clear.call(this);
		}

		TextSV.create=function(){
			if (TextSV._length)return TextSV.pool[--TextSV._length];
			else return new TextSV();
		}

		TextSV.pool=[];
		TextSV._length=0;
		return TextSV;
	})(TextureSV)


	/**
	*<code>Box</code> 类是一个控件容器类。
	*@author yung
	*/
	//class laya.ui.Box extends laya.ui.Component
	var Box=(function(_super){
		function Box(){Box.__super.call(this);;
		};

		__class(Box,'laya.ui.Box',_super);
		var __proto=Box.prototype;
		Laya.imps(__proto,{"laya.ui.IBox":true})
		/**@inheritDoc */
		__getset(0,__proto,'dataSource',_super.prototype._$get_dataSource,function(value){
			this._dataSource=value;
			for (var name in value){
				var comp=this.getChildByName(name);
				if (comp)comp.dataSource=value[name];
				else if (this.hasOwnProperty(name))this[name]=value[name];
			}
		});

		return Box;
	})(Component)


	/**
	*...
	*@author ww
	*/
	//class laya.editor.comonents.ColorPickerItem extends laya.ui.Component
	var ColorPickerItem=(function(_super){
		function ColorPickerItem(){
			this.tColor=null;
			ColorPickerItem.__super.call(this);
			this.mouseEnabled=true;
			this.inits();
		}

		__class(ColorPickerItem,'laya.editor.comonents.ColorPickerItem',_super);
		var __proto=ColorPickerItem.prototype;
		__proto.inits=function(){
			ColorPickerItem._picker=ColorPickerItem._picker||new ColorPickerPanel();
			this.on("click",this,this.onClick);
		}

		__proto.colorChanged=function(){
			this.tColor=ColorPickerItem._picker.picker.tColor;
			this.freshMe();
			this.event("ColorChanged",this);
		}

		__proto.colorCleared=function(){
			this.tColor=[0,0,0];
			this.freshMe();
			this.event("COLOR_CLEARED",this);
			this.close();
		}

		__proto.onClick=function(){
			console.log("ColorPickerItem onClick");
			this.open();
		}

		/**
		*打开颜色样本列表面板。
		*/
		__proto.open=function(){
			if(ColorPickerItem._picker.prePickerItem){
				ColorPickerItem._picker.prePickerItem.close();
			}
			if (ColorPickerItem.showed){
				this.close();
				return;
			}
			ColorPickerItem._picker.prePickerItem=this;
			ColorPickerItem.showed=true;
			var p=this.localToGlobal(new Point());
			var px=p.x+ColorPickerItem._picker.width <=Laya.stage.width ? p.x :Laya.stage.width-ColorPickerItem._picker.width;
			var py=p.y+this.height;
			py=py+ColorPickerItem._picker.height <=Laya.stage.height ? py :p.y-ColorPickerItem._picker.height;
			ColorPickerItem._picker.setColor(this.tColor);
			ColorPickerItem._picker.pos(px,py);
			ColorPickerItem._picker.on("ColorChanged",this,this.colorChanged);
			ColorPickerItem._picker.on("COLOR_CLEARED",this,this.colorCleared);
			Laya.stage.addChild(ColorPickerItem._picker);
			Laya.timer.once(10,this,this.addEvent);
		}

		__proto.addEvent=function(){
			Laya.stage.off("click",this,this.removeColorBox);
			Laya.stage.on("click",this,this.removeColorBox);
		}

		/**
		*关闭颜色样本列表面板。
		*/
		__proto.close=function(){
			Laya.stage.off("click",this,this.removeColorBox);
			ColorPickerItem._picker.removeSelf();
			ColorPickerItem._picker.off("ColorChanged",this,this.colorChanged);
			ColorPickerItem._picker.off("COLOR_CLEARED",this,this.colorCleared);
			ColorPickerItem.showed=false;
		}

		/**
		*舞台的 <code>Event.MOUSE_DOWN</code> 事件侦听处理函数。
		*/
		__proto.removeColorBox=function(e){
			if (DisControlTool.isInTree(ColorPickerItem._picker,e.target))return;
			this.close();
		}

		__proto.getColorStr=function(){
			if (!this.tColor)this.tColor=[0,0,0];
			return ColorTool.getRGBStr(this.tColor);
		}

		__proto.setColor=function(color){
			this.tColor=ColorTool.getRGBByRGBStr(color+"");
			this.freshMe();
		}

		__proto.freshMe=function(){
			var g;
			g=this.graphics;
			g.clear();
			g.drawRect(0,0,this.width,this.height,this.getColorStr());
		}

		__proto.changeSize=function(){
			_super.prototype.changeSize.call(this);
			this.freshMe();
		}

		ColorPickerItem.showed=false;
		ColorPickerItem._picker=null
		return ColorPickerItem;
	})(Component)


	/**拖动条
	*@author yung
	*/
	//class laya.editor.comonents.DragBar extends laya.ui.Component
	var DragBar=(function(_super){
		function DragBar(mouseType){
			this._map={"R":"WE","L":"WE","T":"NS","B":"NS","BL":"NESW","BR":"NWSE"};
			this._cursorType=null;
			this.isDraging=false;
			DragBar.__super.call(this);
			this._bitmap=new Image2();
			(mouseType===void 0)&& (mouseType="R");
			switch(mouseType){
				case "R":
					this._cursorType="e-resize";
					break ;
				case "T":
					this._cursorType="n-resize";
					break ;
				default :
					this._cursorType="auto";
				}
			this.on("mouseover",this,this.onRollOver);
			this.on("mouseout",this,this.onRollOut);
			this.mouseEnabled=true;
			Laya.stage.on("mouseout",this,this.onRollOut);
			this.on("dragstart",this,this.dragingBegin);
			this.on("dragend",this,this.dragingEnd);
		}

		__class(DragBar,'laya.editor.comonents.DragBar',_super);
		var __proto=DragBar.prototype;
		__proto.dragingBegin=function(e){
			console.log("draging begin");
			this.isDraging=true;
		}

		__proto.dragingEnd=function(e){
			console.log("dragingEnd");
			this.isDraging=false;
			CursorManager.setType("auto");
		}

		__proto.onStageMouseLeave=function(e){
			this.onRollOut();
		}

		__proto.onRollOut=function(e){
			if (this.isDraging)return;
			CursorManager.setType("auto");
		}

		__proto.onRollOver=function(e){
			CursorManager.setType(this._cursorType);
		}

		__getset(0,__proto,'cusorType',function(){
			return this._cursorType;
		});

		return DragBar;
	})(Component)


	/**
	*<p> <code>Label</code> 类用于创建显示对象以显示文本。</p>
	*
	*@example 以下示例代码，创建了一个 <code>Label</code> 实例。
	*<listing version="3.0">
	*package
	*{
		*import laya.ui.Label;
		*
		*public class Label_Example
		*{
			*public function Label_Example()
			*{
				*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
				*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
				*onInit();
				*}
			*
			*private function onInit():void
			*{
				*var label:Label=new Label();//创建一个 Label 类的实例对象 label 。
				*label.font="Arial";//设置 label 的字体。
				*label.bold=true;//设置 label 显示为粗体。
				*label.leading=4;//设置 label 的行间距。
				*label.wordWrap=true;//设置 label 自动换行。
				*label.padding="10,10,10,10";//设置 label 的边距。
				*label.color="#ff00ff";//设置 label 的颜色。
				*label.text="Hello everyone,我是一个可爱的文本！";//设置 label 的文本内容。
				*label.x=100;//设置 label 对象的属性 x 的值，用于控制 label 对象的显示位置。
				*label.y=100;//设置 label 对象的属性 y 的值，用于控制 label 对象的显示位置。
				*label.width=300;//设置 label 的宽度。
				*label.height=200;//设置 label 的高度。
				*Laya.stage.addChild(label);//将 label 添加到显示列表。
				*
				*var passwordLabel:Label=new Label("请原谅我，我不想被人看到我心里话。");//创建一个 Label 类的实例对象 passwordLabel 。
				*passwordLabel.asPassword=true;//设置 passwordLabel 的显示反式为密码显示。
				*passwordLabel.x=100;//设置 passwordLabel 对象的属性 x 的值，用于控制 passwordLabel 对象的显示位置。
				*passwordLabel.y=350;//设置 passwordLabel 对象的属性 y 的值，用于控制 passwordLabel 对象的显示位置。
				*passwordLabel.width=300;//设置 passwordLabel 的宽度。
				*passwordLabel.color="#000000";//设置 passwordLabel 的文本颜色。
				*passwordLabel.bgColor="#ccffff";//设置 passwordLabel 的背景颜色。
				*passwordLabel.fontSize=20;//设置 passwordLabel 的文本字体大小。
				*Laya.stage.addChild(passwordLabel);//将 passwordLabel 添加到显示列表。
				*}
			*
			*}
		*
		*}
	*</listing>
	*<listing version="3.0">
	*Laya.init(640,800);//设置游戏画布宽高
	*Laya.stage.bgColor="#efefef";//设置画布的背景颜色
	*onInit();
	*function onInit(){
		*var label=new laya.ui.Label();//创建一个 Label 类的实例对象 label 。
		*label.font="Arial";//设置 label 的字体。
		*label.bold=true;//设置 label 显示为粗体。
		*label.leading=4;//设置 label 的行间距。
		*label.wordWrap=true;//设置 label 自动换行。
		*label.padding="10,10,10,10";//设置 label 的边距。
		*label.color="#ff00ff";//设置 label 的颜色。
		*label.text="Hello everyone,我是一个可爱的文本！";//设置 label 的文本内容。
		*label.x=100;//设置 label 对象的属性 x 的值，用于控制 label 对象的显示位置。
		*label.y=100;//设置 label 对象的属性 y 的值，用于控制 label 对象的显示位置。
		*label.width=300;//设置 label 的宽度。
		*label.height=200;//设置 label 的高度。
		*Laya.stage.addChild(label);//将 label 添加到显示列表。
		*
		*var passwordLabel=new laya.ui.Label("请原谅我，我不想被人看到我心里话。");//创建一个 Label 类的实例对象 passwordLabel 。
		*passwordLabel.asPassword=true;//设置 passwordLabel 的显示反式为密码显示。
		*passwordLabel.x=100;//设置 passwordLabel 对象的属性 x 的值，用于控制 passwordLabel 对象的显示位置。
		*passwordLabel.y=350;//设置 passwordLabel 对象的属性 y 的值，用于控制 passwordLabel 对象的显示位置。
		*passwordLabel.width=300;//设置 passwordLabel 的宽度。
		*passwordLabel.color="#000000";//设置 passwordLabel 的文本颜色。
		*passwordLabel.bgColor="#ccffff";//设置 passwordLabel 的背景颜色。
		*passwordLabel.fontSize=20;//设置 passwordLabel 的文本字体大小。
		*Laya.stage.addChild(passwordLabel);//将 passwordLabel 添加到显示列表。
		*}
	*</listing>
	*<listing version="3.0">
	*import Label=laya.ui.Label;
	*class Label_Example {
		*constructor(){
			*Laya.init(640,800);//设置游戏画布宽高。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*this.onInit();
			*}
		*private onInit():void {
			*var label:Label=new Label();//创建一个 Label 类的实例对象 label 。
			*label.font="Arial";//设置 label 的字体。
			*label.bold=true;//设置 label 显示为粗体。
			*label.leading=4;//设置 label 的行间距。
			*label.wordWrap=true;//设置 label 自动换行。
			*label.padding="10,10,10,10";//设置 label 的边距。
			*label.color="#ff00ff";//设置 label 的颜色。
			*label.text="Hello everyone,我是一个可爱的文本！";//设置 label 的文本内容。
			*label.x=100;//设置 label 对象的属性 x 的值，用于控制 label 对象的显示位置。
			*label.y=100;//设置 label 对象的属性 y 的值，用于控制 label 对象的显示位置。
			*label.width=300;//设置 label 的宽度。
			*label.height=200;//设置 label 的高度。
			*Laya.stage.addChild(label);//将 label 添加到显示列表。
			*var passwordLabel:Label=new Label("请原谅我，我不想被人看到我心里话。");//创建一个 Label 类的实例对象 passwordLabel 。
			*passwordLabel.asPassword=true;//设置 passwordLabel 的显示反式为密码显示。
			*passwordLabel.x=100;//设置 passwordLabel 对象的属性 x 的值，用于控制 passwordLabel 对象的显示位置。
			*passwordLabel.y=350;//设置 passwordLabel 对象的属性 y 的值，用于控制 passwordLabel 对象的显示位置。
			*passwordLabel.width=300;//设置 passwordLabel 的宽度。
			*passwordLabel.color="#000000";//设置 passwordLabel 的文本颜色。
			*passwordLabel.bgColor="#ccffff";//设置 passwordLabel 的背景颜色。
			*passwordLabel.fontSize=20;//设置 passwordLabel 的文本字体大小。
			*Laya.stage.addChild(passwordLabel);//将 passwordLabel 添加到显示列表。
			*}
		*}
	*</listing>
	*@see laya.display.Text
	*@author yung
	*/
	//class laya.ui.Label extends laya.ui.Component
	var Label=(function(_super){
		function Label(text){
			this._tf=null;
			Label.__super.call(this);
			(text===void 0)&& (text="");
			Font.defaultColor=Styles.labelColor;
			this.text=text;
		}

		__class(Label,'laya.ui.Label',_super);
		var __proto=Label.prototype;
		/**@inheritDoc */
		__proto.destroy=function(destroyChild){
			(destroyChild===void 0)&& (destroyChild=true);
			_super.prototype.destroy.call(this,destroyChild);
			this._tf=null;
		}

		/**@inheritDoc */
		__proto.createChildren=function(){
			this.addChild(this._tf=new Text());
		}

		/**
		*@copy laya.display.Text#leading
		*@return
		*/
		__getset(0,__proto,'leading',function(){
			return this._tf.leading;
			},function(value){
			this._tf.leading=value;
		});

		/**
		*当前文本内容字符串。
		*
		*@see laya.display.Text.text
		*@return
		*/
		__getset(0,__proto,'text',function(){
			return this._tf.text;
			},function(value){
			if (this._tf.text !=value){
				this._tf.text=value;
				this.event("change");
			}
		});

		/**
		*@copy laya.display.Text#color
		*@return
		*/
		__getset(0,__proto,'color',function(){
			return this._tf.color;
			},function(value){
			this._tf.color=value;
		});

		/**
		*@copy laya.display.Text#strokeColor
		*@return
		*/
		__getset(0,__proto,'strokeColor',function(){
			return this._tf.strokeColor;
			},function(value){
			this._tf.strokeColor=value;
		});

		/**
		*@copy laya.display.Text#wordWrap
		*/
		/**
		*@copy laya.display.Text#wordWrap
		*/
		__getset(0,__proto,'wordWrap',function(){
			return this._tf.wordWrap;
			},function(value){
			this._tf.wordWrap=value;
		});

		/**
		*@copy laya.display.Text#font
		*/
		__getset(0,__proto,'font',function(){
			return this._tf.font;
			},function(value){
			this._tf.font=value;
		});

		/**
		*@copy laya.display.Text#italic
		*@return
		*/
		__getset(0,__proto,'italic',function(){
			return this._tf.italic;
			},function(value){
			this._tf.italic=value;
		});

		/**
		*@copy laya.display.Text#valign
		*@return
		*/
		__getset(0,__proto,'valign',function(){
			return this._tf.valign;
			},function(value){
			this._tf.valign=value;
		});

		/**
		*@copy laya.display.Text#align
		*@return
		*/
		__getset(0,__proto,'align',function(){
			return this._tf.align;
			},function(value){
			this._tf.align=value;
		});

		/**
		*@copy laya.display.Text#bold
		*@return
		*/
		__getset(0,__proto,'bold',function(){
			return this._tf.bold;
			},function(value){
			this._tf.bold=value;
		});

		/**
		*文本控件实体 <code>Text</code> 实例。
		*@return
		*/
		__getset(0,__proto,'textField',function(){
			return this._tf;
		});

		/**
		*@copy laya.display.Text#fontSize
		*@return
		*/
		__getset(0,__proto,'fontSize',function(){
			return this._tf.fontSize;
			},function(value){
			this._tf.fontSize=value;
		});

		/**
		*<p>边距信息</p>
		*<p>"上边距，右边距，下边距 , 左边距（边距以像素为单位）"</p>
		*@see laya.display.Text.padding
		*@return
		*/
		__getset(0,__proto,'padding',function(){
			return this._tf.padding.join(",");
			},function(value){
			this._tf.padding=UIUtils.fillArray(Styles.labelPadding,value,Number);
		});

		/**
		*@copy laya.display.Text#bgColor
		*@return
		*/
		__getset(0,__proto,'bgColor',function(){
			return this._tf.bgColor
			},function(value){
			this._tf.bgColor=value;
		});

		/**
		*@inheritDoc
		*@return
		*/
		__getset(0,__proto,'measureWidth',function(){
			return this._tf.width;
		});

		/**
		*@copy laya.display.Text#borderColor
		*@return
		*/
		__getset(0,__proto,'borderColor',function(){
			return this._tf.borderColor
			},function(value){
			this._tf.borderColor=value;
		});

		/**
		*@copy laya.display.Text#stroke
		*@return
		*/
		__getset(0,__proto,'stroke',function(){
			return this._tf.stroke;
			},function(value){
			this._tf.stroke=value;
		});

		/**
		*@copy laya.display.Text#asPassword
		*@return
		*/
		__getset(0,__proto,'asPassword',function(){
			return this._tf.asPassword;
			},function(value){
			this._tf.asPassword=value;
		});

		/**
		*@inheritDoc
		*@return
		*/
		__getset(0,__proto,'measureHeight',function(){
			return this._tf.height;
		});

		/**
		*@inheritDoc
		*/
		/**
		*@inheritDoc
		*@return
		*/
		__getset(0,__proto,'width',function(){
			if (this._width || this._tf.text)return _super.prototype._$get_width.call(this);
			return 0;
			},function(value){
			_super.prototype._$set_width.call(this,value);
			this._tf.width=value;
		});

		/**
		*@inheritDoc
		*/
		/**
		*@inheritDoc
		*/
		__getset(0,__proto,'height',function(){
			if (this._height || this._tf.text)return _super.prototype._$get_height.call(this);
			return 0;
			},function(value){
			_super.prototype._$set_height.call(this,value);
			this._tf.height=value;
		});

		/**@inheritDoc */
		__getset(0,__proto,'dataSource',_super.prototype._$get_dataSource,function(value){
			this._dataSource=value;
			if ((typeof value=='number')|| (typeof value=='string'))this.text=value+"";
			else _super.prototype._$set_dataSource.call(this,value);
		});

		return Label;
	})(Component)


	/**鼠标提示管理类*/
	//class laya.editor.core.managers.TipManager extends laya.ui.Component
	var TipManager=(function(_super){
		function TipManager(){
			this._tipBox=null;
			this._tipText=null;
			this._defaultTipHandler=null;
			TipManager.__super.call(this);
			this._tipBox=new Component();
			this._tipBox.addChild(this._tipText=new TextField());
			this._tipText.x=this._tipText.y=5;
			this._tipText.color="#ffffff";
			this._defaultTipHandler=this.showDefaultTip;
			Laya.stage.on("showtip",this,this.onStageShowTip);
			Laya.stage.on("hidetip",this,this.onStageHideTip);
		}

		__class(TipManager,'laya.editor.core.managers.TipManager',_super);
		var __proto=TipManager.prototype;
		__proto.onAddedToStage=function(e){}
		//removeEventListener(Event.ADDED_TO_STAGE,this,onAddedToStage);
		__proto.onStageHideTip=function(e){
			Laya.timer.clear(this,this.showTip);
			this.closeAll();
			this.removeSelf();
		}

		__proto.onStageShowTip=function(data){
			Laya.timer.once(LayaConfig.tipDelay,this,this.showTip,[data],true);
		}

		__proto.showTip=function(tip){
			if ((typeof tip=='string')){
				var text=String(tip);
				if (Boolean(text)){
					this._defaultTipHandler(text);
				}
				}else if ((tip instanceof laya.utils.Handler )){
				(tip).run();
				}else if ((typeof tip=='function')){
				(tip).apply();
			}
			if (LayaConfig.tipFollowMove){
				Laya.stage.on("mousemove",this,this.onStageMouseMove);
				Laya.stage.on("mousedown",this,this.onStageMouseDown);
			}
			this.onStageMouseMove(null);
		}

		__proto.onStageMouseDown=function(e){
			this.closeAll();
		}

		__proto.onStageMouseMove=function(e){
			DisTools.showToStage(this,TipManager.offsetX,TipManager.offsetY);
		}

		/**关闭所有鼠标提示*/
		__proto.closeAll=function(){
			Laya.timer.clear(this,this.showTip);
			Laya.stage.off("mousemove",this,this.onStageMouseMove);
			Laya.stage.off("mousedown",this,this.onStageMouseDown);
			this.removeChildren();
			HtmlLayerManager.closeTip();
		}

		__proto.showDisTip=function(tip){
			this.addChild(tip);
			DisControlTool.showToStage(this);
			Laya.stage.addChild(this);
			HtmlLayerManager.openTip();
		}

		__proto.showDefaultTip=function(text){
			this._tipText.text=text;
			var g=this._tipBox.graphics;
			g.clear();
			g.drawRect(0,0,this._tipText.width+10,this._tipText.height+10,"#111111");
			this.addChild(this._tipBox);
			DisTools.showToStage(this);
			Laya.stage.addChild(this);
			HtmlLayerManager.openTip();
		}

		/**默认鼠标提示函数*/
		__getset(0,__proto,'defaultTipHandler',function(){
			return this._defaultTipHandler;
			},function(value){
			this._defaultTipHandler=value;
		});

		TipManager.offsetX=10;
		TipManager.offsetY=15;
		return TipManager;
	})(Component)


	/**
	*
	*@author ww
	*@version 1.0
	*
	*@created 2016-1-11 下午3:02:05
	*/
	//class laya.editor.core.RuleGrid extends laya.ui.Component
	var RuleGrid=(function(_super){
		function RuleGrid(){
			this.type=0;
			RuleGrid.__super.call(this);
			this.cacheAsBitmap=true;
		}

		__class(RuleGrid,'laya.editor.core.RuleGrid',_super);
		var __proto=RuleGrid.prototype;
		__proto.clearMe=function(){
			var g;
			g=this.graphics;
			g.clear();
		}

		__proto.renderMe=function(totalLen,startNum,endNum){
			var numLen=NaN;
			numLen=endNum-startNum;
			var g;
			g=this.graphics;
			g.clear();
			var rate=NaN;
			rate=totalLen/numLen;
			var tNum=NaN;
			var dNum=NaN;
			dNum=this.getMinDlen(rate);
			tNum=Math.ceil(startNum/dNum)*dNum;
			var numI=NaN;
			numI=tNum/dNum;
			var tValue=NaN;
			var lineWidth=1;
			var isFirst=true;
			if(this.type==0){
				this.size(totalLen,50);
				for(tNum=tNum;tNum<endNum;tNum+=dNum){
					tValue=(tNum-startNum)*rate;
					if(numI%10==0){
						lineWidth=3;
						if(isFirst){
							isFirst=false;
							}else{
							g.fillText(tNum+"",tValue,12,RuleGrid.defaultFont,"#696969","center");
						}
					}else
					if(numI%5==0){
						lineWidth=2;
						if(isFirst){
							isFirst=false;
						}
						}else{
						lineWidth=1;
					}
					g.drawLine(tValue,0,tValue,lineWidth*4,"#696969",1);
					numI++;
				}
				}else{
				this.size(50,totalLen);
				for(tNum=tNum;tNum<endNum;tNum+=dNum){
					tValue=(tNum-startNum)*rate;
					if(numI%10==0){
						lineWidth=3;
						if(isFirst){
							isFirst=false;
							}else{
							g.fillText(tNum+"",15,tValue-5,RuleGrid.defaultFont,"#696969","left");
						}
					}else
					if(numI%5==0){
						lineWidth=2;
						if(isFirst){
							isFirst=false;
						}
						}else{
						lineWidth=1;
					}
					g.drawLine(0,tValue,lineWidth*4,tValue,"#696969",1);
					numI++;
				}
			}
		}

		__proto.fillTextH=function(g,tNum,tValue){
			g.fillText(tNum+"",tValue,10,RuleGrid.defaultFont,"#00ffff",null);
		}

		__proto.fillTextV=function(g,tNum,tValue){
			g.fillText(tNum+"",10,tValue,RuleGrid.defaultFont,"#00ffff",null);
		}

		__proto.drawLineH=function(g,tValue,lineWidth){
			g.drawLine(tValue,0,tValue,lineWidth*3,"#ff0000",lineWidth);
		}

		__proto.drawLineV=function(g,tValue,lineWidth){
			g.drawLine(0,tValue,lineWidth*3,tValue,"#ff0000",lineWidth);
		}

		__proto.getMinDlen=function(rate){
			var i=0;
			i=1;
			while(i*rate<5){
				i++;
			}
			return i;
		}

		RuleGrid.Vertic=1;
		RuleGrid.Horizon=0;
		RuleGrid.LineColor="#696969";
		RuleGrid.TextColor="#696969";
		RuleGrid.defaultFont="10px Arial";
		return RuleGrid;
	})(Component)


	/**
	*<code>Button</code> 组件用来表示常用的多态按钮。 <code>Button</code> 组件可显示文本标签、图标或同时显示两者。
	*
	*<p>可以是单态，两态和三态，默认三态(up,over,down)。</p>
	*
	*@example 以下示例代码，创建了一个 <code>Button</code> 实例。
	*<listing version="3.0">
	*package
	*{
		*import laya.ui.Button;
		*import laya.utils.Handler;
		*
		*public class Button_Example
		*{
			*public function Button_Example()
			*{
				*Laya.init(640,800);//设置游戏画布宽高。
				*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
				*Laya.loader.load("resource/ui/button.png",Handler.create(this,onLoadComplete));//加载资源。
				*}
			*private function onLoadComplete():void
			*{
				*trace("资源加载完成！");
				*var button:Button=new Button("resource/ui/button.png","label");//创建一个 Button 类的实例对象 button ,并传入它的皮肤。
				*button.x=100;//设置 button 对象的属性 x 的值，用于控制 button 对象的显示位置。
				*button.y=100;//设置 button 对象的属性 y 的值，用于控制 button 对象的显示位置。
				*button.clickHandler=new Handler(this,onClickButton,[button]);//设置 button 的点击事件处理器。
				*Laya.stage.addChild(button);//将此 button 对象添加到显示列表。
				*}
			*
			*private function onClickButton(button:Button):void
			*{
				*trace("按钮button被点击了！");
				*}
			*}
		*}
	*</listing>
	*<listing version="3.0">
	*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
	*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
	*Laya.loader.load("resource/ui/button.png",laya.utils.Handler.create(this,loadComplete));//加载资源
	*function loadComplete()
	*{
		*console.log("资源加载完成！");
		*var button=new laya.ui.Button("resource/ui/button.png","label");//创建一个 Button 类的实例对象 button ,传入它的皮肤skin和标签label。
		*button.x=100;//设置 button 对象的属性 x 的值，用于控制 button 对象的显示位置。
		*button.y=100;//设置 button 对象的属性 y 的值，用于控制 button 对象的显示位置。
		*button.clickHandler=laya.utils.Handler.create(this,onClickButton,[button],false);//设置 button 的点击事件处理函数。
		*Laya.stage.addChild(button);//将此 button 对象添加到显示列表。
		*}
	*function onClickButton(button)
	*{
		*console.log("按钮被点击了。",button);
		*}
	*</listing>
	*<listing version="3.0">
	*import Button=laya.ui.Button;
	*import Handler=laya.utils.Handler;
	*class Button_Example{
		*constructor()
		*{
			*Laya.init(640,800);
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*Laya.loader.load("resource/ui/button.png",laya.utils.Handler.create(this,this.onLoadComplete));//加载资源。
			*}
		*private onLoadComplete()
		*{
			*var button:Button=new Button("resource/ui/button.png","label");//创建一个 Button 类的实例对象 button ,并传入它的皮肤。
			*button.x=100;//设置 button 对象的属性 x 的值，用于控制 button 对象的显示位置。
			*button.y=100;//设置 button 对象的属性 y 的值，用于控制 button 对象的显示位置。
			*button.clickHandler=new Handler(this,this.onClickButton,[button]);//设置 button 的点击事件处理器。
			*Laya.stage.addChild(button);//将此 button 对象添加到显示列表。
			*}
		*private onClickButton(button:Button):void
		*{
			*console.log("按钮button被点击了！")
			*}
		*}
	*</listing>
	*
	*@author yung
	*/
	//class laya.ui.Button extends laya.ui.Component
	var Button=(function(_super){
		function Button(skin,label){
			this.toggle=false;
			this._bitmap=null;
			this._text=null;
			this._strokeColors=null;
			this._state=0;
			this._selected=false;
			this._skin=null;
			this._autoSize=true;
			this._sources=null;
			this._clickHandler=null;
			Button.__super.call(this);
			this._labelColors=Styles.buttonLabelColors;
			this._stateNum=Styles.buttonStateNum;
			(label===void 0)&& (label="");
			this.skin=skin;
			this.label=label;
		}

		__class(Button,'laya.ui.Button',_super);
		var __proto=Button.prototype;
		Laya.imps(__proto,{"laya.ui.ISelect":true})
		/**@inheritDoc */
		__proto.destroy=function(destroyChild){
			(destroyChild===void 0)&& (destroyChild=true);
			_super.prototype.destroy.call(this,destroyChild);
			this._bitmap && this._bitmap.destroy();
			this._text && this._text.destroy(destroyChild);
			this._sources && (this._sources.length=0);
			this._bitmap=null;
			this._text=null;
			this._clickHandler=null;
			this._labelColors=this._sources=this._strokeColors=null;
		}

		/**@inheritDoc */
		__proto.createChildren=function(){
			this.graphics=this._bitmap=new AutoBitmap();
			this._text=new Text();
			this._text.align="center";
			this._text.valign="middle";
		}

		/**@inheritDoc */
		__proto.initialize=function(){
			this.on("mouseover",this,this.onMouse);
			this.on("mouseout",this,this.onMouse);
			this.on("mousedown",this,this.onMouse);
			this.on("mouseup",this,this.onMouse);
			this.on("click",this,this.onMouse);
		}

		/**
		*对象的 <code>Event.MOUSE_OVER、Event.MOUSE_OUT、Event.MOUSE_DOWN、Event.MOUSE_UP、Event.CLICK</code> 事件侦听处理函数。
		*
		*@param e
		*/
		__proto.onMouse=function(e){
			if ((this.toggle===false && this._selected)|| this.disabled)return;
			if (e.type==="click"){
				this.toggle && (this.selected=!this._selected);
				this._clickHandler && this._clickHandler.run();
				return;
			}
			!this._selected && (this.state=Button.stateMap[e.type]);
		}

		/**
		*@private
		*对象的资源切片发生改变。
		*/
		__proto.changeClips=function(){
			var img=Loader.getRes(this._skin);
			if (!img){
				console.log("lose skin",this._skin);
				return;
			}
			this._sources || (this._sources=[]);
			this._sources.length=0;
			var width=img.width;
			var height=img.height / this._stateNum;
			for (var i=0;i < this._stateNum;i++){
				this._sources.push(Texture.create(img,0,height *i,width,height));
			}
			if (this._autoSize){
				this._bitmap.width=this._text.width=this._width || width;
				this._bitmap.height=this._text.height=this._height || height;
				}else {
				this._text.x=width;
			}
		}

		/**
		*@private
		*改变对象的状态。
		*/
		__proto.changeState=function(){
			this.runCallLater(this.changeClips);
			var index=this._state < this._stateNum ? this._state :this._stateNum-1;
			this._sources && (this._bitmap.source=this._sources[index]);
			if (this.label){
				this._text.color=this._labelColors[index];
				if (this._strokeColors)this._text.strokeColor=this._strokeColors[index];
			}
		}

		/**
		*<p>描边颜色，以字符串表示。</p>
		*默认值为 "#000000"（黑色）;
		*@see laya.display.Text.strokeColor()
		*@return
		*/
		__getset(0,__proto,'labelStrokeColor',function(){
			return this._text.strokeColor;
			},function(value){
			this._text.strokeColor=value
		});

		/**
		*<p>对象的皮肤资源地址。</p>
		*支持单态，两态和三态，用 <code>stateNum</code> 属性设置
		*
		*<p>对象的皮肤地址，以字符串表示。</p>
		*
		*@see #stateNum
		*@return
		*/
		__getset(0,__proto,'skin',function(){
			return this._skin;
			},function(value){
			if (this._skin !=value){
				this._skin=value;
				this.callLater(this.changeClips);
				this.callLater(this.changeState);
			}
		});

		/**
		*对象的状态值。
		*
		*@see #stateMap
		*/
		__getset(0,__proto,'state',function(){
			return this._state;
			},function(value){
			if (this._state !=value){
				this._state=value;
				this.callLater(this.changeState);
			}
		});

		/**
		*按钮的文本内容。
		*@return
		*/
		__getset(0,__proto,'label',function(){
			return this._text.text;
			},function(value){
			if (this._text.text !=value){
				value && !this._text.displayInStage && this.addChild(this._text);
				this._text.text=value;
				this.callLater(this.changeState);
			}
		});

		/**
		*<p>指定对象的状态值，以数字表示。</p>
		*<p>默认值为3。此值决定皮肤资源图片的切割方式。</p>
		*<p><b>取值：</b>
		*<li>1：单态。图片不做切割，按钮的皮肤状态只有一种。</li>
		*<li>2：两态。图片将以竖直方向被等比切割为2部分，从上向下，依次为
		*弹起状态皮肤、
		*按下和经过及选中状态皮肤。</li>
		*<li>3：三态。图片将以竖直方向被等比切割为2部分，从上向下，依次为
		*弹起状态皮肤、
		*经过状态皮肤、
		*按下和选中状态皮肤</li>
		*</p>
		*@return
		*/
		__getset(0,__proto,'stateNum',function(){
			return this._stateNum;
			},function(value){
			if (this._stateNum !=value){
				this._stateNum=value < 1 ? 1 :value > 3 ? 3 :value;
				this.callLater(this.changeClips);
			}
		});

		/**
		*表示按钮各个状态下的描边颜色。
		*<p><b>格式:</b> "upColor,overColor,downColor,disableColor"。</p>
		*@return
		*/
		__getset(0,__proto,'strokeColors',function(){
			return this._strokeColors?this._strokeColors.join(","):"";
			},function(value){
			this._strokeColors=UIUtils.fillArray(Styles.buttonLabelColors,value,String);
			this.callLater(this.changeState);
		});

		/**
		*<p>描边宽度（以像素为单位）。</p>
		*默认值0，表示不描边。
		*@see laya.display.Text.stroke()
		*@return
		*/
		__getset(0,__proto,'labelStroke',function(){
			return this._text.stroke;
			},function(value){
			this._text.stroke=value
		});

		/**
		*@inheritDoc
		*@return
		*/
		__getset(0,__proto,'measureHeight',function(){
			this.runCallLater(this.changeClips);
			return this._bitmap.height;
		});

		/**
		*@inheritDoc
		*/
		__getset(0,__proto,'measureWidth',function(){
			this.runCallLater(this.changeClips);
			if (this._autoSize)return this._bitmap.width;
			this.runCallLater(this.changeState);
			return this._bitmap.width+this._text.width;
		});

		/**
		*表示按钮的选中状态。
		*
		*<p>如果值为true，表示该对象处于选中状态。否则该对象处于未选中状态。</p>
		*@return
		*/
		__getset(0,__proto,'selected',function(){
			return this._selected;
			},function(value){
			if (this._selected !=value){
				this._selected=value;
				this.state=this._selected ? 2 :0;
				this.event("change");
			}
		});

		/**
		*表示按钮各个状态下的文本颜色。
		*
		*<p><b>格式:</b> "upColor,overColor,downColor,disableColor"。</p>
		*@return
		*/
		__getset(0,__proto,'labelColors',function(){
			return this._labelColors.join(",");
			},function(value){
			this._labelColors=UIUtils.fillArray(Styles.buttonLabelColors,value,String);
			this.callLater(this.changeState);
		});

		/**
		*表示按钮文本标签的边距。
		*
		*<p><b>格式：</b>"上边距,右边距,下边距,左边距"。</p>
		*@return
		*/
		__getset(0,__proto,'labelPadding',function(){
			return this._text.padding.join(",");
			},function(value){
			this._text.padding=UIUtils.fillArray(Styles.labelPadding,value,Number);
		});

		/**
		*表示按钮文本标签的字体大小。
		*
		*@see laya.display.Text.fontSize()
		*@return
		*/
		__getset(0,__proto,'labelSize',function(){
			return this._text.fontSize;
			},function(value){
			this._text.fontSize=value
		});

		/**
		*表示按钮文本标签是否为粗体字。
		*
		*@see laya.display.Text.bold()
		*@return
		*/
		__getset(0,__proto,'labelBold',function(){
			return this._text.bold;
			},function(value){
			this._text.bold=value;
		});

		/**标签对齐模式，默认为居中对齐*/
		__getset(0,__proto,'labelAlign',function(){
			return this._text.align;
			},function(value){
			this._text.align=value;
		});

		/**
		*表示按钮文本标签的字体名称，以字符串形式表示。
		*
		*@see laya.display.Text.font()
		*@return
		*/
		__getset(0,__proto,'labelFont',function(){
			return this._text.font;
			},function(value){
			this._text.font=value;
		});

		/**
		*对象的点击事件处理器函数（无默认参数）。
		*@return
		*/
		__getset(0,__proto,'clickHandler',function(){
			return this._clickHandler;
			},function(value){
			this._clickHandler=value;
		});

		/**
		*按钮文本标签 <code>Text</code> 控件。
		*@return
		*/
		__getset(0,__proto,'text',function(){
			return this._text;
		});

		/**
		*<p>当前实例的位图 <code>AutoImage</code> 实例的有效缩放网格数据。</p>
		*<p>数据格式："上边距,右边距,下边距,左边距,是否重复填充(值为0：不重复填充，1：重复填充)"，以逗号分隔。
		*<ul><li>例如："4,4,4,4,1"</li></ul></p>
		*@see laya.ui.AutoBitmap.sizeGrid
		*/
		__getset(0,__proto,'sizeGrid',function(){
			if (this._bitmap.sizeGrid)return this._bitmap.sizeGrid.join(",");
			return null;
			},function(value){
			this._bitmap.sizeGrid=UIUtils.fillArray(Styles.defaultSizeGrid,value,Number);
		});

		/**@inheritDoc */
		__getset(0,__proto,'width',_super.prototype._$get_width,function(value){
			_super.prototype._$set_width.call(this,value);
			if (this._autoSize){
				this._bitmap.width=value;
				this._text.width=value;
			}
		});

		/**@inheritDoc */
		__getset(0,__proto,'height',_super.prototype._$get_height,function(value){
			_super.prototype._$set_height.call(this,value);
			if (this._autoSize){
				this._bitmap.height=value;
				this._text.height=value;
			}
		});

		/**@inheritDoc */
		__getset(0,__proto,'dataSource',_super.prototype._$get_dataSource,function(value){
			this._dataSource=value;
			if ((typeof value=='number')|| (typeof value=='string'))this.label=value+"";
			else _super.prototype._$set_dataSource.call(this,value);
		});

		__static(Button,
		['stateMap',function(){return this.stateMap={"mouseup":0,"mouseover":1,"mousedown":2,"mouseout":0};}
		]);
		return Button;
	})(Component)


	/**
	*<p> <code>Clip</code> 类是位图切片动画。</p>
	*<p> <code>Clip</code> 可将一张图片，按横向分割数量 <code>clipX</code> 、竖向分割数量 <code>clipY</code> ，
	*或横向分割每个切片的宽度 <code>clipWidth</code> 、竖向分割每个切片的高度 <code>clipHeight</code> ，
	*从左向右，从上到下，分割组合为一个切片动画。</p>
	*
	*@example 以下示例代码，创建了一个 <code>Clip</code> 实例。
	*<listing version="3.0">
	*package
	*{
		*import laya.ui.Clip;
		*
		*public class Clip_Example
		*{
			*private var clip:Clip;
			*
			*public function Clip_Example()
			*{
				*Laya.init(640,800);//设置游戏画布宽高。
				*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
				*onInit();
				*}
			*
			*private function onInit():void
			*{
				*clip=new Clip("resource/ui/clip_num.png",10,1);//创建一个 Clip 类的实例对象 clip ,传入它的皮肤skin和横向分割数量、竖向分割数量。
				*clip.autoPlay=true;//设置 clip 动画自动播放。
				*clip.interval=100;//设置 clip 动画的播放时间间隔。
				*clip.x=100;//设置 clip 对象的属性 x 的值，用于控制 clip 对象的显示位置。
				*clip.y=100;//设置 clip 对象的属性 y 的值，用于控制 clip 对象的显示位置。
				*clip.on(Event.CLICK,this,onClick);//给 clip 添加点击事件函数侦听。
				*Laya.stage.addChild(clip);//将此 clip 对象添加到显示列表。
				*}
			*
			*private function onClick():void
			*{
				*trace("clip 的点击事件侦听处理函数。clip.total="+clip.total);
				*if (clip.isPlaying==true)
				*{
					*clip.stop();//停止动画。
					*}else {
					*clip.play();//播放动画。
					*}
				*}
			*}
		*}
	*</listing>
	*<listing version="3.0">
	*Laya.init(640,800);//设置游戏画布宽高
	*Laya.stage.bgColor="#efefef";//设置画布的背景颜色
	*var clip;
	*Laya.loader.load("resource/ui/clip_num.png",laya.utils.Handler.create(this,loadComplete));//加载资源
	*
	*function loadComplete(){
		*console.log("资源加载完成！");
		*clip=new laya.ui.Clip("resource/ui/clip_num.png",10,1);//创建一个 Clip 类的实例对象 clip ,传入它的皮肤skin和横向分割数量、竖向分割数量。
		*clip.autoPlay=true;//设置 clip 动画自动播放。
		*clip.interval=100;//设置 clip 动画的播放时间间隔。
		*clip.x=100;//设置 clip 对象的属性 x 的值，用于控制 clip 对象的显示位置。
		*clip.y=100;//设置 clip 对象的属性 y 的值，用于控制 clip 对象的显示位置。
		*clip.on(Event.CLICK,this,onClick);//给 clip 添加点击事件函数侦听。
		*Laya.stage.addChild(clip);//将此 clip 对象添加到显示列表。
		*}
	*function onClick()
	*{
		*console.log("clip 的点击事件侦听处理函数。");
		*if(clip.isPlaying==true)
		*{
			*clip.stop();
			*}else {
			*clip.play();
			*}
		*}
	*</listing>
	*<listing version="3.0">
	*import Clip=laya.ui.Clip;
	*import Handler=laya.utils.Handler;
	*class Clip_Example {
		*private clip:Clip;
		*constructor(){
			*Laya.init(640,800);//设置游戏画布宽高。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*this.onInit();
			*}
		*
		*private onInit():void {
			*this.clip=new Clip("resource/ui/clip_num.png",10,1);//创建一个 Clip 类的实例对象 clip ,传入它的皮肤skin和横向分割数量、竖向分割数量。
			*this.clip.autoPlay=true;//设置 clip 动画自动播放。
			*this.clip.interval=100;//设置 clip 动画的播放时间间隔。
			*this.clip.x=100;//设置 clip 对象的属性 x 的值，用于控制 clip 对象的显示位置。
			*this.clip.y=100;//设置 clip 对象的属性 y 的值，用于控制 clip 对象的显示位置。
			*this.clip.on(laya.events.Event.CLICK,this,this.onClick);//给 clip 添加点击事件函数侦听。
			*Laya.stage.addChild(this.clip);//将此 clip 对象添加到显示列表。
			*}
		*private onClick():void {
			*console.log("clip 的点击事件侦听处理函数。clip.total="+this.clip.total);
			*if (this.clip.isPlaying==true){
				*this.clip.stop();//停止动画。
				*}else {
				*this.clip.play();//播放动画。
				*}
			*}
		*}
	*
	*</listing>
	*@author yung
	*/
	//class laya.ui.Clip extends laya.ui.Component
	var Clip=(function(_super){
		function Clip(url,clipX,clipY){
			this._sources=null;
			this._bitmap=null;
			this._skin=null;
			this._clipX=1;
			this._clipY=1;
			this._clipWidth=0;
			this._clipHeight=0;
			this._autoPlay=false;
			this._interval=50;
			this._complete=null;
			this._isPlaying=false;
			this._index=0;
			Clip.__super.call(this);
			(clipX===void 0)&& (clipX=1);
			(clipY===void 0)&& (clipY=1);
			this._clipX=clipX;
			this._clipY=clipY;
			this.skin=url;
		}

		__class(Clip,'laya.ui.Clip',_super);
		var __proto=Clip.prototype;
		/**
		*
		*@inheritDoc
		*/
		__proto.destroy=function(clearFromCache){
			(clearFromCache===void 0)&& (clearFromCache=false);
			_super.prototype.destroy.call(this,true);
			this._bitmap && this._bitmap.destroy();
			this._bitmap=null;
			this._sources=null;
		}

		/**
		*销毁对象并释放加载的皮肤资源。
		*/
		__proto.dispose=function(){
			this.destroy(true);
			Laya.loader.clearRes(this._skin);
		}

		/**@inheritDoc */
		__proto.createChildren=function(){
			this.graphics=this._bitmap=new AutoBitmap();
		}

		/**@inheritDoc */
		__proto.initialize=function(){
			this.on("display",this,this._onDisplay);
			this.on("undisplay",this,this._onDisplay);
		}

		/**
		*@private
		*
		*@param e
		*/
		__proto._onDisplay=function(e){
			if (this._isPlaying){
				if (this._displayInStage)this.play();
				else this.stop();
				}else if (this._autoPlay && this._displayInStage){
				this.play();
			}
		}

		/**
		*@private
		*改变切片的资源、切片的大小。
		*/
		__proto.changeClip=function(){
			var img=Loader.getRes(this._skin);
			if (img){
				this.loadComplete(this._skin,img);
				}else {
				Laya.loader.load(this._skin,Handler.create(this,this.loadComplete,[this._skin]));
			}
		}

		/**
		*@private
		*加载切片图片资源完成函数。
		*@param url 资源地址
		*@param img 纹理
		*/
		__proto.loadComplete=function(url,img){
			if (url===this._skin && img){
				this._clipWidth || (this._clipWidth=Math.ceil(img.width / this._clipX));
				this._clipHeight || (this._clipHeight=Math.ceil(img.height / this._clipY));
				this._sources || (this._sources=[]);
				this._sources.length=0;
				for (var i=0;i < this._clipY;i++){
					for (var j=0;j < this._clipX;j++){
						this._sources.push(Texture.create(img,this._clipWidth *j,this._clipHeight *i,this._clipWidth,this._clipHeight));
					}
				}
				this.index=this._index;
				this.event("loaded");
			}
		}

		/**
		*播放动画。
		*/
		__proto.play=function(){
			this._isPlaying=true;
			this._index=0;
			Laya.timer.loop(this.interval,this,this._loop,null,true);
		}

		/**
		*@private
		*/
		__proto._loop=function(){
			if (this._style.visible){
				this.index=this._index,this._index++;
				this._index >=this._sources.length && (this._index=0);
			}
		}

		/**
		*停止动画。
		*/
		__proto.stop=function(){
			this._isPlaying=false;
			Laya.timer.clear(this,this._loop);
		}

		/**
		*表示是否自动播放动画，若自动播放值为true,否则值为false;
		*<p>可控制切片动画的播放、停止。</p>
		*/
		__getset(0,__proto,'autoPlay',function(){
			return this._autoPlay;
			},function(value){
			if (this._autoPlay !=value){
				this._autoPlay=value;
				value ? this.play():this.stop();
			}
		});

		/**X轴（横向）切片数量。*/
		__getset(0,__proto,'clipX',function(){
			return this._clipX;
			},function(value){
			this._clipX=value;
			this.callLater(this.changeClip);
		});

		/**
		*@copy laya.ui.Image#skin
		*/
		__getset(0,__proto,'skin',function(){
			return this._skin;
			},function(value){
			this._skin=value;
			this.callLater(this.changeClip);
		});

		/**
		*源数据。
		*/
		__getset(0,__proto,'sources',function(){
			return this._sources;
			},function(value){
			this._sources=value;
			this.index=this._index;
			this.event("loaded");
		});

		/**Y轴(竖向)切片数量。*/
		__getset(0,__proto,'clipY',function(){
			return this._clipY;
			},function(value){
			this._clipY=value;
			this.callLater(this.changeClip);
		});

		/**
		*横向分割时每个切片的宽度，与 <code>clipX</code> 同时设置时优先级高于 <code>clipX</code> 。
		*/
		__getset(0,__proto,'clipWidth',function(){
			return this._clipWidth;
			},function(value){
			this._clipWidth=value;
			this.callLater(this.changeClip);
		});

		/**@inheritDoc */
		__getset(0,__proto,'measureWidth',function(){
			this.runCallLater(this.changeClip);
			return this._bitmap.width;
		});

		/**
		*竖向分割时每个切片的高度，与 <code>clipY</code> 同时设置时优先级高于 <code>clipY</code> 。
		*/
		__getset(0,__proto,'clipHeight',function(){
			return this._clipHeight;
			},function(value){
			this._clipHeight=value;
			this.callLater(this.changeClip);
		});

		/**
		*切片动画的总帧数。
		*/
		__getset(0,__proto,'total',function(){
			this.runCallLater(this.changeClip);
			return this._sources ? this._sources.length :0;
		});

		/**@inheritDoc */
		__getset(0,__proto,'width',_super.prototype._$get_width,function(value){
			_super.prototype._$set_width.call(this,value);
			this._bitmap.width=value;
		});

		/**@inheritDoc */
		__getset(0,__proto,'height',_super.prototype._$get_height,function(value){
			_super.prototype._$set_height.call(this,value);
			this._bitmap.height=value;
		});

		/**@inheritDoc */
		__getset(0,__proto,'measureHeight',function(){
			this.runCallLater(this.changeClip);
			return this._bitmap.height;
		});

		/**
		*<p>当前实例的位图 <code>AutoImage</code> 实例的有效缩放网格数据。</p>
		*<p>数据格式："上边距,右边距,下边距,左边距,是否重复填充(值为0：不重复填充，1：重复填充)"，以逗号分隔。
		*<ul><li>例如："4,4,4,4,1"</li></ul></p>
		*@see laya.ui.AutoBitmap.sizeGrid
		*/
		__getset(0,__proto,'sizeGrid',function(){
			if (this._bitmap.sizeGrid)return this._bitmap.sizeGrid.join(",");
			return null;
			},function(value){
			this._bitmap.sizeGrid=UIUtils.fillArray(Styles.defaultSizeGrid,value,Number);
		});

		/**
		*当前帧索引。
		*/
		__getset(0,__proto,'index',function(){
			return this._index;
			},function(value){
			this._index=value;
			this._bitmap&&this._sources && (this._bitmap.source=this._sources[value]);
			this.event("change");
		});

		/**
		*表示动画播放间隔时间(以毫秒为单位)。
		*/
		__getset(0,__proto,'interval',function(){
			return this._interval;
			},function(value){
			if (this._interval !=value){
				this._interval=value;
				if (this._isPlaying)this.play();
			}
		});

		/**
		*表示动画的当前播放状态。
		*如果动画正在播放中，则为true，否则为flash。
		*/
		__getset(0,__proto,'isPlaying',function(){
			return this._isPlaying;
			},function(value){
			this._isPlaying=value;
		});

		/**@inheritDoc */
		__getset(0,__proto,'dataSource',_super.prototype._$get_dataSource,function(value){
			this._dataSource=value;
			if (((typeof value=='number')&& Math.floor(value)==value)|| (typeof value=='string'))this.index=Laya.__parseInt(value);
			else _super.prototype._$set_dataSource.call(this,value);
		});

		/**
		*<code>AutoBitmap</code> 位图实例。
		*/
		__getset(0,__proto,'bitmap',function(){
			return this._bitmap;
		});

		return Clip;
	})(Component)


	/**
	*<code>ColorPicker</code> 组件将显示包含多个颜色样本的列表，用户可以从中选择颜色。
	*
	*@example 以下示例代码，创建了一个 <code>ColorPicker</code> 实例。
	*<listing version="3.0">
	*package
	*{
		*import laya.ui.ColorPicker;
		*import laya.utils.Handler;
		*
		*public class ColorPicker_Example
		*{
			*
			*public function ColorPicker_Example()
			*{
				*Laya.init(640,800);//设置游戏画布宽高。
				*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
				*Laya.loader.load("resource/ui/color.png",Handler.create(this,onLoadComplete));//加载资源。
				*}
			*
			*private function onLoadComplete():void
			*{
				*trace("资源加载完成！");
				*var colorPicket:ColorPicker=new ColorPicker();//创建一个 ColorPicker 类的实例对象 colorPicket 。
				*colorPicket.skin="resource/ui/color.png";//设置 colorPicket 的皮肤。
				*colorPicket.x=100;//设置 colorPicket 对象的属性 x 的值，用于控制 colorPicket 对象的显示位置。
				*colorPicket.y=100;//设置 colorPicket 对象的属性 y 的值，用于控制 colorPicket 对象的显示位置。
				*colorPicket.changeHandler=new Handler(this,onChangeColor,[colorPicket]);//设置 colorPicket 的颜色改变回调函数。
				*Laya.stage.addChild(colorPicket);//将此 colorPicket 对象添加到显示列表。
				*}
			*private function onChangeColor(colorPicket:ColorPicker):void
			*{
				*trace("当前选择的颜色： "+colorPicket.selectedColor);
				*}
			*
			*}
		*
		*}
	*</listing>
	*<listing version="3.0">
	*Laya.init(640,800);//设置游戏画布宽高
	*Laya.stage.bgColor="#efefef";//设置画布的背景颜色
	*Laya.loader.load("resource/ui/color.png",laya.utils.Handler.create(this,loadComplete));//加载资源
	*function loadComplete()
	*{
		*console.log("资源加载完成！");
		*var colorPicket=new laya.ui.ColorPicker();//创建一个 ColorPicker 类的实例对象 colorPicket 。
		*colorPicket.skin="resource/ui/color.png";//设置 colorPicket 的皮肤。
		*colorPicket.x=100;//设置 colorPicket 对象的属性 x 的值，用于控制 colorPicket 对象的显示位置。
		*colorPicket.y=100;//设置 colorPicket 对象的属性 y 的值，用于控制 colorPicket 对象的显示位置。
		*colorPicket.changeHandler=laya.utils.Handler.create(this,onChangeColor,[colorPicket],false);//设置 colorPicket 的颜色改变回调函数。
		*Laya.stage.addChild(colorPicket);//将此 colorPicket 对象添加到显示列表。
		*}
	*function onChangeColor(colorPicket)
	*{
		*console.log("当前选择的颜色： "+colorPicket.selectedColor);
		*}
	*</listing>
	*<listing version="3.0">
	*import ColorPicker=laya.ui.ColorPicker;
	*import Handler=laya.utils.Handler;
	*
	*class ColorPicker_Example {
		*
		*constructor(){
			*Laya.init(640,800);//设置游戏画布宽高。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*Laya.loader.load("resource/ui/color.png",Handler.create(this,this.onLoadComplete));//加载资源。
			*}
		*
		*private onLoadComplete():void {
			*console.log("资源加载完成！");
			*var colorPicket:ColorPicker=new ColorPicker();//创建一个 ColorPicker 类的实例对象 colorPicket 。
			*colorPicket.skin="resource/ui/color.png";//设置 colorPicket 的皮肤。
			*colorPicket.x=100;//设置 colorPicket 对象的属性 x 的值，用于控制 colorPicket 对象的显示位置。
			*colorPicket.y=100;//设置 colorPicket 对象的属性 y 的值，用于控制 colorPicket 对象的显示位置。
			*colorPicket.changeHandler=new Handler(this,this.onChangeColor,[colorPicket]);//设置 colorPicket 的颜色改变回调函数。
			*Laya.stage.addChild(colorPicket);//将此 colorPicket 对象添加到显示列表。
			*}
		*private onChangeColor(colorPicket:ColorPicker):void {
			*console.log("当前选择的颜色： "+colorPicket.selectedColor);
			*}
		*
		*}
	*</listing>
	*@author yung
	*/
	//class laya.ui.ColorPicker extends laya.ui.Component
	var ColorPicker=(function(_super){
		function ColorPicker(){
			this.changeHandler=null;
			this._gridSize=11;
			this._bgColor="#ffffff";
			this._borderColor="#000000";
			this._inputColor="#000000";
			this._inputBgColor="#efefef";
			this._colorPanel=null;
			this._colorTiles=null;
			this._colorBlock=null;
			this._colorInput=null;
			this._colorButton=null;
			this._colors=[];
			this._selectedColor="#000000";
			ColorPicker.__super.call(this);
		}

		__class(ColorPicker,'laya.ui.ColorPicker',_super);
		var __proto=ColorPicker.prototype;
		/**
		*@inheritDoc
		*/
		__proto.destroy=function(destroyChild){
			(destroyChild===void 0)&& (destroyChild=true);
			_super.prototype.destroy.call(this,destroyChild);
			this._colorPanel && this._colorPanel.destroy(destroyChild);
			this._colorButton && this._colorButton.destroy(destroyChild);
			this._colorPanel=null;
			this._colorTiles=null;
			this._colorBlock=null;
			this._colorInput=null;
			this._colorButton=null;
			this._colors=null;
			this.changeHandler=null;
		}

		/**@inheritDoc */
		__proto.createChildren=function(){
			this.addChild(this._colorButton=new Button());
			this._colorPanel=new Box();
			this._colorPanel.size(230,166);
			this._colorPanel.addChild(this._colorTiles=new Sprite());
			this._colorPanel.addChild(this._colorBlock=new Sprite());
			this._colorPanel.addChild(this._colorInput=new Input());
		}

		/**@inheritDoc */
		__proto.initialize=function(){
			this._colorButton.on("click",this,this.onColorButtonClick);
			this._colorBlock.pos(5,5);
			this._colorInput.pos(60,5);
			this._colorInput.size(60,20);
			this._colorInput.on("change",this,this.onColorInputChange);
			this._colorInput.on("keydown",this,this.onColorFieldKeyDown);
			this._colorTiles.pos(5,30);
			this._colorTiles.on("mousemove",this,this.onColorTilesMouseMove);
			this._colorTiles.on("click",this,this.onColorTilesClick);
			this._colorTiles.size(20 *this._gridSize,12 *this._gridSize);
			this._colorPanel.on("mousedown",this,this.onPanelMouseDown);
			this.bgColor=this._bgColor;
		}

		__proto.onPanelMouseDown=function(e){
			e.stopPropagation();
		}

		/**
		*改变颜色样本列表面板。
		*/
		__proto.changePanel=function(){
			var g=this._colorPanel.graphics;
			g.clear();
			g.drawRect(0,0,230,166,this._bgColor,this._borderColor);
			this.drawBlock(this._selectedColor);
			this._colorInput.borderColor=this._borderColor;
			this._colorInput.bgColor=this._inputBgColor;
			this._colorInput.color=this._inputColor;
			g=this._colorTiles.graphics;
			g.clear();
			var mainColors=[0x000000,0x333333,0x666666,0x999999,0xCCCCCC,0xFFFFFF,0xFF0000,0x00FF00,0x0000FF,0xFFFF00,0x00FFFF,0xFF00FF];
			for (var i=0;i < 12;i++){
				for (var j=0;j < 20;j++){
					var color=0;
					if (j===0)color=mainColors[i];
					else if (j===1)color=0x000000;
					else color=(((i *3+j / 6)% 3 << 0)+((i / 6)<< 0)*3)*0x33 << 16 | j % 6 *0x33 << 8 | (i << 0)% 6 *0x33;
					var strColor=UIUtils.toColor(color);
					this._colors.push(strColor);
					var x=j *this._gridSize;
					var y=i *this._gridSize;
					g.drawRect(x,y,this._gridSize,this._gridSize,strColor,"#000000");
				}
			}
		}

		/**
		*颜色样本列表面板的显示按钮的 <code>Event.MOUSE_DOWN</code> 事件侦听处理函数。
		*/
		__proto.onColorButtonClick=function(e){
			if (this._colorPanel.parent)this.close();
			else this.open();
		}

		/**
		*打开颜色样本列表面板。
		*/
		__proto.open=function(){
			var p=this.localToGlobal(new Point());
			var px=p.x+this._colorPanel.width <=Laya.stage.width ? p.x :Laya.stage.width-this._colorPanel.width;
			var py=p.y+this._colorButton.height;
			py=py+this._colorPanel.height <=Laya.stage.height ? py :p.y-this._colorPanel.height;
			this._colorPanel.pos(px,py);
			Laya.stage.addChild(this._colorPanel);
			Laya.stage.on("mousedown",this,this.removeColorBox);
		}

		/**
		*关闭颜色样本列表面板。
		*/
		__proto.close=function(){
			Laya.stage.off("mousedown",this,this.removeColorBox);
			this._colorPanel.removeSelf();
		}

		/**
		*舞台的 <code>Event.MOUSE_DOWN</code> 事件侦听处理函数。
		*/
		__proto.removeColorBox=function(e){
			this.close();
		}

		/**
		*小格子色块的 <code>Event.KEY_DOWN</code> 事件侦听处理函数。
		*/
		__proto.onColorFieldKeyDown=function(e){
			if (e.keyCode==13){
				if (this._colorInput.text)this.selectedColor=this._colorInput.text;
				else this.selectedColor=null;
				this.close();
				e.stopPropagation();
			}
		}

		/**
		*颜色值输入框 <code>Event.CHANGE</code> 事件侦听处理函数。
		*/
		__proto.onColorInputChange=function(e){
			if (this._colorInput.text)this.drawBlock(this._colorInput.text);
			else this.drawBlock("#FFFFFF");
		}

		/**
		*小格子色块的 <code>Event.CLICK</code> 事件侦听处理函数。
		*/
		__proto.onColorTilesClick=function(e){
			this.selectedColor=this.getColorByMouse();
			this.close();
		}

		/**
		*@private
		*小格子色块的 <code>Event.MOUSE_MOVE</code> 事件侦听处理函数。
		*/
		__proto.onColorTilesMouseMove=function(e){
			this._colorInput.focus=false;
			var color=this.getColorByMouse();
			this._colorInput.text=color;
			this.drawBlock(color);
		}

		/**
		*通过鼠标位置取对应的颜色块的颜色值。
		*@return
		*/
		__proto.getColorByMouse=function(){
			var point=this._colorTiles.getMousePoint();
			var x=Math.floor(point.x / this._gridSize);
			var y=Math.floor(point.y / this._gridSize);
			return this._colors[y *20+x];
		}

		/**
		*绘制颜色块。
		*@param color 需要绘制的颜色块的颜色值。
		*/
		__proto.drawBlock=function(color){
			var g=this._colorBlock.graphics;
			g.clear();
			var showColor=color ? color :"#ffffff";
			g.drawRect(0,0,50,20,showColor,this._borderColor);
			color || g.drawLine(0,0,50,20,"#ff0000");
		}

		/**
		*改变颜色。
		*/
		__proto.changeColor=function(){
			var g=this.graphics;
			g.clear();
			var showColor=this._selectedColor || "#000000";
			g.drawRect(0,0,this._colorButton.width,this._colorButton.height,showColor);
		}

		/**
		*表示颜色样本列表面板的边框颜色值。
		*@return
		*/
		__getset(0,__proto,'borderColor',function(){
			return this._borderColor;
			},function(value){
			this._borderColor=value;
			this.callLater(this.changePanel);
		});

		/**
		*表示选择的颜色值。
		*@return
		*/
		__getset(0,__proto,'selectedColor',function(){
			return this._selectedColor;
			},function(value){
			if (this._selectedColor !=value){
				this._selectedColor=this._colorInput.text=value;
				this.drawBlock(value);
				this.changeColor();
				this.changeHandler && this.changeHandler.runWith(this._selectedColor);
				this.event("change",Event.EMPTY.setTo("change",this,this));
			}
		});

		/**
		*表示颜色输入框的背景颜色值。
		*@return
		*/
		__getset(0,__proto,'inputBgColor',function(){
			return this._inputBgColor;
			},function(value){
			this._inputBgColor=value;
			this.callLater(this.changePanel);
		});

		/**
		*@copy laya.ui.Button#skin
		*@return
		*/
		__getset(0,__proto,'skin',function(){
			return this._colorButton.skin;
			},function(value){
			this._colorButton.skin=value;
			this.changeColor();
		});

		/**
		*表示颜色样本列表面板的背景颜色值。
		*@return
		*/
		__getset(0,__proto,'bgColor',function(){
			return this._bgColor;
			},function(value){
			this._bgColor=value;
			this.callLater(this.changePanel);
		});

		/**
		*表示颜色样本列表面板选择或输入的颜色值。
		*@return
		*/
		__getset(0,__proto,'inputColor',function(){
			return this._inputColor;
			},function(value){
			this._inputColor=value;
			this.callLater(this.changePanel);
		});

		return ColorPicker;
	})(Component)


	/**
	*<code>ComboBox</code> 组件包含一个下拉列表，用户可以从该列表中选择单个值。
	*
	*@example 以下示例代码，创建了一个 <code>ComboBox</code> 实例。
	*<listing version="3.0">
	*package
	*{
		*import laya.ui.ComboBox;
		*import laya.utils.Handler;
		*
		*public class ComboBox_Example
		*{
			*public function ComboBox_Example()
			*{
				*Laya.init(640,800);//设置游戏画布宽高。
				*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
				*Laya.loader.load("resource/ui/button.png",Handler.create(this,onLoadComplete));//加载资源。
				*}
			*
			*private function onLoadComplete():void
			*{
				*trace("资源加载完成！");
				*var comboBox:ComboBox=new ComboBox("resource/ui/button.png","item0,item1,item2,item3,item4,item5");//创建一个 ComboBox 类的实例对象 comboBox ,传入它的皮肤和标签集。
				*comboBox.x=100;//设置 comboBox 对象的属性 x 的值，用于控制 comboBox 对象的显示位置。
				*comboBox.y=100;//设置 comboBox 对象的属性 x 的值，用于控制 comboBox 对象的显示位置。
				*comboBox.selectHandler=new Handler(this,onSelect);//设置 comboBox 选择项改变时执行的处理器。
				*Laya.stage.addChild(comboBox);//将此 comboBox 对象添加到显示列表。
				*}
			*
			*private function onSelect(index:int):void
			*{
				*trace("当前选中的项对象索引： ",index);
				*}
			*
			*}
		*
		*}
	*</listing>
	*<listing version="3.0">
	*Laya.init(640,800);//设置游戏画布宽高。
	*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
	*Laya.loader.load("resource/ui/button.png",laya.utils.Handler.create(this,loadComplete));//加载资源
	*function loadComplete(){
		*console.log("资源加载完成！");
		*var comboBox=new laya.ui.ComboBox("resource/ui/button.png","item0,item1,item2,item3,item4,item5");//创建一个 ComboBox 类的实例对象 comboBox ,传入它的皮肤和标签集。
		*comboBox.x=100;//设置 comboBox 对象的属性 x 的值，用于控制 comboBox 对象的显示位置。
		*comboBox.y=100;//设置 comboBox 对象的属性 x 的值，用于控制 comboBox 对象的显示位置。
		*comboBox.selectHandler=new laya.utils.Handler(this,onSelect);//设置 comboBox 选择项改变时执行的处理器。
		*Laya.stage.addChild(comboBox);//将此 comboBox 对象添加到显示列表。
		*}
	*function onSelect(index)
	*{
		*console.log("当前选中的项对象索引： ",index);
		*}
	*</listing>
	*<listing version="3.0">
	*import ComboBox=laya.ui.ComboBox;
	*import Handler=laya.utils.Handler;
	*class ComboBox_Example {
		*constructor(){
			*Laya.init(640,800);//设置游戏画布宽高。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*Laya.loader.load("resource/ui/button.png",Handler.create(this,this.onLoadComplete));//加载资源。
			*}
		*
		*private onLoadComplete():void {
			*console.log("资源加载完成！");
			*var comboBox:ComboBox=new ComboBox("resource/ui/button.png","item0,item1,item2,item3,item4,item5");//创建一个 ComboBox 类的实例对象 comboBox ,传入它的皮肤和标签集。
			*comboBox.x=100;//设置 comboBox 对象的属性 x 的值，用于控制 comboBox 对象的显示位置。
			*comboBox.y=100;//设置 comboBox 对象的属性 x 的值，用于控制 comboBox 对象的显示位置。
			*comboBox.selectHandler=new Handler(this,this.onSelect);//设置 comboBox 选择项改变时执行的处理器。
			*Laya.stage.addChild(comboBox);//将此 comboBox 对象添加到显示列表。
			*}
		*
		*private onSelect(index:number):void {
			*console.log("当前选中的项对象索引： ",index);
			*}
		*
		*}
	*
	*</listing>
	*/
	//class laya.ui.ComboBox extends laya.ui.Component
	var ComboBox=(function(_super){
		function ComboBox(skin,labels){
			this._visibleNum=6;
			this._button=null;
			this._list=null;
			this._isOpen=false;
			this._scrollBar=null;
			this._itemSize=12;
			this._labels=[];
			this._selectedIndex=-1;
			this._selectHandler=null;
			this._itemHeight=NaN;
			this._listHeight=NaN;
			this._listChanged=false;
			this._itemChanged=false;
			this._scrollBarSkin=null;
			ComboBox.__super.call(this);
			this._itemColors=Styles.comboBoxItemColors;
			this.skin=skin;
			this.labels=labels;
		}

		__class(ComboBox,'laya.ui.ComboBox',_super);
		var __proto=ComboBox.prototype;
		/**@inheritDoc */
		__proto.destroy=function(destroyChild){
			(destroyChild===void 0)&& (destroyChild=true);
			_super.prototype.destroy.call(this,destroyChild);
			this._button && this._button.destroy(destroyChild);
			this._list && this._list.destroy(destroyChild);
			this._scrollBar && this._scrollBar.destroy(destroyChild);
			this._button=null;
			this._list=null;
			this._scrollBar=null;
			this._itemColors=null;
			this._labels=null;
			this._selectHandler=null;
		}

		/**@inheritDoc */
		__proto.createChildren=function(){
			this.addChild(this._button=new Button());
			this._button.text.align="left";
			this._button.labelPadding="0,0,0,5";
			this._button.on("mousedown",this,this.onButtonMouseDown);
		}

		__proto._createList=function(){
			this._list=new List();
			this._list.selectEnable=true;
			this._list.on("mousedown",this,this.onListDown);
			this._list.mouseHandler=Handler.create(this,this.onlistItemMouse,null,false);
			if (this._scrollBarSkin){
				this._list.addChild(this._scrollBar=new VScrollBar());
				this._scrollBar.skin=this._scrollBarSkin;
				this._scrollBar.name="scrollBar";
				this._scrollBar.y=1;
				this._scrollBar.on("mousedown",this,this.onScrollBarDown);
			}
		}

		/**
		*@private
		*/
		__proto.onListDown=function(e){
			e.stopPropagation();
		}

		/**
		*private
		*/
		__proto.onScrollBarDown=function(e){
			e.stopPropagation();
		}

		__proto.onButtonMouseDown=function(e){
			this.callLater(this.switchTo,[!this._isOpen]);
		}

		/**
		*@private (protected)
		*/
		__proto.changeList=function(){
			this._listChanged=false;
			var labelWidth=this.width-2;
			var labelColor=this._itemColors[2];
			this._itemHeight=this._itemSize+6;
			this._list.itemRender={type:"Box",child:[{type:"Label",props:{name:"label",x:1,padding:"3,3,3,3",width:labelWidth,height:this._itemHeight,fontSize:this._itemSize,color:labelColor}}]};
			this._list.repeatY=this._visibleNum;
			if(this._scrollBar)
				this._scrollBar.x=this.width-this._scrollBar.width-1;
			this._list.refresh();
		}

		/**
		*@private
		*下拉列表的鼠标事件响应函数。
		*@param e
		*@param index
		*/
		__proto.onlistItemMouse=function(e,index){
			var type=e.type;
			if (type==="mouseover" || type==="mouseout"){
				var box=this._list.getCell(index);
				if (!box)return;
				var label=box.getChildByName("label");
				if (type==="mouseover"){
					label.bgColor=this._itemColors[0];
					label.color=this._itemColors[1];
					}else {
					label.bgColor=null;
					label.color=this._itemColors[2];
				}
				}else if (type==="click"){
				this.selectedIndex=index;
				this.isOpen=false;
			}
		}

		/**
		*@private
		*@param value
		*/
		__proto.switchTo=function(value){
			this.isOpen=value;
		}

		/**
		*更改下拉列表的打开状态。
		*/
		__proto.changeOpen=function(){
			this.isOpen=!this._isOpen;
		}

		/**
		*更改下拉列表。
		*/
		__proto.changeItem=function(){
			this._itemChanged=false;
			this.runCallLater(this.changeList);
			this._listHeight=this._labels.length > 0 ? Math.min(this._visibleNum,this._labels.length)*this._itemHeight :this._itemHeight;
			if(this._scrollBar)
				this._scrollBar.height=this._listHeight-2;
			var g=this._list.graphics;
			g.clear();
			g.drawRect(0,0,this.width-1,this._listHeight,this._itemColors[4],this._itemColors[3]);
			var a=this._list.array || [];
			a.length=0;
			for (var i=0,n=this._labels.length;i < n;i++){
				a.push({label:this._labels[i]});
			}
			this._list.array=a;
		}

		__proto.changeSelected=function(){
			this._button.label=this.selectedLabel;
		}

		/**
		*关闭下拉列表。
		*/
		__proto.removeList=function(e){
			this.isOpen=false;
		}

		/**
		*标签集合字符串。
		*@return
		*/
		__getset(0,__proto,'labels',function(){
			return this._labels.join(",");
			},function(value){
			if (this._labels.length > 0)this.selectedIndex=-1;
			if (value)this._labels=value.split(",");
			else this._labels.length=0;
			this._itemChanged=true;
		});

		/**
		*@copy laya.ui.Button#skin
		*@return
		*/
		__getset(0,__proto,'skin',function(){
			return this._button.skin;
			},function(value){
			if (this._button.skin !=value){
				this._button.skin=value;
				this._listChanged=true;
			}
		});

		/**@inheritDoc */
		__getset(0,__proto,'measureHeight',function(){
			return this._button.height;
		});

		/**@inheritDoc */
		__getset(0,__proto,'measureWidth',function(){
			return this._button.width;
		});

		/**
		*表示选择的下拉列表项的的标签。
		*@return
		*/
		__getset(0,__proto,'selectedLabel',function(){
			return this._selectedIndex >-1 && this._selectedIndex < this._labels.length ? this._labels[this._selectedIndex] :null;
			},function(value){
			this.selectedIndex=this._labels.indexOf(value);
		});

		/**
		*表示选择的下拉列表项的索引。
		*@return
		*/
		__getset(0,__proto,'selectedIndex',function(){
			return this._selectedIndex;
			},function(value){
			if (this._selectedIndex !=value){
				this._selectedIndex=value;
				if (this._labels.length > 0)this.changeSelected();
				else this.callLater(this.changeSelected);
				this.event("change",[Event.EMPTY.setTo("change",this,this)]);
				this._selectHandler && this._selectHandler.runWith(this._selectedIndex);
			}
		});

		/**@inheritDoc */
		__getset(0,__proto,'width',_super.prototype._$get_width,function(value){
			_super.prototype._$set_width.call(this,value);
			this._button.width=this._width;
			this._itemChanged=true;
			this._listChanged=true;
		});

		/**@inheritDoc */
		__getset(0,__proto,'height',_super.prototype._$get_height,function(value){
			_super.prototype._$set_height.call(this,value);
			this._button.height=this._height;
		});

		/**
		*改变下拉列表的选择项时执行的处理器(默认返回参数index:int)。
		*@return
		*/
		__getset(0,__proto,'selectHandler',function(){
			return this._selectHandler;
			},function(value){
			this._selectHandler=value;
		});

		/**
		*表示按钮的状态值。
		*
		*@see laya.ui.Button#stateNum
		*@return
		*/
		__getset(0,__proto,'stateNum',function(){
			return this._button.stateNum;
			},function(value){
			this._button.stateNum=value
		});

		/**
		*获取或设置没有滚动条的下拉列表中可显示的最大行数。
		*@return
		*/
		__getset(0,__proto,'visibleNum',function(){
			return this._visibleNum;
			},function(value){
			this._visibleNum=value;
			this._listChanged=true;
		});

		/**
		*下拉列表项颜色。
		*<p><b>格式：</b>"悬停或被选中时背景颜色,悬停或被选中时标签颜色,标签颜色,边框颜色,背景颜色"</p>
		*@return
		*/
		__getset(0,__proto,'itemColors',function(){
			return String(this._itemColors)
			},function(value){
			this._itemColors=UIUtils.fillArray(this._itemColors,value,String);
			this._listChanged=true;
		});

		/**
		*下拉列表项标签的字体大小。
		*@return
		*/
		__getset(0,__proto,'itemSize',function(){
			return this._itemSize;
			},function(value){
			this._itemSize=value;
			this._listChanged=true;
		});

		/**
		*表示下拉列表的打开状态。
		*@return
		*/
		__getset(0,__proto,'isOpen',function(){
			return this._isOpen;
			},function(value){
			if (this._isOpen !=value){
				this._isOpen=value;
				this._button.selected=this._isOpen;
				if (this._isOpen){
					this._list || this._createList();
					this._listChanged && this.changeList();
					this._itemChanged && this.changeItem();
					Point.EMPTY.setTo(0,0);
					var p=this.localToGlobal(Point.EMPTY);
					var py=p.y+this._button.height;
					py=py+this._listHeight <=Laya.stage.width ? py :p.y-this._listHeight;
					this._list.pos(p.x,py);
					Laya.stage.addChild(this._list);
					Laya.stage.once("mousedown",this,this.removeList);
					this._list.selectedIndex=this._selectedIndex;
					}else {
					this._list && this._list.removeSelf();
				}
			}
		});

		/**
		*<p>当前实例的位图 <code>AutoImage</code> 实例的有效缩放网格数据。</p>
		*<p>数据格式："上边距,右边距,下边距,左边距,是否重复填充(值为0：不重复填充，1：重复填充)"，以逗号分隔。
		*<ul><li>例如："4,4,4,4,1"</li></ul></p>
		*@see laya.ui.AutoBitmap.sizeGrid
		*@return
		*/
		__getset(0,__proto,'sizeGrid',function(){
			return this._button.sizeGrid;
			},function(value){
			this._button.sizeGrid=value;
		});

		/**
		*获取对 <code>ComboBox</code> 组件所包含的 <code>Button</code> 组件的引用。
		*/
		__getset(0,__proto,'button',function(){
			return this._button;
		});

		/**
		*滚动条皮肤。
		*@return
		*/
		__getset(0,__proto,'scrollBarSkin',function(){
			return this._scrollBarSkin;
			},function(value){
			this._scrollBarSkin=value;
		});

		/**
		*获取对 <code>ComboBox</code> 组件所包含的 <code>VScrollBar</code> 滚动条组件的引用。
		*@return
		*/
		__getset(0,__proto,'scrollBar',function(){
			return this._scrollBar;
		});

		/**
		*获取对 <code>ComboBox</code> 组件所包含的 <code>List</code> 列表组件的引用。
		*@return
		*/
		__getset(0,__proto,'list',function(){
			return this._list;
		});

		/**@inheritDoc */
		__getset(0,__proto,'dataSource',_super.prototype._$get_dataSource,function(value){
			this._dataSource=value;
			if (((typeof value=='number')&& Math.floor(value)==value)|| (typeof value=='string'))this.selectedIndex=Laya.__parseInt(value);
			else if ((value instanceof Array))this.labels=(value).join(",");
			else _super.prototype._$set_dataSource.call(this,value);
		});

		/**
		*获取或设置对 <code>ComboBox</code> 组件所包含的 <code>Button</code> 组件的文本标签颜色。
		*<p><b>格式：</b>upColor,overColor,downColor,disableColor</p>
		*@return
		*/
		__getset(0,__proto,'labelColors',function(){
			return this._button.labelColors;
			},function(value){
			this._button.labelColors=value;
		});

		/**
		*获取或设置对 <code>ComboBox</code> 组件所包含的 <code>Button</code> 组件的文本边距。
		*<p><b>格式：</b>上边距,右边距,下边距,左边距</p>
		*@return
		*/
		__getset(0,__proto,'labelPadding',function(){
			return this._button.text.padding.join(",");
			},function(value){
			this._button.text.padding=UIUtils.fillArray(Styles.labelPadding,value,Number);
		});

		/**
		*获取或设置对 <code>ComboBox</code> 组件所包含的 <code>Button</code> 组件的标签字体大小。
		*@return
		*/
		__getset(0,__proto,'labelSize',function(){
			return this._button.text.fontSize;
			},function(value){
			this._button.text.fontSize=value
		});

		/**
		*表示按钮文本标签是否为粗体字。
		*
		*@see laya.display.Text#bold
		*@return
		*/
		__getset(0,__proto,'labelBold',function(){
			return this._button.text.bold;
			},function(value){
			this._button.text.bold=value
		});

		/**
		*表示按钮文本标签的字体名称，以字符串形式表示。
		*
		*@see laya.display.Text#font
		*@return
		*/
		__getset(0,__proto,'labelFont',function(){
			return this._button.text.font;
			},function(value){
			this._button.text.font=value
		});

		return ComboBox;
	})(Component)


	/**
	*<code>ScrollBar</code> 组件是一个滚动条组件。
	*
	*<p>当数据太多以至于显示区域无法容纳时，最终用户可以使用 <code>ScrollBar</code> 组件控制所显示的数据部分。</p>
	*<p> 滚动条由四部分组成：两个箭头按钮、一个轨道和一个滑块。 </p> *
	*
	*@see laya.ui.VScrollBar
	*@see laya.ui.HScrollBar
	*@author yung
	*/
	//class laya.ui.ScrollBar extends laya.ui.Component
	var ScrollBar=(function(_super){
		function ScrollBar(skin){
			this.changeHandler=null;
			this.scaleBar=true;
			this.autoHide=false;
			this.elasticDistance=0;
			this.elasticBackTime=500;
			this._scrollSize=1;
			this._skin=null;
			this._upButton=null;
			this._downButton=null;
			this._slider=null;
			this._thumbPercent=1;
			this._target=null;
			this._lastPoint=null;
			this._lastOffset=0;
			this._checkElastic=false;
			this._isElastic=false;
			this._value=NaN;
			this._hide=false;
			this._clickOnly=true;
			this._offsets=null;
			ScrollBar.__super.call(this);
			this._showButtons=UIConfig.showButtons;
			this._touchScrollEnable=UIConfig.touchScrollEnable;
			this._mouseWheelEnable=UIConfig.mouseWheelEnable;
			this.skin=skin;
			this.max=1;
		}

		__class(ScrollBar,'laya.ui.ScrollBar',_super);
		var __proto=ScrollBar.prototype;
		/**@inheritDoc */
		__proto.destroy=function(destroyChild){
			(destroyChild===void 0)&& (destroyChild=true);
			_super.prototype.destroy.call(this,destroyChild);
			this._upButton && this._upButton.destroy(destroyChild);
			this._downButton && this._downButton.destroy(destroyChild);
			this._slider && this._slider.destroy(destroyChild);
			this._upButton=this._downButton=null;
			this._slider=null;
			this.changeHandler=null;
			this._offsets=null;
		}

		/**@inheritDoc */
		__proto.createChildren=function(){
			this.addChild(this._slider=new Slider());
			this.addChild(this._upButton=new Button());
			this.addChild(this._downButton=new Button());
		}

		/**@inheritDoc */
		__proto.initialize=function(){
			this._slider.showLabel=false;
			this._slider.on("change",this,this.onSliderChange);
			this._slider.setSlider(0,0,0);
			this._upButton.on("mousedown",this,this.onButtonMouseDown);
			this._downButton.on("mousedown",this,this.onButtonMouseDown);
		}

		/**
		*@private
		*滑块位置发生改变的处理函数。
		*/
		__proto.onSliderChange=function(e){
			this.value=this._slider.value;
		}

		/**
		*@private
		*向上和向下按钮的 <code>Event.MOUSE_DOWN</code> 事件侦听处理函数。
		*/
		__proto.onButtonMouseDown=function(e){
			var isUp=e.currentTarget===this._upButton;
			this.slide(isUp);
			Laya.timer.once(Styles.scrollBarDelayTime,this,this.startLoop,[isUp]);
			Laya.stage.once("mouseup",this,this.onStageMouseUp);
		}

		/**@private */
		__proto.startLoop=function(isUp){
			Laya.timer.frameLoop(1,this,this.slide,[isUp]);
		}

		/**@private */
		__proto.slide=function(isUp){
			if (isUp)this.value-=this._scrollSize;
			else this.value+=this._scrollSize;
		}

		/**
		*@private
		*舞台的 <code>Event.MOUSE_DOWN</code> 事件侦听处理函数。
		*/
		__proto.onStageMouseUp=function(e){
			Laya.timer.clear(this,this.startLoop);
			Laya.timer.clear(this,this.slide);
		}

		/**
		*@private
		*更改对象的皮肤及位置。
		*/
		__proto.changeScrollBar=function(){
			this._upButton.visible=this._showButtons;
			this._downButton.visible=this._showButtons;
			if (this._showButtons){
				this._upButton.skin=this._skin.replace(".png","$up.png");
				this._downButton.skin=this._skin.replace(".png","$down.png");
			}
			if (this._slider.isVertical)this._slider.y=this._showButtons ? this._upButton.height :0;
			else this._slider.x=this._showButtons ? this._upButton.width :0;
			this.resetPositions();
		}

		/**@inheritDoc */
		__proto.changeSize=function(){
			_super.prototype.changeSize.call(this);
			this.resetPositions();
			this.event("change");
			this.changeHandler && this.changeHandler.runWith(this.value);
		}

		/**@private */
		__proto.resetPositions=function(){
			if (this._slider.isVertical)this._slider.height=this.height-(this._showButtons ? (this._upButton.height+this._downButton.height):0);
			else this._slider.width=this.width-(this._showButtons ? (this._upButton.width+this._downButton.width):0);
			this.resetButtonPosition();
		}

		/**@private */
		__proto.resetButtonPosition=function(){
			if (this._slider.isVertical)this._downButton.y=this._slider.y+this._slider.height;
			else this._downButton.x=this._slider.x+this._slider.width;
		}

		/**
		*设置滚动条信息。
		*@param min 滚动条最小位置值。
		*@param max 滚动条最大位置值。
		*@param value 滚动条当前位置值。
		*/
		__proto.setScroll=function(min,max,value){
			this.runCallLater(this.changeSize);
			this._slider.setSlider(min,max,value);
			this._slider.bar.visible=max > 0;
			if (!this._hide && this.autoHide)this.visible=false;
		}

		/**@private */
		__proto.onTargetMouseWheel=function(e){
			this.value-=e.delta *this._scrollSize;
			this.target=this._target;
		}

		/**@private */
		__proto.onTargetMouseDown=function(e){
			this._clickOnly=true;
			this._lastOffset=0;
			this._checkElastic=false;
			this._lastPoint || (this._lastPoint=new Point());
			this._lastPoint.setTo(Laya.stage.mouseX,Laya.stage.mouseY);
			Laya.timer.clear(this,this.tweenMove);
			Tween.clearTween(this);
			Laya.stage.once("mouseup",this,this.onStageMouseUp2);
			Laya.stage.once("mouseout",this,this.onStageMouseUp2);
			Laya.timer.frameLoop(1,this,this.loop,null,true);
			this.event("start");
		}

		/**@private */
		__proto.loop=function(){
			var mouseY=Laya.stage.mouseY;
			var mouseX=Laya.stage.mouseX;
			this._lastOffset=this.isVertical ? (mouseY-this._lastPoint.y):(mouseX-this._lastPoint.x);
			if (this._clickOnly){
				if (Math.abs(this._lastOffset *(this.isVertical ? Laya.stage._canvasTransform.getScaleY():Laya.stage._canvasTransform.getScaleX()))> 1){
					this._clickOnly=false;
					this._offsets || (this._offsets=[]);
					this._offsets.length=0;
					this._target.mouseEnabled=false;
					if (!this.hide && this.autoHide){
						this.alpha=1;
						this.visible=true;
					}
				}else return;
			}
			this._offsets.push(this._lastOffset);
			this._lastPoint.x=mouseX;
			this._lastPoint.y=mouseY;
			if (this._lastOffset===0)return;
			if (!this._checkElastic){
				if (this.elasticDistance > 0){
					if (!this._checkElastic && this._lastOffset !=0){
						this._checkElastic=true;
						if ((this._lastOffset > 0 && this._value <=this.min)|| (this._lastOffset < 0 && this._value >=this.max)){
							this._isElastic=true;
							}else {
							this._isElastic=false;
						}
					}
					}else {
					this._checkElastic=true;
				}
			}
			if (this._checkElastic){
				if (this._isElastic){
					if (this._value <=this.min){
						this.value-=this._lastOffset *Math.max(0,(1-((this.min-this._value)/ this.elasticDistance)));
						}else if (this._value >=this.max){
						this.value-=this._lastOffset *Math.max(0,(1-((this._value-this.max)/ this.elasticDistance)));
					}
					}else {
					this.value-=this._lastOffset;
				}
			}
		}

		/**@private */
		__proto.onStageMouseUp2=function(e){
			Laya.stage.off("mouseup",this,this.onStageMouseUp2);
			Laya.stage.off("mouseout",this,this.onStageMouseUp2);
			Laya.timer.clear(this,this.loop);
			if (this._clickOnly)return;
			this._target.mouseEnabled=true;
			if (this._isElastic){
				if (this._value < this.min){
					Tween.to(this,{value:this.min},this.elasticBackTime,Ease.sineOut,Handler.create(this,this.elasticOver));
					}else if (this._value > this.max){
					Tween.to(this,{value:this.max},this.elasticBackTime,Ease.sineOut,Handler.create(this,this.elasticOver));
				}
				}else {
				if (this._offsets.length < 1){
					this._offsets[0]=this.isVertical ? Laya.stage.mouseY-this._lastPoint.y :Laya.stage.mouseX-this._lastPoint.x;
				};
				var offset=0;
				var n=Math.min(this._offsets.length,3);
				for (var i=0;i < n;i++){
					offset+=this._offsets[this._offsets.length-1-i];
				}
				this._lastOffset=offset / n;
				offset=Math.abs(this._lastOffset);
				if (offset < 2)return;
				if (offset > 60)this._lastOffset=this._lastOffset > 0 ? 60 :-60;
				Laya.timer.frameLoop(1,this,this.tweenMove);
			}
		}

		/**@private */
		__proto.elasticOver=function(){
			this._isElastic=false;
			if (!this.hide && this.autoHide){
				Tween.to(this,{alpha:0},500);
			}
		}

		/**@private */
		__proto.tweenMove=function(){
			this._lastOffset *=0.95;
			this.value-=this._lastOffset;
			if (Math.abs(this._lastOffset)< 1){
				Laya.timer.clear(this,this.tweenMove);
				this.event("end");
				if (!this.hide && this.autoHide){
					Tween.to(this,{alpha:0},500);
				}
			}
		}

		/**
		*停止滑动
		*/
		__proto.stopScroll=function(){
			this.onStageMouseUp2(null);
			Laya.timer.clear(this,this.tweenMove);
			Tween.clearTween(this);
		}

		/**
		*一个布尔值，指示滚动条是否为垂直滚动。如果值为true，则为垂直滚动，否则为水平滚动。
		*<p>默认值为：true。</p>
		*/
		__getset(0,__proto,'isVertical',function(){
			return this._slider.isVertical;
			},function(value){
			this._slider.isVertical=value;
		});

		/**
		*@copy laya.ui.Image#skin
		*/
		__getset(0,__proto,'skin',function(){
			return this._skin;
			},function(value){
			if (this._skin !=value){
				this._skin=value;
				this._slider.skin=this._skin;
				this.callLater(this.changeScrollBar);
			}
		});

		/**
		*获取或设置表示最高滚动位置的数字。
		*/
		__getset(0,__proto,'max',function(){
			return this._slider.max;
			},function(value){
			this._slider.max=value;
		});

		/**获取或设置一个值，该值表示按下滚动条轨道时页面滚动的增量。 */
		__getset(0,__proto,'scrollSize',function(){
			return this._scrollSize;
			},function(value){
			this._scrollSize=value;
		});

		/**@inheritDoc */
		__getset(0,__proto,'measureHeight',function(){
			if (this._slider.isVertical)return 100;
			return this._slider.height;
		});

		/**@inheritDoc */
		__getset(0,__proto,'measureWidth',function(){
			if (this._slider.isVertical)return this._slider.width;
			return 100;
		});

		/**
		*<p>当前实例的 <code>Slider</code> 实例的有效缩放网格数据。</p>
		*<p>数据格式："上边距,右边距,下边距,左边距,是否重复填充(值为0：不重复填充，1：重复填充)"，以逗号分隔。
		*<ul><li>例如："4,4,4,4,1"</li></ul></p>
		*@see laya.ui.AutoBitmap.sizeGrid
		*/
		__getset(0,__proto,'sizeGrid',function(){
			return this._slider.sizeGrid;
			},function(value){
			this._slider.sizeGrid=value;
		});

		/**
		*获取或设置表示最低滚动位置的数字。
		*/
		__getset(0,__proto,'min',function(){
			return this._slider.min;
			},function(value){
			this._slider.min=value;
		});

		/**
		*获取或设置表示当前滚动位置的数字。
		*/
		__getset(0,__proto,'value',function(){
			return this._value;
			},function(v){
			if (v!==this._value){
				if (this._isElastic)this._value=v;
				else {
					this._slider.value=v;
					this._value=this._slider.value;
				}
				this.event("change");
				this.changeHandler && this.changeHandler.runWith(this.value);
			}
		});

		/**@inheritDoc */
		__getset(0,__proto,'dataSource',_super.prototype._$get_dataSource,function(value){
			this._dataSource=value;
			if ((typeof value=='number')|| (typeof value=='string'))this.value=Number(value);
			else _super.prototype._$set_dataSource.call(this,value);
		});

		/**获取或设置一个值，该值表示滑条长度比例，值为：（0-1）。 */
		__getset(0,__proto,'thumbPercent',function(){
			return this._thumbPercent;
			},function(value){
			this.runCallLater(this.changeScrollBar);
			this.runCallLater(this.changeSize);
			value=value >=1 ? 0.99 :value;
			this._thumbPercent=value;
			if (this.scaleBar){
				if (this._slider.isVertical)this._slider.bar.height=Math.max(this._slider.height *value,Styles.scrollBarMinNum);
				else this._slider.bar.width=Math.max(this._slider.width *value,Styles.scrollBarMinNum);
			}
		});

		/**
		*设置滚动对象。*
		*@see laya.ui.TouchScroll#target
		*/
		__getset(0,__proto,'target',function(){
			return this._target;
			},function(value){
			if (this._target){
				this._target.off("mousewheel",this,this.onTargetMouseWheel);
				this._target.off("mousedown",this,this.onTargetMouseDown);
			}
			this._target=value;
			if (value){
				this._mouseWheelEnable && this._target.on("mousewheel",this,this.onTargetMouseWheel);
				this._touchScrollEnable && this._target.on("mousedown",this,this.onTargetMouseDown);
			}
		});

		/**是否隐藏滚动条，不显示滚动条，但是可以正常滚动，默认为false。*/
		__getset(0,__proto,'hide',function(){
			return this._hide;
			},function(value){
			this._hide=value;
			this.visible=!value;
		});

		/**一个布尔值，指定是否显示向上、向下按钮，默认值为true。*/
		__getset(0,__proto,'showButtons',function(){
			return this._showButtons;
			},function(value){
			this._showButtons=value;
			this.callLater(this.changeScrollBar);
		});

		/**一个布尔值，指定是否开启触摸，默认值为true。*/
		__getset(0,__proto,'touchScrollEnable',function(){
			return this._touchScrollEnable;
			},function(value){
			this._touchScrollEnable=value;
			this.target=this._target;
		});

		/**一个布尔值，指定是否滑轮滚动，默认值为true。*/
		__getset(0,__proto,'mouseWheelEnable',function(){
			return this._mouseWheelEnable;
			},function(value){
			this._mouseWheelEnable=value;
		});

		return ScrollBar;
	})(Component)


	/**
	*使用 <code>Slider</code> 控件，用户可以通过在滑块轨道的终点之间移动滑块来选择值。
	*
	*<p>滑块的当前值由滑块端点（对应于滑块的最小值和最大值）之间滑块的相对位置确定。</p>
	*<p>滑块允许最小值和最大值之间特定间隔内的值。滑块还可以使用数据提示显示其当前值。</p>
	*
	*@see laya.ui.HSlider
	*@see laya.ui.VSlider
	*@author yung
	*/
	//class laya.ui.Slider extends laya.ui.Component
	var Slider=(function(_super){
		function Slider(skin){
			this.changeHandler=null;
			this.isVertical=true;
			this.showLabel=true;
			this._allowClickBack=false;
			this._max=100;
			this._min=0;
			this._tick=1;
			this._value=0;
			this._skin=null;
			this._bg=null;
			this._bar=null;
			this._tx=NaN;
			this._ty=NaN;
			this._maxMove=NaN;
			Slider.__super.call(this);
			this.skin=skin;
		}

		__class(Slider,'laya.ui.Slider',_super);
		var __proto=Slider.prototype;
		/**
		*@inheritDoc
		*/
		__proto.destroy=function(destroyChild){
			(destroyChild===void 0)&& (destroyChild=true);
			_super.prototype.destroy.call(this,destroyChild);
			this._bg && this._bg.destroy(destroyChild);
			this._bar && this._bar.destroy(destroyChild);
			this._bg=null;
			this._bar=null;
			this.changeHandler=null;
		}

		/**@inheritDoc */
		__proto.createChildren=function(){
			this.addChild(this._bg=new Image2());
			this.addChild(this._bar=new Button());
		}

		/**@inheritDoc */
		__proto.initialize=function(){
			this._bar.on("mousedown",this,this.onBarMouseDown);
			this._bg.sizeGrid=this._bar.sizeGrid="4,4,4,4,0";
			this.allowClickBack=true;
		}

		/**
		*@private
		*滑块的的 <code>Event.MOUSE_DOWN</code> 事件侦听处理函数。
		*@param e
		*/
		__proto.onBarMouseDown=function(e){
			this._maxMove=this.isVertical ? (this.height-this._bar.height):(this.width-this._bar.width);
			this._tx=Laya.stage.mouseX;
			this._ty=Laya.stage.mouseY;
			Laya.stage.on("mousemove",this,this.mouseMove);
			Laya.stage.once("mouseup",this,this.mouseUp);
			this.showValueText();
		}

		/**
		*@private
		*显示标签。
		*/
		__proto.showValueText=function(){
			if (this.showLabel){
				var label=laya.ui.Slider.label;
				this.addChild(label);
				label.textField.changeText(this._value+"");
				if (this.isVertical){
					label.x=this._bar.x+20;
					label.y=(this._bar.height-label.height)*0.5+this._bar.y;
					}else {
					label.y=this._bar.y-20;
					label.x=(this._bar.width-label.width)*0.5+this._bar.x;
				}
			}
		}

		/**
		*@private
		*隐藏标签。
		*/
		__proto.hideValueText=function(){
			laya.ui.Slider.label && laya.ui.Slider.label.removeSelf();
		}

		/**
		*@private
		*@param e
		*/
		__proto.mouseUp=function(e){
			Laya.stage.off("mousemove",this,this.mouseMove);
			this.sendChangeEvent("changed");
			this.hideValueText();
		}

		/**
		*@private
		*@param e
		*/
		__proto.mouseMove=function(e){
			var oldValue=this._value;
			if (this.isVertical){
				this._bar.y+=Laya.stage.mouseY-this._ty;
				if (this._bar.y > this._maxMove)this._bar.y=this._maxMove;
				else if (this._bar.y < 0)this._bar.y=0;
				this._value=this._bar.y / this._maxMove *(this._max-this._min)+this._min;
				}else {
				this._bar.x+=Laya.stage.mouseX-this._tx;
				if (this._bar.x > this._maxMove)this._bar.x=this._maxMove;
				else if (this._bar.x < 0)this._bar.x=0;
				this._value=this._bar.x / this._maxMove *(this._max-this._min)+this._min;
			}
			this._tx=Laya.stage.mouseX;
			this._ty=Laya.stage.mouseY;
			var pow=Math.pow(10,(this._tick+"").length-1);
			this._value=Math.round(Math.round(this._value / this._tick)*this._tick*pow)/pow;
			if (this._value !=oldValue){
				this.sendChangeEvent();
			}
			this.showValueText();
		}

		/**
		*@private
		*@param type
		*/
		__proto.sendChangeEvent=function(type){
			(type===void 0)&& (type="change");
			this.event(type);
			this.changeHandler && this.changeHandler.runWith(this._value);
		}

		/**
		*@private
		*设置滑块的位置信息。
		*/
		__proto.setBarPoint=function(){
			if (this.isVertical)this._bar.x=(this._bg.width-this._bar.width)*0.5;
			else this._bar.y=(this._bg.height-this._bar.height)*0.5;
		}

		/**@inheritDoc */
		__proto.changeSize=function(){
			_super.prototype.changeSize.call(this);
			if (this.isVertical)this._bg.height=this.height;
			else this._bg.width=this.width;
			this.setBarPoint();
			this.changeValue();
		}

		/**
		*设置滑动条的信息。
		*@param min 滑块的最小值。
		*@param max 滑块的最小值。
		*@param value 滑块的当前值。
		*/
		__proto.setSlider=function(min,max,value){
			this._value=-1;
			this._min=min;
			this._max=max > min ? max :min;
			this.value=value < min ? min :value > max ? max :value;
		}

		/**
		*@private
		*改变滑块的位置值。
		*/
		__proto.changeValue=function(){
			var pow=Math.pow(10,(this._tick+"").length-1);
			this._value=Math.round(Math.round(this._value / this._tick)*this._tick*pow)/pow;
			this._value=this._value > this._max ? this._max :this._value < this._min ? this._min :this._value;
			if (this.isVertical)this._bar.y=(this._value-this._min)/ (this._max-this._min)*(this.height-this._bar.height);
			else this._bar.x=(this._value-this._min)/ (this._max-this._min)*(this.width-this._bar.width);
		}

		/**
		*@private
		*滑动条的 <code>Event.MOUSE_DOWN</code> 事件侦听处理函数。
		*@param e
		*/
		__proto.onBgMouseDown=function(e){
			var point=this._bg.getMousePoint();
			if (this.isVertical)this.value=point.y / (this.height-this._bar.height)*(this._max-this._min)+this._min;
			else this.value=point.x / (this.width-this._bar.width)*(this._max-this._min)+this._min;
		}

		/**
		*@copy laya.ui.Image#skin
		*@return
		*/
		__getset(0,__proto,'skin',function(){
			return this._skin;
			},function(value){
			if (this._skin !=value){
				this._skin=value;
				this._bg.skin=this._skin;
				this._bar.skin=this._skin.replace(".png","$bar.png");
				this.setBarPoint();
			}
		});

		/**
		*获取或设置表示最高位置的数字。 默认值为100。
		*@return
		*/
		__getset(0,__proto,'max',function(){
			return this._max;
			},function(value){
			if (this._max !=value){
				this._max=value;
				this.callLater(this.changeValue);
			}
		});

		/**
		*表示滑块按钮的引用。
		*@return
		*/
		__getset(0,__proto,'bar',function(){
			return this._bar;
		});

		/**@inheritDoc */
		__getset(0,__proto,'measureHeight',function(){
			return Math.max(this._bg.height,this._bar.height);
		});

		/**@inheritDoc */
		__getset(0,__proto,'measureWidth',function(){
			return Math.max(this._bg.width,this._bar.width);
		});

		/**
		*<p>当前实例的背景图（ <code>Image</code> ）和滑块按钮（ <code>Button</code> ）实例的有效缩放网格数据。</p>
		*<p>数据格式："上边距,右边距,下边距,左边距,是否重复填充(值为0：不重复填充，1：重复填充)"，以逗号分隔。
		*<ul><li>例如："4,4,4,4,1"</li></ul></p>
		*@see laya.ui.AutoBitmap.sizeGrid
		*@return
		*/
		__getset(0,__proto,'sizeGrid',function(){
			return this._bg.sizeGrid;
			},function(value){
			this._bg.sizeGrid=value;
			this._bar.sizeGrid=value;
		});

		/**
		*表示当前的刻度值。默认值为1。
		*@return
		*/
		__getset(0,__proto,'tick',function(){
			return this._tick;
			},function(value){
			this._tick=value;
			this.callLater(this.changeValue);
		});

		/**
		*获取或设置表示最低位置的数字。 默认值为0。
		*@return
		*/
		__getset(0,__proto,'min',function(){
			return this._min;
			},function(value){
			if (this._min !=value){
				this._min=value;
				this.callLater(this.changeValue);
			}
		});

		/**
		*获取或设置表示当前滑块位置的数字。
		*@return
		*/
		__getset(0,__proto,'value',function(){
			return this._value;
			},function(num){
			if (this._value !=num){
				var oldValue=this._value;
				this._value=num;
				this.changeValue();
				if (this._value !=oldValue){
					this.sendChangeEvent();
				}
			}
		});

		/**
		*一个布尔值，指定是否允许通过点击滑动条改变 <code>Slider</code> 的 <code>value</code> 属性值。
		*@return
		*/
		__getset(0,__proto,'allowClickBack',function(){
			return this._allowClickBack;
			},function(value){
			if (this._allowClickBack !=value){
				this._allowClickBack=value;
				if (value)this._bg.on("mousedown",this,this.onBgMouseDown);
				else this._bg.off("mousedown",this,this.onBgMouseDown);
			}
		});

		/**@inheritDoc */
		__getset(0,__proto,'dataSource',_super.prototype._$get_dataSource,function(value){
			this._dataSource=value;
			if ((typeof value=='number')|| (typeof value=='string'))this.value=Number(value);
			else _super.prototype._$set_dataSource.call(this,value);
		});

		__static(Slider,
		['label',function(){return this.label=new Label();}
		]);
		return Slider;
	})(Component)


	/**
	*<code>Image</code> 类是用于表示位图图像或绘制图形的显示对象。
	*
	*
	*@example 以下示例代码，创建了一个新的 <code>Image</code> 实例，设置了它的皮肤、位置信息，并添加到舞台上。
	*<listing version="3.0">
	*package
	*{
		*import laya.ui.Image;
		*public class Image_Example
		*{
			*public function Image_Example()
			*{
				*Laya.init(640,800);//设置游戏画布宽高。
				*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
				*onInit();
				*}
			*private function onInit():void
			*{
				*var bg:Image=new Image("resource/ui/bg.png");//创建一个 Image 类的实例对象 bg ,并传入它的皮肤。
				*bg.x=100;//设置 bg 对象的属性 x 的值，用于控制 bg 对象的显示位置。
				*bg.y=100;//设置 bg 对象的属性 y 的值，用于控制 bg 对象的显示位置。
				*bg.sizeGrid="40,10,5,10";//设置 bg 对象的网格信息。
				*bg.width=150;//设置 bg 对象的宽度。
				*bg.height=250;//设置 bg 对象的高度。
				*Laya.stage.addChild(bg);//将此 bg 对象添加到显示列表。
				*
				*var image:Image=new Image("resource/ui/image.png");//创建一个 Image 类的实例对象 image ,并传入它的皮肤。
				*image.x=100;//设置 image 对象的属性 x 的值，用于控制 image 对象的显示位置。
				*image.y=100;//设置 image 对象的属性 y 的值，用于控制 image 对象的显示位置。
				*Laya.stage.addChild(image);//将此 image 对象添加到显示列表。
				*}
			*}
		*}
	*</listing>
	*<listing version="3.0">
	*Laya.init(640,800);//设置游戏画布宽高
	*Laya.stage.bgColor="#efefef";//设置画布的背景颜色
	*onInit();
	*function onInit(){
		*var bg=new laya.ui.Image("resource/ui/bg.png");//创建一个 Image 类的实例对象 bg ,并传入它的皮肤。
		*bg.x=100;//设置 bg 对象的属性 x 的值，用于控制 bg 对象的显示位置。
		*bg.y=100;//设置 bg 对象的属性 y 的值，用于控制 bg 对象的显示位置。
		*bg.sizeGrid="40,10,5,10";//设置 bg 对象的网格信息。
		*bg.width=150;//设置 bg 对象的宽度。
		*bg.height=250;//设置 bg 对象的高度。
		*Laya.stage.addChild(bg);//将此 bg 对象添加到显示列表。
		*
		*var image=new laya.ui.Image("resource/ui/image.png");//创建一个 Image 类的实例对象 image ,并传入它的皮肤。
		*image.x=100;//设置 image 对象的属性 x 的值，用于控制 image 对象的显示位置。
		*image.y=100;//设置 image 对象的属性 y 的值，用于控制 image 对象的显示位置。
		*Laya.stage.addChild(image);//将此 image 对象添加到显示列表。
		*}
	*</listing>
	*<listing version="3.0">
	*class Image_Example {
		*constructor(){
			*Laya.init(640,800);//设置游戏画布宽高。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*this.onInit();
			*}
		*private onInit():void {
			*var bg:laya.ui.Image=new laya.ui.Image("resource/ui/bg.png");//创建一个 Image 类的实例对象 bg ,并传入它的皮肤。
			*bg.x=100;//设置 bg 对象的属性 x 的值，用于控制 bg 对象的显示位置。
			*bg.y=100;//设置 bg 对象的属性 y 的值，用于控制 bg 对象的显示位置。
			*bg.sizeGrid="40,10,5,10";//设置 bg 对象的网格信息。
			*bg.width=150;//设置 bg 对象的宽度。
			*bg.height=250;//设置 bg 对象的高度。
			*Laya.stage.addChild(bg);//将此 bg 对象添加到显示列表。
			*
			*var image:laya.ui.Image=new laya.ui.Image("resource/ui/image.png");//创建一个 Image 类的实例对象 image ,并传入它的皮肤。
			*image.x=100;//设置 image 对象的属性 x 的值，用于控制 image 对象的显示位置。
			*image.y=100;//设置 image 对象的属性 y 的值，用于控制 image 对象的显示位置。
			*Laya.stage.addChild(image);//将此 image 对象添加到显示列表。
			*}
		*}
	*</listing>
	*@see laya.ui.AutoBitmap
	*/
	//class laya.ui.Image extends laya.ui.Component
	var Image2=(function(_super){
		function Image(skin){
			this._bitmap=null;
			this._skin=null;
			Image.__super.call(this);
			this.skin=skin;
		}

		__class(Image,'laya.ui.Image',_super,'Image2');
		var __proto=Image.prototype;
		/**@inheritDoc */
		__proto.destroy=function(destroyChild){
			(destroyChild===void 0)&& (destroyChild=true);
			_super.prototype.destroy.call(this,true);
			this._bitmap && this._bitmap.destroy();
			this._bitmap=null;
		}

		/**
		*销毁对象并释放加载的皮肤资源
		*/
		__proto.dispose=function(){
			this.destroy(true);
			Laya.loader.clearRes(this._skin);
		}

		/**@inheritDoc */
		__proto.createChildren=function(){
			this.graphics=this._bitmap=new AutoBitmap();
			this._bitmap.autoCacheCmd=false;
		}

		/**
		*@private
		*设置皮肤资源。
		*@param url
		*@param value
		*/
		__proto.setSource=function(url,value){
			url===this._skin && (this.source=value);
		}

		/**
		*<p>对象的皮肤地址，以字符串表示。</p>
		*<p>如果资源未加载，则先加载资源，加载完成然后应用于此对象。</p>
		*<b>注意：</b>资源加载完成后，会自动缓存至资源库中。
		*
		*@return
		*/
		__getset(0,__proto,'skin',function(){
			return this._skin;
			},function(value){
			if (this._skin !=value){
				this._skin=value;
				if (value){
					this._addRenderType(0x100);
					var source=Loader.getRes(value);
					if (source)this.source=source;
					else Laya.loader.load(this._skin,Handler.create(this,this.setSource,[this._skin]),null,"image");
					}else {
					this.source=null;
					this._removeRenderType(0x100);
					this._removeRenderType(0x01);
				}
			}
		});

		/**
		*@copy laya.ui.AutoBitmap#source
		*@return
		*/
		__getset(0,__proto,'source',function(){
			return this._bitmap.source;
			},function(value){
			if (!this._bitmap)return;
			if(value)
				this._bitmap.source=value;
			else
			this._renderType &=~0x01;
			this.event("loaded");
			this.repaint();
		});

		/**@inheritDoc */
		__getset(0,__proto,'width',_super.prototype._$get_width,function(value){
			_super.prototype._$set_width.call(this,value);
			this._bitmap.width=value==0?0.0000001:value;
		});

		/**@inheritDoc */
		__getset(0,__proto,'measureHeight',function(){
			return this._bitmap.height;
		});

		/**@inheritDoc */
		__getset(0,__proto,'measureWidth',function(){
			return this._bitmap.width;
		});

		/**
		*<p>当前实例的位图 <code>AutoImage</code> 实例的有效缩放网格数据。</p>
		*<p>数据格式："上边距,右边距,下边距,左边距,是否重复填充(值为0：不重复填充，1：重复填充)"，以逗号分隔。
		*<ul><li>例如："4,4,4,4,1"。</li></ul></p>
		*@see laya.ui.AutoBitmap#sizeGrid
		*/
		__getset(0,__proto,'sizeGrid',function(){
			if (this._bitmap.sizeGrid)return this._bitmap.sizeGrid.join(",");
			return null;
			},function(value){
			this._bitmap.sizeGrid=UIUtils.fillArray(Styles.defaultSizeGrid,value,Number);
		});

		/**@inheritDoc */
		__getset(0,__proto,'height',_super.prototype._$get_height,function(value){
			_super.prototype._$set_height.call(this,value);
			this._bitmap.height=value==0?0.0000001:value;
		});

		/**@inheritDoc */
		__getset(0,__proto,'dataSource',_super.prototype._$get_dataSource,function(value){
			this._dataSource=value;
			if ((typeof value=='string'))this.skin=value;
			else _super.prototype._$set_dataSource.call(this,value);
		});

		return Image;
	})(Component)


	/**
	*<code>ProgressBar</code> 组件显示内容的加载进度。
	*@example 以下示例代码，创建了一个新的 <code>ProgressBar</code> 实例，设置了它的皮肤、位置、宽高、网格等信息，并添加到舞台上。
	*<listing version="3.0">
	*package
	*{
		*import laya.ui.ProgressBar;
		*import laya.utils.Handler;
		*public class ProgressBar_Example
		*{
			*private var progressBar:ProgressBar;
			*public function ProgressBar_Example()
			*{
				*Laya.init(640,800);//设置游戏画布宽高。
				*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
				*Laya.loader.load(["resource/ui/progress.png","resource/ui/progress$bar.png"],Handler.create(this,onLoadComplete));//加载资源。
				*}
			*
			*private function onLoadComplete():void
			*{
				*progressBar=new ProgressBar("resource/ui/progress.png");//创建一个 ProgressBar 类的实例对象 progressBar 。
				*progressBar.x=100;//设置 progressBar 对象的属性 x 的值，用于控制 progressBar 对象的显示位置。
				*progressBar.y=100;//设置 progressBar 对象的属性 y 的值，用于控制 progressBar 对象的显示位置。
				*progressBar.value=0.3;//设置 progressBar 的进度值。
				*progressBar.width=200;//设置 progressBar 的宽度。
				*progressBar.height=50;//设置 progressBar 的高度。
				*progressBar.sizeGrid="5,10,5,10";//设置 progressBar 的网格信息。
				*progressBar.changeHandler=new Handler(this,onChange);//设置 progressBar 的value值改变时执行的处理器。
				*Laya.stage.addChild(progressBar);//将 progressBar 添加到显示列表。
				*Laya.timer.once(3000,this,changeValue);//设定 3000ms（毫秒）后，执行函数changeValue。
				*}
			*
			*private function changeValue():void
			*{
				*trace("改变进度条的进度值。");
				*progressBar.value=0.6;
				*}
			*
			*private function onChange(value:Number):void
			*{
				*trace("进度发生改变： value=" ,value);
				*}
			*}
		*}
	*
	*</listing>
	*<listing version="3.0">
	*Laya.init(640,800);//设置游戏画布宽高
	*Laya.stage.bgColor="#efefef";//设置画布的背景颜色
	*var res=["resource/ui/progress.png","resource/ui/progress$bar.png"];
	*Laya.loader.load(res,laya.utils.Handler.create(this,onLoadComplete));//加载资源。
	*function onLoadComplete()
	*{
		*progressBar=new laya.ui.ProgressBar("resource/ui/progress.png");//创建一个 ProgressBar 类的实例对象 progressBar 。
		*progressBar.x=100;//设置 progressBar 对象的属性 x 的值，用于控制 progressBar 对象的显示位置。
		*progressBar.y=100;//设置 progressBar 对象的属性 y 的值，用于控制 progressBar 对象的显示位置。
		*progressBar.value=0.3;//设置 progressBar 的进度值。
		*progressBar.width=200;//设置 progressBar 的宽度。
		*progressBar.height=50;//设置 progressBar 的高度。
		*progressBar.sizeGrid="10,5,10,5";//设置 progressBar 的网格信息。
		*progressBar.changeHandler=new laya.utils.Handler(this,onChange);//设置 progressBar 的value值改变时执行的处理器。
		*Laya.stage.addChild(progressBar);//将 progressBar 添加到显示列表。
		*Laya.timer.once(3000,this,changeValue);//设定 3000ms（毫秒）后，执行函数changeValue。
		*}
	*function changeValue()
	*{
		*console.log("改变进度条的进度值。");
		*progressBar.value=0.6;
		*}
	*
	*function onChange(value)
	*{
		*console.log("进度发生改变： value=" ,value);
		*}
	*</listing>
	*<listing version="3.0">
	*import ProgressBar=laya.ui.ProgressBar;
	*import Handler=laya.utils.Handler;
	*class ProgressBar_Example {
		*private progressBar:ProgressBar;
		*public ProgressBar_Example(){
			*Laya.init(640,800);//设置游戏画布宽高。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*Laya.loader.load(["resource/ui/progress.png","resource/ui/progress$bar.png"],Handler.create(this,this.onLoadComplete));//加载资源。
			*}
		*private onLoadComplete():void {
			*this.progressBar=new ProgressBar("resource/ui/progress.png");//创建一个 ProgressBar 类的实例对象 progressBar 。
			*this.progressBar.x=100;//设置 progressBar 对象的属性 x 的值，用于控制 progressBar 对象的显示位置。
			*this.progressBar.y=100;//设置 progressBar 对象的属性 y 的值，用于控制 progressBar 对象的显示位置。
			*this.progressBar.value=0.3;//设置 progressBar 的进度值。
			*this.progressBar.width=200;//设置 progressBar 的宽度。
			*this.progressBar.height=50;//设置 progressBar 的高度。
			*this.progressBar.sizeGrid="5,10,5,10";//设置 progressBar 的网格信息。
			*this.progressBar.changeHandler=new Handler(this,this.onChange);//设置 progressBar 的value值改变时执行的处理器。
			*Laya.stage.addChild(this.progressBar);//将 progressBar 添加到显示列表。
			*Laya.timer.once(3000,this,this.changeValue);//设定 3000ms（毫秒）后，执行函数changeValue。
			*}
		*private changeValue():void {
			*console.log("改变进度条的进度值。");
			*this.progressBar.value=0.6;
			*}
		*private onChange(value:number):void {
			*console.log("进度发生改变： value=",value);
			*}
		*}
	*</listing>
	*@author yung
	*/
	//class laya.ui.ProgressBar extends laya.ui.Component
	var ProgressBar=(function(_super){
		function ProgressBar(skin){
			this.changeHandler=null;
			this._bg=null;
			this._bar=null;
			this._skin=null;
			this._value=0.5;
			ProgressBar.__super.call(this);
			this.skin=skin;
		}

		__class(ProgressBar,'laya.ui.ProgressBar',_super);
		var __proto=ProgressBar.prototype;
		/**@inheritDoc */
		__proto.destroy=function(destroyChild){
			(destroyChild===void 0)&& (destroyChild=true);
			_super.prototype.destroy.call(this,destroyChild);
			this._bg && this._bg.destroy(destroyChild);
			this._bar && this._bar.destroy(destroyChild);
			this._bg=this._bar=null;
			this.changeHandler=null;
		}

		/**@inheritDoc */
		__proto.createChildren=function(){
			this.addChild(this._bg=new Image2());
			this.addChild(this._bar=new Image2());
			this._bar["_bitmap"].autoCacheCmd=false;
		}

		/**
		*@private
		*更改进度值的显示。
		*/
		__proto.changeValue=function(){
			if (this.sizeGrid){
				var grid=this.sizeGrid.split(",");
				var left=Number(grid[0]);
				var right=Number(grid[2]);
				var max=this.width-left-right;
				var sw=max *this._value;
				this._bar.width=left+right+sw;
				this._bar.visible=this._bar.width > left+right;
				}else {
				this._bar.width=this.width *this._value;
			}
		}

		/**
		*@copy laya.ui.Image#skin
		*@return
		*/
		__getset(0,__proto,'skin',function(){
			return this._skin;
			},function(value){
			if (this._skin !=value){
				this._skin=value;
				this._bg.skin=this._skin;
				this._bar.skin=this._skin.replace(".png","$bar.png");
				this.callLater(this.changeValue);
			}
		});

		/**
		*获取进度条对象。
		*@return
		*/
		__getset(0,__proto,'bar',function(){
			return this._bar;
		});

		/**@inheritDoc */
		__getset(0,__proto,'measureHeight',function(){
			return this._bg.height;
		});

		/**@inheritDoc */
		__getset(0,__proto,'measureWidth',function(){
			return this._bg.width;
		});

		/**
		*<p>当前 <code>ProgressBar</code> 实例的进度条背景位图（ <code>Image</code> 实例）的有效缩放网格数据。</p>
		*<p>数据格式："上边距,右边距,下边距,左边距,是否重复填充(值为0：不重复填充，1：重复填充)"，以逗号分隔。
		*<ul><li>例如："4,4,4,4,1"</li></ul></p>
		*@see laya.ui.AutoBitmap.sizeGrid
		*@return
		*/
		__getset(0,__proto,'sizeGrid',function(){
			return this._bg.sizeGrid;
			},function(value){
			this._bg.sizeGrid=this._bar.sizeGrid=value;
		});

		/**
		*获取背景条对象。
		*@return
		*/
		__getset(0,__proto,'bg',function(){
			return this._bg;
		});

		/**@inheritDoc */
		__getset(0,__proto,'height',_super.prototype._$get_height,function(value){
			_super.prototype._$set_height.call(this,value);
			this._bg.height=this._height;
			this._bar.height=this._height;
		});

		/**
		*当前的进度量。
		*<p><b>取值：</b>介于0和1之间。</p>
		*@return
		*/
		__getset(0,__proto,'value',function(){
			return this._value;
			},function(num){
			if (this._value !=num){
				num=num > 1 ? 1 :num < 0 ? 0 :num;
				this._value=num;
				this.callLater(this.changeValue);
				this.event("change");
				this.changeHandler && this.changeHandler.runWith(num);
			}
		});

		/**@inheritDoc */
		__getset(0,__proto,'width',_super.prototype._$get_width,function(value){
			_super.prototype._$set_width.call(this,value);
			this._bg.width=this._width;
			this.callLater(this.changeValue);
		});

		/**@inheritDoc */
		__getset(0,__proto,'dataSource',_super.prototype._$get_dataSource,function(value){
			this._dataSource=value;
			if ((typeof value=='number')|| (typeof value=='string'))this.value=Number(value);
			else _super.prototype._$set_dataSource.call(this,value);
		});

		return ProgressBar;
	})(Component)


	/**
	*<p><code>Input</code> 类用于创建显示对象以显示和输入文本。</p>
	*
	*@example 以下示例代码，创建了一个 <code>Text</code> 实例。
	*<p>[EXAMPLE-AS-BEGIN]</p>
	*<listing version="3.0">
	*package
	*{
		*import laya.display.Input;
		*import laya.events.Event;
		*
		*public class Input_Example
		*{
			*private var input:Input;
			*public function Input_Example()
			*{
				*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
				*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
				*onInit();
				*}
			*
			*private function onInit():void
			*{
				*input=new Input();//创建一个 Input 类的实例对象 input 。
				*input.text="这个是一个 Input 文本示例。";
				*input.color="#008fff";//设置 input 的文本颜色。
				*input.font="Arial";//设置 input 的文本字体。
				*input.bold=true;//设置 input 的文本显示为粗体。
				*input.fontSize=30;//设置 input 的字体大小。
				*input.wordWrap=true;//设置 input 的文本自动换行。
				*input.x=100;//设置 input 对象的属性 x 的值，用于控制 input 对象的显示位置。
				*input.y=100;//设置 input 对象的属性 y 的值，用于控制 input 对象的显示位置。
				*input.width=300;//设置 input 的宽度。
				*input.height=200;//设置 input 的高度。
				*input.italic=true;//设置 input 的文本显示为斜体。
				*input.borderColor="#fff000";//设置 input 的文本边框颜色。
				*Laya.stage.addChild(input);//将 input 添加到显示列表。
				*input.on(Event.FOCUS,this,onFocus);//给 input 对象添加获得焦点事件侦听。
				*input.on(Event.BLUR,this,onBlur);//给 input 对象添加失去焦点事件侦听。
				*input.on(Event.INPUT,this,onInput);//给 input 对象添加输入字符事件侦听。
				*input.on(Event.ENTER,this,onEnter);//给 input 对象添加敲回车键事件侦听。
				*}
			*
			*private function onFocus():void
			*{
				*trace("输入框 input 获得焦点。");
				*}
			*
			*private function onBlur():void
			*{
				*trace("输入框 input 失去焦点。");
				*}
			*
			*private function onInput():void
			*{
				*trace("用户在输入框 input 输入字符。文本内容：",input.text);
				*}
			*
			*private function onEnter():void
			*{
				*trace("用户在输入框 input 内敲回车键。");
				*}
			*}
		*}
	*</listing>
	*<listing version="3.0">
	*var input;
	*Input_Example();
	*function Input_Example()
	*{
		*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
		*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
		*onInit();
		*}
	*function onInit()
	*{
		*input=new laya.display.Input();//创建一个 Input 类的实例对象 input 。
		*input.text="这个是一个 Input 文本示例。";
		*input.color="#008fff";//设置 input 的文本颜色。
		*input.font="Arial";//设置 input 的文本字体。
		*input.bold=true;//设置 input 的文本显示为粗体。
		*input.fontSize=30;//设置 input 的字体大小。
		*input.wordWrap=true;//设置 input 的文本自动换行。
		*input.x=100;//设置 input 对象的属性 x 的值，用于控制 input 对象的显示位置。
		*input.y=100;//设置 input 对象的属性 y 的值，用于控制 input 对象的显示位置。
		*input.width=300;//设置 input 的宽度。
		*input.height=200;//设置 input 的高度。
		*input.italic=true;//设置 input 的文本显示为斜体。
		*input.borderColor="#fff000";//设置 input 的文本边框颜色。
		*Laya.stage.addChild(input);//将 input 添加到显示列表。
		*input.on(laya.events.Event.FOCUS,this,onFocus);//给 input 对象添加获得焦点事件侦听。
		*input.on(laya.events.Event.BLUR,this,onBlur);//给 input 对象添加失去焦点事件侦听。
		*input.on(laya.events.Event.INPUT,this,onInput);//给 input 对象添加输入字符事件侦听。
		*input.on(laya.events.Event.ENTER,this,onEnter);//给 input 对象添加敲回车键事件侦听。
		*}
	*function onFocus()
	*{
		*console.log("输入框 input 获得焦点。");
		*}
	*function onBlur()
	*{
		*console.log("输入框 input 失去焦点。");
		*}
	*function onInput()
	*{
		*console.log("用户在输入框 input 输入字符。文本内容：",input.text);
		*}
	*function onEnter()
	*{
		*console.log("用户在输入框 input 内敲回车键。");
		*}
	*</listing>
	*<listing version="3.0">
	*import Input=laya.display.Input;
	*class Input_Example {
		*private input:Input;
		*constructor(){
			*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*this.onInit();
			*}
		*private onInit():void {
			*this.input=new Input();//创建一个 Input 类的实例对象 input 。
			*this.input.text="这个是一个 Input 文本示例。";
			*this.input.color="#008fff";//设置 input 的文本颜色。
			*this.input.font="Arial";//设置 input 的文本字体。
			*this.input.bold=true;//设置 input 的文本显示为粗体。
			*this.input.fontSize=30;//设置 input 的字体大小。
			*this.input.wordWrap=true;//设置 input 的文本自动换行。
			*this.input.x=100;//设置 input 对象的属性 x 的值，用于控制 input 对象的显示位置。
			*this.input.y=100;//设置 input 对象的属性 y 的值，用于控制 input 对象的显示位置。
			*this.input.width=300;//设置 input 的宽度。
			*this.input.height=200;//设置 input 的高度。
			*this.input.italic=true;//设置 input 的文本显示为斜体。
			*this.input.borderColor="#fff000";//设置 input 的文本边框颜色。
			*Laya.stage.addChild(this.input);//将 input 添加到显示列表。
			*this.input.on(laya.events.Event.FOCUS,this,this.onFocus);//给 input 对象添加获得焦点事件侦听。
			*this.input.on(laya.events.Event.BLUR,this,this.onBlur);//给 input 对象添加失去焦点事件侦听。
			*this.input.on(laya.events.Event.INPUT,this,this.onInput);//给 input 对象添加输入字符事件侦听。
			*this.input.on(laya.events.Event.ENTER,this,this.onEnter);//给 input 对象添加敲回车键事件侦听。
			*}
		*private onFocus():void {
			*console.log("输入框 input 获得焦点。");
			*}
		*private onBlur():void {
			*console.log("输入框 input 失去焦点。");
			*}
		*private onInput():void {
			*console.log("用户在输入框 input 输入字符。文本内容：",this.input.text);
			*}
		*private onEnter():void {
			*console.log("用户在输入框 input 内敲回车键。");
			*}
		*}
	*</listing>
	*@author yung
	*/
	//class laya.display.Input extends laya.display.Text
	var Input=(function(_super){
		function Input(){
			this._focus=false;
			this._multiline=false;
			this._editable=true;
			this._restrictPattern=null;
			this.inputElementXAdjuster=0;
			this.inputElementYAdjuster=0;
			this.title='';
			Input.__super.call(this);
			this._maxChars=1E5;
			this._width=100;
			this._height=20;
			this.multiline=false;
			this.on("mousedown",this,this.onMouseDown);
			this.on("undisplay",this,this.onUnDisplay);
		}

		__class(Input,'laya.display.Input',_super);
		var __proto=Input.prototype;
		/**@private */
		__proto.onStageDown=function(e){
			if (e.target==this)
				return;
			if ((e.target instanceof laya.display.Input )){
				this.focusOut();
				this.removeNeedlessInputMethod();
			}else
			this.focus=false;
			Laya.stage.off("mousedown",this,this.onStageDown);
		}

		/**@private */
		__proto.onUnDisplay=function(e){
			this.focus=false;
		}

		/**@private */
		__proto.onMouseDown=function(e){
			this.focus=true;
			if (!Browser.onMobile)
				Laya.stage.on("mousedown",this,this.onStageDown);
		}

		/**@inheritDoc */
		__proto.render=function(context,x,y){
			laya.display.Sprite.prototype.render.call(this,context,x,y);
		}

		/**
		*在输入期间，如果Input实例的位置改变，调用该方法同步输入框的位置
		*/
		__proto.syncInputPosition=function(){
			var style=this.nativeInput.style;
			var stage=Laya.stage;
			var rec;
			rec=Utils1.getGlobalPosAndScale(this);
			var a=stage._canvasTransform.a,d=stage._canvasTransform.d;
			style.left=(rec.x+this.padding[3]+this.inputElementXAdjuster)*stage.clientScaleX *a+stage.offset.x+"px";
			style.top=(rec.y+this.padding[0]+this.inputElementYAdjuster)*stage.clientScaleY *d+stage.offset.y+"px";
			if (!this._getVisible())this.focus=false;
			if (stage.transform || rec.width !=1 || rec.height !=1){
				var ts="scale("+stage.clientScaleX *a *rec.width+","+stage.clientScaleY *d *rec.height+")";
				if (ts !=style.transform){
					style.transformOrigin="0 0";
					style.transform=ts;
				}
			}
		}

		/**@private */
		__proto._getVisible=function(){
			var target=this;
			while (target){
				if (target.visible===false)return false;
				target=target.parent;
			}
			return true;
		}

		/**选中所有文本*/
		__proto.select=function(){
			this.nativeInput.select();
		}

		__proto.focusIn=function(){
			var input=this.nativeInput;
			this._focus=true;
			var cssText=Input.cssStyle;
			cssText+=";white-space:"+(this.wordWrap ? "normal" :"nowrap");
			input.readOnly=!this._editable;
			input.maxLength=this._maxChars;
			var padding=this.padding;
			var inputWid=this._width-padding[1]-padding[3];
			var inputHei=this._height-padding[0]-padding[2];
			cssText+=";width:"+inputWid+"px";
			cssText+=";height:"+inputHei+"px";
			cssText+=";color:"+this.color;
			cssText+=";font-size:"+this.fontSize+"px";
			cssText+=";font-family:"+this.font;
			cssText+=";line-height:"+(this.leading+this.fontSize)+"px";
			cssText+=";font-style:"+(this.italic ? "italic" :"normal");
			cssText+=";font-weight:"+(this.bold ? "bold" :"normal");
			cssText+=";text-align:"+this.align;
			var temp=this._text;
			input.value=temp;
			this._text="";
			this.typeset();
			this._text=temp;
			input.style.cssText=cssText;
			input.type=this.asPassword ? "password" :"input";
			input.focus();
			Laya.stage.off("keydown",this,this.onKeyDown);
			Laya.stage.on("keydown",this,this.onKeyDown);
			Laya.stage.focus=this;
			this.event("focus");
			Laya.timer.frameLoop(1,this,this.syncInputPosition);
		}

		__proto.focusOut=function(){
			this._focus=false;
			var temp=this._text || "";
			this._text="";
			_super.prototype._$set_text.call(this,temp);
			Laya.stage.off("keydown",this,this.onKeyDown);
			Laya.stage.focus=null;
			this.event("blur");
			Browser.document.body.scrollTop=0;
			Laya.timer.clear(this,this.syncInputPosition);
		}

		__proto.removeNeedlessInputMethod=function(){
			var body=Browser.document.body;
			if (!this._multiline && body.contains(Input.input)&& body.contains(Input.area))
				Browser.document.body.removeChild(Input.input);
			else if (this._multiline && body.contains(Input.area)&& body.contains(Input.input))
			Browser.document.body.removeChild(Input.area);
		}

		/**@private */
		__proto.onKeyDown=function(e){
			if (e.keyCode===13)this.event("enter");
		}

		/**表示是否是多行输入框。*/
		__getset(0,__proto,'multiline',function(){
			return this._multiline;
			},function(value){
			this._multiline=value;
			this.valign=value ? "top" :"middle";
			if (!Browser.onMobile){
				if (value){
					Input.area || Input.initInput(Input.area=Browser.createElement("textarea"));
					}else {
					Input.input || Input.initInput(Input.input=Browser.createElement("input"));
				}
			}
		});

		__getset(0,__proto,'color',_super.prototype._$get_color,function(value){
			if (this._focus)
				this.nativeInput.style.color=value;
			_super.prototype._$set_color.call(this,value);
		});

		/**
		*获取对输入框的引用实例。
		*/
		__getset(0,__proto,'nativeInput',function(){
			return this._multiline ? Input.area :Input.input;
		});

		// 因此 调用focus接口是无法都在移动平台立刻弹出键盘的
		/**
		*表示焦点是否在显示对象上。
		*/
		__getset(0,__proto,'focus',function(){
			return this._focus;
			},function(value){
			if (Browser.onMobile){
				if (value && this._editable){
					var str=Browser.window.prompt(this.title,this._text || '');
					if (str !=null){
						if (this._restrictPattern)
							str=str.replace(this._restrictPattern,'');
						this.text=str;
						this.event("input");
					}
				}
				return;
			};
			var input=this.nativeInput;
			if (this._focus!==value){
				laya.display.Input.isInputting=value;
				if (value){
					input.target && (input.target.focus=false);
					input.target=this;
					Browser.document.body.appendChild(input);
					this.focusIn();
					}else {
					input.target=null;
					this.focusOut();
					Browser.document.body.removeChild(input);
				}
			}
		});

		/**@inheritDoc */
		__getset(0,__proto,'text',function(){
			if (this._focus)
				return this.nativeInput.value;
			else
			return this._text;
			},function(value){
			if (this._focus){
				this.nativeInput.value=value || '';
			}
			_super.prototype._$set_text.call(this,value);
		});

		/**
		*获取字符数量限制，默认为10000
		*设置字符数量限制，小于等于0的值将会限制字符数量为10000
		*/
		__getset(0,__proto,'maxChars',function(){
			return this._maxChars;
			},function(value){
			if (value <=0)
				value=1E5;
			this._maxChars=value;
		});

		/**限制输入的字符*/
		__getset(0,__proto,'restrict',function(){
			return this._restrictPattern.source;
			},function(pattern){
			if (pattern){
				pattern="[^"+pattern+"]";
				if (pattern.indexOf("^^")>-1)
					pattern=pattern.replace("^^","");
				this._restrictPattern=new RegExp(pattern,"g");
			}else
			this._restrictPattern=null;
		});

		/**
		*设置可编辑状态。
		*/
		__getset(0,__proto,'editable',function(){
			return this._editable;
			},function(value){
			this._editable=value;
		});

		Input.getActiveInput=function(){
			if (Browser.document.body.contains(Input.input))
				return Input.input;
			else if (Browser.document.body.contains(Input.area))
			return Input.area;
			return null;
		}

		Input.initInput=function(input){
			var style=input.style;
			style.cssText=Input.cssStyle;
			input.addEventListener('input',function(e){
				var target=input.target;
				if (!target)
					return;
				var value=input.value;
				if (target._restrictPattern){
					value=value.replace(target._restrictPattern,"");
					input.value=value;
				}
				target._text=value;
				target.event("input");
			});
			input.addEventListener('mousemove',Input._stopEvent);
			input.addEventListener('mousedown',Input._stopEvent);
			input.addEventListener('touchmove',Input._stopEvent);
		}

		Input._stopEvent=function(e){
			e.stopPropagation();
		}

		Input.cssStyle="position:absolute;background-color:transparent;border:none;outline:none;resize:none;overflow:hidden;z-index:999";
		Input.input=null
		Input.area=null
		Input.inputHeight=50;
		Input.textAreaHeight=75;
		Input.inputFontSize=25;
		Input.borderStyle="3px solid orange";
		Input.backgroundStyle="Linen";
		Input.isInputting=false;
		return Input;
	})(Text)


	/**
	*
	*@author ww
	*@version 1.0
	*
	*@created 2015-9-29 上午11:17:35
	*/
	//class tools.debugUI.DButton extends laya.display.Text
	var DButton=(function(_super){
		function DButton(){
			DButton.__super.call(this);
			this.bgColor="#ffff00";
			this.wordWrap=false;
			this.mouseEnabled=true;
		}

		__class(DButton,'tools.debugUI.DButton',_super);
		return DButton;
	})(Text)


	/**
	*
	*@author ww
	*@version 1.0
	*
	*@created 2015-9-29 上午11:57:39
	*/
	//class tools.debugUI.TraceOutUI extends laya.display.Text
	var TraceOutUI=(function(_super){
		function TraceOutUI(){
			this.mHeight=200;
			TraceOutUI.__super.call(this);
			this.wordWrap=true;
			this.bgColor="#000000";
			this.color="#ffffff";
			this.width=300;
			this.scrollRect=new Rectangle(0,0,400,this.mHeight);
			this.out("hello Debug");
		}

		__class(TraceOutUI,'tools.debugUI.TraceOutUI',_super);
		var __proto=TraceOutUI.prototype;
		__proto.onTouchScrollChange=function(){}
		// this.scrollRect.y=_touchScroll.value;
		__proto.out=function(str){
			str=String(str);
			if(this.textHeight>1500){
				this.text=str+"\ncleared";
				}else{
				this.text=str+"\n"+this.text;
			}
			if(!this.scrollRect)
				this.scrollRect=new Rectangle(0,0,400,this.mHeight);
		}

		return TraceOutUI;
	})(Text)


	//class laya.ani.bone.Skeleton extends laya.display.Animation
	var Skeleton=(function(_super){
		function Skeleton(tmplete){
			this._tp_=null;
			Skeleton.__super.call(this);
			if (!tmplete)return;
			this._tp_=tmplete;this._count=tmplete.frameCount;
			this.interval=1000 / tmplete.frameRate;
			this.frames=this._tp_._graphicsArrs_[0];
		}

		__class(Skeleton,'laya.ani.bone.Skeleton',_super);
		var __proto=Skeleton.prototype;
		__proto.setTpl=function(tpl){
			this._tp_=tpl;this._count=tpl.frameCount;
			this.interval=1000 / tpl.frameRate;
			this.setAnim(0);
		}

		__proto.setAnim=function(index){
			this.frames=this._tp_._graphicsArrs_[index];
		}

		__proto.stAnimName=function(str){
			this.frames=this._tp_._graphicsArrs_[this._tp_.animNames[str]];
		}

		__proto.pause=function(frame){
			(frame===void 0)&& (frame=-1);
			frame >-1 && (this.index=frame);
			this.stop();
		}

		__getset(0,__proto,'frames',_super.prototype._$get_frames,function(value){
			this._frames=value;
			this._renderType |=0x100;
			this.repaint();
		});

		__getset(0,__proto,'index',_super.prototype._$get_index,function(value){
			this._index=value;
			if ((this._graphics=this._frames[value])!=null){
				this.repaint();
				return;
			}
			this._graphics=this._frames[value]=this._tp_.planish(value,this._frames._index_);
			this.repaint();
		});

		return Skeleton;
	})(Animation)


	/**
	*...
	*@author laya
	*/
	//class laya.resource.HTMLImage extends laya.resource.FileBitmap
	var HTMLImage=(function(_super){
		function HTMLImage(im){
			this._recreateLock=false;
			this._needReleaseAgain=false;
			this._source=im || new Browser.window.Image();
			HTMLImage.__super.call(this);
		}

		__class(HTMLImage,'laya.resource.HTMLImage',_super);
		var __proto=HTMLImage.prototype;
		/***重新创建资源*/
		__proto.recreateResource=function(){
			var _$this=this;
			if (this._src==="")
				throw new Error("src不能为空！");
			if (!this._source){
				this._recreateLock=true;
				var _this=this;
				this._source=new Browser.window.Image();
				this._source.onload=function (){
					_this._source.onload=null;
					if (_this._needReleaseAgain){
						_this._needReleaseAgain=false;
						_this._source=null;
						return;
					}
					_this.memorySize=_$this._w *_$this._h *4;
					_this._recreateLock=false;
					_this.compoleteCreate();
				};
				this._source.src=this._src;
			}
		}

		/***销毁资源*/
		__proto.detoryResource=function(){
			if (this._recreateLock)
				this._needReleaseAgain=true;
			(this._source)&& (this._source=null,this.memorySize=0);
		}

		/***调整尺寸*/
		__proto.onresize=function(){
			this._w=this._source.width;
			this._h=this._source.height;
		}

		/***
		*获取HTML Image
		*@return HTML Image
		*/
		__getset(0,__proto,'source',function(){
			return this._source;
		});

		/***
		*设置onload函数
		*@param value onload函数
		*/
		__getset(0,__proto,'onload',null,function(value){
			var _$this=this;
			this._onload=value;
			this._source && (this._source.onload=this._onload !=null ? (function(){
				_$this.onresize();
				_$this._onload();
			}):null);
		});

		/**
		*设置文件路径全名
		*@param 文件路径全名
		*/
		__getset(0,__proto,'src',_super.prototype._$get_src,function(value){
			this._src=value;
			this._source && (this._source.src=this._src);
		});

		/***
		*设置onerror函数
		*@param value onerror函数
		*/
		__getset(0,__proto,'onerror',null,function(value){
			var _$this=this;
			this._onerror=value;
			this._source && (this._source.onerror=this._onerror !=null ? (function(){
				_$this._onerror()
			}):null);
		});

		return HTMLImage;
	})(FileBitmap)


	/**
	*...
	*@author
	*/
	//class laya.webgl.resource.WebGLImage extends laya.resource.FileBitmap
	var WebGLImage=(function(_super){
		function WebGLImage(im){
			this._recreateLock=false;
			this._needReleaseAgain=false;
			this._image=null;
			this.repeat=false;
			this.mipmap=false;
			this.minFifter=0;
			this.magFifter=0;
			this.createOwnSource=false;
			WebGLImage.__super.call(this);
			this.repeat=true;
			this.mipmap=false;
			this.minFifter=-1;
			this.magFifter=-1;
			this._image=im || new Browser.window.Image();
			this.createOwnSource=true;
		}

		__class(WebGLImage,'laya.webgl.resource.WebGLImage',_super);
		var __proto=WebGLImage.prototype;
		/***重新创建资源*/
		__proto.recreateResource=function(){
			if (this._src==="")
				throw new Error("src不能为空！");
			var isPOT=Arith.isPOT(this.width,this.height);
			if (!this._image){
				this._recreateLock=true;
				var _this=this;
				this._image=new Browser.window.Image();
				this._image.onload=function (){
					_this._image.onload=null;
					if (_this._needReleaseAgain){
						_this._needReleaseAgain=false;
						_this._image=null;
						return;
					}
					(_this.createOwnSource)&& (_this.createWebGlTexture());
					_this.compoleteCreate();
				};
				_this._image.src=this._src;
				}else {
				if (this._recreateLock)
					return;
				(this.createOwnSource)&& (this.createWebGlTexture());
				this.compoleteCreate();
			}
		}

		/***复制资源,此方法为浅复制*/
		__proto.copyTo=function(dec){
			var webglImage=dec;
			webglImage._image=this._image;
			laya.resource.Bitmap.prototype.copyTo.call(this,webglImage);
		}

		/***销毁资源*/
		__proto.detoryResource=function(){
			if (this._recreateLock)
				this._needReleaseAgain=true;
			if (this._source){
				(this.createOwnSource)&& (WebGL.mainContext.deleteTexture(this._source));
				this._source=null;
				this.memorySize=0;
			}
		}

		__proto.createWebGlTexture=function(){
			var gl=WebGL.mainContext;
			if (!this._image){
				throw "create GLTextur err:no data:"+this._image;
			};
			var glTex=this._source=gl.createTexture();
			gl.bindTexture(0x0DE1,glTex);
			gl.texImage2D(0x0DE1,0,0x1908,0x1908,0x1401,this._image);
			var minFifter=this.minFifter;
			var magFifter=this.magFifter;
			var repeat=this.repeat ? 0x2901 :0x812F;
			var isPOT=Arith.isPOT(this.width,this.height);
			if (isPOT){
				if (this.mipmap)
					(minFifter!==-1)|| (minFifter=0x2703);
				else
				(minFifter!==-1)|| (minFifter=0x2601);
				(magFifter!==-1)|| (magFifter=0x2601);
				gl.texParameteri(0x0DE1,0x2800,magFifter);
				gl.texParameteri(0x0DE1,0x2801,minFifter);
				gl.texParameteri(0x0DE1,0x2802,repeat);
				gl.texParameteri(0x0DE1,0x2803,repeat);
				this.mipmap && gl.generateMipmap(0x0DE1);
				}else {
				(minFifter!==-1)|| (minFifter=0x2601);
				(magFifter!==-1)|| (magFifter=0x2601);
				gl.texParameteri(0x0DE1,0x2801,minFifter);
				gl.texParameteri(0x0DE1,0x2800,magFifter);
				gl.texParameteri(0x0DE1,0x2802,0x812F);
				gl.texParameteri(0x0DE1,0x2803,0x812F);
			}
			gl.bindTexture(0x0DE1,null);
			this._image=null;
			if (this.createOwnSource && isPOT)
				this.memorySize=this._w *this._h *4 *(1+1 / 3);
			else
			this.memorySize=this._w *this._h *4;
			this._recreateLock=false;
		}

		/***调整尺寸*/
		__proto.onresize=function(){
			this._w=this._image.width;
			this._h=this._image.height;
		}

		/**
		*返回HTML Image,as3无internal货friend，通常禁止开发者修改image内的任何属性
		*@param HTML Image
		*/
		__getset(0,__proto,'image',function(){
			return this._image;
		});

		/***
		*设置onload函数
		*@param value onload函数
		*/
		__getset(0,__proto,'onload',null,function(value){
			var _$this=this;
			this._onload=value;
			this._image && (this._image.onload=this._onload !=null ? (function(){
				_$this.onresize();
				_$this._onload();
			}):null);
		});

		/**
		*设置文件路径全名
		*@param 文件路径全名
		*/
		__getset(0,__proto,'src',_super.prototype._$get_src,function(value){
			this._src=value;
			this._image && (this._image.src=value);
		});

		/***
		*设置onerror函数
		*@param value onerror函数
		*/
		__getset(0,__proto,'onerror',null,function(value){
			var _$this=this;
			this._onerror=value;
			this._image && (this._image.onerror=this._onerror !=null ? (function(){
				_$this._onerror()
			}):null);
		});

		return WebGLImage;
	})(FileBitmap)


	/**
	*<code>View</code> 是一个视图类。
	*
	*@internal <p><code>View</code></p>
	*@author yung
	*/
	//class laya.ui.View extends laya.ui.Box
	var View=(function(_super){
		function View(){View.__super.call(this);;
		};

		__class(View,'laya.ui.View',_super);
		var __proto=View.prototype;
		/**
		*@private
		*通过视图数据创建视图。
		*@param uiView 视图数据信息。
		*/
		__proto.createView=function(uiView){
			View.createComp(uiView,this,this);
		}

		/**
		*@private
		*装载UI视图。用于加载模式。
		*@param path
		*/
		__proto.loadUI=function(path){
			var uiView=View.uiMap[path];
			uiView && this.createView(uiView);
		}

		View.createComp=function(uiView,comp,view){
			comp=comp || View.getCompInstance(uiView);
			var child=uiView.child;
			if (child){
				for (var i=0,n=child.length;i<n;i++){
					var node=child[i];
					if (comp.hasOwnProperty("itemRender")&& node.props.name=="render"){
						(comp).itemRender=node;
						}else {
						comp.addChild(View.createComp(node,null,view));
					}
				}
			};
			var props=uiView.props;
			for (var prop in props){
				var value=props[prop];
				View.setCompValue(comp,prop,value,view);
			}
			if (comp["initItems"])(comp).initItems();
			return comp;
		}

		View.setCompValue=function(comp,prop,value,view){
			if (prop==="var" && view){
				view[value]=comp;
				}else if (prop==="width" || prop==="height" || prop==="x" || prop==="y" || prop==="pivotX" || prop==="pivotY" || (typeof (comp[prop])=='number')){
				comp[prop]=Number(value);
				}else {
				comp[prop]=(value==="true" ? true :(value==="false" ? false :value))
			}
		}

		View.getCompInstance=function(json){
			var runtime=json.props ? json.props.runtime :"";
			var compClass=runtime ? (View.viewClassMap[runtime] || Laya["__classmap"][runtime]):View.uiClassMap[json.type];
			return compClass ? new compClass():null;
		}

		View.regComponent=function(key,compClass){
			View.uiClassMap[key]=compClass;
		}

		View.regViewRuntime=function(key,compClass){
			View.viewClassMap[key]=compClass;
		}

		View.uiMap={};
		View.viewClassMap={};
		__static(View,
		['uiClassMap',function(){return this.uiClassMap={"ViewStack":ViewStack,"LinkButton":Button,"TextArea":TextArea,"ColorPicker":ColorPicker,"Box":Box,"Button":Button,"CheckBox":CheckBox,"Clip":Clip,"ComboBox":ComboBox,"Component":Component,"HScrollBar":HScrollBar,"HSlider":HSlider,"Image":Image2,"Label":Label,"List":List,"Panel":Panel,"ProgressBar":ProgressBar,"Radio":Radio,"RadioGroup":RadioGroup,"ScrollBar":ScrollBar,"Slider":Slider,"Tab":Tab,"TextInput":TextInput,"View":View,"VScrollBar":VScrollBar,"VSlider":VSlider,"Tree":Tree,"HBox":HBox,"VBox":VBox};}
		]);
		return View;
	})(Box)


	/**
	*...
	*@author ww
	*/
	//class laya.editor.comonents.LayoutDragBar extends laya.editor.comonents.DragBar
	var LayoutDragBar=(function(_super){
		function LayoutDragBar(mouseType){
			this.type=0;
			this._updaters=[];
			this.relativeO={};
			(mouseType===void 0)&& (mouseType="R");
			LayoutDragBar.__super.call(this,mouseType);
		}

		__class(LayoutDragBar,'laya.editor.comonents.LayoutDragBar',_super);
		var __proto=LayoutDragBar.prototype;
		/**
		*获取可拖动范围
		*@return
		*
		*/
		__proto.getDragArea=function(){
			var area;
			area=new Rectangle();
			var borderVar=NaN;
			switch (this.type){
				case 0:
					area.y=this.y;
					area.height=0;
					area.x=this.getBorderVar("right","left",0,false)+150;
					borderVar=this.x+this.getBorderVar("left","width",999,true);
					borderVar-=150;
					if (borderVar < this.x)
						borderVar=this.x;
					area.width=borderVar-area.x;
					break ;
				case 1:
					area.y=this.getBorderVar("down","top",0,false)+150;
					borderVar=this.y+this.getBorderVar("up","height",999,true);
					borderVar-=150;
					if (borderVar < this.y)
						borderVar=this.y;
					area.height=borderVar-area.y;
					area.x=this.x;
					area.width=0;
					break ;
				}
			return area;
		}

		__proto.changeSize=function(){
			laya.ui.Component.prototype.changeSize.call(this);
			var g=this.graphics;
			g.clear();
			this.updates();
		}

		__proto.updates=function(){
			var i=0,len=0;
			len=this._updaters.length;
			for (i=0;i < len;i++){
				this._updaters[i].update();
			}
		}

		__proto.getBorderVar=function(type,sign,sValue,isMin){
			(isMin===void 0)&& (isMin=true);
			var i=0,len=0;
			var uList=this._updaters;
			len=uList.length;
			var tValue=NaN;
			tValue=sValue;
			var tUpdater;
			var tFun;
			tFun=RelativePos.typeToFunO[type];
			if (isMin){
				for (i=0;i < len;i++){
					tUpdater=uList[i];
					if (tUpdater._fun==tFun){
						if (tUpdater.tar[sign] < tValue){
							tValue=tUpdater.tar[sign];
						}
					}
				}
			}
			else{
				for (i=0;i < len;i++){
					tUpdater=uList[i];
					if (tUpdater._fun==tFun){
						if (tUpdater.tar[sign] > tValue){
							tValue=tUpdater.tar[sign];
						}
					}
				}
			}
			return tValue;
		}

		__proto.clear=function(){
			this._updaters.length=0;
		}

		/**
		*
		*@param tar
		*
		*/
		__proto.mergeUpdates=function(tar){
			if (!tar)
				return;
			var i=0,len=0;
			var tarUpdaters;
			tarUpdaters=tar._updaters;
			tarUpdaters=Utils1.setValueArr([],tarUpdaters);
			len=tarUpdaters.length;
			var tR;
			var tType;
			for (i=0;i < len;i++){
				tR=tarUpdaters[i];
				tType=RelativePos.getTypeByFun(tR._fun);
				if(tR.tar==this||tR.to==this)continue ;
				RelativePos.addRelative(tR.tar,this,tType,tR.d);
			}
			this.updates();
		}

		__proto.copyUpdates=function(tar,side){
			var i=0,len=0;
			var tarUpdaters;
			tarUpdaters=tar._updaters;
			tarUpdaters=Utils1.setValueArr([],tarUpdaters);
			len=tarUpdaters.length;
			var tR;
			var tType;
			for (i=0;i < len;i++){
				tR=tarUpdaters[i];
				tType=RelativePos.getTypeByFun(tR._fun);
				if(tR.tar==this||tR.to==this)continue ;
				if(side==tType){
					RelativePos.addRelative(tR.tar,this,tType,tR.d);
				}
			}
			this.updates();
		}

		/**
		*
		*@param tar
		*
		*/
		__proto.removeTarget=function(tar){
			var i=0,len=0;
			len=this._updaters.length;
			for (i=len-1;i >=0;i--){
				if (this._updaters[i].tar==tar){
					this._updaters.splice(i,1);
				}
			}
		}

		__proto.findTarType=function(tar){
			var i=0,len=0;
			len=this._updaters.length;
			var tR;
			for (i=0;i < len;i++){
				tR=this._updaters[i];
				if (tR.tar==tar){
					return tR._fun;
				}
			}
			return null;
		}

		__proto.canMove=function(dirType,len){
			if (!LayoutDragBar.canMoveO){
				LayoutDragBar.canMoveO={};
				var tO;
				tO={};
				tO["left"]=true;
				tO["right"]=true;
				LayoutDragBar.canMoveO[0]=tO;
				tO={};
				tO["up"]=true;
				tO["down"]=true;
				LayoutDragBar.canMoveO[1]=tO;
			}
			if (!LayoutDragBar.canMoveO[this.type][dirType])return false;
			return false;
		}

		/**
		*对象所在的方向是否只有它一个对象
		*@param tar
		*@return
		*
		*/
		__proto.isOnly=function(tar){
			if (this.type==2)
				return false;
			var i=0,len=0;
			len=this._updaters.length;
			var fun=this.findTarType(tar);
			if (fun==null)
				return false;
			var tR;
			for (i=0;i < len;i++){
				tR=this._updaters[i];
				if ((tR._fun==fun)&& (tR.tar !=tar)){
					return false;
				}
				if (tR.tar !=tar){
					if ((tR.tar instanceof laya.editor.view.LayoutRec )){
						if ((tR.tar).disMode==1){
							return false;
						}
					}
				}
			}
			return true;
		}

		__proto.addItem=function(tar,fun,d){
			(d===void 0)&& (d=0);
			var updater;
			updater=new RelativePos(fun,tar,this,0);
			this._updaters.push(updater);
		}

		__proto.clears=function(){
			this.clear();
			this.destroy(false);
		}

		LayoutDragBar.minWidth=150;
		LayoutDragBar.canMoveO=null;
		return LayoutDragBar;
	})(DragBar)


	//class laya.editor.core.UIBox extends laya.ui.Box
	var UIBox=(function(_super){
		//
		function UIBox(){
			UIBox.__super.call(this);
		}

		__class(UIBox,'laya.editor.core.UIBox',_super);
		return UIBox;
	})(Box)


	/**
	*<code>TextInput</code> 类用于创建显示对象以显示和输入文本。
	*
	*@example 以下示例代码，创建了一个 <code>TextInput</code> 实例。
	*<listing version="3.0">
	*package
	*{
		*import laya.display.Stage;
		*import laya.ui.TextInput;
		*import laya.utils.Handler;
		*
		*public class TextInput_Example
		*{
			*public function TextInput_Example()
			*{
				*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
				*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
				*Laya.loader.load(["resource/ui/input.png"],Handler.create(this,onLoadComplete));//加载资源。
				*}
			*
			*private function onLoadComplete():void
			*{
				*var textInput:TextInput=new TextInput("这是一个TextInput实例。");//创建一个 TextInput 类的实例对象 textInput 。
				*textInput.skin="resource/ui/input.png";//设置 textInput 的皮肤。
				*textInput.sizeGrid="4,4,4,4";//设置 textInput 的网格信息。
				*textInput.color="#008fff";//设置 textInput 的文本颜色。
				*textInput.font="Arial";//设置 textInput 的文本字体。
				*textInput.bold=true;//设置 textInput 的文本显示为粗体。
				*textInput.fontSize=30;//设置 textInput 的字体大小。
				*textInput.wordWrap=true;//设置 textInput 的文本自动换行。
				*textInput.x=100;//设置 textInput 对象的属性 x 的值，用于控制 textInput 对象的显示位置。
				*textInput.y=100;//设置 textInput 对象的属性 y 的值，用于控制 textInput 对象的显示位置。
				*textInput.width=300;//设置 textInput 的宽度。
				*textInput.height=200;//设置 textInput 的高度。
				*Laya.stage.addChild(textInput);//将 textInput 添加到显示列表。
				*}
			*
			*}
		*
		*}
	*</listing>
	*<listing version="3.0">
	*Laya.init(640,800);//设置游戏画布宽高
	*Laya.stage.bgColor="#efefef";//设置画布的背景颜色
	*Laya.loader.load(["resource/ui/input.png"],laya.utils.Handler.create(this,onLoadComplete));//加载资源。
	*function onLoadComplete(){
		*var textInput=new laya.ui.TextInput("这是一个TextInput实例。");//创建一个 TextInput 类的实例对象 textInput 。
		*textInput.skin="resource/ui/input.png";//设置 textInput 的皮肤。
		*textInput.sizeGrid="4,4,4,4";//设置 textInput 的网格信息。
		*textInput.color="#008fff";//设置 textInput 的文本颜色。
		*textInput.font="Arial";//设置 textInput 的文本字体。
		*textInput.bold=true;//设置 textInput 的文本显示为粗体。
		*textInput.fontSize=30;//设置 textInput 的字体大小。
		*textInput.wordWrap=true;//设置 textInput 的文本自动换行。
		*textInput.x=100;//设置 textInput 对象的属性 x 的值，用于控制 textInput 对象的显示位置。
		*textInput.y=100;//设置 textInput 对象的属性 y 的值，用于控制 textInput 对象的显示位置。
		*textInput.width=300;//设置 textInput 的宽度。
		*textInput.height=200;//设置 textInput 的高度。
		*Laya.stage.addChild(textInput);//将 textInput 添加到显示列表。
		*}
	*</listing>
	*<listing version="3.0">
	*import Stage=laya.display.Stage;
	*import TextInput=laya.ui.TextInput;
	*import Handler=laya.utils.Handler;
	*class TextInput_Example {
		*constructor(){
			*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*Laya.loader.load(["resource/ui/input.png"],Handler.create(this,this.onLoadComplete));//加载资源。
			*}
		*private onLoadComplete():void {
			*var textInput:TextInput=new TextInput("这是一个TextInput实例。");//创建一个 TextInput 类的实例对象 textInput 。
			*textInput.skin="resource/ui/input.png";//设置 textInput 的皮肤。
			*textInput.sizeGrid="4,4,4,4";//设置 textInput 的网格信息。
			*textInput.color="#008fff";//设置 textInput 的文本颜色。
			*textInput.font="Arial";//设置 textInput 的文本字体。
			*textInput.bold=true;//设置 textInput 的文本显示为粗体。
			*textInput.fontSize=30;//设置 textInput 的字体大小。
			*textInput.wordWrap=true;//设置 textInput 的文本自动换行。
			*textInput.x=100;//设置 textInput 对象的属性 x 的值，用于控制 textInput 对象的显示位置。
			*textInput.y=100;//设置 textInput 对象的属性 y 的值，用于控制 textInput 对象的显示位置。
			*textInput.width=300;//设置 textInput 的宽度。
			*textInput.height=200;//设置 textInput 的高度。
			*Laya.stage.addChild(textInput);//将 textInput 添加到显示列表。
			*}
		*
		*}
	*</listing>
	*@author yung
	*/
	//class laya.ui.TextInput extends laya.ui.Label
	var TextInput=(function(_super){
		function TextInput(text){
			this._bg=null;
			this._skin=null;
			TextInput.__super.call(this);
			(text===void 0)&& (text="");
			this.text=text;
			this.skin=this.skin;
		}

		__class(TextInput,'laya.ui.TextInput',_super);
		var __proto=TextInput.prototype;
		__proto.preinitialize=function(){
			this.mouseEnabled=true;
		}

		/**@inheritDoc */
		__proto.destroy=function(destroyChild){
			(destroyChild===void 0)&& (destroyChild=true);
			_super.prototype.destroy.call(this,destroyChild);
			this._bg && this._bg.destroy();
			this._bg=null;
		}

		/**@inheritDoc */
		__proto.createChildren=function(){
			this.addChild(this._tf=new Input());
			this._tf.padding=Styles.inputLabelPadding;
			this._tf.on("input",this,this.onInput);
			this._tf.on("enter",this,this.onEnter);
			this._tf.on("blur",this,this.onBlur);
			this._tf.on("focus",this,this.onFocus);
		}

		/**
		*@private
		*/
		__proto.onFocus=function(e){
			this.event("focus",this);
		}

		/**
		*@private
		*/
		__proto.onBlur=function(e){
			this.event("blur",this);
		}

		/**
		*@private
		*/
		__proto.onInput=function(e){
			this.event("input",this);
		}

		/**
		*@private
		*/
		__proto.onEnter=function(e){
			this.event("enter",this);
		}

		/**@inheritDoc */
		__proto.initialize=function(){
			this.width=128;
			this.height=22;
		}

		/**选中输入框内的文本*/
		__proto.select=function(){
			(this._tf).select();
		}

		/**
		*表示此对象包含的文本背景 <code>AutoBitmap</code> 组件实例。
		*@return
		*/
		__getset(0,__proto,'bg',function(){
			return this._bg;
			},function(value){
			this.graphics=this._bg=value;
		});

		/**
		*设置可编辑状态。
		*/
		__getset(0,__proto,'editable',function(){
			return (this._tf).editable;
			},function(value){
			(this._tf).editable=value;
		});

		/**
		*设置原生input输入框的y坐标偏移。
		*/
		__getset(0,__proto,'inputElementYAdjuster',function(){
			return (this._tf).inputElementYAdjuster;
			},function(value){
			(this._tf).inputElementYAdjuster=value;
		});

		/**@inheritDoc */
		__getset(0,__proto,'height',_super.prototype._$get_height,function(value){
			_super.prototype._$set_height.call(this,value);
			this._bg && (this._bg.height=value);
		});

		/**
		*@copy laya.ui.Image#skin
		*@return
		*/
		__getset(0,__proto,'skin',function(){
			return this._skin;
			},function(value){
			if (this._skin !=value){
				this._skin=value;
				this._bg || (this.graphics=this._bg=new AutoBitmap());
				this._bg.source=Loader.getRes(this._skin);
				this._width && (this._bg.width=this._width);
				this._height && (this._bg.height=this._height);
			}
		});

		/**
		*<p>当前实例的背景图（ <code>AutoBitmap</code> ）实例的有效缩放网格数据。</p>
		*<p>数据格式："上边距,右边距,下边距,左边距,是否重复填充(值为0：不重复填充，1：重复填充)"，以逗号分隔。
		*<ul><li>例如："4,4,4,4,1"</li></ul></p>
		*@see laya.ui.AutoBitmap.sizeGrid
		*@return
		*/
		__getset(0,__proto,'sizeGrid',function(){
			return this._bg && this._bg.sizeGrid ? this._bg.sizeGrid.join(","):null;
			},function(value){
			this._bg || (this.graphics=this._bg=new AutoBitmap());
			this._bg.sizeGrid=UIUtils.fillArray(Styles.defaultSizeGrid,value,Number);
		});

		/**移动平台输入期间的标题*/
		__getset(0,__proto,'title',function(){
			return (this._tf).title;
			},function(value){
			(this._tf).title=value;
		});

		/**@inheritDoc */
		__getset(0,__proto,'width',_super.prototype._$get_width,function(value){
			_super.prototype._$set_width.call(this,value);
			this._bg && (this._bg.width=value);
		});

		/**
		*设置原生input输入框的x坐标偏移。
		*/
		__getset(0,__proto,'inputElementXAdjuster',function(){
			return (this._tf).inputElementXAdjuster;
			},function(value){
			(this._tf).inputElementXAdjuster=value;
		});

		/**
		*<p>指示当前是否是文本域。</p>
		*值为true表示当前是文本域，否则不是文本域。
		*@return
		*/
		__getset(0,__proto,'multiline',function(){
			return (this._tf).multiline;
			},function(value){
			(this._tf).multiline=value;
		});

		/**限制输入的字符*/
		__getset(0,__proto,'restrict',function(){
			return (this._tf).restrict;
			},function(pattern){
			(this._tf).restrict=pattern;
		});

		/**
		*@copy laya.display.Input#maxChars
		*/
		__getset(0,__proto,'maxChars',function(){
			return (this._tf).maxChars;
			},function(value){
			(this._tf).maxChars=value;
		});

		return TextInput;
	})(Label)


	/**
	*
	*@author ww
	*@version 1.0
	*
	*@created 2015-10-24 下午2:58:37
	*/
	//class laya.editor.core.Wraps.ContextMenu extends laya.ui.Box
	var ContextMenu=(function(_super){
		function ContextMenu(){
			this._tY=0;
			ContextMenu.__super.call(this);
		}

		__class(ContextMenu,'laya.editor.core.Wraps.ContextMenu',_super);
		var __proto=ContextMenu.prototype;
		__proto.addItem=function(item){
			this.addChild(item);
			item.y=this._tY;
			this._tY+=item.height;
			item.on("mousedown",this,this.onClick);
		}

		__proto.onClick=function(e){
			this.event("select",e);
			this.removeSelf();
		}

		__proto.show=function(posX,posY){
			(posX===void 0)&& (posX=-999);
			(posY===void 0)&& (posY=-999);
			ContextMenu.showMenu(this,posX,posY);
		}

		ContextMenu.init=function(){
			Laya.stage.on("click",null,ContextMenu.cleanMenu);
		}

		ContextMenu.cleanMenu=function(e){
			var i=0;
			var len=0;
			len=ContextMenu._menuList.length;
			for(i=0;i<len;i++){
				if(ContextMenu._menuList[i]){
					ContextMenu._menuList[i].removeSelf();
				}
			}
			ContextMenu._menuList.length=0;
			HtmlLayerManager.closeMenu();
		}

		ContextMenu.showMenu=function(menu,posX,posY){
			(posX===void 0)&& (posX=-999);
			(posY===void 0)&& (posY=-999);
			ContextMenu.cleanMenu();
			ContextMenu.adptMenu(menu);
			Laya.stage.addChild(menu);
			DisTools.showToStage(menu);
			if (posX !=-999 && posY !=-999){
				menu.pos(posX,posY);
			}
			ContextMenu._menuList.push(menu);
			HtmlLayerManager.openMenu();
		}

		ContextMenu.createMenu=function(__args){
			var args=arguments;
			return ContextMenu.createMenuByArray(args);
		}

		ContextMenu.createMenuByArray=function(args){
			var menu=new ContextMenu();
			var separatorBefore=false;
			var item;
			for (var i=0,n=args.length;i < n;i++){
				var obj=args[i];
				var info={};
				if ((typeof obj=='string')){
					info.label=obj;
					}else {
					info=obj;
				}
				if (info.label !=""){
					item=new ContextMenuItem(Sys.lang(info.label),separatorBefore);
					item.data=obj;
					menu.addItem(item);
					separatorBefore=false;
					}else {
					item=new ContextMenuItem("",separatorBefore);
					item.data=obj;
					menu.addItem(item);
					separatorBefore=true;
				}
			}
			return menu;
		}

		ContextMenu.adptMenu=function(menu){
			var tWidth=80;
			var maxWidth=80;
			var i=0,len=menu.numChildren;
			for (i=0;i < len;i++){
				tWidth=(menu.getChildAt(i)).width;
				if (maxWidth < tWidth){
					maxWidth=tWidth;
				}
			}
			for (i=0;i < len;i++){
				(menu.getChildAt(i)).width=maxWidth;
			}
		}

		ContextMenu._menuList=[];
		return ContextMenu;
	})(Box)


	/**
	*...
	*@author ww
	*/
	//class laya.editor.core.components.TextField extends laya.ui.Label
	var TextField=(function(_super){
		function TextField(text){
			(text===void 0)&& (text="");
			TextField.__super.call(this,text);
		}

		__class(TextField,'laya.editor.core.components.TextField',_super);
		var __proto=TextField.prototype;
		__getset(0,__proto,'text',_super.prototype._$get_text,function(value){
			if (this._tf.text !=value){
				this._tf.text=value;
				this._tf.typeset();
				this.event("change");
			}
		});

		__getset(0,__proto,'width',function(){
			return this._tf.textWidth;
		},_super.prototype._$set_width);

		return TextField;
	})(Label)


	/**
	*...
	*@author ww
	*/
	//class laya.editor.core.Wraps.ContextMenuItem extends laya.ui.Button
	var ContextMenuItem=(function(_super){
		function ContextMenuItem(txt,isSeparator){
			this.data=null;
			this.img=null;
			ContextMenuItem.__super.call(this);
			if(!this.img)this.img=new Image2();
			if(txt!=""){
				this.label=txt;
				this.name=txt;
				}else{
				this.label="------";
				this.height=5;
				this.mouseEnabled=false;
				this.img.skin="comp/line2.png";
				this.img.sizeGrid="0,2,0,2";
				this.addChild(this.img);
			}
			this.labelColors="#000000,#000000,#000000,#000000";
			this._text.x=10;
			this._text.padding=[-2,0,0,0];
			this._text.align="left";
			this._text.wordWrap=false;
			this._text.typeset();
			this.width=this._text.width+25;
			this.sizeGrid="3,3,3,3";
			this.skin="comp/button1.png";
		}

		__class(ContextMenuItem,'laya.editor.core.Wraps.ContextMenuItem',_super);
		var __proto=ContextMenuItem.prototype;
		__getset(0,__proto,'width',_super.prototype._$get_width,function(v){
			_super.prototype._$set_width.call(this,v);
			this.img.width=this.width;
			this.img.x=0;
		});

		return ContextMenuItem;
	})(Button)


	/**
	*<code>Panel</code> 是一个面板容器类。
	*
	*
	*
	*@author yung
	*
	*/
	//class laya.ui.Panel extends laya.ui.Box
	var Panel=(function(_super){
		function Panel(){
			this._content=null;
			this._vScrollBar=null;
			this._hScrollBar=null;
			Panel.__super.call(this);
			this.width=this.height=100;
			this._content.optimizeFloat=true;
		}

		__class(Panel,'laya.ui.Panel',_super);
		var __proto=Panel.prototype;
		/**@inheritDoc */
		__proto.destroy=function(destroyChild){
			(destroyChild===void 0)&& (destroyChild=true);
			laya.ui.Component.prototype.destroy.call(this,destroyChild);
			this._content && this._content.destroy(destroyChild);
			this._vScrollBar && this._vScrollBar.destroy(destroyChild);
			this._hScrollBar && this._hScrollBar.destroy(destroyChild);
			this._vScrollBar=null;
			this._hScrollBar=null;
			this._content=null;
		}

		__proto.destroyChildren=function(){
			this._content.destroyChildren();
		}

		/**@inheritDoc */
		__proto.createChildren=function(){
			laya.display.Node.prototype.addChild.call(this,this._content=new Box());
		}

		/**@inheritDoc */
		__proto.addChild=function(child){
			child.on("resize",this,this.onResize);
			this.callLater(this.changeScroll);
			return this._content.addChild(child);
		}

		/**
		*@private
		*子对象的 <code>Event.RESIZE</code> 事件侦听处理函数。
		*@param e
		*/
		__proto.onResize=function(e){
			this.callLater(this.changeScroll);
		}

		/**@inheritDoc */
		__proto.addChildAt=function(child,index){
			child.on("resize",this,this.onResize);
			this.callLater(this.changeScroll);
			return this._content.addChildAt(child,index);
		}

		/**@inheritDoc */
		__proto.removeChild=function(child){
			child.off("resize",this,this.onResize);
			this.callLater(this.changeScroll);
			return this._content.removeChild(child);
		}

		/**@inheritDoc */
		__proto.removeChildAt=function(index){
			this.getChildAt(index).off("resize",this,this.onResize);
			this.callLater(this.changeScroll);
			return this._content.removeChildAt(index);
		}

		/**@inheritDoc */
		__proto.removeChildren=function(beginIndex,endIndex){
			(beginIndex===void 0)&& (beginIndex=0);
			(endIndex===void 0)&& (endIndex=0x7fffffff);
			for (var i=this._content.numChildren-1;i >-1;i--){
				this._content.removeChildAt(i);
			}
			this.callLater(this.changeScroll);
			return this;
		}

		/**@inheritDoc */
		__proto.getChildAt=function(index){
			return this._content.getChildAt(index);
		}

		/**@inheritDoc */
		__proto.getChildByName=function(name){
			return this._content.getChildByName(name);
		}

		/**@inheritDoc */
		__proto.getChildIndex=function(child){
			return this._content.getChildIndex(child);
		}

		/**@private */
		__proto.changeScroll=function(){
			var contentW=this.contentWidth;
			var contentH=this.contentHeight;
			var vscroll=this._vScrollBar;
			var hscroll=this._hScrollBar;
			var vShow=vscroll && contentH > this._height;
			var hShow=hscroll && contentW > this._width;
			var showWidth=vShow ? this._width-vscroll.width :this._width;
			var showHeight=hShow ? this._height-hscroll.height :this._height;
			this.setContentSize(this._width,this._height);
			if (vscroll){
				vscroll.x=this._width-vscroll.width;
				vscroll.y=0;
				vscroll.height=this._height-(hShow ? hscroll.height :0);
				vscroll.scrollSize=Math.max(this._height *0.033,1);
				vscroll.thumbPercent=showHeight / contentH;
				vscroll.setScroll(0,contentH-showHeight,vscroll.value);
			}
			if (hscroll){
				hscroll.x=0;
				hscroll.y=this._height-hscroll.height;
				hscroll.width=this._width-(vShow ? vscroll.width :0);
				hscroll.scrollSize=Math.max(this._width *0.033,1);
				hscroll.thumbPercent=showWidth / contentW;
				hscroll.setScroll(0,contentW-showWidth,hscroll.value);
			}
		}

		/**
		*@private
		*设置内容的宽度、高度（以像素为单位）。
		*@param width 宽度。
		*@param height 高度。
		*/
		__proto.setContentSize=function(width,height){
			var content=this._content;
			content.width=width;
			content.height=height;
			content.scrollRect || (content.scrollRect=new Rectangle());
			content.scrollRect.setTo(0,0,width,height);
		}

		/**
		*@private
		*滚动条的<code><code>Event.MOUSE_DOWN</code>事件侦听处理函数。</code>事件侦听处理函数。
		*@param scrollBar 滚动条对象。
		*@param e
		*/
		__proto.onScrollBarChange=function(scrollBar,e){
			var rect=this._content.scrollRect;
			if (rect){
				var start=Math.round(scrollBar.value);
				scrollBar.isVertical ? rect.y=start :rect.x=start;
			}
		}

		/**
		*<p>滚动内容容器至设定的垂直、水平方向滚动条位置。</p>
		*@param x 水平方向滚动条属性value值。滚动条位置数字。
		*@param y 垂直方向滚动条属性value值。滚动条位置数字。
		*/
		__proto.scrollTo=function(x,y){
			(x===void 0)&& (x=0);
			(y===void 0)&& (y=0);
			if (this.vScrollBar)this.vScrollBar.value=y;
			if (this.hScrollBar)this.hScrollBar.value=x;
		}

		/**
		*刷新滚动内容。
		*/
		__proto.refresh=function(){
			this.changeScroll();
		}

		__proto.onMouseDown=function(){
			_super.prototype._$set_cacheAsBitmap.call(this,false);
			this._hScrollBar && this._hScrollBar.once("end",this,this.onScrollEnd);
			this._vScrollBar && this._vScrollBar.once("end",this,this.onScrollEnd);
		}

		__proto.onScrollEnd=function(){
			_super.prototype._$set_cacheAsBitmap.call(this,true);
		}

		/**@inheritDoc */
		__getset(0,__proto,'numChildren',function(){
			return this._content.numChildren;
		});

		/**
		*@private
		*获取内容宽度（以像素为单位）。
		*@return
		*/
		__getset(0,__proto,'contentWidth',function(){
			var max=0;
			for (var i=this._content.numChildren-1;i >-1;i--){
				var comp=this._content.getChildAt(i);
				max=Math.max(comp.x+comp.width *comp.scaleX,max);
			}
			return max;
		});

		/**
		*@private
		*获取内容高度（以像素为单位）。
		*@return
		*/
		__getset(0,__proto,'contentHeight',function(){
			var max=0;
			for (var i=this._content.numChildren-1;i >-1;i--){
				var comp=this._content.getChildAt(i);
				max=Math.max(comp.y+comp.height *comp.scaleY,max);
			}
			return max;
		});

		/**
		*垂直方向滚动条对象。
		*@return
		*/
		__getset(0,__proto,'vScrollBar',function(){
			return this._vScrollBar;
		});

		/**
		*@inheritDoc
		*@param value
		*/
		__getset(0,__proto,'width',_super.prototype._$get_width,function(value){
			_super.prototype._$set_width.call(this,value);
			this.callLater(this.changeScroll);
		});

		/**
		*水平方向滚动条皮肤。
		*@return
		*/
		__getset(0,__proto,'hScrollBarSkin',function(){
			return this._hScrollBar ? this._hScrollBar.skin :null;
			},function(value){
			if (this._hScrollBar==null){
				laya.display.Node.prototype.addChild.call(this,this._hScrollBar=new HScrollBar());
				this._hScrollBar.on("change",this,this.onScrollBarChange,[this._hScrollBar]);
				this._hScrollBar.target=this._content;
				this.callLater(this.changeScroll);
			}
			this._hScrollBar.skin=value;
		});

		/**@inheritDoc */
		__getset(0,__proto,'height',_super.prototype._$get_height,function(value){
			_super.prototype._$set_height.call(this,value);
			this.callLater(this.changeScroll);
		});

		/**
		*垂直方向滚动条皮肤。
		*@return
		*/
		__getset(0,__proto,'vScrollBarSkin',function(){
			return this._vScrollBar ? this._vScrollBar.skin :null;
			},function(value){
			if (this._vScrollBar==null){
				laya.display.Node.prototype.addChild.call(this,this._vScrollBar=new VScrollBar());
				this._vScrollBar.on("change",this,this.onScrollBarChange,[this._vScrollBar]);
				this._vScrollBar.target=this._content;
				this.callLater(this.changeScroll);
			}
			this._vScrollBar.skin=value;
		});

		/**
		*水平方向滚动条对象。
		*@return
		*/
		__getset(0,__proto,'hScrollBar',function(){
			return this._hScrollBar;
		});

		/**
		*获取内容容器对象。
		*@return
		*/
		__getset(0,__proto,'content',function(){
			return this._content;
		});

		__getset(0,__proto,'cacheAsBitmap',_super.prototype._$get_cacheAsBitmap,function(value){
			_super.prototype._$set_cacheAsBitmap.call(this,value);
			if (value)this.on("mousedown",this,this.onMouseDown);
			else this.off("mousedown",this,this.onMouseDown);
		});

		return Panel;
	})(Box)


	/**
	*时间轴当前帧标志线
	*@author ww
	*@version 1.0
	*
	*@created 2015-12-5 上午11:05:12
	*/
	//class laya.editor.view.timeline.TimeCursor extends laya.ui.Box
	var TimeCursor=(function(_super){
		function TimeCursor(){
			this.head=null;
			this.headWidth=4;
			this.headHeight=20;
			TimeCursor.__super.call(this);
			this.headWidth=TimeGrid.frameWidth;
			this.head=new Sprite();
			this.head.graphics.drawRect(0,0,this.headWidth,this.headHeight,"#770000","#ff0000",1);
			this.head.width=this.headWidth;
			this.head.height=this.headHeight;
			this.head.x=-0.5*this.head.width;
			this.head.y=-this.head.height;
			this.head.alpha=0.5;
			this.head.mouseEnabled=true;
			this.addChild(this.head);
			this.size(1,1);
		}

		__class(TimeCursor,'laya.editor.view.timeline.TimeCursor',_super);
		var __proto=TimeCursor.prototype;
		__proto.changeSize=function(){
			laya.ui.Component.prototype.changeSize.call(this);
		}

		// head.x=-0.5*head.width;
		__proto.sizeTo=function(height){
			var g;
			g=this.graphics;
			g.clear();
			g.drawLine(0,0,0,height,"#771100",1);
		}

		return TimeCursor;
	})(Box)


	/**
	*<code>List</code> 控件可显示项目列表。默认为垂直方向列表。可通过UI编辑器自定义列表。
	*
	*@example 以下示例代码，创建了一个 <code>List</code> 实例。
	*<listing version="3.0">
	*package
	*{
		*import laya.ui.List;
		*import laya.utils.Handler;
		*
		*public class List_Example
		*{
			*public function List_Example()
			*{
				*Laya.init(640,800,"false");//设置游戏画布宽高、渲染模式。
				*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
				*Laya.loader.load(["resource/ui/vscroll.png","resource/ui/vscroll$bar.png","resource/ui/vscroll$down.png","resource/ui/vscroll$up.png"],Handler.create(this,onLoadComplete));
				*}
			*
			*private function onLoadComplete():void
			*{
				*var arr:Array=[];//创建一个数组，用于存贮列表的数据信息。
				*for (var i:int=0;i &lt;20;i++)
				*{
					*arr.push({label:"item"+i});
					*}
				*
				*var list:List=new List();//创建一个 List 类的实例对象 list 。
				*list.itemRender=Item;//设置 list 的单元格渲染器。
				*list.repeatX=1;//设置 list 的水平方向单元格数量。
				*list.repeatY=10;//设置 list 的垂直方向单元格数量。
				*list.vScrollBarSkin="resource/ui/vscroll.png";//设置 list 的垂直方向滚动条皮肤。
				*list.array=arr;//设置 list 的列表数据源。
				*list.pos(100,100);//设置 list 的位置。
				*list.selectEnable=true;//设置 list 可选。
				*list.selectHandler=new Handler(this,onSelect);//设置 list 改变选择项执行的处理器。
				*Laya.stage.addChild(list);//将 list 添加到显示列表。
				*}
			*
			*private function onSelect(index:int):void
			*{
				*trace("当前选择的项目索引： index= ",index);
				*}
			*}
		*}
	*import laya.ui.Box;
	*import laya.ui.Label;
	*class Item extends Box
	*{
		*public function Item()
		*{
			*graphics.drawRect(0,0,100,20,null,"#ff0000");
			*var label:Label=new Label();
			*label.text="100000";
			*label.name="label";//设置 label 的name属性值。
			*label.size(100,20);
			*addChild(label);
			*}
		*}
	*</listing>
	*<listing version="3.0">
	*import List=laya.ui.List;
	*import Handler=laya.utils.Handler;
	*public class List_Example {
		*public List_Example(){
			*Laya.init(640,800);//设置游戏画布宽高。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*Laya.loader.load(["resource/ui/vscroll.png","resource/ui/vscroll$bar.png","resource/ui/vscroll$down.png","resource/ui/vscroll$up.png"],Handler.create(this,this.onLoadComplete));
			*}
		*private onLoadComplete():void {
			*var arr=[];//创建一个数组，用于存贮列表的数据信息。
			*for (var i:number=0;i &lt;20;i++)
			*{
				*arr.push({label:"item"+i });
				*}
			*var list:List=new List();//创建一个 List 类的实例对象 list 。
			*list.itemRender=Item;//设置 list 的单元格渲染器。
			*list.repeatX=1;//设置 list 的水平方向单元格数量。
			*list.repeatY=10;//设置 list 的垂直方向单元格数量。
			*list.vScrollBarSkin="resource/ui/vscroll.png";//设置 list 的垂直方向滚动条皮肤。
			*list.array=arr;//设置 list 的列表数据源。
			*list.pos(100,100);//设置 list 的位置。
			*list.selectEnable=true;//设置 list 可选。
			*list.selectHandler=new Handler(this,this.onSelect);//设置 list 改变选择项执行的处理器。
			*Laya.stage.addChild(list);//将 list 添加到显示列表。
			*}
		*private onSelect(index:number):void {
			*console.log("当前选择的项目索引： index= ",index);
			*}
		*}
	*import Box=laya.ui.Box;
	*import Label=laya.ui.Label;
	*class Item extends Box {
		*constructor(){
			*this.graphics.drawRect(0,0,100,20,null,"#ff0000");
			*var label:Label=new Label();
			*label.text="100000";
			*label.name="label";//设置 label 的name属性值。
			*label.size(100,20);
			*this.addChild(label);
			*}
		*}
	*</listing>
	*
	*@author yung
	*/
	//class laya.ui.List extends laya.ui.Box
	var List=(function(_super){
		function List(){
			this.selectHandler=null;
			this.renderHandler=null;
			this.mouseHandler=null;
			this.selectEnable=false;
			this.totalPage=0;
			this._content=null;
			this._scrollBar=null;
			this._itemRender=null;
			this._repeatX=0;
			this._repeatY=0;
			this._repeatX2=0;
			this._repeatY2=0;
			this._spaceX=0;
			this._spaceY=0;
			this._array=null;
			this._startIndex=0;
			this._selectedIndex=-1;
			this._page=0;
			this._isVertical=true;
			this._cellSize=20;
			this._cellOffset=0;
			this._isMoved=false;
			this._cacheBox=null;
			this.cacheContent=false;
			List.__super.call(this);
			this._cells=[];
		}

		__class(List,'laya.ui.List',_super);
		var __proto=List.prototype;
		Laya.imps(__proto,{"laya.ui.IItem":true,"laya.ui.IRender":true})
		/**@inheritDoc */
		__proto.destroy=function(destroyChild){
			(destroyChild===void 0)&& (destroyChild=true);
			laya.ui.Component.prototype.destroy.call(this,destroyChild);
			this._content && this._content.destroy(destroyChild);
			this._scrollBar && this._scrollBar.destroy(destroyChild);
			this._content=null;
			this._scrollBar=null;
			this._itemRender=null;
			this._cells=null;
			this._array=null;
			this.selectHandler=this.renderHandler=this.mouseHandler=null;
		}

		/**@inheritDoc */
		__proto.createChildren=function(){
			this.addChild(this._content=new Box());
		}

		__proto.onMouseDown=function(){
			_super.prototype._$set_cacheAsBitmap.call(this,false);
			this._scrollBar && this._scrollBar.once("end",this,this.onScrollEnd);
		}

		__proto.onScrollEnd=function(){
			_super.prototype._$set_cacheAsBitmap.call(this,true);
		}

		/**
		*@private
		*更改单元格的信息。
		*@internal 在此销毁、创建单元格，并设置单元格的位置等属性。相当于此列表内容发送改变时调用此函数。
		*/
		__proto.changeCells=function(){
			if (this._itemRender){
				for (var i=this._cells.length-1;i >-1;i--){
					this._cells[i].destroy();
				}
				this._cells.length=0;
				this.scrollBar=this.getChildByName("scrollBar");
				var cell=this.createItem();
				var cellWidth=cell.width+this._spaceX;
				var cellHeight=cell.height+this._spaceY;
				if (this._width > 0)this._repeatX2=this._isVertical ? Math.round(this._width / cellWidth):Math.ceil(this._width / cellWidth);
				if (this._height > 0)this._repeatY2=this._isVertical ? Math.ceil(this._height / cellHeight):Math.round(this._height / cellHeight);
				var listWidth=this._width ? this._width :(cellWidth *this.repeatX-this._spaceX);
				var listHeight=this._height ? this._height :(cellHeight *this.repeatY-this._spaceY);
				this._cellSize=this._isVertical ? cellHeight :cellWidth;
				this._cellOffset=this._isVertical ? (cellHeight *Math.max(this._repeatY2,this._repeatY)-listHeight-this._spaceY):(cellWidth *Math.max(this._repeatX2,this._repeatX)-listWidth-this._spaceX);
				if (this._isVertical && this._scrollBar)this._scrollBar.height=listHeight;
				else if (!this._isVertical && this._scrollBar)this._scrollBar.width=listWidth;
				this.setContentSize(listWidth,listHeight);
				var numX=this._isVertical ? this.repeatX :this.repeatY;
				var numY=(this._isVertical ? this.repeatY :this.repeatX)+(this._scrollBar ? 1 :0);
				this._createItems(0,numX,numY);
				if (this._array){
					this.array=this._array;
					this.runCallLater(this.renderItems);
				}
			}
		}

		__proto._createItems=function(startY,numX,numY){
			var box=this._content;
			if (this.cacheContent){
				if (!this._cacheBox){
					this._content.addChild(this._cacheBox=new Box());
					this._cacheBox.cacheAsBitmap=true;
				}
				box=this._cacheBox;
			}
			for (var k=startY;k < numY;k++){
				for (var l=0;l < numX;l++){
					var cell=this.createItem();
					cell.x=(this._isVertical ? l :k)*(cell.width+this._spaceX);
					cell.y=(this._isVertical ? k :l)*(cell.height+this._spaceY);
					cell.name="item"+(k *numX+l);
					box.addChild(cell);
					this.addCell(cell);
				}
			}
		}

		__proto.createItem=function(){
			return (typeof this._itemRender=='function')? new this._itemRender():View.createComp(this._itemRender);
		}

		/**
		*@private
		*添加单元格。
		*@param cell 需要添加的单元格对象。
		*/
		__proto.addCell=function(cell){
			cell.on("click",this,this.onCellMouse);
			cell.on("rightclick",this,this.onCellMouse);
			cell.on("mouseover",this,this.onCellMouse);
			cell.on("mouseout",this,this.onCellMouse);
			cell.on("mousedown",this,this.onCellMouse);
			cell.on("mouseup",this,this.onCellMouse);
			this._cells.push(cell);
		}

		/**
		*初始化单元格信息。
		*/
		__proto.initItems=function(){
			if (!this._itemRender){
				for (var i=0;i < 10000;i++){
					var cell=this.getChildByName("item"+i);
					if (cell){
						this.addCell(cell);
						continue ;
					}
					break ;
				}
			}
		}

		/**
		*设置可视区域大小。
		*
		*<p>以（0，0，width参数，height参数）组成的矩形区域为可视区域。</p>
		*@param width 可视区域宽度。
		*@param height 可视区域高度。
		*/
		__proto.setContentSize=function(width,height){
			this._content.width=width;
			this._content.height=height;
			if (this._scrollBar){
				this._content.scrollRect || (this._content.scrollRect=new Rectangle());
				this._content.scrollRect.setTo(0,0,width,height);
				this.event("resize");
			}
		}

		/**
		*@private
		*单元格的鼠标事件侦听处理函数。
		*@param e
		*/
		__proto.onCellMouse=function(e){
			if (e.type==="mousedown")this._isMoved=false;
			var cell=e.currentTarget;
			var index=this._startIndex+this._cells.indexOf(cell);
			if (index < 0)return;
			if (e.type==="click" || e.type==="rightclick"){
				if (this.selectEnable && !this._isMoved)this.selectedIndex=index;
				else this.changeCellState(cell,true,0);
				}else if ((e.type==="mouseover" || e.type==="mouseout")&& this._selectedIndex!==index){
				this.changeCellState(cell,e.type==="mouseover",0);
			}
			this.mouseHandler && this.mouseHandler.runWith([e,index]);
		}

		/**
		*@private
		*改变单元格的可视状态。
		*@param cell 单元格对象。
		*@param visable 是否显示。
		*@param index 单元格的属性 <code>index</code> 值。
		*/
		__proto.changeCellState=function(cell,visable,index){
			var selectBox=cell.getChildByName("selectBox");
			if (selectBox){
				this.selectEnable=true;
				selectBox.visible=visable;
				selectBox.index=index;
			}
		}

		__proto.changeSize=function(){
			laya.ui.Component.prototype.changeSize.call(this);
			if (this._scrollBar)
				Laya.timer.once(10,this,this.onScrollBarChange);
		}

		/**
		*@private
		*滚动条的 <code>Event.CHANGE</code> 事件侦听处理函数。
		*@param e
		*/
		__proto.onScrollBarChange=function(e){
			this.runCallLater(this.changeCells);
			var scrollValue=this._scrollBar.value;
			if (!this.cacheContent){
				var lineX=(this._isVertical ? this.repeatX :this.repeatY);
				var lineY=(this._isVertical ? this.repeatY :this.repeatX);
				var index=Math.floor(scrollValue / this._cellSize)*lineX;
				if (index > this._startIndex){
					var num=index-this._startIndex;
					var down=true;
					var toIndex=this._startIndex+lineX *(lineY+1);
					this._isMoved=true;
					}else if (index < this._startIndex){
					num=this._startIndex-index;
					down=false;
					toIndex=this._startIndex-1;
					this._isMoved=true;
				}
				for (var i=0;i < num;i++){
					if (down){
						var cell=this._cells.shift();
						this._cells[this._cells.length]=cell;
						var cellIndex=toIndex+i;
						}else {
						cell=this._cells.pop();
						this._cells.unshift(cell);
						cellIndex=toIndex-i;
					};
					var pos=Math.floor(cellIndex / lineX)*this._cellSize;
					this._isVertical ? cell.y=pos :cell.x=pos;
					this.renderItem(cell,cellIndex);
				}
				this._startIndex=index;
			}
			if (this._isVertical)this._content.scrollRect.y=scrollValue;
			else this._content.scrollRect.x=scrollValue;
			this.repaint();
		}

		__proto.posCell=function(cell,cellIndex){
			if (!this._scrollBar)return;
			var lineX=(this._isVertical ? this.repeatX :this.repeatY);
			var lineY=(this._isVertical ? this.repeatY :this.repeatX);
			var pos=Math.floor(cellIndex / lineX)*this._cellSize;
			this._isVertical ? cell.y=pos :cell.x=pos;
		}

		/**
		*@private
		*改变单元格的选择状态。
		*/
		__proto.changeSelectStatus=function(){
			for (var i=0,n=this._cells.length;i < n;i++){
				this.changeCellState(this._cells[i],this._selectedIndex===this._startIndex+i,1);
			}
		}

		/**
		*@private
		*渲染单元格列表。
		*/
		__proto.renderItems=function(){
			for (var i=0,n=this._cells.length;i < n;i++){
				this.renderItem(this._cells[i],this._startIndex+i);
			}
			this.changeSelectStatus();
		}

		/**
		*渲染一个单元格。
		*@param cell 需要渲染的单元格对象。
		*@param index 单元格索引。
		*/
		__proto.renderItem=function(cell,index){
			if (index >=0 && index < this._array.length){
				cell.visible=true;
				cell.dataSource=this._array[index];
				this.posCell(cell,index);
				}else {
				cell.visible=false;
				cell.dataSource=null;
			}
			this.event("render",[cell,index]);
			this.renderHandler && this.renderHandler.runWith([cell,index]);
		}

		/**
		*刷新列表数据源。
		*/
		__proto.refresh=function(){
			this.array=this._array;
		}

		/**
		*获取单元格数据源。
		*@param index 单元格索引。
		*@return
		*/
		__proto.getItem=function(index){
			if (index >-1 && index < this._array.length){
				return this._array[index];
			}
			return null;
		}

		/**
		*修改单元格数据源。
		*@param index 单元格索引。
		*@param source 单元格数据源。
		*/
		__proto.changeItem=function(index,source){
			if (index >-1 && index < this._array.length){
				this._array[index]=source;
				if (index >=this._startIndex && index < this._startIndex+this._cells.length){
					this.renderItem(this.getCell(index),index);
				}
			}
		}

		/**
		*添加单元格数据源。
		*@param souce
		*/
		__proto.addItem=function(souce){
			this._array.push(souce);
			this.array=this._array;
		}

		/**
		*添加单元格数据源到对应的数据索引处。
		*@param souce 单元格数据源。
		*@param index 索引。
		*/
		__proto.addItemAt=function(souce,index){
			this._array.splice(index,0,souce);
			this.array=this._array;
		}

		/**
		*通过数据源索引删除单元格数据源。
		*@param index
		*/
		__proto.deleteItem=function(index){
			this._array.splice(index,1);
			this.array=this._array;
		}

		/**
		*通过可视单元格索引，获取单元格。
		*@param index 可视单元格索引。
		*@return 单元格对象。
		*/
		__proto.getCell=function(index){
			this.runCallLater(this.changeCells);
			if (index >-1 && this._cells){
				return this._cells[(index-this._startIndex)% this._cells.length];
			}
			return null;
		}

		/**
		*<p>滚动列表，以设定的数据索引对应的单元格为当前可视列表的第一项。</p>
		*@param index 单元格在数据列表中的索引。
		*/
		__proto.scrollTo=function(index){
			if (this._scrollBar){
				var numX=this._isVertical ? this.repeatX :this.repeatY;
				this._scrollBar.value=Math.floor(index / numX)*this._cellSize;
				}else {
				this.startIndex=index;
			}
		}

		/**
		*<p>缓动滚动列表，以设定的数据索引对应的单元格为当前可视列表的第一项。</p>
		*@param index 单元格在数据列表中的索引。
		*@param time 缓动时间
		*/
		__proto.tweenTo=function(index,time){
			(time===void 0)&& (time=200);
			if (this._scrollBar){
				var numX=this._isVertical ? this.repeatX :this.repeatY;
				Tween.to(this._scrollBar,{value:Math.floor(index / numX)*this._cellSize},time,null,null,0,true);
				}else {
				this.startIndex=index;
			}
		}

		__getset(0,__proto,'cacheAsBitmap',_super.prototype._$get_cacheAsBitmap,function(value){
			_super.prototype._$set_cacheAsBitmap.call(this,value);
			if (this._scrollBar){
				if (value)this.on("mousedown",this,this.onMouseDown);
				else this.off("mousedown",this,this.onMouseDown);
			}
		});

		/**
		*获取对 <code>List</code> 组件所包含的滚动条 <code>ScrollBar</code> 组件的引用。
		*@return
		*/
		__getset(0,__proto,'scrollBar',function(){
			return this._scrollBar;
			},function(value){
			if (this._scrollBar !=value){
				this._scrollBar=value;
				if (value){
					this.addChild(this._scrollBar);
					this._scrollBar.on("change",this,this.onScrollBarChange);
					this._isVertical=this._scrollBar.isVertical;
				}
			}
		});

		/**
		*单元格渲染器。
		*<p><b>取值：</b>
		*<ol>
		*<li>单元格类对象。</li>
		*<li> UI 的 JSON 描述。</li>
		*</ol></p>
		*@return
		*/
		__getset(0,__proto,'itemRender',function(){
			return this._itemRender;
			},function(value){
			this._itemRender=value;
			this.callLater(this.changeCells);
		});

		/**
		*获取对 <code>List</code> 组件所包含的内容容器 <code>Box</code> 组件的引用。
		*@return
		*/
		__getset(0,__proto,'content',function(){
			return this._content;
		});

		/**
		*水平方向滚动条皮肤。
		*@return
		*/
		__getset(0,__proto,'hScrollBarSkin',function(){
			return this._scrollBar ? this._scrollBar.skin :null;
			},function(value){
			this.removeChildByName("scrollBar");
			var scrollBar=new HScrollBar();
			scrollBar.name="scrollBar";
			scrollBar.bottom=0;
			scrollBar.skin=value;
			this.scrollBar=scrollBar;
			this.addChild(scrollBar);
			this.callLater(this.changeCells);
		});

		/**@inheritDoc */
		__getset(0,__proto,'height',_super.prototype._$get_height,function(value){
			_super.prototype._$set_height.call(this,value);
			this.callLater(this.changeCells);
		});

		/**
		*垂直方向滚动条皮肤。
		*@return
		*/
		__getset(0,__proto,'vScrollBarSkin',function(){
			return this._scrollBar ? this._scrollBar.skin :null;
			},function(value){
			this.removeChildByName("scrollBar");
			var scrollBar=new VScrollBar();
			scrollBar.name="scrollBar";
			scrollBar.right=0;
			scrollBar.skin=value;
			this.scrollBar=scrollBar;
			this.addChild(scrollBar);
			this.callLater(this.changeCells);
		});

		/**
		*表示当前选择的项索引。
		*@return
		*/
		__getset(0,__proto,'selectedIndex',function(){
			return this._selectedIndex;
			},function(value){
			if (this._selectedIndex !=value){
				this._selectedIndex=value;
				this.changeSelectStatus();
				this.event("change");
				this.selectHandler && this.selectHandler.runWith(value);
			}
			if (this.selectEnable && this._scrollBar){
				var numX=this._isVertical ? this.repeatX :this.repeatY;
				if (value < this._startIndex || (value+numX > this._startIndex+this.repeatX *this.repeatY)){
					this.scrollTo(value);
				}
			}
		});

		/**@inheritDoc */
		__getset(0,__proto,'width',_super.prototype._$get_width,function(value){
			_super.prototype._$set_width.call(this,value);
			this.callLater(this.changeCells);
		});

		/**
		*水平方向显示的单元格数量。
		*@return
		*/
		__getset(0,__proto,'repeatX',function(){
			return this._repeatX > 0 ? this._repeatX :this._repeatX2 > 0 ? this._repeatX2 :1;
			},function(value){
			this._repeatX=value;
			this.callLater(this.changeCells);
		});

		/**
		*垂直方向显示的单元格数量。
		*@return
		*/
		__getset(0,__proto,'repeatY',function(){
			return this._repeatY > 0 ? this._repeatY :this._repeatY2 > 0 ? this._repeatY2 :1;
			},function(value){
			this._repeatY=value;
			this.callLater(this.changeCells);
		});

		/**
		*水平方向显示的单元格之间的间距（以像素为单位）。
		*@return
		*/
		__getset(0,__proto,'spaceX',function(){
			return this._spaceX;
			},function(value){
			this._spaceX=value;
			this.callLater(this.changeCells);
		});

		/**
		*列表数据源。
		*@return
		*/
		__getset(0,__proto,'array',function(){
			return this._array;
			},function(value){
			this.runCallLater(this.changeCells);
			this._array=value || [];
			if (this.cacheContent && value.length > this._cells.length){
				var numX1=this._isVertical ? this.repeatX :this.repeatY;
				var numY1=(this._isVertical ? this.repeatY :this.repeatX)+(this._scrollBar ? 1 :0);
				var num1=Math.ceil(value.length / numX1);
				this._createItems(numY1,numX1,num1);
			};
			var length=this._array.length;
			this.totalPage=Math.ceil(length / (this.repeatX *this.repeatY));
			this._selectedIndex=this._selectedIndex < length ? this._selectedIndex :length-1;
			this.startIndex=this._startIndex;
			if (this._scrollBar){
				var numX=this._isVertical ? this.repeatX :this.repeatY;
				var numY=this._isVertical ? this.repeatY :this.repeatX;
				var lineCount=Math.ceil(length / numX);
				var total=this._cellOffset > 0 ? this.totalPage+1 :this.totalPage;
				if (total > 1){
					this._scrollBar.scrollSize=this._cellSize;
					this._scrollBar.thumbPercent=numY / lineCount;
					this._scrollBar.setScroll(0,(lineCount-numY)*this._cellSize+this._cellOffset,this._isVertical ? this._content.scrollRect.y :this._content.scrollRect.x);
					this._scrollBar.target=this._content;
					}else {
					this._scrollBar.setScroll(0,0,0);
					this._scrollBar.target=this._content;
				}
			}
		});

		/**
		*垂直方向显示的单元格之间的间距（以像素为单位）。
		*@return
		*/
		__getset(0,__proto,'spaceY',function(){
			return this._spaceY;
			},function(value){
			this._spaceY=value;
			this.callLater(this.changeCells);
		});

		/**
		*当前选中的单元格数据源。
		*@return
		*/
		__getset(0,__proto,'selectedItem',function(){
			return this._selectedIndex !=-1 ? this._array[this._selectedIndex] :null;
			},function(value){
			this.selectedIndex=this._array.indexOf(value);
		});

		/**
		*获取或设置当前选择的单元格对象。
		*@return
		*/
		__getset(0,__proto,'selection',function(){
			return this.getCell(this._selectedIndex);
			},function(value){
			this.selectedIndex=this._startIndex+this._cells.indexOf(value);
		});

		/**
		*当前显示的单元格列表的开始索引。
		*@return
		*/
		__getset(0,__proto,'startIndex',function(){
			return this._startIndex;
			},function(value){
			this._startIndex=value > 0 ? value :0;
			this.callLater(this.renderItems);
		});

		/**
		*列表的当前页码。
		*@return
		*/
		__getset(0,__proto,'page',function(){
			return this._page;
			},function(value){
			this._page=value
			if (this._array){
				this._page=value > 0 ? value :0;
				this._page=this._page < this.totalPage ? this._page :this.totalPage-1;
				this.startIndex=this._page *this.repeatX *this.repeatY;
			}
		});

		/**
		*列表的数据总个数。
		*@return
		*/
		__getset(0,__proto,'length',function(){
			return this._array.length;
		});

		/**@inheritDoc */
		__getset(0,__proto,'dataSource',_super.prototype._$get_dataSource,function(value){
			this._dataSource=value;
			if (((typeof value=='number')&& Math.floor(value)==value)|| (typeof value=='string'))this.selectedIndex=Laya.__parseInt(value);
			else if ((value instanceof Array))this.array=value
			else _super.prototype._$set_dataSource.call(this,value);
		});

		/**
		*单元格集合。
		*@return
		*/
		__getset(0,__proto,'cells',function(){
			this.runCallLater(this.changeCells);
			return this._cells;
		});

		return List;
	})(Box)


	/**
	*<code>Tree</code> 控件使用户可以查看排列为可扩展树的层次结构数据。
	*
	*@example 以下示例代码，创建了一个 <code>Tree</code> 实例。
	*<listing version="3.0">
	*package
	*{
		*import laya.ui.Tree;
		*import laya.utils.Browser;
		*import laya.utils.Handler;
		*
		*public class Tree_Example
		*{
			*
			*public function Tree_Example()
			*{
				*Laya.init(640,800);
				*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
				*Laya.loader.load(["resource/ui/vscroll.png","resource/ui/vscroll$bar.png","resource/ui/vscroll$down.png","resource/ui/vscroll$up.png","resource/ui/clip_selectBox.png","resource/ui/clip_tree_folder.png","resource/ui/clip_tree_arrow.png"],Handler.create(this,onLoadComplete));
				*}
			*
			*private function onLoadComplete():void
			*{
				*var xmlString:String;//创建一个xml字符串，用于存储树结构数据。
				*xmlString="&lt;root&gt;&lt;item label='box1'&gt;&lt;abc label='child1'/&gt;&lt;abc label='child2'/&gt;&lt;abc label='child3'/&gt;&lt;abc label='child4'/&gt;&lt;abc label='child5'/&gt;&lt;/item&gt;&lt;item label='box2'&gt;&lt;abc label='child1'/&gt;&lt;abc label='child2'/&gt;&lt;abc label='child3'/&gt;&lt;abc label='child4'/&gt;&lt;/item&gt;&lt;/root&gt;";
				*var domParser:*=new Browser.window.DOMParser();//创建一个DOMParser实例domParser。
				*var xml:*=domParser.parseFromString(xmlString,"text/xml");//解析xml字符。
				*
				*var tree:Tree=new Tree();//创建一个 Tree 类的实例对象 tree 。
				*tree.scrollBarSkin="resource/ui/vscroll.png";//设置 tree 的皮肤。
				*tree.itemRender=Item;//设置 tree 的项渲染器。
				*tree.xml=xml;//设置 tree 的树结构数据。
				*tree.x=100;//设置 tree 对象的属性 x 的值，用于控制 tree 对象的显示位置。
				*tree.y=100;//设置 tree 对象的属性 y 的值，用于控制 tree 对象的显示位置。
				*tree.width=200;//设置 tree 的宽度。
				*tree.height=100;//设置 tree 的高度。
				*Laya.stage.addChild(tree);//将 tree 添加到显示列表。
				*}
			*}
		*}
	*
	*import laya.ui.Box;
	*import laya.ui.Clip;
	*import laya.ui.Label;
	*class Item extends Box
	*{
		*public function Item()
		*{
			*this.name="render";
			*this.right=0;
			*this.left=0;
			*
			*var selectBox:Clip=new Clip("resource/ui/clip_selectBox.png",1,2);
			*selectBox.name="selectBox";
			*selectBox.height=24;
			*selectBox.x=13;
			*selectBox.y=0;
			*selectBox.left=12;
			*addChild(selectBox);
			*
			*var folder:Clip=new Clip("resource/ui/clip_tree_folder.png",1,3);
			*folder.name="folder";
			*folder.x=14;
			*folder.y=4;
			*addChild(folder);
			*
			*var label:Label=new Label("treeItem");
			*label.name="label";
			*label.color="#ffff00";
			*label.width=150;
			*label.height=22;
			*label.x=33;
			*label.y=1;
			*label.left=33;
			*label.right=0;
			*addChild(label);
			*
			*var arrow:Clip=new Clip("resource/ui/clip_tree_arrow.png",1,2);
			*arrow.name="arrow";
			*arrow.x=0;
			*arrow.y=5;
			*addChild(arrow);
			*}
		*}
	*
	*
	*</listing>
	*<listing version="3.0">
	*Laya.init(640,800);//设置游戏画布宽高、渲染模式
	*Laya.stage.bgColor="#efefef";//设置画布的背景颜色
	*var res=["resource/ui/vscroll.png","resource/ui/vscroll$bar.png","resource/ui/vscroll$down.png","resource/ui/vscroll$up.png","resource/ui/clip_selectBox.png","resource/ui/clip_tree_folder.png","resource/ui/clip_tree_arrow.png"];
	*Laya.loader.load(res,new laya.utils.Handler(this,onLoadComplete));
	*function onLoadComplete(){
		*var xmlString;//创建一个xml字符串，用于存储树结构数据。
		*xmlString="&lt;root&gt;&lt;item label='box1'&gt;&lt;abc label='child1'/&gt;&lt;abc label='child2'/&gt;&lt;abc label='child3'/&gt;&lt;abc label='child4'/&gt;&lt;abc label='child5'/&gt;&lt;/item&gt;&lt;item label='box2'&gt;&lt;abc label='child1'/&gt;&lt;abc label='child2'/&gt;&lt;abc label='child3'/&gt;&lt;abc label='child4'/&gt;&lt;/item&gt;&lt;/root&gt;";
		*var domParser=new laya.utils.Browser.window.DOMParser();//创建一个DOMParser实例domParser。
		*var xml=domParser.parseFromString(xmlString,"text/xml");//解析xml字符。
		*var tree=new laya.ui.Tree();//创建一个 Tree 类的实例对象 tree 。
		*tree.scrollBarSkin="resource/ui/vscroll.png";//设置 tree 的皮肤。
		*tree.itemRender=mypackage.treeExample.Item;//设置 tree 的项渲染器。
		*tree.xml=xml;//设置 tree 的树结构数据。
		*tree.x=100;//设置 tree 对象的属性 x 的值，用于控制 tree 对象的显示位置。
		*tree.y=100;//设置 tree 对象的属性 y 的值，用于控制 tree 对象的显示位置。
		*tree.width=200;//设置 tree 的宽度。
		*tree.height=100;//设置 tree 的高度。
		*Laya.stage.addChild(tree);//将 tree 添加到显示列表。
		*}
	*(function (_super){
		*function Item(){
			*Item.__super.call(this);//初始化父类。
			*this.right=0;
			*this.left=0;
			*var selectBox=new laya.ui.Clip("resource/ui/clip_selectBox.png",1,2);
			*selectBox.name="selectBox";//设置 selectBox 的name 为“selectBox”时，将被识别为树结构的项的背景。2帧：悬停时背景、选中时背景。
			*selectBox.height=24;
			*selectBox.x=13;
			*selectBox.y=0;
			*selectBox.left=12;
			*this.addChild(selectBox);//需要使用this.访问父类的属性或方法。
			*var folder=new laya.ui.Clip("resource/ui/clip_tree_folder.png",1,3);
			*folder.name="folder";//设置 folder 的name 为“folder”时，将被识别为树结构的文件夹开启状态图表。2帧：折叠状态、打开状态。
			*folder.x=14;
			*folder.y=4;
			*this.addChild(folder);
			*var label=new laya.ui.Label("treeItem");
			*label.name="label";//设置 label 的name 为“label”时，此值将用于树结构数据赋值。
			*label.color="#ffff00";
			*label.width=150;
			*label.height=22;
			*label.x=33;
			*label.y=1;
			*label.left=33;
			*label.right=0;
			*this.addChild(label);
			*var arrow=new laya.ui.Clip("resource/ui/clip_tree_arrow.png",1,2);
			*arrow.name="arrow";//设置 arrow 的name 为“arrow”时，将被识别为树结构的文件夹开启状态图表。2帧：折叠状态、打开状态。
			*arrow.x=0;
			*arrow.y=5;
			*this.addChild(arrow);
			*};
		*Laya.class(Item,"mypackage.treeExample.Item",_super);//注册类 Item 。
		*})(laya.ui.Box);
	*</listing>
	*<listing version="3.0">
	*import Tree=laya.ui.Tree;
	*import Browser=laya.utils.Browser;
	*import Handler=laya.utils.Handler;
	*class Tree_Example {
		*
		*constructor(){*
			*Laya.init(640,800);*
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。 *
			*Laya.loader.load(["resource/ui/vscroll.png","resource/ui/vscroll$bar.png","resource/ui/vscroll$down.png","resource/ui/vscroll$up.png","resource/ui/vscroll$up.png","resource/ui/clip_selectBox.png","resource/ui/clip_tree_folder * . * png","resource/ui/clip_tree_arrow.png"],Handler.create(this,this.onLoadComplete));*
			*}*
		*private onLoadComplete():void {*
			*var xmlString:String;//创建一个xml字符串，用于存储树结构数据。 *
			*xmlString="&lt;root&gt;&lt;item label='box1'&gt;&lt;abc label='child1'/&gt;&lt;abc label='child2'/&gt;&lt;abc label='child3'/&gt;&lt;abc label='child4'/&gt;&lt;abc label='child5'/&gt;&lt;/item&gt;&lt;item label='box2'&gt;&lt;abc  * label='child1'/&gt;&lt;abc label='child2'/&gt;&lt;abc label='child3'/&gt;&lt;abc label='child4'/&gt;&lt;/item&gt;&lt;/root&gt;";
			*var domParser:any=new Browser.window.DOMParser();//创建一个DOMParser实例domParser。
			*var xml:any=domParser.parseFromString(xmlString,"text/xml");//解析xml字符。
			*
			*var tree:Tree=new Tree();//创建一个 Tree 类的实例对象 tree 。
			*tree.scrollBarSkin="resource/ui/vscroll.png";//设置 tree 的皮肤。
			*tree.itemRender=Item;//设置 tree 的项渲染器。
			*tree.xml=xml;//设置 tree 的树结构数据。
			*tree.x=100;//设置 tree 对象的属性 x 的值，用于控制 tree 对象的显示位置。
			*tree.y=100;//设置 tree 对象的属性 y 的值，用于控制 tree 对象的显示位置。
			*tree.width=200;//设置 tree 的宽度。
			*tree.height=100;//设置 tree 的高度。
			*Laya.stage.addChild(tree);//将 tree 添加到显示列表。
			*}
		*}
	*import Box=laya.ui.Box;
	*import Clip=laya.ui.Clip;
	*import Label=laya.ui.Label;
	*class Item extends Box {
		*constructor(){
			*super();
			*this.name="render";
			*this.right=0;
			*this.left=0;
			*var selectBox:Clip=new Clip("resource/ui/clip_selectBox.png",1,2);
			*selectBox.name="selectBox";
			*selectBox.height=24;
			*selectBox.x=13;
			*selectBox.y=0;
			*selectBox.left=12;
			*this.addChild(selectBox);
			*
			*var folder:Clip=new Clip("resource/ui/clip_tree_folder.png",1,3);
			*folder.name="folder";
			*folder.x=14;
			*folder.y=4;
			*this.addChild(folder);
			*
			*var label:Label=new Label("treeItem");
			*label.name="label";
			*label.color="#ffff00";
			*label.width=150;
			*label.height=22;
			*label.x=33;
			*label.y=1;
			*label.left=33;
			*label.right=0;
			*this.addChild(label);
			*
			*var arrow:Clip=new Clip("resource/ui/clip_tree_arrow.png",1,2);
			*arrow.name="arrow";
			*arrow.x=0;
			*arrow.y=5;
			*this.addChild(arrow);
			*}
		*}
	*</listing>
	*@author yung
	*/
	//class laya.ui.Tree extends laya.ui.Box
	var Tree=(function(_super){
		function Tree(){
			this._list=null;
			this._source=null;
			this._renderHandler=null;
			this._spaceLeft=10;
			this._spaceBottom=0;
			this._keepStatus=true;
			Tree.__super.call(this);
			this.width=this.height=200;
		}

		__class(Tree,'laya.ui.Tree',_super);
		var __proto=Tree.prototype;
		Laya.imps(__proto,{"laya.ui.IRender":true})
		/**@inheritDoc */
		__proto.destroy=function(destroyChild){
			(destroyChild===void 0)&& (destroyChild=true);
			laya.ui.Component.prototype.destroy.call(this,destroyChild);
			this._list && this._list.destroy(destroyChild);
			this._list=null;
			this._source=null;
			this._renderHandler=null;
		}

		/**@inheritDoc */
		__proto.createChildren=function(){
			this.addChild(this._list=new List());
			this._list.renderHandler=Handler.create(this,this.renderItem,null,false);
			this._list.repeatX=1;
			this._list.on("change",this,this.onListChange);
		}

		/**
		*@private
		*此对象包含的<code>List</code>实例的<code>Event.CHANGE</code>事件侦听处理函数。
		*/
		__proto.onListChange=function(e){
			this.event("change");
		}

		/**
		*@private
		*获取数据源集合。
		*@return
		*/
		__proto.getArray=function(){
			var arr=[];
			var item;
			for(var $each_item in this._source){
				item=this._source[$each_item];
				if (this.getParentOpenStatus(item)){
					item.x=this._spaceLeft *this.getDepth(item);
					arr.push(item);
				}
			}
			return arr;
		}

		/**
		*@private
		*获取项对象的深度。
		*
		*@param item 项对象。
		*@param num
		*@return
		*/
		__proto.getDepth=function(item,num){
			(num===void 0)&& (num=0);
			if (item.nodeParent==null)return num;
			else return this.getDepth(item.nodeParent,num+1);
		}

		/**
		*@private
		*获取项对象的上一级的打开状态。
		*@param item
		*@return
		*/
		__proto.getParentOpenStatus=function(item){
			var parent=item.nodeParent;
			if (parent==null){
				return true;
				}else {
				if (parent.isOpen){
					if (parent.nodeParent !=null)return this.getParentOpenStatus(parent);
					else return true;
					}else {
					return false;
				}
			}
		}

		/**
		*@private
		*渲染一个项对象。
		*@param cell 一个项对象。
		*@param index 项的索引。
		*/
		__proto.renderItem=function(cell,index){
			var item=cell.dataSource;
			if (item){
				cell.left=item.x;
				var arrow=cell.getChildByName("arrow");
				if (arrow){
					if (item.hasChild){
						arrow.visible=true;
						arrow.index=item.isOpen ? 1 :0;
						arrow.tag=index;
						arrow.off("click",this,this.onArrowClick);
						arrow.on("click",this,this.onArrowClick);
						}else {
						arrow.visible=false;
					}
				};
				var folder=cell.getChildByName("folder");
				if (folder){
					if (folder.clipY==2){
						folder.index=item.isDirectory ? 0 :1;
						}else {
						folder.index=item.isDirectory ? item.isOpen ? 1 :0 :2;
					}
				}
				this._renderHandler && this._renderHandler.runWith([cell,index]);
			}
		}

		/**
		*@private
		*/
		__proto.onArrowClick=function(e){
			var arrow=e.currentTarget;
			var index=arrow.tag;
			this._list.array[index].isOpen=!this._list.array[index].isOpen;
			this._list.array=this.getArray();
		}

		/**
		*通过数据项索引，设置项对象的打开状态。
		*@param index
		*@param isOpen
		*/
		__proto.setItemState=function(index,isOpen){
			if (!this._list.array[index])return;
			this._list.array[index].isOpen=isOpen;
			this._list.array=this.getArray();
		}

		__proto.fresh=function(){
			this._list.array=this.getArray();
			this.repaint();
		}

		/**
		*@private
		*
		*解析并处理XML类型的数据源。
		*@param xml
		*@param source
		*@param nodeParent
		*@param isRoot
		*/
		__proto.parseXml=function(xml,source,nodeParent,isRoot){
			var obj;
			var list=xml.childNodes;
			var childCount=list.length;
			if (!isRoot){
				obj={};
				var list2=xml.attributes;
				var attrs;
				for(var $each_attrs in list2){
					attrs=list2[$each_attrs];
					var prop=attrs.nodeName;
					var value=attrs.nodeValue;
					obj[prop]=value=="true" ? true :value=="false" ? false :value;
				}
				obj.nodeParent=nodeParent;
				if (childCount > 0)obj.isDirectory=true;
				obj.hasChild=childCount > 0;
				source.push(obj);
			}
			for (var i=0;i < childCount;i++){
				var node=list[i];
				this.parseXml(node,source,obj,false);
			}
		}

		/**
		*@private
		*处理数据项的打开状态。
		*@param oldSource
		*@param newSource
		*/
		__proto.parseOpenStatus=function(oldSource,newSource){
			for (var i=0,n=newSource.length;i < n;i++){
				var newItem=newSource[i];
				if (newItem.isDirectory){
					for (var j=0,m=oldSource.length;j < m;j++){
						var oldItem=oldSource[j];
						if (oldItem.isDirectory && this.isSameParent(oldItem,newItem)&& newItem.label==oldItem.label){
							newItem.isOpen=oldItem.isOpen;
							break ;
						}
					}
				}
			}
		}

		/**
		*@private
		*判断两个项对象在树结构中的父节点是否相同。
		*@param item1 项对象。
		*@param item2 项对象。
		*@return
		*/
		__proto.isSameParent=function(item1,item2){
			if (item1.nodeParent==null && item2.nodeParent==null)return true;
			else if (item1.nodeParent==null || item2.nodeParent==null)return false
			else {
				if (item1.nodeParent.label==item2.nodeParent.label)return this.isSameParent(item1.nodeParent,item2.nodeParent);
				else return false;
			}
		}

		/**
		*@internal ##??
		*@param key
		*/
		__proto.filter=function(key){
			if (Boolean(key)){
				var result=[];
				this.getFilterSource(this._source,result,key);
				this._list.array=result;
				}else {
				this._list.array=this.getArray();
			}
		}

		/**
		*@private
		*
		*@param array
		*@param result
		*@param key
		*/
		__proto.getFilterSource=function(array,result,key){
			key=key.toLocaleLowerCase();
			var item;
			for(var $each_item in array){
				item=array[$each_item];
				if (!item.isDirectory && String(item.label).toLowerCase().indexOf(key)>-1){
					item.x=0;
					result.push(item);
				}
				if (item.child && item.child.length > 0){
					this.getFilterSource(item.child,result,key);
				}
			}
		}

		/**
		*数据源发生变化后，是否保持之前打开状态，默认为true。
		*
		*<p><b>取值：</b>
		*<li>true：保持之前打开状态。</li>
		*<li>false：不保持之前打开状态。</li>
		*</p>
		*@return
		*/
		__getset(0,__proto,'keepStatus',function(){
			return this._keepStatus;
			},function(value){
			this._keepStatus=value;
		});

		/**
		*此对象包含的<code>List</code>实例对象。
		*@return
		*/
		__getset(0,__proto,'list',function(){
			return this._list;
		});

		/**
		*滚动条皮肤。
		*@return
		*/
		__getset(0,__proto,'scrollBarSkin',function(){
			return this._list.vScrollBarSkin;
			},function(value){
			this._list.vScrollBarSkin=value;
		});

		/**
		*列表数据源，只包含当前可视节点数据。
		*@return
		*/
		__getset(0,__proto,'array',function(){
			return this._list.array;
			},function(value){
			if (this._keepStatus && this._list.array && value){
				this.parseOpenStatus(this._list.array,value);
			}
			this._source=value;
			this._list.array=this.getArray();
		});

		/**
		*当前选中的项对象的数据源。
		*@return
		*/
		__getset(0,__proto,'selectedItem',function(){
			return this._list.selectedItem;
			},function(value){
			this._list.selectedItem=value;
		});

		/**
		*数据源，全部节点数据。
		*@return
		*/
		__getset(0,__proto,'source',function(){
			return this._source;
		});

		/**
		*此对象包含的<code>List</code>实例的单元格渲染器。
		*
		*<p><b>取值：</b>
		*<ol>
		*<li>单元格类对象。</li>
		*<li> UI 的 JSON 描述。</li>
		*</ol></p>
		*
		*@return
		*/
		__getset(0,__proto,'itemRender',function(){
			return this._list.itemRender;
			},function(value){
			this._list.itemRender=value;
		});

		/**滚动条*/
		__getset(0,__proto,'scrollBar',function(){
			return this._list.scrollBar;
		});

		/**
		*单元格鼠标事件处理器。
		*<p>默认返回参数（e:Event,index:int）。</p>
		*@return
		*/
		__getset(0,__proto,'mouseHandler',function(){
			return this._list.mouseHandler;
			},function(value){
			this._list.mouseHandler=value;
		});

		/**
		*<code>Tree</code> 实例的渲染处理器。
		*@return
		*/
		__getset(0,__proto,'renderHandler',function(){
			return this._renderHandler;
			},function(value){
			this._renderHandler=value;
		});

		/**
		*左侧缩进距离（以像素为单位）。
		*@return
		*/
		__getset(0,__proto,'spaceLeft',function(){
			return this._spaceLeft;
			},function(value){
			this._spaceLeft=value;
		});

		/**
		*每一项之间的间隔距离（以像素为单位）。
		*@return
		*/
		__getset(0,__proto,'spaceBottom',function(){
			return this._list.spaceY;
			},function(value){
			this._list.spaceY=value;
		});

		/**
		*表示当前选择的项索引。
		*@return
		*/
		__getset(0,__proto,'selectedIndex',function(){
			return this._list.selectedIndex;
			},function(value){
			this._list.selectedIndex=value;
		});

		/**
		*@inheritDoc
		*@param value
		*/
		__getset(0,__proto,'width',_super.prototype._$get_width,function(value){
			_super.prototype._$set_width.call(this,value);
			this._list.width=value;
		});

		/**@inheritDoc */
		__getset(0,__proto,'height',_super.prototype._$get_height,function(value){
			_super.prototype._$set_height.call(this,value);
			this._list.height=value;
		});

		/**@inheritDoc */
		__getset(0,__proto,'dataSource',_super.prototype._$get_dataSource,function(value){
			this._dataSource=value;
			if (Laya.__typeof(value,laya.ui.XmlDom))this.xml=value;
			else _super.prototype._$set_dataSource.call(this,value);
		});

		/**
		*xml结构的数据源。
		*@param value
		*/
		__getset(0,__proto,'xml',null,function(value){
			var arr=[];
			this.parseXml(value.childNodes[0],arr,null,true);
			this.array=arr;
		});

		/**
		*表示选择的树节点项的<code>path</code>属性值。
		*@return
		*/
		__getset(0,__proto,'selectedPath',function(){
			if (this._list.selectedItem){
				return this._list.selectedItem.path;
			}
			return null;
		});

		return Tree;
	})(Box)


	/**
	*
	*@author ww
	*@version 1.0
	*
	*@created 2015-12-7 上午10:26:19
	*/
	//class laya.editor.view.timeline.tree.TreeNodeRender extends laya.ui.Box
	var TreeNodeRender=(function(_super){
		function TreeNodeRender(){
			this.arrow=null;
			this.icon=null;
			this.selectBox=null;
			this.label=null;
			TreeNodeRender.__super.call(this);
			this.selectBox=new Clip("comp/clip_selectBox.png",1,2);
			this.selectBox.pos(13,0);
			this.selectBox.height=30;
			this.selectBox.left=12;
			this.selectBox.right=0;
			this.selectBox.name="selectBox";
			this.addChild(this.selectBox);
			this.arrow=new Clip("comp/clip_tree.png",1,2);
			this.arrow.pos(0,5);
			this.arrow.name="arrow";
			this.addChild(this.arrow);
			this.icon=new Image2("comp/clip_folder.png");
			this.icon.pos(14,4);
			this.icon.name="folder";
			this.addChild(this.icon);
			this.label=new Label();
			this.label.left=33;
			this.label.right=0;
			this.label.text="tree node";
			this.label.name="label";
			this.label.color="#ffffff";
			this.label.height=30;
			this.addChild(this.label);
			this.left=this.right=0;
			this.height=30;
		}

		__class(TreeNodeRender,'laya.editor.view.timeline.tree.TreeNodeRender',_super);
		return TreeNodeRender;
	})(Box)


	/**
	*...
	*@author ww
	*/
	//class laya.ide.managers.focus.FocusItem extends laya.ui.Box
	var FocusItem=(function(_super){
		function FocusItem(){
			FocusItem.__super.call(this);
		}

		__class(FocusItem,'laya.ide.managers.focus.FocusItem',_super);
		var __proto=FocusItem.prototype;
		__proto.changeSize=function(){
			laya.ui.Component.prototype.changeSize.call(this);
			var g=this.graphics;
			g.clear();
			g.drawRect(0,0,this.width,this.height,"#33c5f5");
		}

		return FocusItem;
	})(Box)


	/**
	*自动根据宽布局的容器
	*@author ww
	*@version 1.0
	*
	*@created 2016-1-4 下午5:39:35
	*/
	//class laya.ide.ui.BoxFitToWidth extends laya.ui.Box
	var BoxFitToWidth=(function(_super){
		function BoxFitToWidth(){
			this._items=null;
			this.dX=0;
			this.dY=0;
			this.sX=0;
			this.sY=0;
			BoxFitToWidth.__super.call(this);
		}

		__class(BoxFitToWidth,'laya.ide.ui.BoxFitToWidth',_super);
		var __proto=BoxFitToWidth.prototype;
		__proto.setItems=function(items){
			this.removeChildren();
			this._items=items;
			DisControlTool.addItems(items,this);
			this.reRender();
		}

		__proto.changeSize=function(){
			laya.ui.Component.prototype.changeSize.call(this);
			this.reRender();
		}

		__proto.reRender=function(){
			LayoutTools.layoutToWidth(this._items,this.width,this.dX,this.dY,this.sX,this.sY);
			console.log("boxFitToWidth reRender");
		}

		return BoxFitToWidth;
	})(Box)


	/**
	*自动根据大小填充自己全部区域的显示对象
	*@author ww
	*/
	//class laya.ide.managers.resizer.AutoFillRec extends laya.editor.comonents.DragBar
	var AutoFillRec=(function(_super){
		function AutoFillRec(type){
			this.type=0;
			this.preX=NaN;
			this.preY=NaN;
			AutoFillRec.__super.call(this,type);
		}

		__class(AutoFillRec,'laya.ide.managers.resizer.AutoFillRec',_super);
		var __proto=AutoFillRec.prototype;
		__proto.changeSize=function(){
			laya.ui.Component.prototype.changeSize.call(this);
			var g=this.graphics;
			g.clear();
			g.drawRect(0,0,this.width,this.height,"#33c5f5");
		}

		__proto.record=function(){
			this.preX=this.x;
			this.preY=this.y;
		}

		__proto.getDx=function(){
			return this.x-this.preX;
		}

		__proto.getDy=function(){
			return this.y-this.preY;
		}

		return AutoFillRec;
	})(DragBar)


	/**
	*<code>Group</code> 是一个可以自动布局的项集合控件。
	*
	*<p> <code>Group</code> 的默认项对象为 <code>Button</code> 类实例。
	*<code>Group</code> 是 <code>Tab</code> 和 <code>RadioGroup</code> 的基类。</p>
	*/
	//class laya.ui.Group extends laya.ui.Box
	var Group=(function(_super){
		function Group(labels,skin){
			this.selectHandler=null;
			this._items=null;
			this._selectedIndex=-1;
			this._skin=null;
			this._direction="horizontal";
			this._space=0;
			this._labels=null;
			this._labelColors=null;
			this._labelStrokeColor=null;
			this._strokeColors=null;
			this._labelStroke=NaN;
			this._labelSize=0;
			this._labelBold=false;
			this._labelPadding=null;
			this._labelAlign=null;
			this._stateNum=0;
			Group.__super.call(this);
			this.skin=skin;
			this.labels=labels;
		}

		__class(Group,'laya.ui.Group',_super);
		var __proto=Group.prototype;
		Laya.imps(__proto,{"laya.ui.IItem":true})
		__proto.preinitialize=function(){
			this.mouseEnabled=true;
		}

		/**@inheritDoc */
		__proto.destroy=function(destroyChild){
			(destroyChild===void 0)&& (destroyChild=true);
			laya.ui.Component.prototype.destroy.call(this,destroyChild);
			this._items && (this._items.length=0);
			this._items=null;
			this.selectHandler=null;
		}

		/**
		*添加一个项对象，返回此项对象的索引id。
		*
		*@param item 需要添加的项对象。
		*@param autoLayOut 是否自动布局，如果为true，会根据 <code>direction</code> 和 <code>space</code> 属性计算item的位置。
		*@return
		*/
		__proto.addItem=function(item,autoLayOut){
			(autoLayOut===void 0)&& (autoLayOut=true);
			var display=item;
			var index=this._items.length;
			display.name="item"+index;
			this.addChild(display);
			this.initItems();
			if (autoLayOut && index > 0){
				var preItem=this._items [index-1];
				if (this._direction=="horizontal"){
					display.x=preItem.x+preItem.width+this._space;
					}else {
					display.y=preItem.y+preItem.height+this._space;
				}
				}else {
				if (autoLayOut){
					display.x=0;
					display.y=0;
				}
			}
			return index;
		}

		/**
		*删除一个项对象。
		*
		*@param item 需要删除的项对象。
		*@param autoLayOut 是否自动布局，如果为true，会根据 <code>direction</code> 和 <code>space</code> 属性计算item的位置。
		*/
		__proto.delItem=function(item,autoLayOut){
			(autoLayOut===void 0)&& (autoLayOut=true);
			var index=this._items.indexOf(item);
			if (index !=-1){
				var display=item;
				this.removeChild(display);
				for (var i=index+1,n=this._items.length;i < n;i++){
					var child=this._items [i];
					child.name="item"+(i-1);
					if (autoLayOut){
						if (this._direction=="horizontal"){
							child.x-=display.width+this._space;
							}else {
							child.y-=display.height+this._space;
						}
					}
				}
				this.initItems();
				if (this._selectedIndex >-1){
					var newIndex=0;
					newIndex=this._selectedIndex < this._items.length ? this._selectedIndex :(this._selectedIndex-1);
					this._selectedIndex=-1;
					this.selectedIndex=newIndex;
				}
			}
		}

		/**
		*初始化项对象们。
		*/
		__proto.initItems=function(){
			this._items || (this._items=[]);
			this._items.length=0;
			for (var i=0;i < 10000;i++){
				var item=this.getChildByName("item"+i);
				if (item==null)break ;
				this._items.push(item);
				item.selected=(i===this._selectedIndex);
				item.clickHandler=Handler.create(this,this.itemClick,[i],false);
			}
		}

		/**
		*@private
		*项对象的点击事件侦听处理函数。
		*@param index
		*/
		__proto.itemClick=function(index){
			this.selectedIndex=index;
		}

		/**
		*@private
		*通过对象的索引设置项对象的 <code>selected</code> 属性值。
		*@param index 需要设置的项对象的索引。
		*@param selected 表示项对象的选中状态。
		*/
		__proto.setSelect=function(index,selected){
			if (this._items && index >-1 && index < this._items.length)this._items[index].selected=selected;
		}

		/**
		*@private
		*创建一个项显示对象。
		*@param skin 项对象的皮肤。
		*@param label 项对象标签。
		*@return
		*/
		__proto.createItem=function(skin,label){
			return null;
		}

		/**
		*@private
		*更改项对象的属性值。
		*/
		__proto.changeLabels=function(){
			if (this._items){
				var left=0
				for (var i=0,n=this._items.length;i < n;i++){
					var btn=this._items [i];
					this._skin && (btn.skin=this._skin);
					this._labelColors && (btn.labelColors=this._labelColors);
					this._labelSize && (btn.labelSize=this._labelSize);
					this._labelStroke && (btn.labelStroke=this._labelStroke);
					this._labelStrokeColor && (btn.labelStrokeColor=this._labelStrokeColor);
					this._strokeColors && (btn.strokeColors=this._strokeColors);
					this._labelBold && (btn.labelBold=this._labelBold);
					this._labelPadding && (btn.labelPadding=this._labelPadding);
					this._labelAlign && (btn.labelAlign=this._labelAlign);
					this._stateNum && (btn.stateNum=this._stateNum);
					if (this._direction==="horizontal"){
						btn.y=0;
						btn.x=left;
						left+=btn.width+this._space;
						}else {
						btn.x=0;
						btn.y=left;
						left+=btn.height+this._space;
					}
				}
			}
			this.changeSize();
		}

		/**@inheritDoc */
		__proto.commitMeasure=function(){
			this.runCallLater(this.changeLabels);
		}

		/**
		*表示当前选择的项索引。默认值为-1。
		*@return
		*/
		__getset(0,__proto,'selectedIndex',function(){
			return this._selectedIndex;
			},function(value){
			if (this._selectedIndex !=value){
				this.setSelect(this._selectedIndex,false);
				this._selectedIndex=value;
				this.setSelect(value,true);
				this.event("change");
				this.selectHandler && this.selectHandler.runWith(this._selectedIndex);
			}
		});

		/**
		*<p>描边颜色，以字符串表示。</p>
		*默认值为 "#000000"（黑色）;
		*@see laya.display.Text.strokeColor()
		*@return
		*/
		__getset(0,__proto,'labelStrokeColor',function(){
			return this._labelStrokeColor;
			},function(value){
			if (this._labelStrokeColor !=value){
				this._labelStrokeColor=value;
				this.callLater(this.changeLabels);
			}
		});

		/**
		*@copy laya.ui.Image#skin
		*@return
		*/
		__getset(0,__proto,'skin',function(){
			return this._skin;
			},function(value){
			if (this._skin !=value){
				this._skin=value;
				this.callLater(this.changeLabels);
			}
		});

		/**
		*标签集合字符串。以逗号做分割，如"item0,item1,item2,item3,item4,item5"。
		*@return
		*/
		__getset(0,__proto,'labels',function(){
			return this._labels;
			},function(value){
			if (this._labels !=value){
				this._labels=value;
				this.removeChildren();
				this.callLater(this.changeLabels);
				if (this._labels){
					var a=this._labels.split(",");
					for (var i=0,n=a.length;i < n;i++){
						var item=this.createItem(this._skin,a[i]);
						item.name="item"+i;
						this.addChild(item);
					}
				}
				this.initItems();
			}
		});

		/**
		*
		*@param value
		*/
		/**
		*
		*@copy laya.ui.Button#labelColors()
		*@return
		*/
		__getset(0,__proto,'labelColors',function(){
			return this._labelColors;
			},function(value){
			if (this._labelColors !=value){
				this._labelColors=value;
				this.callLater(this.changeLabels);
			}
		});

		/**
		*<p>描边宽度（以像素为单位）。</p>
		*默认值0，表示不描边。
		*@see laya.display.Text.stroke()
		*@return
		*/
		__getset(0,__proto,'labelStroke',function(){
			return this._labelStroke;
			},function(value){
			if (this._labelStroke !=value){
				this._labelStroke=value;
				this.callLater(this.changeLabels);
			}
		});

		/**
		*
		*@param value
		*/
		/**
		*表示按钮文本标签的字体大小。
		*
		*@return
		*/
		__getset(0,__proto,'stateNum',function(){
			return this._stateNum;
			},function(value){
			if (this._stateNum !=value){
				this._stateNum=value;
				this.callLater(this.changeLabels);
			}
		});

		/**
		*<p>表示各个状态下的描边颜色。</p>
		*@see laya.display.Text.strokeColor()
		*@return
		*/
		__getset(0,__proto,'strokeColors',function(){
			return this._strokeColors;
			},function(value){
			if (this._strokeColors !=value){
				this._strokeColors=value;
				this.callLater(this.changeLabels);
			}
		});

		/**
		*
		*@param value
		*/
		/**
		*表示按钮文本标签的字体大小。
		*
		*@return
		*/
		__getset(0,__proto,'labelSize',function(){
			return this._labelSize;
			},function(value){
			if (this._labelSize !=value){
				this._labelSize=value;
				this.callLater(this.changeLabels);
			}
		});

		/**
		*项对象们之间的间隔（以像素为单位）。
		*@return
		*/
		__getset(0,__proto,'space',function(){
			return this._space;
			},function(value){
			this._space=value;
			this.callLater(this.changeLabels);
		});

		/**
		*
		*@param value
		*/
		/**
		*表示按钮文本标签是否为粗体字。
		*@return
		*/
		__getset(0,__proto,'labelBold',function(){
			return this._labelBold;
			},function(value){
			if (this._labelBold !=value){
				this._labelBold=value;
				this.callLater(this.changeLabels);
			}
		});

		/**
		*
		*@param value
		*/
		/**
		*表示按钮文本标签的边距。
		*
		*<p><b>格式：</b>"上边距,右边距,下边距,左边距"。</p>
		*@return
		*/
		__getset(0,__proto,'labelPadding',function(){
			return this._labelPadding;
			},function(value){
			if (this._labelPadding !=value){
				this._labelPadding=value;
				this.callLater(this.changeLabels);
			}
		});

		/**
		*
		*@param value
		*/
		/**
		*获取或设置当前选择的项对象。
		*@return
		*/
		__getset(0,__proto,'selection',function(){
			return this._selectedIndex >-1 && this._selectedIndex < this._items.length ? this._items[this._selectedIndex] :null;
			},function(value){
			this.selectedIndex=this._items.indexOf(value);
		});

		/**
		*
		*@param value
		*/
		/**
		*布局方向。
		*
		*<p>默认值为"horizontal"。</p>
		*<p><b>取值：</b>
		*<li>"horizontal"：表示水平布局。</li>
		*<li>"vertical"：表示垂直布局。</li>
		*</p>
		*@return
		*/
		__getset(0,__proto,'direction',function(){
			return this._direction;
			},function(value){
			this._direction=value;
			this.callLater(this.changeLabels);
		});

		/**
		*项对象们的存放数组。
		*@return
		*/
		__getset(0,__proto,'items',function(){
			return this._items;
		});

		/**@inheritDoc */
		__getset(0,__proto,'dataSource',_super.prototype._$get_dataSource,function(value){
			this._dataSource=value;
			if (((typeof value=='number')&& Math.floor(value)==value)|| (typeof value=='string'))this.selectedIndex=int(value);
			else if ((value instanceof Array))this.labels=(value).join(",");
			else _super.prototype._$set_dataSource.call(this,value);
		});

		return Group;
	})(Box)


	/**布局容器*/
	//class laya.ui.LayoutBox extends laya.ui.Box
	var LayoutBox=(function(_super){
		function LayoutBox(){
			this._space=0;
			this._align="none";
			LayoutBox.__super.call(this);
		}

		__class(LayoutBox,'laya.ui.LayoutBox',_super);
		var __proto=LayoutBox.prototype;
		__proto.addChild=function(child){
			child.on("resize",this,this.onResize);
			this.callLater(this.changeItems);
			return laya.display.Node.prototype.addChild.call(this,child);
		}

		__proto.onResize=function(e){
			this.callLater(this.changeItems);
		}

		__proto.addChildAt=function(child,index){
			child.on("resize",this,this.onResize);
			this.callLater(this.changeItems);
			return laya.display.Node.prototype.addChildAt.call(this,child,index);
		}

		__proto.removeChild=function(child){
			child.off("resize",this,this.onResize);
			this.callLater(this.changeItems);
			return laya.display.Node.prototype.removeChild.call(this,child);
		}

		__proto.removeChildAt=function(index){
			this.getChildAt(index).off("resize",this,this.onResize);
			this.callLater(this.changeItems);
			return laya.display.Node.prototype.removeChildAt.call(this,index);
		}

		/**刷新*/
		__proto.refresh=function(){
			this.callLater(this.changeItems);
		}

		__proto.changeItems=function(){}
		/**
		*排序项目.可通过重写改变默认排序规则
		*@param items
		*/
		__proto.sortItem=function(items){
			if(items)items.sort(function(a,b){return a.y > b.y ? 1 :-1});
		}

		/**子对象的间隔*/
		__getset(0,__proto,'space',function(){
			return this._space;
			},function(value){
			this._space=value;
			this.callLater(this.changeItems);
		});

		/**子对象对齐方式*/
		__getset(0,__proto,'align',function(){
			return this._align;
			},function(value){
			this._align=value;
			this.callLater(this.changeItems);
		});

		return LayoutBox;
	})(Box)


	/**
	*<code>ViewStack</code> 类用于视图堆栈类，用于视图的显示等设置处理。
	*@author yung
	*/
	//class laya.ui.ViewStack extends laya.ui.Box
	var ViewStack=(function(_super){
		function ViewStack(){
			this._items=null;
			this._selectedIndex=0;
			ViewStack.__super.call(this);
			this._setIndexHandler=Handler.create(this,this.setIndex,null,false);
		}

		__class(ViewStack,'laya.ui.ViewStack',_super);
		var __proto=ViewStack.prototype;
		Laya.imps(__proto,{"laya.ui.IItem":true})
		/**
		*批量设置视图对象。
		*@param views 视图对象数组。
		*/
		__proto.setItems=function(views){
			this.removeChildren();
			var index=0;
			for (var i=0,n=views.length;i < n;i++){
				var item=views[i];
				if (item){
					item.name="item"+index;
					this.addChild(item);
					index++;
				}
			}
			this.initItems();
		}

		/**
		*添加视图。
		*
		*@internal 添加视图对象，并设置此视图对象的<code>name</code> 属性。
		*@param view 需要添加的视图对象。
		*/
		__proto.addItem=function(view){
			view.name="item"+this._items.length;
			this.addChild(view);
			this.initItems();
		}

		/**
		*初始化视图对象集合。
		*/
		__proto.initItems=function(){
			this._items=[];
			for (var i=0;i < 10000;i++){
				var item=this.getChildByName("item"+i);
				if (item==null){
					break ;
				}
				this._items.push(item);
				item.visible=(i==this._selectedIndex);
			}
		}

		/**
		*@private
		*通过对象的索引设置项对象的 <code>selected</code> 属性值。
		*@param index 需要设置的对象的索引。
		*@param selected 表示对象的选中状态。
		*/
		__proto.setSelect=function(index,selected){
			if (this._items && index >-1 && index < this._items.length){
				this._items[index].visible=selected;
			}
		}

		/**
		*@private
		*设置属性<code>selectedIndex</code>的值。
		*@param index
		*/
		__proto.setIndex=function(index){
			this.selectedIndex=index;
		}

		/**
		*表示当前视图索引。
		*@return
		*/
		__getset(0,__proto,'selectedIndex',function(){
			return this._selectedIndex;
			},function(value){
			if (this._selectedIndex !=value){
				this.setSelect(this._selectedIndex,false);
				this._selectedIndex=value;
				this.setSelect(this._selectedIndex,true);
			}
		});

		/**
		*获取或设置当前选择的项对象。
		*@return
		*/
		__getset(0,__proto,'selection',function(){
			return this._selectedIndex >-1 && this._selectedIndex < this._items.length ? this._items[this._selectedIndex] :null;
			},function(value){
			this.selectedIndex=this._items.indexOf(value);
		});

		/**
		*索引设置处理器。
		*<p>默认回调参数：index:int</p>
		*@return
		*/
		__getset(0,__proto,'setIndexHandler',function(){
			return this._setIndexHandler;
			},function(value){
			this._setIndexHandler=value;
		});

		/**
		*视图集合数组。
		*@return
		*/
		__getset(0,__proto,'items',function(){
			return this._items;
		});

		/**@inheritDoc */
		__getset(0,__proto,'dataSource',_super.prototype._$get_dataSource,function(value){
			this._dataSource=value;
			if (((typeof value=='number')&& Math.floor(value)==value)|| (typeof value=='string')){
				this.selectedIndex=int(value);
				}else {
				for (var prop in this._dataSource){
					if (this.hasOwnProperty(prop)){
						this[prop]=this._dataSource[prop];
					}
				}
			}
		});

		return ViewStack;
	})(Box)


	/**
	*<code>CheckBox</code> 组件显示一个小方框，该方框内可以有选中标记。
	*<code>CheckBox</code> 组件还可以显示可选的文本标签，默认该标签位于 CheckBox 右侧。
	*<p><code>CheckBox</code> 使用 <code>dataSource</code>赋值时的的默认属性是：<code>selected</code>。</p>
	*
	*@example 以下示例代码，创建了一个 <code>CheckBox</code> 实例。
	*<listing version="3.0">
	*package
	*{
		*import laya.ui.CheckBox;
		*import laya.utils.Handler;
		*
		*public class CheckBox_Example
		*{
			*public function CheckBox_Example()
			*{
				*Laya.init(640,800);//设置游戏画布宽高。
				*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
				*Laya.loader.load("resource/ui/check.png",Handler.create(this,onLoadComplete));//加载资源。
				*}
			*
			*private function onLoadComplete():void
			*{
				*trace("资源加载完成！");
				*var checkBox:CheckBox=new CheckBox("resource/ui/check.png","这个是一个CheckBox组件。");//创建一个 CheckBox 类的实例对象 checkBox ,传入它的皮肤skin和标签label。
				*checkBox.x=100;//设置 checkBox 对象的属性 x 的值，用于控制 checkBox 对象的显示位置。
				*checkBox.y=100;//设置 checkBox 对象的属性 y 的值，用于控制 checkBox 对象的显示位置。
				*checkBox.clickHandler=new Handler(this,onClick,[checkBox]);//设置 checkBox 的点击事件处理器。
				*Laya.stage.addChild(checkBox);//将此 checkBox 对象添加到显示列表。
				*}
			*
			*private function onClick(checkBox:CheckBox):void
			*{
				*trace("输出选中状态: checkBox.selected = "+checkBox.selected);
				*}
			*}
		*}
	*</listing>
	*<listing version="3.0">
	*Laya.init(640,800);//设置游戏画布宽高
	*Laya.stage.bgColor="#efefef";//设置画布的背景颜色
	*Laya.loader.load("resource/ui/check.png",laya.utils.Handler.create(this,loadComplete));//加载资源
	*function loadComplete()
	*{
		*console.log("资源加载完成！");
		*var checkBox=new laya.ui.CheckBox("resource/ui/check.png","这个是一个CheckBox组件。");//创建一个 CheckBox 类的类的实例对象 checkBox ,传入它的皮肤skin和标签label。
		*checkBox.x=100;//设置 checkBox 对象的属性 x 的值，用于控制 checkBox 对象的显示位置。
		*checkBox.y=100;//设置 checkBox 对象的属性 y 的值，用于控制 checkBox 对象的显示位置。
		*checkBox.clickHandler=new laya.utils.Handler(this,onClick,[checkBox],false);//设置 checkBox 的点击事件处理器。
		*Laya.stage.addChild(checkBox);//将此 checkBox 对象添加到显示列表。
		*}
	*function onClick(checkBox)
	*{
		*console.log("checkBox.selected = ",checkBox.selected);
		*}
	*</listing>
	*<listing version="3.0">
	*Laya.init(640,800);//设置游戏画布宽高
	*Laya.stage.bgColor="#efefef";//设置画布的背景颜色
	*Laya.loader.load("resource/ui/check.png",laya.utils.Handler.create(this,loadComplete));//加载资源
	*function loadComplete()
	*{
		*console.log("资源加载完成！");
		*var checkBox:laya.ui.CheckBox=new laya.ui.CheckBox("resource/ui/check.png","这个是一个CheckBox组件。");//创建一个 CheckBox 类的类的实例对象 checkBox ,传入它的皮肤skin和标签label。
		*checkBox.x=100;//设置 checkBox 对象的属性 x 的值，用于控制 checkBox 对象的显示位置。
		*checkBox.y=100;//设置 checkBox 对象的属性 y 的值，用于控制 checkBox 对象的显示位置。
		*checkBox.clickHandler=new laya.utils.Handler(this,this.onClick,[checkBox],false);//设置 checkBox 的点击事件处理器。
		*Laya.stage.addChild(checkBox);//将此 checkBox 对象添加到显示列表。
		*}
	*function onClick(checkBox)
	*{
		*console.log("checkBox.selected = ",checkBox.selected);
		*}
	*</listing>
	*<listing version="3.0">
	*import CheckBox=laya.ui.CheckBox;
	*import Handler=laya.utils.Handler;
	*class CheckBox_Example{
		*constructor()
		*{
			*Laya.init(640,800);
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*Laya.loader.load("resource/ui/check.png",Handler.create(this,this.onLoadComplete));//加载资源。
			*}
		*private onLoadComplete()
		*{
			*var checkBox:CheckBox=new CheckBox("resource/ui/check.png","这个是一个CheckBox组件。");//创建一个 CheckBox 类的实例对象 checkBox ,传入它的皮肤skin和标签label。
			*checkBox.x=100;//设置 checkBox 对象的属性 x 的值，用于控制 checkBox 对象的显示位置。
			*checkBox.y=100;//设置 checkBox 对象的属性 y 的值，用于控制 checkBox 对象的显示位置。
			*checkBox.clickHandler=new Handler(this,this.onClick,[checkBox]);//设置 checkBox 的点击事件处理器。
			*Laya.stage.addChild(checkBox);//将此 checkBox 对象添加到显示列表。
			*}
		*private onClick(checkBox:CheckBox):void
		*{
			*console.log("输出选中状态: checkBox.selected = "+checkBox.selected);
			*}
		*}
	*</listing>
	*@author yung
	*/
	//class laya.ui.CheckBox extends laya.ui.Button
	var CheckBox=(function(_super){
		/**
		*创建一个新的 <code>CheckBox</code> 组件实例。
		*@param skin 皮肤资源地址。
		*@param label 文本标签的内容。
		*/
		function CheckBox(skin,label){
			(label===void 0)&& (label="");
			CheckBox.__super.call(this,skin,label);
		}

		__class(CheckBox,'laya.ui.CheckBox',_super);
		var __proto=CheckBox.prototype;
		/**@inheritDoc */
		__proto.preinitialize=function(){
			laya.ui.Component.prototype.preinitialize.call(this);
			this.toggle=true;
			this._autoSize=false;
		}

		/**@inheritDoc */
		__proto.initialize=function(){
			_super.prototype.initialize.call(this);
			this._text.align="left";
			this._text.valign="top";
			this._text.width=0;
		}

		/**@inheritDoc */
		__getset(0,__proto,'dataSource',_super.prototype._$get_dataSource,function(value){
			this._dataSource=value;
			if ((typeof value=='boolean'))this.selected=value;
			else if ((typeof value=='string'))this.selected=value==="true";
			else _super.prototype._$set_dataSource.call(this,value);
		});

		return CheckBox;
	})(Button)


	/**
	*<code>Radio</code> 控件使用户可在一组互相排斥的选择中做出一种选择。
	*用户一次只能选择 <code>Radio</code> 组中的一个成员。选择未选中的组成员将取消选择该组中当前所选的 <code>Radio</code> 控件。
	*
	*
	*@see laya.ui.RadioGroup
	*@author yung
	*/
	//class laya.ui.Radio extends laya.ui.Button
	var Radio=(function(_super){
		function Radio(skin,label){
			this._value=null;
			(label===void 0)&& (label="");
			Radio.__super.call(this,skin,label);
		}

		__class(Radio,'laya.ui.Radio',_super);
		var __proto=Radio.prototype;
		/**@inheritDoc */
		__proto.destroy=function(destroyChild){
			(destroyChild===void 0)&& (destroyChild=true);
			_super.prototype.destroy.call(this,destroyChild);
			this._value=null;
		}

		/**@inheritDoc */
		__proto.preinitialize=function(){
			laya.ui.Component.prototype.preinitialize.call(this);
			this.toggle=false;
			this._autoSize=false;
		}

		/**@inheritDoc */
		__proto.initialize=function(){
			_super.prototype.initialize.call(this);
			this._text.align="left";
			this._text.valign="top";
			this._text.width=0;
			this.on("click",this,this.onClick);
		}

		/**
		*@private
		*对象的<code>Event.CLICK</code>事件侦听处理函数。
		*/
		__proto.onClick=function(e){
			this.selected=true;
		}

		/**
		*获取或设置 <code>Radio</code> 关联的可选用户定义值。
		*
		*@internal ##?
		*@return
		*/
		__getset(0,__proto,'value',function(){
			return this._value !=null ? this._value :this.label;
			},function(obj){
			this._value=obj;
		});

		return Radio;
	})(Button)


	/**
	*使用 <code>HScrollBar</code> （水平 <code>ScrollBar</code> ）控件，可以在因数据太多而不能在显示区域完全显示时控制显示的数据部分。
	*
	*
	*@example 以下示例代码，创建了一个 <code>HScrollBar</code> 实例。
	*<listing version="3.0">
	*package
	*{
		*import laya.ui.HScrollBar;
		*import laya.utils.Handler;
		*
		*public class HScrollBar_Example
		*{
			*private var hScrollBar:HScrollBar;
			*public function HScrollBar_Example()
			*{
				*Laya.init(640,800);//设置游戏画布宽高。
				*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
				*Laya.loader.load(["resource/ui/hscroll.png","resource/ui/hscroll$bar.png","resource/ui/hscroll$down.png","resource/ui/hscroll$up.png"],Handler.create(this,onLoadComplete));//加载资源。
				*}
			*
			*private function onLoadComplete():void
			*{
				*hScrollBar=new HScrollBar();//创建一个 HScrollBar 类的实例对象 hScrollBar 。
				*hScrollBar.skin="resource/ui/hscroll.png";//设置 hScrollBar 的皮肤。
				*hScrollBar.x=100;//设置 hScrollBar 对象的属性 x 的值，用于控制 hScrollBar 对象的显示位置。
				*hScrollBar.y=100;//设置 hScrollBar 对象的属性 y 的值，用于控制 hScrollBar 对象的显示位置。
				*hScrollBar.changeHandler=new Handler(this,onChange);//设置 hScrollBar 的滚动变化处理器。
				*Laya.stage.addChild(hScrollBar);//将此 hScrollBar 对象添加到显示列表。
				*}
			*
			*private function onChange(value:Number):void
			*{
				*trace("滚动条的位置： value="+value);
				*}
			*
			*}
		*
		*}
	*</listing>
	*<listing version="3.0">
	*Laya.init(640,800);//设置游戏画布宽高
	*Laya.stage.bgColor="#efefef";//设置画布的背景颜色
	*var hScrollBar;
	*var res=["resource/ui/hscroll.png","resource/ui/hscroll$bar.png","resource/ui/hscroll$down.png","resource/ui/hscroll$up.png"];
	*Laya.loader.load(res,laya.utils.Handler.create(this,onLoadComplete));//加载资源。
	*
	*function onLoadComplete(){
		*console.log("资源加载完成！");
		*hScrollBar=new laya.ui.HScrollBar();//创建一个 HScrollBar 类的实例对象 hScrollBar 。
		*hScrollBar.skin="resource/ui/hscroll.png";//设置 hScrollBar 的皮肤。
		*hScrollBar.x=100;//设置 hScrollBar 对象的属性 x 的值，用于控制 hScrollBar 对象的显示位置。
		*hScrollBar.y=100;//设置 hScrollBar 对象的属性 y 的值，用于控制 hScrollBar 对象的显示位置。
		*hScrollBar.changeHandler=new laya.utils.Handler(this,onChange);//设置 hScrollBar 的滚动变化处理器。
		*Laya.stage.addChild(hScrollBar);//将此 hScrollBar 对象添加到显示列表。
		*}
	*
	*function onChange(value)
	*{
		*console.log("滚动条的位置： value="+value);
		*}
	*</listing>
	*<listing version="3.0">
	*import HScrollBar=laya.ui.HScrollBar;
	*import Handler=laya.utils.Handler;
	*class HScrollBar_Example {
		*private hScrollBar:HScrollBar;
		*constructor(){
			*Laya.init(640,800);//设置游戏画布宽高。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*Laya.loader.load(["resource/ui/hscroll.png","resource/ui/hscroll$bar.png","resource/ui/hscroll$down.png","resource/ui/hscroll$up.png"],Handler.create(this,this.onLoadComplete));//加载资源。
			*}
		*private onLoadComplete():void {
			*this.hScrollBar=new HScrollBar();//创建一个 HScrollBar 类的实例对象 hScrollBar 。
			*this.hScrollBar.skin="resource/ui/hscroll.png";//设置 hScrollBar 的皮肤。
			*this.hScrollBar.x=100;//设置 hScrollBar 对象的属性 x 的值，用于控制 hScrollBar 对象的显示位置。
			*this.hScrollBar.y=100;//设置 hScrollBar 对象的属性 y 的值，用于控制 hScrollBar 对象的显示位置。
			*this.hScrollBar.changeHandler=new Handler(this,this.onChange);//设置 hScrollBar 的滚动变化处理器。
			*Laya.stage.addChild(this.hScrollBar);//将此 hScrollBar 对象添加到显示列表。
			*}
		*private onChange(value:number):void {
			*console.log("滚动条的位置： value="+value);
			*}
		*}
	*</listing>
	*@author yung
	*/
	//class laya.ui.HScrollBar extends laya.ui.ScrollBar
	var HScrollBar=(function(_super){
		function HScrollBar(){HScrollBar.__super.call(this);;
		};

		__class(HScrollBar,'laya.ui.HScrollBar',_super);
		var __proto=HScrollBar.prototype;
		/**@inheritDoc */
		__proto.initialize=function(){
			_super.prototype.initialize.call(this);
			this._slider.isVertical=false;
		}

		return HScrollBar;
	})(ScrollBar)


	/**
	*使用 <code>HSlider</code> 控件，用户可以通过在滑块轨道的终点之间移动滑块来选择值。
	*
	*<p> <code>HSlider</code> 控件采用水平方向。滑块轨道从左向右扩展，而标签位于轨道的顶部或底部。</p>
	*
	*@example 以下示例代码，创建了一个 <code>HSlider</code> 实例。
	*<listing version="3.0">
	*package
	*{
		*import laya.ui.HSlider;
		*import laya.utils.Handler;
		*
		*public class HSlider_Example
		*{
			*private var hSlider:HSlider;
			*
			*public function HSlider_Example()
			*{
				*Laya.init(640,800);//设置游戏画布宽高。
				*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
				*Laya.loader.load(["resource/ui/hslider.png","resource/ui/hslider$bar.png"],Handler.create(this,onLoadComplete));//加载资源。
				*}
			*
			*private function onLoadComplete():void
			*{
				*hSlider=new HSlider();//创建一个 HSlider 类的实例对象 hSlider 。
				*hSlider.skin="resource/ui/hslider.png";//设置 hSlider 的皮肤。
				*hSlider.min=0;//设置 hSlider 最低位置值。
				*hSlider.max=10;//设置 hSlider 最高位置值。
				*hSlider.value=2;//设置 hSlider 当前位置值。
				*hSlider.tick=1;//设置 hSlider 刻度值。
				*hSlider.x=100;//设置 hSlider 对象的属性 x 的值，用于控制 hSlider 对象的显示位置。
				*hSlider.y=100;//设置 hSlider 对象的属性 y 的值，用于控制 hSlider 对象的显示位置。
				*hSlider.changeHandler=new Handler(this,onChange);//设置 hSlider 位置变化处理器。
				*Laya.stage.addChild(hSlider);//把 hSlider 添加到显示列表。
				*}
			*
			*private function onChange(value:Number):void
			*{
				*trace("滑块的位置： value="+value);
				*}
			*
			*}
		*
		*}
	*</listing>
	*<listing version="3.0">
	*Laya.init(640,800,"canvas");//设置游戏画布宽高、渲染模式
	*Laya.stage.bgColor="#efefef";//设置画布的背景颜色
	*var hSlider;
	*var res=["resource/ui/hslider.png","resource/ui/hslider$bar.png"];
	*Laya.loader.load(res,laya.utils.Handler.create(this,onLoadComplete));
	*function onLoadComplete(){
		*console.log("资源加载完成！");
		*hSlider=new laya.ui.HSlider();//创建一个 HSlider 类的实例对象 hSlider 。
		*hSlider.skin="resource/ui/hslider.png";//设置 hSlider 的皮肤。
		*hSlider.min=0;//设置 hSlider 最低位置值。
		*hSlider.max=10;//设置 hSlider 最高位置值。
		*hSlider.value=2;//设置 hSlider 当前位置值。
		*hSlider.tick=1;//设置 hSlider 刻度值。
		*hSlider.x=100;//设置 hSlider 对象的属性 x 的值，用于控制 hSlider 对象的显示位置。
		*hSlider.y=100;//设置 hSlider 对象的属性 y 的值，用于控制 hSlider 对象的显示位置。
		*hSlider.changeHandler=new laya.utils.Handler(this,onChange);//设置 hSlider 位置变化处理器。
		*Laya.stage.addChild(hSlider);//把 hSlider 添加到显示列表。
		*}
	*
	*function onChange(value)
	*{
		*console.log("滑块的位置： value="+value);
		*}
	*</listing>
	*<listing version="3.0">
	*import Handler=laya.utils.Handler;
	*import HSlider=laya.ui.HSlider;
	*class HSlider_Example {
		*private hSlider:HSlider;
		*constructor(){
			*Laya.init(640,800);//设置游戏画布宽高。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*Laya.loader.load(["resource/ui/hslider.png","resource/ui/hslider$bar.png"],Handler.create(this,this.onLoadComplete));//加载资源。
			*}
		*private onLoadComplete():void {
			*this.hSlider=new HSlider();//创建一个 HSlider 类的实例对象 hSlider 。
			*this.hSlider.skin="resource/ui/hslider.png";//设置 hSlider 的皮肤。
			*this.hSlider.min=0;//设置 hSlider 最低位置值。
			*this.hSlider.max=10;//设置 hSlider 最高位置值。
			*this.hSlider.value=2;//设置 hSlider 当前位置值。
			*this.hSlider.tick=1;//设置 hSlider 刻度值。
			*this.hSlider.x=100;//设置 hSlider 对象的属性 x 的值，用于控制 hSlider 对象的显示位置。
			*this.hSlider.y=100;//设置 hSlider 对象的属性 y 的值，用于控制 hSlider 对象的显示位置。
			*this.hSlider.changeHandler=new Handler(this,this.onChange);//设置 hSlider 位置变化处理器。
			*Laya.stage.addChild(this.hSlider);//把 hSlider 添加到显示列表。
			*}
		*
		*private onChange(value:number):void {
			*console.log("滑块的位置： value="+value);
			*}
		*
		*}
	*</listing>
	*
	*@see laya.ui.Slider
	*@author yung
	*/
	//class laya.ui.HSlider extends laya.ui.Slider
	var HSlider=(function(_super){
		/**
		*创建一个 <code>HSlider</code> 类实例。
		*@param skin 皮肤。
		*/
		function HSlider(skin){
			HSlider.__super.call(this,skin);
			this.isVertical=false;
		}

		__class(HSlider,'laya.ui.HSlider',_super);
		return HSlider;
	})(Slider)


	/**
	*
	*使用 <code>VScrollBar</code> （垂直 <code>ScrollBar</code> ）控件，可以在因数据太多而不能在显示区域完全显示时控制显示的数据部分。
	*
	*@example 以下示例代码，创建了一个 <code>VScrollBar</code> 实例。
	*<listing version="3.0">
	*package
	*{
		*import laya.ui.vScrollBar;
		*import laya.ui.VScrollBar;
		*import laya.utils.Handler;
		*
		*public class VScrollBar_Example
		*{
			*private var vScrollBar:VScrollBar;
			*public function VScrollBar_Example()
			*{
				*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
				*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
				*Laya.loader.load(["resource/ui/vscroll.png","resource/ui/vscroll$bar.png","resource/ui/vscroll$down.png","resource/ui/vscroll$up.png"],Handler.create(this,onLoadComplete));
				*}
			*
			*private function onLoadComplete():void
			*{
				*vScrollBar=new VScrollBar();//创建一个 vScrollBar 类的实例对象 hScrollBar 。
				*vScrollBar.skin="resource/ui/vscroll.png";//设置 vScrollBar 的皮肤。
				*vScrollBar.x=100;//设置 vScrollBar 对象的属性 x 的值，用于控制 vScrollBar 对象的显示位置。
				*vScrollBar.y=100;//设置 vScrollBar 对象的属性 y 的值，用于控制 vScrollBar 对象的显示位置。
				*vScrollBar.changeHandler=new Handler(this,onChange);//设置 vScrollBar 的滚动变化处理器。
				*Laya.stage.addChild(vScrollBar);//将此 vScrollBar 对象添加到显示列表。
				*}
			*
			*private function onChange(value:Number):void
			*{
				*trace("滚动条的位置： value="+value);
				*}
			*
			*}
		*
		*}
	*</listing>
	*<listing version="3.0">
	*Laya.init(640,800);//设置游戏画布宽高
	*Laya.stage.bgColor="#efefef";//设置画布的背景颜色
	*var vScrollBar;
	*var res=["resource/ui/vscroll.png","resource/ui/vscroll$bar.png","resource/ui/vscroll$down.png","resource/ui/vscroll$up.png"];
	*Laya.loader.load(res,laya.utils.Handler.create(this,onLoadComplete));//加载资源。
	*function onLoadComplete(){
		*vScrollBar=new laya.ui.VScrollBar();//创建一个 vScrollBar 类的实例对象 hScrollBar 。
		*vScrollBar.skin="resource/ui/vscroll.png";//设置 vScrollBar 的皮肤。
		*vScrollBar.x=100;//设置 vScrollBar 对象的属性 x 的值，用于控制 vScrollBar 对象的显示位置。
		*vScrollBar.y=100;//设置 vScrollBar 对象的属性 y 的值，用于控制 vScrollBar 对象的显示位置。
		*vScrollBar.changeHandler=new laya.utils.Handler(this,onChange);//设置 vScrollBar 的滚动变化处理器。
		*Laya.stage.addChild(vScrollBar);//将此 vScrollBar 对象添加到显示列表。
		*}
	*function onChange(value){
		*console.log("滚动条的位置： value="+value);
		*}
	*</listing>
	*<listing version="3.0">
	*import VScrollBar=laya.ui.VScrollBar;
	*import Handler=laya.utils.Handler;
	*class VScrollBar_Example {
		*private vScrollBar:VScrollBar;
		*constructor(){
			*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*Laya.loader.load(["resource/ui/vscroll.png","resource/ui/vscroll$bar.png","resource/ui/vscroll$down.png","resource/ui/vscroll$up.png"],Handler.create(this,this.onLoadComplete));
			*}
		*
		*private onLoadComplete():void {
			*this.vScrollBar=new VScrollBar();//创建一个 vScrollBar 类的实例对象 hScrollBar 。
			*this.vScrollBar.skin="resource/ui/vscroll.png";//设置 vScrollBar 的皮肤。
			*this.vScrollBar.x=100;//设置 vScrollBar 对象的属性 x 的值，用于控制 vScrollBar 对象的显示位置。
			*this.vScrollBar.y=100;//设置 vScrollBar 对象的属性 y 的值，用于控制 vScrollBar 对象的显示位置。
			*this.vScrollBar.changeHandler=new Handler(this,this.onChange);//设置 vScrollBar 的滚动变化处理器。
			*Laya.stage.addChild(this.vScrollBar);//将此 vScrollBar 对象添加到显示列表。
			*}
		*
		*private onChange(value:number):void {
			*console.log("滚动条的位置： value="+value);
			*}
		*
		*}
	*</listing>
	*@author yung
	*/
	//class laya.ui.VScrollBar extends laya.ui.ScrollBar
	var VScrollBar=(function(_super){
		function VScrollBar(){VScrollBar.__super.call(this);;
		};

		__class(VScrollBar,'laya.ui.VScrollBar',_super);
		return VScrollBar;
	})(ScrollBar)


	/**
	*使用 <code>VSlider</code> 控件，用户可以通过在滑块轨道的终点之间移动滑块来选择值。
	*
	*<p> <code>VSlider</code> 控件采用垂直方向。滑块轨道从下往上扩展，而标签位于轨道的左右两侧。</p>
	*
	*@example 以下示例代码，创建了一个 <code>VSlider</code> 实例。
	*<listing version="3.0">
	*package
	*{
		*import laya.ui.HSlider;
		*import laya.ui.VSlider;
		*import laya.utils.Handler;
		*
		*public class VSlider_Example
		*{
			*private var vSlider:VSlider;
			*
			*public function VSlider_Example()
			*{
				*Laya.init(640,800);//设置游戏画布宽高。
				*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
				*Laya.loader.load(["resource/ui/vslider.png","resource/ui/vslider$bar.png"],Handler.create(this,onLoadComplete));//加载资源。
				*}
			*
			*private function onLoadComplete():void
			*{
				*vSlider=new VSlider();//创建一个 VSlider 类的实例对象 vSlider 。
				*vSlider.skin="resource/ui/vslider.png";//设置 vSlider 的皮肤。
				*vSlider.min=0;//设置 vSlider 最低位置值。
				*vSlider.max=10;//设置 vSlider 最高位置值。
				*vSlider.value=2;//设置 vSlider 当前位置值。
				*vSlider.tick=1;//设置 vSlider 刻度值。
				*vSlider.x=100;//设置 vSlider 对象的属性 x 的值，用于控制 vSlider 对象的显示位置。
				*vSlider.y=100;//设置 vSlider 对象的属性 y 的值，用于控制 vSlider 对象的显示位置。
				*vSlider.changeHandler=new Handler(this,onChange);//设置 vSlider 位置变化处理器。
				*Laya.stage.addChild(vSlider);//把 vSlider 添加到显示列表。
				*}
			*
			*private function onChange(value:Number):void
			*{
				*trace("滑块的位置： value="+value);
				*}
			*
			*}
		*
		*}
	*</listing>
	*<listing version="3.0">
	*Laya.init(640,800);//设置游戏画布宽高
	*Laya.stage.bgColor="#efefef";//设置画布的背景颜色
	*var vSlider;
	*Laya.loader.load(["resource/ui/vslider.png","resource/ui/vslider$bar.png"],laya.utils.Handler.create(this,onLoadComplete));//加载资源。
	*function onLoadComplete(){
		*vSlider=new laya.ui.VSlider();//创建一个 VSlider 类的实例对象 vSlider 。
		*vSlider.skin="resource/ui/vslider.png";//设置 vSlider 的皮肤。
		*vSlider.min=0;//设置 vSlider 最低位置值。
		*vSlider.max=10;//设置 vSlider 最高位置值。
		*vSlider.value=2;//设置 vSlider 当前位置值。
		*vSlider.tick=1;//设置 vSlider 刻度值。
		*vSlider.x=100;//设置 vSlider 对象的属性 x 的值，用于控制 vSlider 对象的显示位置。
		*vSlider.y=100;//设置 vSlider 对象的属性 y 的值，用于控制 vSlider 对象的显示位置。
		*vSlider.changeHandler=new laya.utils.Handler(this,onChange);//设置 vSlider 位置变化处理器。
		*Laya.stage.addChild(vSlider);//把 vSlider 添加到显示列表。
		*}
	*function onChange(value){
		*console.log("滑块的位置： value="+value);
		*}
	*</listing>
	*<listing version="3.0">
	*import HSlider=laya.ui.HSlider;
	*import VSlider=laya.ui.VSlider;
	*import Handler=laya.utils.Handler;
	*class VSlider_Example {
		*private vSlider:VSlider;
		*constructor(){
			*Laya.init(640,800);//设置游戏画布宽高。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*Laya.loader.load(["resource/ui/vslider.png","resource/ui/vslider$bar.png"],Handler.create(this,this.onLoadComplete));//加载资源。
			*}
		*
		*private onLoadComplete():void {
			*this.vSlider=new VSlider();//创建一个 VSlider 类的实例对象 vSlider 。
			*this.vSlider.skin="resource/ui/vslider.png";//设置 vSlider 的皮肤。
			*this.vSlider.min=0;//设置 vSlider 最低位置值。
			*this.vSlider.max=10;//设置 vSlider 最高位置值。
			*this.vSlider.value=2;//设置 vSlider 当前位置值。
			*this.vSlider.tick=1;//设置 vSlider 刻度值。
			*this.vSlider.x=100;//设置 vSlider 对象的属性 x 的值，用于控制 vSlider 对象的显示位置。
			*this.vSlider.y=100;//设置 vSlider 对象的属性 y 的值，用于控制 vSlider 对象的显示位置。
			*this.vSlider.changeHandler=new Handler(this,this.onChange);//设置 vSlider 位置变化处理器。
			*Laya.stage.addChild(this.vSlider);//把 vSlider 添加到显示列表。
			*}
		*
		*private onChange(value:number):void {
			*console.log("滑块的位置： value="+value);
			*}
		*
		*}
	*</listing>
	*@see laya.ui.Slider
	*@author yung
	*/
	//class laya.ui.VSlider extends laya.ui.Slider
	var VSlider=(function(_super){
		function VSlider(){VSlider.__super.call(this);;
		};

		__class(VSlider,'laya.ui.VSlider',_super);
		return VSlider;
	})(Slider)


	/**
	*...
	*@author ww
	*/
	//class laya.ani.bone.SkeletonPlayer extends laya.ani.bone.Skeleton
	var SkeletonPlayer=(function(_super){
		function SkeletonPlayer(tmplete){
			this.completeHandler=null;
			this.dataUrl=null;
			this.imgUrl=null;
			SkeletonPlayer.__super.call(this,tmplete);
			this.on("complete",this,this._complete);
		}

		__class(SkeletonPlayer,'laya.ani.bone.SkeletonPlayer',_super);
		var __proto=SkeletonPlayer.prototype;
		__proto._complete=function(){
			if (this.completeHandler){
				var tHd;
				tHd=this.completeHandler;
				this.completeHandler=null;
				tHd.run();
			}
		}

		__proto.load=function(baseURL){
			this.dataUrl=baseURL;
			this.imgUrl=baseURL.replace(".sk",".png");
			Laya.loader.load([ {url:this.dataUrl,type:"arraybuffer" },{url:this.imgUrl,type:"image" }],Handler.create(this,this._resLoaded));
		}

		__proto._resLoaded=function(){
			this._tp_=new Templet(Loader.getRes(this.dataUrl),Loader.getRes(this.imgUrl));
			this.setTpl(this._tp_);
			this.play();
		}

		__getset(0,__proto,'skin',null,function(path){
			this.load(path);
		});

		return SkeletonPlayer;
	})(Skeleton)


	/**
	*<code>Dialog</code> 组件是一个弹出对话框。
	*
	*@example 以下示例代码，创建了一个 <code>Dialog</code> 实例。
	*<listing version="3.0">
	*package
	*{
		*import laya.ui.Dialog;
		*import laya.utils.Handler;
		*
		*public class Dialog_Example
		*{
			*private var dialog:Dialog_Instance;
			*public function Dialog_Example()
			*{
				*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
				*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
				*Laya.loader.load("resource/ui/btn_close.png",Handler.create(this,onLoadComplete));//加载资源。
				*}
			*
			*private function onLoadComplete():void
			*{
				*dialog=new Dialog_Instance();//创建一个 Dialog_Instance 类的实例对象 dialog。
				*dialog.dragArea="0,0,150,50";//设置 dialog 的拖拽区域。
				*dialog.show();//显示 dialog。
				*dialog.closeHandler=new Handler(this,onClose);//设置 dialog 的关闭函数处理器。
				*}
			*
			*private function onClose(name:String):void
			*{
				*if (name==Dialog.CLOSE)
				*{
					*trace("通过点击 name 为"+name+"的组件，关闭了dialog。");
					*}
				*}
			*}
		*}
	*
	*import laya.ui.Button;
	*import laya.ui.Dialog;
	*import laya.ui.Image;
	*
	*class Dialog_Instance extends Dialog
	*{
		*function Dialog_Instance():void
		*{
			*var bg:Image=new Image("resource/ui/bg.png");
			*bg.sizeGrid="40,10,5,10";
			*bg.width=150;
			*bg.height=250;
			*addChild(bg);
			*
			*var image:Image=new Image("resource/ui/image.png");
			*addChild(image);
			*
			*var button:Button=new Button("resource/ui/btn_close.png");
			*button.name=Dialog.CLOSE;//设置button的name属性值。
			*button.x=0;
			*button.y=0;
			*addChild(button);
			*}
		*}
	*</listing>
	*<listing version="3.0">
	*Laya.init(640,800);//设置游戏画布宽高、渲染模式
	*Laya.stage.bgColor="#efefef";//设置画布的背景颜色
	*var dialog;
	*Laya.loader.load("resource/ui/btn_close.png",laya.utils.Handler.create(this,loadComplete));//加载资源
	*
	*(function (_super){//新建一个类Dialog_Instance继承自laya.ui.Dialog。
		*function Dialog_Instance(){
			*Dialog_Instance.__super.call(this);//初始化父类
			*
			*var bg=new laya.ui.Image("resource/ui/bg.png");//新建一个 Image 类的实例 bg 。
			*bg.sizeGrid="10,40,10,5";//设置 bg 的网格信息。
			*bg.width=150;//设置 bg 的宽度。
			*bg.height=250;//设置 bg 的高度。
			*this.addChild(bg);//将 bg 添加到显示列表。
			*
			*var image=new laya.ui.Image("resource/ui/image.png");//新建一个 Image 类的实例 image 。
			*this.addChild(image);//将 image 添加到显示列表。
			*
			*var button=new laya.ui.Button("resource/ui/btn_close.png");//新建一个 Button 类的实例 bg 。
			*button.name=laya.ui.Dialog.CLOSE;//设置 button 的 name 属性值。
			*button.x=0;//设置 button 对象的属性 x 的值，用于控制 button 对象的显示位置。
			*button.y=0;//设置 button 对象的属性 y 的值，用于控制 button 对象的显示位置。
			*this.addChild(button);//将 button 添加到显示列表。
			*};
		*
		*Laya.class(Dialog_Instance,"mypackage.dialogExample.Dialog_Instance",_super);//注册类Dialog_Instance。
		*})(laya.ui.Dialog);
	*
	*function loadComplete(){
		*console.log("资源加载完成！");
		*dialog=new mypackage.dialogExample.Dialog_Instance();//创建一个 Dialog_Instance 类的实例对象 dialog。
		*dialog.dragArea="0,0,150,50";//设置 dialog 的拖拽区域。
		*dialog.show();//显示 dialog。
		*dialog.closeHandler=new laya.utils.Handler(this,onClose);//设置 dialog 的关闭函数处理器。
		*}
	*function onClose(name){
		*if (name==laya.ui.Dialog.CLOSE){
			*console.log("通过点击 name 为"+name+"的组件，关闭了dialog。");
			*}
		*}
	*</listing>
	*<listing version="3.0">
	*import Dialog=laya.ui.Dialog;
	*import Handler=laya.utils.Handler;
	*class Dialog_Example {
		*private dialog:Dialog_Instance;
		*constructor(){
			*Laya.init(640,800);//设置游戏画布宽高。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*Laya.loader.load("resource/ui/btn_close.png",Handler.create(this,this.onLoadComplete));//加载资源。
			*}
		*private onLoadComplete():void {
			*this.dialog=new Dialog_Instance();//创建一个 Dialog_Instance 类的实例对象 dialog。
			*this.dialog.dragArea="0,0,150,50";//设置 dialog 的拖拽区域。
			*this.dialog.show();//显示 dialog。
			*this.dialog.closeHandler=new Handler(this,this.onClose);//设置 dialog 的关闭函数处理器。
			*}
		*private onClose(name:string):void {
			*if (name==Dialog.CLOSE){
				*console.log("通过点击 name 为"+name+"的组件，关闭了dialog。");
				*}
			*}
		*}
	*import Button=laya.ui.Button;
	*class Dialog_Instance extends Dialog {
		*Dialog_Instance():void {
			*var bg:laya.ui.Image=new laya.ui.Image("resource/ui/bg.png");
			*bg.sizeGrid="40,10,5,10";
			*bg.width=150;
			*bg.height=250;
			*this.addChild(bg);
			*var image:laya.ui.Image=new laya.ui.Image("resource/ui/image.png");
			*this.addChild(image);
			*var button:Button=new Button("resource/ui/btn_close.png");
			*button.name=Dialog.CLOSE;//设置button的name属性值。
			*button.x=0;
			*button.y=0;
			*this.addChild(button);
			*}
		*}
	*</listing>
	*@author yung
	*/
	//class laya.ui.Dialog extends laya.ui.View
	var Dialog=(function(_super){
		var DialogManager;
		function Dialog(){
			this.popupCenter=true;
			this.closeHandler=null;
			this._dragArea=null;
			Dialog.__super.call(this);
		}

		__class(Dialog,'laya.ui.Dialog',_super);
		var __proto=Dialog.prototype;
		/**@inheritDoc */
		__proto.initialize=function(){
			var dragTarget=this.getChildByName("drag");
			if (dragTarget){
				this.dragArea=dragTarget.x+","+dragTarget.y+","+dragTarget.width+","+dragTarget.height;
				dragTarget.removeSelf();
			}
			this.on("click",this,this.onClick);
		}

		/**
		*@private (protected)
		*对象的 <code>Event.CLICK</code> 点击事件侦听处理函数。
		*/
		__proto.onClick=function(e){
			var btn=e.target;
			if (btn){
				switch (btn.name){
					case "close":
					case "cancel":
					case "sure":
					case "no":
					case "ok":
					case "yes":
						this.close(btn.name);
						break ;
					}
			}
		}

		/**
		*显示对话框（以非模式窗口方式显示）。
		*@param closeOther 是否关闭其它的对话框。若值为true则关闭其它对话框。
		*/
		__proto.show=function(closeOther){
			(closeOther===void 0)&& (closeOther=false);
			Dialog.manager.show(this,closeOther);
		}

		/**
		*显示对话框（以模式窗口方式显示）。
		*@param closeOther 是否关闭其它的对话框。若值为true则关闭其它对话框。
		*/
		__proto.popup=function(closeOther){
			(closeOther===void 0)&& (closeOther=false);
			Dialog.manager.popup(this,closeOther);
		}

		/**
		*关闭对话框。
		*@param type 如果是点击默认关闭按钮触发，则传入关闭按钮的名字(name)，否则为null。
		*/
		__proto.close=function(type){
			Dialog.manager.close(this);
			this.closeHandler && this.closeHandler.runWith(type);
		}

		/**
		*@private
		*/
		__proto.onMouseDown=function(e){
			var point=this.getMousePoint();
			if (this._dragArea.contains(point.x,point.y))this.startDrag();
			else this.stopDrag();
		}

		/**
		*用来指定对话框的拖拽区域。默认值为"0,0,0,0"。
		*<p><b>格式：</b>构成一个矩形所需的 x,y,width,heith 值，用逗号连接为字符串。
		*例如："0,0,100,200"。
		*</p>
		*
		*@see #includeExamplesSummary 请参考示例
		*@return
		*/
		__getset(0,__proto,'dragArea',function(){
			if (this._dragArea)return this._dragArea.toString();
			return null;
			},function(value){
			if (value){
				var a=UIUtils.fillArray([0,0,0,0],value,Number);
				this._dragArea=new Rectangle(a[0],a[1],a[2],a[3]);
				this.on("mousedown",this,this.onMouseDown);
				}else {
				this._dragArea=null;
				this.off("mousedown",this,this.onMouseDown);
			}
		});

		/**
		*弹出框的显示状态；如果弹框处于显示中，则为true，否则为false;
		*@return
		*/
		__getset(0,__proto,'isPopup',function(){
			return this.parent !=null;
		});

		/**@private 获取对话框管理器。*/
		__getset(1,Dialog,'manager',function(){
			return Dialog._manager || (Dialog._manager=new DialogManager());
		},laya.ui.View._$SET_manager);

		Dialog.closeAll=function(){
			Dialog.manager.closeAll();
		}

		Dialog.CLOSE="close";
		Dialog.CANCEL="cancel";
		Dialog.SURE="sure";
		Dialog.NO="no";
		Dialog.OK="ok";
		Dialog.YES="yes";
		Dialog._manager=null
		Dialog.__init$=function(){
			/**
			*<code>DialogManager</code> 类用来管理对话框。
			*@author yung
			*/
			//class DialogManager extends laya.display.Sprite
			DialogManager=(function(_super){
				function DialogManager(){
					this._stage=null;
					DialogManager.__super.call(this);
					this.dialogLayer=new Sprite();
					this.modalLayer=new Sprite();
					this.mouseEnabled=this.dialogLayer.mouseEnabled=this.modalLayer.mouseEnabled=true;
					this.addChild(this.dialogLayer);
					this._stage=Laya.stage;
					this._stage.addChild(this);
					this._stage.on("resize",this,this.onResize);
					this.onResize(null);
				}
				__class(DialogManager,'',_super);
				var __proto=DialogManager.prototype;
				/**
				*@private
				*舞台的 <code>Event.RESIZE</code> 事件侦听处理函数。
				*@param e
				*/
				__proto.onResize=function(e){
					var width=this.modalLayer.width=this._stage.width;
					var height=this.modalLayer.height=this._stage.height;
					this.modalLayer.graphics.clear();
					this.modalLayer.graphics.alpha(UIConfig.popupBgAlpha);
					this.modalLayer.graphics.drawRect(0,0,width,height,UIConfig.popupBgColor);
					this.modalLayer.graphics.alpha(1);
					for (var i=this.dialogLayer.numChildren-1;i >-1;i--){
						var item=this.dialogLayer.getChildAt(i);
						if (item.popupCenter){
							item.x=(width-item.width)*0.5;
							item.y=(height-item.height)*0.5;
						}
					}
					for (i=this.modalLayer.numChildren-1;i >-1;i--){
						item=this.modalLayer.getChildAt(i);
						if (item.isPopup){
							if (item.popupCenter){
								item.x=(width-item.width)*0.5;
								item.y=(height-item.height)*0.5;
							}
						}
					}
				}
				/**
				*显示对话框(非模式窗口类型)。
				*@param dialog 需要显示的对象框 <code>Dialog</code> 实例。
				*@param closeOther 是否关闭其它对话框，若值为ture，则关闭其它的对话框。
				*/
				__proto.show=function(dialog,closeOther){
					(closeOther===void 0)&& (closeOther=false);
					if (closeOther)this.dialogLayer.removeChildren();
					if (dialog.popupCenter){
						dialog.x=(this._stage.width-dialog.width)*0.5;
						dialog.y=(this._stage.height-dialog.height)*0.5;
					}
					this.dialogLayer.addChild(dialog);
					this.event("open");
				}
				/**
				*显示对话框(模式窗口类型)。
				*@param dialog 需要显示的对象框 <code>Dialog</code> 实例。
				*@param closeOther 是否关闭其它对话框，若值为ture，则关闭其它的对话框。
				*/
				__proto.popup=function(dialog,closeOther){
					(closeOther===void 0)&& (closeOther=false);
					if (closeOther)this.modalLayer.removeChildren();
					if (dialog.popupCenter){
						dialog.x=(this._stage.width-dialog.width)*0.5;
						dialog.y=(this._stage.height-dialog.height)*0.5;
					}
					this.modalLayer.addChild(dialog);
					this.addChild(this.modalLayer);
					this.event("open");
				}
				/**
				*关闭对话框。
				*@param dialog 需要关闭的对象框 <code>Dialog</code> 实例。
				*/
				__proto.close=function(dialog){
					dialog.removeSelf();
					if (this.modalLayer.numChildren===0){
						this.modalLayer.removeSelf();
						}else {
						this.showFirst();
					}
					this.event("close");
				}
				/**
				*@private
				*/
				__proto.showFirst=function(){
					for (var i=0,n=this.modalLayer.numChildren-1;i <=n;i++){
						(this.modalLayer.getChildAt(i)).visible=i===n;
					}
				}
				/**
				*关闭所有的对话框。
				*/
				__proto.closeAll=function(){
					this.dialogLayer.removeChildren();
					this.modalLayer.removeChildren();
					this.modalLayer.removeSelf();
					this.event("close");
				}
				return DialogManager;
			})(Sprite)
		}

		return Dialog;
	})(View)


	//class laya.editor.ui.other.ColorPickerPanelUI extends laya.ui.View
	var ColorPickerPanelUI=(function(_super){
		function ColorPickerPanelUI(){
			this.pickBack=null;
			this.colorTxt=null;
			this.redTxt=null;
			this.greenTxt=null;
			this.blueTxt=null;
			ColorPickerPanelUI.__super.call(this);
		}

		__class(ColorPickerPanelUI,'laya.editor.ui.other.ColorPickerPanelUI',_super);
		var __proto=ColorPickerPanelUI.prototype;
		__proto.createChildren=function(){
			laya.ui.Component.prototype.createChildren.call(this);
			this.createView(ColorPickerPanelUI.uiView);
		}

		__static(ColorPickerPanelUI,
		['uiView',function(){return this.uiView={"child":[{"type":"Image","props":{"x":"165","sizeGrid":"4,4,4,4","y":"137","bottom":"0","skin":"view/bg_panel.png","top":"0","right":"0","left":"0"}},{"type":"Image","props":{"y":"9","width":"189","skin":"comp/blank.png","height":"180","var":"pickBack","x":"5"}},{"type":"Label","props":{"y":"206","text":"Color：","width":"50","align":"left","height":"18","color":"#dddddd","x":"8"}},{"type":"TextInput","props":{"text":"#ffffff","skin":"comp/textinput.png","color":"#8a8a8a","x":"50","y":"205","width":"138","left":"50","height":"22","padding":"0,5,0,5","var":"colorTxt","right":"5","sizeGrid":"3,3,3,3"}},{"type":"Label","props":{"y":"233","text":"Red：","width":"50","align":"left","height":"18","color":"#dddddd","x":"8"}},{"type":"TextInput","props":{"text":"255","skin":"comp/textinput.png","color":"#8a8a8a","x":"50","y":"232","width":"135","left":"50","height":"22","padding":"0,5,0,5","var":"redTxt","right":"5","sizeGrid":"3,3,3,3"}},{"type":"Label","props":{"y":"262","text":"Green：","width":"50","align":"left","height":"18","color":"#dddddd","x":"8"}},{"type":"TextInput","props":{"text":"255","skin":"comp/textinput.png","color":"#8a8a8a","x":"50","y":"261","width":"132","left":"50","height":"22","padding":"0,5,0,5","var":"greenTxt","right":"5","sizeGrid":"3,3,3,3"}},{"type":"Label","props":{"y":"291","text":"Blue：","width":"50","align":"left","height":"18","color":"#dddddd","x":"8"}},{"type":"TextInput","props":{"text":"255","skin":"comp/textinput.png","color":"#8a8a8a","x":"50","y":"290","width":"135","left":"50","height":"22","padding":"0,5,0,5","var":"blueTxt","right":"5","sizeGrid":"3,3,3,3"}}],"type":"View","props":{"height":"320","scenecolor":"#dddddd","width":"200"}};}
		]);
		return ColorPickerPanelUI;
	})(View)


	//class laya.editor.ui.comp.LayoutTabUI extends laya.ui.View
	var LayoutTabUI=(function(_super){
		function LayoutTabUI(){
			this.btn=null;
			this.close=null;
			LayoutTabUI.__super.call(this);
		}

		__class(LayoutTabUI,'laya.editor.ui.comp.LayoutTabUI',_super);
		var __proto=LayoutTabUI.prototype;
		__proto.createChildren=function(){
			laya.ui.Component.prototype.createChildren.call(this);
			this.createView(LayoutTabUI.uiView);
		}

		__static(LayoutTabUI,
		['uiView',function(){return this.uiView={"child":[{"type":"Button","props":{"sizeGrid":"4,4,4,4","y":"0","labelColors":"#dddddd,#888888,#e0e0e0","label":"label","skin":"view/tab2.png","height":"25","var":"btn","width":"75","x":"0"}},{"type":"Button","props":{"skin":"view/btn_close1.png","y":"7","var":"close","x":"59"}}],"type":"View","props":{"scenecolor":"#dddddd"}};}
		]);
		return LayoutTabUI;
	})(View)


	//class laya.editor.ui.comp.viewTabUI extends laya.ui.View
	var viewTabUI=(function(_super){
		function viewTabUI(){
			this.btn=null;
			this.close=null;
			viewTabUI.__super.call(this);
		}

		__class(viewTabUI,'laya.editor.ui.comp.viewTabUI',_super);
		var __proto=viewTabUI.prototype;
		__proto.createChildren=function(){
			laya.ui.Component.prototype.createChildren.call(this);
			this.createView(viewTabUI.uiView);
		}

		__static(viewTabUI,
		['uiView',function(){return this.uiView={"child":[{"type":"Button","props":{"sizeGrid":"4,4,4,4","y":"0","labelColors":"#dddddd,#888888,#e0e0e0","labelMargin":"0,0,15,0","label":"label","skin":"view/tab2.png","height":"25","var":"btn","width":"75","x":"0"}},{"type":"Button","props":{"skin":"view/btn_close1.png","y":"7","var":"close","x":"58"}}],"type":"View","props":{"scenecolor":"#dddddd"}};}
		]);
		return viewTabUI;
	})(View)


	//class laya.editor.core.UIView extends laya.editor.core.UIBox
	var UIView=(function(_super){
		function UIView(){
			this._viewLayer=null;
			UIView.__super.call(this);
			this.addChild(this._viewLayer=new UIBox());
			this._viewLayer.mouseEnabled=true;
		}

		__class(UIView,'laya.editor.core.UIView',_super);
		var __proto=UIView.prototype;
		/**创建视图*/
		__proto.createView=function(xml){
			this._viewLayer.removeChildren();
			this.createComp(xml,this._viewLayer,{});
		}

		/**根据容器创建，重新创建子对象，容器保持不变*/
		__proto.createByBox=function(box,xml){
			var map=this.getLayersInfo(xml);
			box.comXml=xml;
			var sprite=box;
			sprite.removeChildren();
			var list=xml.child;
			for (var j=0,n=list.length;j < n;j++){
				var node=list[j];
				var child=this.createComp(node,null,map);
				child && sprite.addChild(child);
			}
			return sprite;
		}

		__proto.getLayersInfo=function(xml){
			var obj={};
			return obj;
		}

		/**创建组件*/
		__proto.createComp=function(xml,comp,visibleMap){
			var layer=xml.layer;
			if (layer){
				if (visibleMap[layer]==0){
					return null;
				}
			}
			comp=comp || UIView.getCompInstance(xml);
			if (comp==null)return null;
			var map=this.getLayersInfo(xml);
			var list=xml.child;
			if (list){
				for (var j=0,n=list.length;j < n;j++){
					var node=list[j];
					if (Laya.__typeof(comp,'laya.ui.IRender')&& node.props.name=="render"){
						try {
							comp["itemRender"]=node;
						}catch (e){}
						}else if(node){
						var child=this.createComp(node,null,map);
						if (child){
							comp.addChild(child);
						}
					}
				}
			};
			var props=xml.props;
			if(xml.hasOwnProperty(Signs.HideSign)){
				comp[Signs.HideSign]=xml[Signs.HideSign];
				comp.visible=!xml[Signs.HideSign];
				props.visible=!xml[Signs.HideSign];
			}
			if(xml.hasOwnProperty(Signs.LockSign)){
				comp[Signs.LockSign]=xml[Signs.LockSign];
			};
			var prop,value;
			for (prop in props){
				value=props[prop];
				if (prop !="visible"){
					try {
						if (prop==="width" || prop==="height" || prop==="x" || prop==="y" || (typeof (comp[prop])=='number')){
							comp[prop]=Number(value);
							}else {
							comp[prop]=(value==="true" ? true :(value==="false" ? false :value))
						}
						}catch (e){
						var msg=Sys.lang("对[{0}]的{1}属性赋值{2}时遇错误：",xml.type,prop,value)+"\n"+e.message;
						alert(msg);
					}
				}
			};
			var compType=xml.type;
			if (compType !="View" && compType !="Dialog"){
				if (compType !="UIView"){
					var skinLabel=UIConfigManager.getCompSkinLabel(compType);
					var skin;
					if(xml.props)skin=xml.props[skinLabel];
					if (skin){
						var defaultProps=ResStyleManager.getResProps(skin).split(" ");
						UIView.setDefaultValue(comp,xml,defaultProps);
					}
					}else {
					var source=xml.source;
					if (source){
						defaultProps=PageStyleManager.getPageProps(source).split(" ");
						UIView.setDefaultValue(comp,xml,defaultProps);
					}
				}
			}
			if (comp["initItems"])(comp).initItems();
			return comp;
		}

		UIView.setDefaultValue=function(comp,xml,props){
			for (var i=0,n=props.length;i < n;i++){
				var a=props[i].split("=");
				if (a.length==2){
					var key=a[0];
					var val=a[1];
					if (xml.props[key]==null){
						try {
							val=ObjectTools.getAutoValue(val);
							comp[key]=(val=="true" ? true :(val=="false" ? false :val))
							}catch (e){
							var msg=Sys.lang("对[{0}]的{1}属性赋值{2}时遇错误：",xml.name,key,val)+"\n"+e.message;
							alert(msg);
						}
					}
				}
			}
		}

		UIView.createCompS=function(xml,comp,visibleMap){
			var layer=xml.layer;
			if (layer){
				if (visibleMap[layer]==0){
					return null;
				}
			}
			comp=comp || UIView.getCompInstance(xml);
			if (comp==null)return null;
			var map={};
			var list=xml.child;
			if (list){
				for (var j=0,n=list.length;j < n;j++){
					var node=list[j];
					if (Laya.__typeof(comp,'laya.ui.IRender')&& node.props.name=="render"){
						try {
							comp["itemRender"]=node;
						}catch (e){}
						}else if(node){
						var child=UIView.createCompS(node,null,map);
						if (child){
							comp.addChild(child);
						}
					}
				}
			};
			var props=xml.props;
			if(xml.hasOwnProperty(Signs.HideSign)){
				comp[Signs.HideSign]=xml[Signs.HideSign];
				comp.visible=!xml[Signs.HideSign];
				props.visible=!xml[Signs.HideSign];
			}
			if(xml.hasOwnProperty(Signs.LockSign)){
				comp[Signs.LockSign]=xml[Signs.LockSign];
			};
			var prop,value;
			for (prop in props){
				value=props[prop];
				if (prop !="visible"){
					try {
						if (prop==="width" || prop==="height" || prop==="x" || prop==="y" || (typeof (comp[prop])=='number')){
							comp[prop]=Number(value);
							}else {
							comp[prop]=(value==="true" ? true :(value==="false" ? false :value))
						}
						}catch (e){
						var msg=Sys.lang("对[{0}]的{1}属性赋值{2}时遇错误：",xml.type,prop,value)+"\n"+e.message;
						alert(msg);
					}
				}
			};
			var compType=xml.type;
			if (compType !="View" && compType !="Dialog"){
				if (compType !="UIView"){
					var skinLabel=UIConfigManager.getCompSkinLabel(compType);
					var skin;
					if(xml.props)skin=xml.props[skinLabel];
					if (skin){
						var defaultProps=ResStyleManager.getResProps(skin).split(" ");
						UIView.setDefaultValue(comp,xml,defaultProps);
					}
					}else {
					var source=xml.source;
					if (source){
						defaultProps=PageStyleManager.getPageProps(source).split(" ");
						UIView.setDefaultValue(comp,xml,defaultProps);
					}
				}
			}
			return comp;
		}

		UIView.getCompInstance=function(xml){
			var name=xml.type;
			var source=xml.source;
			if (name=="UIView"){
				try {
					var sourcePath;
					sourcePath=FileManager.getPath(SystemSetting.pagesPath,source.replace(".xml","."+TypeManager.getExtension("Page")));
					xml=FileManager.readJSONFile(sourcePath);
					var view=new UIView();
					view.createView(xml);
					return view;
					}catch (e){
					debugger;
					var msg=Sys.lang("创建页面嵌套[{0}]时遇到错误",source+" path:"+sourcePath)+"\n"+e.toString();
					alert(msg);
				}
				}else {
				var classObj=Utils.getClass(UIConfigManager.getCompProp(name,"className"));
				return new classObj();
			}
			return null;
		}

		return UIView;
	})(UIBox)


	/**
	*...
	*@author ww
	*/
	//class laya.editor.core.components.EditorTextInput extends laya.ui.TextInput
	var EditorTextInput=(function(_super){
		function EditorTextInput(text){
			(text===void 0)&& (text="");
			EditorTextInput.__super.call(this,text);
			this._tf.on("blur",this,this.mOnBlur);
			this._tf.on("focus",this,this.mOnFocus);
			this.color="#8a8a8a";
		}

		__class(EditorTextInput,'laya.editor.core.components.EditorTextInput',_super);
		var __proto=EditorTextInput.prototype;
		__proto.mOnBlur=function(e){
			this.skin="comp/textinput.png";
		}

		__proto.mOnFocus=function(e){
			this.skin="comp/textinput_selected.png";
			this.select();
		}

		return EditorTextInput;
	})(TextInput)


	/**
	*...
	*@author ww
	*/
	//class laya.editor.core.components.NumberInput extends laya.ui.TextInput
	var NumberInput=(function(_super){
		function NumberInput(text){
			this._slideBtn=null;
			this._preX=NaN;
			this._preValue=NaN;
			this._isChanging=false;
			(text===void 0)&& (text="");
			NumberInput.__super.call(this,text);
			this._slideBtn=new Button("comp/button.png");
			this._slideBtn.on("mousedown",this,this.slideMouseDown);
			this._slideBtn.top=1;
			this._slideBtn.bottom=1;
			this._slideBtn.width=10;
			this._slideBtn.right=1;
			this._slideBtn.toolTip="鼠标按下上下拖动可修改值";
			this.addChild(this._slideBtn);
			this._tf.on("focus",this,this.mOnFocus);
		}

		__class(NumberInput,'laya.editor.core.components.NumberInput',_super);
		var __proto=NumberInput.prototype;
		__proto.mOnFocus=function(e){
			if (this._isChanging){
				this.stageMouseUp(null);
			}
		}

		__proto.slideMouseDown=function(e){
			if (!this.text||this.text.length<1)return;
			this._preValue=parseFloat(this.text);
			this._preX=Laya.stage.mouseY;
			this.clearSlideEvents();
			Laya.timer.loop(100,this,this.updateValue);
			Laya.stage.on("mouseup",this,this.stageMouseUp);
			this._isChanging=true;
		}

		__proto.updateValue=function(){
			this.text=((Laya.stage.mouseY-this._preX)*0.2+this._preValue).toFixed(1);
			this.event("changing",this);
		}

		__proto.stageMouseUp=function(e){
			this.clearSlideEvents();
			this.event("enter",this);
			this._isChanging=false;
		}

		__proto.clearSlideEvents=function(){
			Laya.stage.off("mouseup",this,this.stageMouseUp);
			Laya.timer.clear(this,this.updateValue);
		}

		__proto.changeSize=function(){
			laya.ui.Component.prototype.changeSize.call(this);
		}

		return NumberInput;
	})(TextInput)


	/**
	*可拖动布局框的基类
	*@author ww
	*/
	//class laya.ide.ui.DragView extends laya.ui.View
	var DragView=(function(_super){
		function DragView(){
			this.minWidth=50;
			this.minHeight=50;
			this.defaultWidth=100;
			this.defaultHeight=100;
			this.title="";
			this.canClose=true;
			this.canMix=true;
			DragView.__super.call(this);
		}

		__class(DragView,'laya.ide.ui.DragView',_super);
		return DragView;
	})(View)


	//class laya.editor.ui.group.ItemGroupUI extends laya.ui.View
	var ItemGroupUI=(function(_super){
		function ItemGroupUI(){
			this.groubBar=null;
			this.groupLabl=null;
			this.arrowClip=null;
			this.groupBox=null;
			ItemGroupUI.__super.call(this);
		}

		__class(ItemGroupUI,'laya.editor.ui.group.ItemGroupUI',_super);
		var __proto=ItemGroupUI.prototype;
		__proto.createChildren=function(){
			laya.ui.Component.prototype.createChildren.call(this);
			this.createView(ItemGroupUI.uiView);
		}

		__static(ItemGroupUI,
		['uiView',function(){return this.uiView={"child":[{"type":"Image","props":{"x":"0","y":"0","mouseEnabled":"true","width":"100","skin":"view/bg_bar.png","left":"0","height":"20","var":"groubBar","right":"0","sizeGrid":"3,3,3,3"}},{"type":"Label","props":{"y":"0","var":"groupLabl","text":"label","mouseChildren":"false","mouseEnabled":"false","color":"#d8d8d8","x":"29"}},{"type":"Clip","props":{"x":"15","y":"4","clipY":"2","mouseChildren":"false","skin":"comp/clip_tree.png","var":"arrowClip","mouseEnabled":"false"}},{"child":[{"type":"Button","props":{"sizeGrid":"4,0,4,0","labelColors":"#dddddd,#dddddd,#dddddd","label":"label","skin":"comp/button.png"}}],"type":"Box","props":{"x":"0","y":"20","left":"0","var":"groupBox","right":"0","mouseEnabled":"true"}}],"type":"View","props":{"scenecolor":"#dddddd"}};}
		]);
		return ItemGroupUI;
	})(View)


	//class laya.editor.ui.LayoutRecUI extends laya.ui.View
	var LayoutRecUI=(function(_super){
		function LayoutRecUI(){
			this.back=null;
			this.tab=null;
			LayoutRecUI.__super.call(this);
		}

		__class(LayoutRecUI,'laya.editor.ui.LayoutRecUI',_super);
		var __proto=LayoutRecUI.prototype;
		__proto.createChildren=function(){
			laya.ui.Component.prototype.createChildren.call(this);
			this.createView(LayoutRecUI.uiView);
		}

		__static(LayoutRecUI,
		['uiView',function(){return this.uiView={"type":"View","child":[{"type":"Image","props":{"x":"0","y":"0","width":"600","skin":"view/bg_panel_layoutrec.png","height":"25","top":"0","var":"back","right":"0","left":"0"}},{"type":"Tab","props":{"skin":"view/tab2.png","y":"0","var":"tab","sizeGrid":"0,4,0,4","x":"0"}}]};}
		]);
		return LayoutRecUI;
	})(View)


	//class laya.editor.ui.MenuBarUI extends laya.ui.View
	var MenuBarUI=(function(_super){
		function MenuBarUI(){
			this.tab=null;
			this.btnBox=null;
			this.minBtn=null;
			this.backBtn=null;
			this.closeBtn=null;
			MenuBarUI.__super.call(this);
		}

		__class(MenuBarUI,'laya.editor.ui.MenuBarUI',_super);
		var __proto=MenuBarUI.prototype;
		__proto.createChildren=function(){
			laya.ui.Component.prototype.createChildren.call(this);
			this.createView(MenuBarUI.uiView);
		}

		__static(MenuBarUI,
		['uiView',function(){return this.uiView={"child":[{"type":"Image","props":{"x":"0","y":"0","width":"200","skin":"view/bg_menu.png","height":"34","sizeGrid":"4,4,4,4","right":"0","left":"0"}},{"type":"Image","props":{"skin":"view/logo.png","y":"6","x":"13"}},{"child":[{"type":"Button","props":{"name":"item0","labelColors":"#e0e0e0,#e0e0e0,#e0e0e0","label":"项目(P)","skin":"view/btn_menu.png"}},{"type":"Button","props":{"skin":"view/btn_menu.png","name":"item1","labelColors":"#e0e0e0,#e0e0e0,#e0e0e0","label":"文件(F)","x":"68"}},{"type":"Button","props":{"skin":"view/btn_menu.png","name":"item2","labelColors":"#e0e0e0,#e0e0e0,#e0e0e0","label":"编辑(E)","x":"136"}},{"type":"Button","props":{"skin":"view/btn_menu.png","name":"item3","labelColors":"#e0e0e0,#e0e0e0,#e0e0e0","label":"视图(V)","x":"204"}},{"type":"Button","props":{"skin":"view/btn_menu.png","name":"item5","labelColors":"#e0e0e0,#e0e0e0,#e0e0e0","label":"发布(I)","x":"340"}},{"type":"Button","props":{"skin":"view/btn_menu.png","name":"item6","labelColors":"#e0e0e0,#e0e0e0,#e0e0e0","label":"插件(T)","x":"408"}},{"type":"Button","props":{"skin":"view/btn_menu.png","name":"item7","labelColors":"#e0e0e0,#e0e0e0,#e0e0e0","label":"关于(A)","x":"476"}},{"type":"Button","props":{"name":"item4","labelColors":"#e0e0e0,#e0e0e0,#e0e0e0","label":"窗口(W)","skin":"view/btn_menu.png","y":"0","x":"272"}}],"type":"Tab","props":{"y":"5","var":"tab","x":"40"}},{"child":[{"type":"Button","props":{"var":"minBtn","skin":"view/btn_min.png"}},{"type":"Button","props":{"skin":"view/btn_max.png","y":"0","var":"backBtn","x":"33"}},{"type":"Button","props":{"skin":"view/btn_close2.png","y":"0","var":"closeBtn","x":"66"}}],"type":"Box","props":{"y":"1","var":"btnBox","right":"1","x":"712"}}],"type":"View","props":{"height":"34","scenecolor":"#dddddd","width":"600"}};}
		]);
		return MenuBarUI;
	})(View)


	//class laya.editor.ui.other.NewsPageUI extends laya.ui.View
	var NewsPageUI=(function(_super){
		function NewsPageUI(){
			NewsPageUI.__super.call(this);
		}

		__class(NewsPageUI,'laya.editor.ui.other.NewsPageUI',_super);
		var __proto=NewsPageUI.prototype;
		__proto.createChildren=function(){
			laya.ui.Component.prototype.createChildren.call(this);
			this.createView(NewsPageUI.uiView);
		}

		__static(NewsPageUI,
		['uiView',function(){return this.uiView={"child":[{"type":"Image","props":{"skin":"news/news.png","y":"0","x":"0"}}],"type":"View","props":{"height":"657","scenecolor":"#dddddd","width":"987"}};}
		]);
		return NewsPageUI;
	})(View)


	//class laya.editor.manager.DragBoxManager extends laya.editor.core.UIBox
	var DragBoxManager=(function(_super){
		function DragBoxManager(){
			DragBoxManager.__super.call(this);
			this._drags=new Dictionary();
		}

		__class(DragBoxManager,'laya.editor.manager.DragBoxManager',_super);
		var __proto=DragBoxManager.prototype;
		__proto.addDrag=function(target,type){
			var dragBox=new DragBox(type);
			this.addChild(dragBox);
			dragBox.setTarget(target);
			this._drags.add(target,dragBox);
		}

		__proto.removeDrag=function(target){
			var dragBox=this._drags.getValue(target);
			if (dragBox){
				dragBox.removeSelf();
				this._drags.deleteKey(target);
			}
		}

		__proto.removeAll=function(){
			this.removeChildren();
			this._drags.reset();
		}

		__proto.refreshDrag=function(target){
			var dragBox=this._drags.getValue(target);
			if (dragBox){
				dragBox.refresh();
			}
		}

		return DragBoxManager;
	})(UIBox)


	//class laya.editor.ui.prop.PropGroupUI extends laya.ui.View
	var PropGroupUI=(function(_super){
		function PropGroupUI(){
			this.groubBar=null;
			this.groupLabl=null;
			this.arrowClip=null;
			this.groupBox=null;
			PropGroupUI.__super.call(this);
		}

		__class(PropGroupUI,'laya.editor.ui.prop.PropGroupUI',_super);
		var __proto=PropGroupUI.prototype;
		__proto.createChildren=function(){
			laya.ui.Component.prototype.createChildren.call(this);
			this.createView(PropGroupUI.uiView);
		}

		__static(PropGroupUI,
		['uiView',function(){return this.uiView={"child":[{"type":"Image","props":{"x":"0","y":"0","mouseEnabled":"true","width":"100","skin":"view/bg_bar.png","left":"0","height":"24","var":"groubBar","right":"0","sizeGrid":"3,3,3,3"}},{"type":"Label","props":{"y":"3","var":"groupLabl","text":"label","mouseChildren":"false","mouseEnabled":"false","color":"#efeded","x":"19"}},{"type":"Clip","props":{"x":"5","y":"4","clipY":"2","mouseChildren":"false","skin":"comp/clip_tree.png","var":"arrowClip","mouseEnabled":"false"}},{"child":[{"type":"Button","props":{"sizeGrid":"4,0,4,0","labelColors":"#dddddd,#dddddd,#dddddd","label":"label","skin":"comp/button.png"}}],"type":"Box","props":{"x":"0","y":"24","left":"0","var":"groupBox","right":"0","mouseEnabled":"true"}}],"type":"View","props":{"scenecolor":"#dddddd"}};}
		]);
		return PropGroupUI;
	})(View)


	//class laya.editor.ui.QuickToolUI extends laya.ui.View
	var QuickToolUI=(function(_super){
		function QuickToolUI(){
			this.back=null;
			QuickToolUI.__super.call(this);
		}

		__class(QuickToolUI,'laya.editor.ui.QuickToolUI',_super);
		var __proto=QuickToolUI.prototype;
		__proto.createChildren=function(){
			laya.ui.Component.prototype.createChildren.call(this);
			this.createView(QuickToolUI.uiView);
		}

		__static(QuickToolUI,
		['uiView',function(){return this.uiView={"child":[{"type":"Image","props":{"x":"0","y":"1","width":"900","skin":"view/bg_menu.png","height":"31","sizeGrid":"4,4,4,4","var":"back","right":"0","left":"0"}},{"type":"Button","props":{"y":"5","toolTip":"新建页面文件夹","skin":"view/folder_add.png","name":"addFolder","stateNum":"2","x":"20"}},{"type":"Button","props":{"y":"5","toolTip":"新建页面","skin":"view/page_add.png","name":"addPage","stateNum":"2","x":"54"}},{"type":"Button","props":{"y":"5","toolTip":"保存页面","skin":"view/save.png","name":"save","stateNum":"2","x":"94"}},{"type":"Button","props":{"y":"5","toolTip":"保存所有页面","skin":"view/saveall.png","name":"saveAll","stateNum":"2","x":"128"}},{"type":"Button","props":{"y":"5","toolTip":"恢复","skin":"view/back.png","name":"back","stateNum":"2","x":"168"}},{"type":"Button","props":{"y":"5","toolTip":"撤销恢复","skin":"view/re.png","name":"reBack","stateNum":"2","x":"202"}},{"type":"Button","props":{"y":"5","toolTip":"缩小视图","skin":"view/zoom_in.png","name":"zoomIn","stateNum":"2","x":"242"}},{"type":"Button","props":{"y":"5","toolTip":"放大视图","skin":"view/zoom_out.png","name":"zoomOut","stateNum":"2","x":"276"}},{"type":"Button","props":{"y":"5","toolTip":"恢复视图","skin":"view/zoom_back.png","name":"zoomBack","stateNum":"2","x":"310"}},{"type":"Button","props":{"y":"5","toolTip":"刷新资源及页面","skin":"view/res.png","name":"refresh","stateNum":"2","x":"354"}},{"type":"Button","props":{"y":"5","toolTip":"发布","skin":"view/publish.png","name":"publish","stateNum":"2","x":"388"}},{"type":"Button","props":{"y":"5","toolTip":"左对齐","skin":"view/align_left.png","name":"alignLeft","stateNum":"2","x":"432"}},{"type":"Button","props":{"y":"5","toolTip":"垂直居中对齐","skin":"view/align_center.png","name":"alignCenter","stateNum":"2","x":"466"}},{"type":"Button","props":{"y":"5","toolTip":"右对齐","skin":"view/align_right.png","name":"alignRight","stateNum":"2","x":"500"}},{"type":"Button","props":{"y":"5","toolTip":"顶部对齐","skin":"view/align_top.png","name":"alignTop","stateNum":"2","x":"534"}},{"type":"Button","props":{"y":"5","toolTip":"水平居中对齐","skin":"view/align_middle.png","name":"alignMiddle","stateNum":"2","x":"566"}},{"type":"Button","props":{"y":"5","toolTip":"底部对齐","skin":"view/align_bottom.png","name":"alignbottom","stateNum":"2","x":"600"}},{"type":"Button","props":{"y":"5","toolTip":"水平平均间隔","skin":"view/space_h.png","name":"spaceH","stateNum":"2","x":"644"}},{"type":"Button","props":{"y":"5","toolTip":"垂直平均间隔","skin":"view/space_v.png","name":"spaceV","stateNum":"2","x":"678"}},{"type":"Button","props":{"y":"5","toolTip":"移动到左上角","skin":"view/move_top_left.png","name":"topLeft","stateNum":"2","x":"722"}},{"type":"Button","props":{"y":"5","toolTip":"移动到右上角","skin":"view/move_top_right.png","name":"topRight","stateNum":"2","x":"756"}},{"type":"Button","props":{"y":"5","toolTip":"移动到水平居中","skin":"view/center.png","name":"center","stateNum":"2","x":"850"}},{"type":"Button","props":{"y":"5","toolTip":"移动到垂直居中","skin":"view/middle.png","name":"middle","stateNum":"2","x":"884"}},{"type":"Button","props":{"y":"5","toolTip":"移动到左下角","skin":"view/move_bottom_left.png","name":"bottomLeft","stateNum":"2","x":"786"}},{"type":"Button","props":{"y":"5","toolTip":"移动到右上角","skin":"view/move_bottom_right.png","name":"bottomRight","stateNum":"2","x":"816"}}],"type":"View","props":{"height":"32","title":"工具","scenecolor":"#dddddd","width":"900"}};}
		]);
		return QuickToolUI;
	})(View)


	//class laya.editor.ui.template.TemplateItemUI extends laya.ui.View
	var TemplateItemUI=(function(_super){
		function TemplateItemUI(){
			this.imgBg=null;
			this.tLabel=null;
			TemplateItemUI.__super.call(this);
		}

		__class(TemplateItemUI,'laya.editor.ui.template.TemplateItemUI',_super);
		var __proto=TemplateItemUI.prototype;
		__proto.createChildren=function(){
			laya.ui.Component.prototype.createChildren.call(this);
			this.createView(TemplateItemUI.uiView);
		}

		__static(TemplateItemUI,
		['uiView',function(){return this.uiView={"child":[{"type":"Image","props":{"skin":"view/bg_content.png","top":"0","right":"0","bottom":"0","left":"0"}},{"type":"Image","props":{"x":"8","y":"8","bottom":"15","skin":"comp/blank.png","top":"2","var":"imgBg","right":"2","left":"2"}},{"type":"Image","props":{"x":"0","y":"60","width":"74","skin":"view/bg_content.png","height":"20","right":"0","left":"0"}},{"type":"Label","props":{"y":"61","var":"tLabel","text":"控件名","width":"65","left":"5","align":"center","height":"18","color":"#dddddd","right":"5","x":"7"}}],"type":"View","props":{"height":"80","width":"80","scenecolor":"#dddddd"}};}
		]);
		return TemplateItemUI;
	})(View)


	//class laya.editor.ui.timeline.PlayControlUI extends laya.ui.View
	var PlayControlUI=(function(_super){
		function PlayControlUI(){
			this.toBeginPos=null;
			this.pre=null;
			this.play=null;
			this.next=null;
			this.toEndPos=null;
			PlayControlUI.__super.call(this);
		}

		__class(PlayControlUI,'laya.editor.ui.timeline.PlayControlUI',_super);
		var __proto=PlayControlUI.prototype;
		__proto.createChildren=function(){
			laya.ui.Component.prototype.createChildren.call(this);
			this.createView(PlayControlUI.uiView);
		}

		__static(PlayControlUI,
		['uiView',function(){return this.uiView={"child":[{"type":"Image","props":{"x":"222","sizeGrid":"4,4,4,4","y":"203","bottom":"0","skin":"view/bg_panel.png","top":"0","right":"0","left":"0"}},{"type":"Image","props":{"x":"6","y":"4","skin":"play/begin.png","name":"toBeginPos","var":"toBeginPos","mouseEnabled":"true"}},{"type":"Image","props":{"y":"4","width":"15","skin":"play/back.png","mouseEnabled":"true","height":"12","name":"pre","var":"pre","x":"23"}},{"type":"Image","props":{"x":"40","y":"4","skin":"play/play.png","name":"play","var":"play","mouseEnabled":"true"}},{"type":"Image","props":{"x":"57","y":"4","skin":"play/forward.png","name":"next","var":"next","mouseEnabled":"true"}},{"type":"Image","props":{"x":"74","y":"4","skin":"play/end.png","name":"toEndPos","var":"toEndPos","mouseEnabled":"true"}}],"type":"View","props":{"height":"20","scenecolor":"#dddddd","width":"95"}};}
		]);
		return PlayControlUI;
	})(View)


	//class laya.editor.ui.timeline.TimeGridUI extends laya.ui.View
	var TimeGridUI=(function(_super){
		function TimeGridUI(){
			TimeGridUI.__super.call(this);
		}

		__class(TimeGridUI,'laya.editor.ui.timeline.TimeGridUI',_super);
		var __proto=TimeGridUI.prototype;
		__proto.createChildren=function(){
			laya.ui.Component.prototype.createChildren.call(this);
			this.createView(TimeGridUI.uiView);
		}

		__static(TimeGridUI,
		['uiView',function(){return this.uiView={"child":[{"type":"Image","props":{"x":"202","sizeGrid":"4,4,4,4","y":"183","bottom":"0","skin":"view/bg_panel.png","top":"0","right":"0","left":"0"}}],"type":"View","props":{"scenecolor":"#dddddd"}};}
		]);
		return TimeGridUI;
	})(View)


	//class laya.editor.ui.UIViewerUI extends laya.ui.View
	var UIViewerUI=(function(_super){
		function UIViewerUI(){
			this.tab=null;
			this.viewStack=null;
			this.designView=null;
			this.codeView=null;
			this.scaleInfo=null;
			this.compInfo=null;
			UIViewerUI.__super.call(this);
		}

		__class(UIViewerUI,'laya.editor.ui.UIViewerUI',_super);
		var __proto=UIViewerUI.prototype;
		__proto.createChildren=function(){
			laya.ui.Component.prototype.createChildren.call(this);
			this.createView(UIViewerUI.uiView);
		}

		__static(UIViewerUI,
		['uiView',function(){return this.uiView={"child":[{"type":"Image","props":{"x":"482","sizeGrid":"4,4,4,4","y":"-62","bottom":"0","skin":"view/bg_body.png","top":"0","right":"0","left":"0"}},{"child":[{"type":"Button","props":{"sizeGrid":"2,2,2,2","name":"item0","labelColors":"#888888,#888888,#d0d0d0","label":"视图","skin":"view/tab3.png"}},{"type":"Button","props":{"x":"75","name":"item1","labelColors":"#888888,#888888,#d0d0d0","label":"代码","skin":"view/tab3.png","sizeGrid":"3,3,3,3"}}],"type":"Tab","props":{"y":"95","var":"tab","visible":"false","x":"119"}},{"child":[{"type":"Box","props":{"name":"item0","y":"175","bottom":"2","width":"600","left":"2","height":"280","top":"2","var":"designView","right":"2","x":"0"}},{"type":"TextArea","props":{"padding":"5,5,5,5","name":"item1","text":"TextArea","top":"2","color":"#8080ff","fontSize":"14","bottom":"2","leading":"10","x":"558","y":"622","left":"2","font":"Consolas","var":"codeView","right":"2"}}],"type":"ViewStack","props":{"y":"1863","bottom":"0","left":"0","mouseEnabled":"true","top":"0","var":"viewStack","right":"0","x":"55"}},{"type":"Image","props":{"x":"5","y":"387","right":"1","skin":"comp/uibottom.png","bottom":"1","left":"1"}},{"type":"Label","props":{"y":"366","var":"scaleInfo","bottom":"2","width":"200","mouseEnabled":"false","align":"right","height":"20","color":"#d8d8d8","right":"10","x":"277"}},{"type":"Label","props":{"y":"378","var":"compInfo","text":"label111","width":"300","left":"35","align":"left","height":"20","padding":"0,10,0,10","color":"#d8d8d8","bottom":"2","x":"35"}},{"type":"Image","props":{"skin":"comp/infoicon.png","y":"378","left":"15","bottom":"8","x":"4"}}],"type":"View","props":{"height":"400","bottom":"顶顶顶顶顶顶顶顶顶顶顶顶顶顶顶顶顶顶顶顶顶顶顶顶顶顶顶顶顶顶顶顶顶顶顶顶顶顶顶顶顶顶顶顶顶顶顶顶顶顶顶顶顶顶顶顶","width":"600"}};}
		]);
		return UIViewerUI;
	})(View)


	/**
	*...
	*@author ww
	*/
	//class laya.editor.view.group.GroupList extends laya.ui.Panel
	var GroupList=(function(_super){
		function GroupList(){
			this._groups=null;
			GroupList.__super.call(this);
			this.vScrollBarSkin="comp/vscroll.png";
			this.content.mouseEnabled=true;
		}

		__class(GroupList,'laya.editor.view.group.GroupList',_super);
		var __proto=GroupList.prototype;
		__proto.setGroups=function(groups){
			this.clearPreGroups();
			this._groups=groups;
			var i=0,len=0;
			var tGroup;
			len=groups.length;
			for (i=0;i < len;i++){
				tGroup=groups[i];
				tGroup.on("UIChange",this,this.freshUI);
				this.addChild(tGroup);
			}
			this.callLater(this.freshUI);
		}

		__proto.clearPreGroups=function(){
			if (!this._groups)return;
			var groups=this._groups;
			var i=0,len=0;
			var tGroup;
			len=groups.length;
			for (i=0;i < len;i++){
				tGroup=groups[i];
				tGroup.off("UIChange",this,this.freshUI);
				tGroup.removeSelf();
			}
		}

		__proto.changeSize=function(){
			laya.ui.Component.prototype.changeSize.call(this);
			this.callLater(this.freshUI);
		}

		__proto.freshUI=function(){
			var _panel=this;
			var y=0;
			for (var i=0,n=_panel.numChildren;i < n;i++){
				var item=_panel.getChildAt(i);
				if (item){
					item.y=y;
					y=y+item.height+5;
				}
			}
			_panel.refresh();
			this.event("UIChange");
		}

		return GroupList;
	})(Panel)


	/**
	*
	*@author ww
	*@version 1.0
	*
	*@created 2015-12-7 上午10:20:12
	*/
	//class laya.editor.view.timeline.tree.TimeLineList extends laya.ui.List
	var TimeLineList=(function(_super){
		function TimeLineList(){
			TimeLineList.__super.call(this);
		}

		__class(TimeLineList,'laya.editor.view.timeline.tree.TimeLineList',_super);
		var __proto=TimeLineList.prototype;
		__proto.changeCells=function(){
			if (this._itemRender){
				for (var i=this._cells.length-1;i >-1;i--){
					this._cells[i].destroy();
				}
				this._cells.length=0;
				if(!this.scrollBar)return;
				var cell=this.createItem();
				var cellWidth=cell.width+this._spaceX;
				var cellHeight=cell.height+this._spaceY;
				if (this._repeatX < 1 && this._width > 0)this._repeatX2=Math.round(this._width / cellWidth);
				if (this._repeatY < 1 && this._height > 0)this._repeatY2=Math.round(this._height / cellHeight);
				var listWidth=this._width ? this._width :(cellWidth *this.repeatX-this._spaceX);
				var listHeight=this._height ? this._height :(cellHeight *this.repeatY-this._spaceY);
				this._cellSize=this._isVertical ? cellHeight :cellWidth;
				if (this._isVertical && this._scrollBar)this._scrollBar.height=listHeight;
				else if (!this._isVertical && this._scrollBar)this._scrollBar.width=listWidth;
				this.setContentSize(listWidth,listHeight);
				this._content.removeChildren();
				var numX=this._isVertical ? this.repeatX :this.repeatY;
				var numY=(this._isVertical ? this.repeatY :this.repeatX)+(this._scrollBar ? 1 :0);
				for (var k=0;k < numY;k++){
					for (var l=0;l < numX;l++){
						cell=this.createItem();
						cell.x=(this._isVertical ? l :k)*cellWidth;
						cell.y=(this._isVertical ? k :l)*cellHeight;
						cell.name="item"+(k *numX+l);
						this._content.addChild(cell);
						this.addCell(cell);
					}
				}
				if (this._array){
					this.array=this._array;
					this.runCallLater(this.renderItems);
				}
			}
		}

		__proto.onScrollBarChange=function(e){
			this.runCallLater(this.changeCells);
			var scrollValue=Math.floor(this._scrollBar.value);
			var lineX=(this._isVertical ? this.repeatX :this.repeatY);
			var lineY=(this._isVertical ? this.repeatY :this.repeatX);
			var index=scrollValue *lineX;
			console.log("scrollvalue:",scrollValue);
			if (index > this._startIndex){
				var num=index-this._startIndex;
				var down=true;
				var toIndex=this._startIndex+lineX *(lineY+1);
				this._isMoved=true;
				}else if (index < this._startIndex){
				num=this._startIndex-index;
				down=false;
				toIndex=this._startIndex-1;
				this._isMoved=true;
			}
			console.log("num:",num);
			for (var i=0;i < num;i++){
				if (down){
					var cell=this._cells.shift();
					this._cells[this._cells.length]=cell;
					var cellIndex=toIndex+i;
					}else {
					cell=this._cells.pop();
					this._cells.unshift(cell);
					cellIndex=toIndex-i;
				};
				var pos=Math.floor(cellIndex / lineX)*this._cellSize;
				this._isVertical ? cell.y=pos :cell.x=pos;
				this.renderItem(cell,cellIndex);
			}
			this._startIndex=index;
			if (this._isVertical)this._content.scrollRect.y=scrollValue*this._cellSize;
			else this._content.scrollRect.x=scrollValue*this._cellSize;
		}

		__proto.replaceScrollBar=function(value){
			if(this._scrollBar){
				this._scrollBar.removeSelf();
				this._scrollBar.offAll();
			}
			this.scrollBar=value;
			this.callLater(this.changeCells);
		}

		__getset(0,__proto,'scrollBar',_super.prototype._$get_scrollBar,function(value){
			if (this._scrollBar !=value){
				this._scrollBar=value;
				if (value){
					this._scrollBar.on("change",this,this.onScrollBarChange);
					this._isVertical=this._scrollBar.isVertical;
				}
			}
		});

		// hideScrollBar=_hideScrollBar;
		__getset(0,__proto,'array',_super.prototype._$get_array,function(value){
			this.runCallLater(this.changeCells);
			this._array=value || [];
			var length=this._array.length;
			this.totalPage=Math.ceil(length / (this.repeatX *this.repeatY));
			this._selectedIndex=this._selectedIndex < length ? this._selectedIndex :length-1;
			this.startIndex=this._startIndex;
			if (this._scrollBar){
				var numX=this._isVertical ? this.repeatX :this.repeatY;
				var numY=this._isVertical ? this.repeatY :this.repeatX;
				var lineCount=Math.ceil(length / numX);
				if (this.totalPage > 1){
					this._scrollBar.scrollSize=this._cellSize;
					this._scrollBar.thumbPercent=numY / lineCount;
					this._scrollBar.setScroll(0,(lineCount-numY),Math.ceil(this._startIndex / numX));
					this._scrollBar.target=this._content;
					}else {
					this._scrollBar.setScroll(0,0,0);
					this._scrollBar.target=this._content;
				}
			}
			this.event("ListChange",[value]);
		});

		return TimeLineList;
	})(List)


	/**
	*节点树基类
	*@author ww
	*@version 1.0
	*
	*@created 2015-12-25 下午2:21:31
	*/
	//class laya.ide.ui.NodeTree extends laya.ui.Tree
	var NodeTree=(function(_super){
		function NodeTree(){
			this._treeData=null;
			NodeTree.__super.call(this);
			this.spaceLeft=15;
		}

		__class(NodeTree,'laya.ide.ui.NodeTree',_super);
		var __proto=NodeTree.prototype;
		// list.spaceY=2;
		__proto.refreshList=function(){
			this._list.array=this.getArray();
		}

		__proto.selectByCompId=function(compId){
			var arr;
			arr=this.list.array;
			var i=0,len=0;
			len=arr.length;
			var tItem;
			for(i=0;i<len;i++){
				tItem=arr[i];
				if(tItem.compId==compId){
					this.list.selectedIndex=i;
					return;
				}
			}
		}

		__proto.setTreeData=function(treeData){
			this._treeData=treeData;
			var treeArr;
			treeArr=treeData.getTreeArr();
			console.log("treeArr:",treeArr);
			this.array=treeArr;
		}

		__proto.getDepth=function(item,num){
			(num===void 0)&& (num=0);
			if(!this._treeData){
				return _super.prototype.getDepth.call(this,item,num);
			};
			var parent;
			parent=this._treeData.getNodeParent(item);
			if (parent==null)return num;
			else return this.getDepth(parent,num+1);
		}

		/**
		*@private
		*获取项对象的上一级的打开状态。
		*@param item
		*@return
		*/
		__proto.getParentOpenStatus=function(item){
			if(!this._treeData){
				return _super.prototype.getParentOpenStatus.call(this,item);
			};
			var parent=this._treeData.getNodeParent(item);
			if (parent==null){
				return true;
				}else {
				if (parent.isOpen){
					if (this._treeData.getNodeParent(parent)!=null)return this.getParentOpenStatus(parent);
					else return true;
					}else {
					return false;
				}
			}
		}

		/**
		*@private
		*判断两个项对象在树结构中的父节点是否相同。
		*@param item1 项对象。
		*@param item2 项对象。
		*@return
		*/
		__proto.isSameParent=function(item1,item2){
			if(!this._treeData){
				return _super.prototype.isSameParent.call(this,item1,item2);
			};
			var parent1;
			var parent2;
			parent1=this._treeData.getNodeParent(item1);
			parent2=this._treeData.getNodeParent(item2);
			if (parent1==null && parent2==null)return true;
			else if (parent1==null || parent2==null)return false
			else {
				if (parent1.label==parent2.label)return this.isSameParent(parent1,parent2);
				else return false;
			}
		}

		NodeTree.TreeSpaceLeft=15;
		return NodeTree;
	})(Tree)


	/**
	*节点树上用的List 支持多选
	*@author ww
	*@version 1.0
	*
	*@created 2015-11-13 上午11:27:36
	*/
	//class laya.ide.ui.ListEx extends laya.ui.List
	var ListEx=(function(_super){
		function ListEx(){
			this._selectIndexs=[];
			this.changeCellStateH=null;
			this._selectItems=[];
			ListEx.__super.call(this);
		}

		__class(ListEx,'laya.ide.ui.ListEx',_super);
		var __proto=ListEx.prototype;
		__proto.isIDSelected=function(id){
			return this._selectIndexs.indexOf(id)>=0;
		}

		__proto.setSelectList=function(selectList){
			this._selectIndexs=selectList;
			this.changeSelectStatus();
		}

		__proto.onCellMouse=function(e){
			if (e.type==="mousedown")this._isMoved=false;
			var cell=e.currentTarget;
			var index=this._startIndex+this._cells.indexOf(cell);
			var ctrl=e.nativeEvent.ctrlKey;
			if (index < 0)return;
			if (e.type==="mousedown" || e.type==="rightmousedown"){
				if(ctrl){
					this.switchSelect(index);
					}else{
					if(this.isIDSelected(index)){
						}else{
						if (this.selectEnable && !this._isMoved)this.selectedIndex=index;
						else this.changeCellState(cell,true,0);
					}
				}
				}else if ((e.type==="mouseover" || e.type==="mouseout")&& !this.isIDSelected(index)){
				this.changeCellState(cell,e.type==="mouseover",0);
			}
			this.mouseHandler && this.mouseHandler.runWith([e,index]);
		}

		__proto.reRender=function(){
			this.renderItems();
		}

		/**
		*@private
		*改变单元格的可视状态。
		*@param cell 单元格对象。
		*@param visable 是否显示。
		*@param index 单元格的属性 <code>index</code> 值。
		*/
		__proto.changeCellState=function(cell,visable,index){
			_super.prototype.changeCellState.call(this,cell,visable,index);
			if(this.changeCellStateH){
				this.changeCellStateH.runWith([cell,visable,index]);
			}
		}

		__proto.changeSelectStatus=function(){
			for (var i=0,n=this._cells.length;i < n;i++){
				this.changeCellState(this._cells[i],this.isIDSelected(this._startIndex+i),1);
			}
		}

		__proto.getIndexByCell=function(cell){
			return this._array.indexOf(cell.dataSource);
		}

		__proto.clearSelect=function(){
			this._selectIndexs.length=0;
		}

		__proto.switchSelect=function(index){
			var i=0;
			for(i=this._selectIndexs.length-1;i>=0;i--){
				if(index==this._selectIndexs[i]){
					this._selectIndexs.splice(i,1);
					this.changeSelectStatus();
					return;
				}
			}
			this._selectIndexs.push(index);
			this.changeSelectStatus();
		}

		__proto.addSelect=function(index){
			if(!this.isIDSelected(index)){
				this._selectIndexs.push(index);
			}
		}

		__getset(0,__proto,'selectItems',function(){
			this._selectItems.length=0;
			var i=0,len=0;
			len=this._selectIndexs.length;
			for(i=0;i<len;i++){
				this._selectItems.push(this.getItem(this._selectIndexs[i]));
			}
			return this._selectItems;
		});

		__getset(0,__proto,'selectedIndex',function(){
			return _super.prototype._$get_selectedIndex.call(this);
			},function(value){
			this.clearSelect();
			this.addSelect(value);
			_super.prototype._$set_selectedIndex.call(this,value);
		});

		__getset(0,__proto,'selectedItem',function(){
			return _super.prototype._$get_selectedItem.call(this);
			},function(value){
			_super.prototype._$set_selectedItem.call(this,value);
		});

		return ListEx;
	})(List)


	/**
	*<code>TextArea</code> 类用于创建显示对象以显示和输入文本。
	*
	*
	*@example 以下示例代码，创建了一个 <code>TextArea</code> 实例。
	*<listing version="3.0">
	*package
	*{
		*import laya.ui.TextArea;
		*import laya.utils.Handler;
		*
		*public class TextArea_Example
		*{
			*
			*public function TextArea_Example()
			*{
				*Laya.init(640,800);//设置游戏画布宽高。
				*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
				*Laya.loader.load(["resource/ui/input.png"],Handler.create(this,onLoadComplete));//加载资源。
				*}
			*
			*private function onLoadComplete():void
			*{
				*var textArea:TextArea=new TextArea("这个一个TextArea实例。");//创建一个 TextArea 类的实例对象 textArea 。
				*textArea.skin="resource/ui/input.png";//设置 textArea 的皮肤。
				*textArea.sizeGrid="4,4,4,4";//设置 textArea 的网格信息。
				*textArea.color="#008fff";//设置 textArea 的文本颜色。
				*textArea.font="Arial";//设置 textArea 的字体。
				*textArea.bold=true;//设置 textArea 的文本显示为粗体。
				*textArea.fontSize=20;//设置 textArea 的文本字体大小。
				*textArea.wordWrap=true;//设置 textArea 的文本自动换行。
				*textArea.x=100;//设置 textArea 对象的属性 x 的值，用于控制 textArea 对象的显示位置。
				*textArea.y=100;//设置 textArea 对象的属性 y 的值，用于控制 textArea 对象的显示位置。
				*textArea.width=300;//设置 textArea 的宽度。
				*textArea.height=200;//设置 textArea 的高度。
				*Laya.stage.addChild(textArea);//将 textArea 添加到显示列表。
				*}
			*
			*}
		*
		*}
	*</listing>
	*<listing version="3.0">
	*Laya.init(640,800);//设置游戏画布宽高、渲染模式
	*Laya.stage.bgColor="#efefef";//设置画布的背景颜色
	*Laya.loader.load(["resource/ui/input.png"],laya.utils.Handler.create(this,onLoadComplete));//加载资源。
	*function onLoadComplete(){
		*var textArea=new laya.ui.TextArea("这个一个TextArea实例。");//创建一个 TextArea 类的实例对象 textArea 。
		*textArea.skin="resource/ui/input.png";//设置 textArea 的皮肤。
		*textArea.sizeGrid="4,4,4,4";//设置 textArea 的网格信息。
		*textArea.color="#008fff";//设置 textArea 的文本颜色。
		*textArea.font="Arial";//设置 textArea 的字体。
		*textArea.bold=true;//设置 textArea 的文本显示为粗体。
		*textArea.fontSize=20;//设置 textArea 的文本字体大小。
		*textArea.wordWrap=true;//设置 textArea 的文本自动换行。
		*textArea.x=100;//设置 textArea 对象的属性 x 的值，用于控制 textArea 对象的显示位置。
		*textArea.y=100;//设置 textArea 对象的属性 y 的值，用于控制 textArea 对象的显示位置。
		*textArea.width=300;//设置 textArea 的宽度。
		*textArea.height=200;//设置 textArea 的高度。
		*Laya.stage.addChild(textArea);//将 textArea 添加到显示列表。
		*}
	*</listing>
	*<listing version="3.0">
	*import TextArea=laya.ui.TextArea;
	*import Handler=laya.utils.Handler;
	*class TextArea_Example {
		*constructor(){
			*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*Laya.loader.load(["resource/ui/input.png"],Handler.create(this,this.onLoadComplete));//加载资源。
			*}
		*private onLoadComplete():void {
			*var textArea:TextArea=new TextArea("这个一个TextArea实例。");//创建一个 TextArea 类的实例对象 textArea 。
			*textArea.skin="resource/ui/input.png";//设置 textArea 的皮肤。
			*textArea.sizeGrid="4,4,4,4";//设置 textArea 的网格信息。
			*textArea.color="#008fff";//设置 textArea 的文本颜色。
			*textArea.font="Arial";//设置 textArea 的字体。
			*textArea.bold=true;//设置 textArea 的文本显示为粗体。
			*textArea.fontSize=20;//设置 textArea 的文本字体大小。
			*textArea.wordWrap=true;//设置 textArea 的文本自动换行。
			*textArea.x=100;//设置 textArea 对象的属性 x 的值，用于控制 textArea 对象的显示位置。
			*textArea.y=100;//设置 textArea 对象的属性 y 的值，用于控制 textArea 对象的显示位置。
			*textArea.width=300;//设置 textArea 的宽度。
			*textArea.height=200;//设置 textArea 的高度。
			*Laya.stage.addChild(textArea);//将 textArea 添加到显示列表。
			*}
		*}
	*</listing>
	*@author yung
	*/
	//class laya.ui.TextArea extends laya.ui.TextInput
	var TextArea=(function(_super){
		/**
		*<p>创建一个新的 <code>TextArea</code> 示例。</p>
		*@param text 文本内容字符串。
		*/
		function TextArea(text){
			(text===void 0)&& (text="");
			TextArea.__super.call(this,text);
			this.multiline=true;
		}

		__class(TextArea,'laya.ui.TextArea',_super);
		return TextArea;
	})(TextInput)


	/**
	*<code>Tab</code> 组件用来定义选项卡按钮组。
	*
	*@internal <p>属性：<code>selectedIndex</code> 的默认值为-1。</p>
	*
	*@example 以下示例代码，创建了一个 <code>Tab</code> 实例。
	*<listing version="3.0">
	*package
	*{
		*import laya.ui.Tab;
		*import laya.utils.Handler;
		*
		*public class Tab_Example
		*{
			*
			*public function Tab_Example()
			*{
				*Laya.init(640,800);//设置游戏画布宽高。
				*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
				*Laya.loader.load(["resource/ui/tab.png"],Handler.create(this,onLoadComplete));//加载资源。
				*}
			*
			*private function onLoadComplete():void
			*{
				*var tab:Tab=new Tab();//创建一个 Tab 类的实例对象 tab 。
				*tab.skin="resource/ui/tab.png";//设置 tab 的皮肤。
				*tab.labels="item0,item1,item2";//设置 tab 的标签集。
				*tab.x=100;//设置 tab 对象的属性 x 的值，用于控制 tab 对象的显示位置。
				*tab.y=100;//设置 tab 对象的属性 y 的值，用于控制 tab 对象的显示位置。
				*tab.selectHandler=new Handler(this,onSelect);//设置 tab 的选择项发生改变时执行的处理器。
				*Laya.stage.addChild(tab);//将 tab 添到显示列表。
				*}
			*
			*private function onSelect(index:int):void
			*{
				*trace("当前选择的表情页索引: index= ",index);
				*}
			*}
		*}
	*</listing>
	*<listing version="3.0">
	*Laya.init(640,800);//设置游戏画布宽高
	*Laya.stage.bgColor="#efefef";//设置画布的背景颜色
	*Laya.loader.load(["resource/ui/tab.png"],laya.utils.Handler.create(this,onLoadComplete));
	*
	*function onLoadComplete(){
		*var tab=new laya.ui.Tab();//创建一个 Tab 类的实例对象 tab 。
		*tab.skin="resource/ui/tab.png";//设置 tab 的皮肤。
		*tab.labels="item0,item1,item2";//设置 tab 的标签集。
		*tab.x=100;//设置 tab 对象的属性 x 的值，用于控制 tab 对象的显示位置。
		*tab.y=100;//设置 tab 对象的属性 y 的值，用于控制 tab 对象的显示位置。
		*tab.selectHandler=new laya.utils.Handler(this,onSelect);//设置 tab 的选择项发生改变时执行的处理器。
		*Laya.stage.addChild(tab);//将 tab 添到显示列表。
		*}
	*function onSelect(index){
		*console.log("当前选择的标签页索引: index= ",index);
		*}
	*</listing>
	*<listing version="3.0">
	*import Tab=laya.ui.Tab;
	*import Handler=laya.utils.Handler;
	*class Tab_Example {
		*
		*constructor(){
			*Laya.init(640,800);//设置游戏画布宽高。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*Laya.loader.load(["resource/ui/tab.png"],Handler.create(this,this.onLoadComplete));//加载资源。
			*}
		*
		*private onLoadComplete():void {
			*var tab:Tab=new Tab();//创建一个 Tab 类的实例对象 tab 。
			*tab.skin="resource/ui/tab.png";//设置 tab 的皮肤。
			*tab.labels="item0,item1,item2";//设置 tab 的标签集。
			*tab.x=100;//设置 tab 对象的属性 x 的值，用于控制 tab 对象的显示位置。
			*tab.y=100;//设置 tab 对象的属性 y 的值，用于控制 tab 对象的显示位置。
			*tab.selectHandler=new Handler(this,this.onSelect);//设置 tab 的选择项发生改变时执行的处理器。
			*Laya.stage.addChild(tab);//将 tab 添到显示列表。
			*}
		*
		*private onSelect(index:number):void {
			*console.log("当前选择的表情页索引: index= ",index);
			*}
		*}
	*</listing>
	*@author yung
	*/
	//class laya.ui.Tab extends laya.ui.Group
	var Tab=(function(_super){
		function Tab(){Tab.__super.call(this);;
		};

		__class(Tab,'laya.ui.Tab',_super);
		var __proto=Tab.prototype;
		/**
		*@private
		*@inheritDoc
		*/
		__proto.createItem=function(skin,label){
			return new Button(skin,label);
		}

		return Tab;
	})(Group)


	/**
	*<code>RadioGroup</code> 控件定义一组 <code>Radio</code> 控件，这些控件相互排斥；
	*因此，用户每次只能选择一个 <code>Radio</code> 控件。
	*
	*@example 以下示例代码，创建了一个 <code>RadioGroup</code> 实例。
	*<listing version="3.0">
	*package
	*{
		*import laya.ui.Radio;
		*import laya.ui.RadioGroup;
		*import laya.utils.Handler;
		*
		*public class RadioGroup_Example
		*{
			*
			*public function RadioGroup_Example()
			*{
				*Laya.init(640,800);//设置游戏画布宽高。
				*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
				*Laya.loader.load(["resource/ui/radio.png"],Handler.create(this,onLoadComplete));//加载资源。
				*}
			*
			*private function onLoadComplete():void
			*{
				*var radioGroup:RadioGroup=new RadioGroup();//创建一个 RadioGroup 类的实例对象 radioGroup 。
				*radioGroup.pos(100,100);//设置 radioGroup 的位置信息。
				*radioGroup.labels="item0,item1,item2";//设置 radioGroup 的标签集。
				*radioGroup.skin="resource/ui/radio.png";//设置 radioGroup 的皮肤。
				*radioGroup.space=10;//设置 radioGroup 的项间隔距离。
				*radioGroup.selectHandler=new Handler(this,onSelect);//设置 radioGroup 的选择项发生改变时执行的处理器。
				*Laya.stage.addChild(radioGroup);//将 radioGroup 添加到显示列表。
				*}
			*
			*private function onSelect(index:int):void
			*{
				*trace("当前选择的单选按钮索引: index= ",index);
				*}
			*
			*}
		*
		*}
	*</listing>
	*<listing version="3.0">
	*Laya.init(640,800);//设置游戏画布宽高、渲染模式
	*Laya.stage.bgColor="#efefef";//设置画布的背景颜色
	*Laya.loader.load(["resource/ui/radio.png"],laya.utils.Handler.create(this,onLoadComplete));
	*function onLoadComplete(){
		*var radioGroup=new laya.ui.RadioGroup();//创建一个 RadioGroup 类的实例对象 radioGroup 。
		*radioGroup.pos(100,100);//设置 radioGroup 的位置信息。
		*radioGroup.labels="item0,item1,item2";//设置 radioGroup 的标签集。
		*radioGroup.skin="resource/ui/radio.png";//设置 radioGroup 的皮肤。
		*radioGroup.space=10;//设置 radioGroup 的项间隔距离。
		*radioGroup.selectHandler=new laya.utils.Handler(this,onSelect);//设置 radioGroup 的选择项发生改变时执行的处理器。
		*Laya.stage.addChild(radioGroup);//将 radioGroup 添加到显示列表。
		*}
	*function onSelect(index){
		*console.log("当前选择的单选按钮索引: index= ",index);
		*}
	*</listing>
	*<listing version="3.0">
	*import Radio=laya.ui.Radio;
	*import RadioGroup=laya.ui.RadioGroup;
	*import Handler=laya.utils.Handler;
	*class RadioGroup_Example {
		*
		*constructor(){
			*Laya.init(640,800);//设置游戏画布宽高。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*Laya.loader.load(["resource/ui/radio.png"],Handler.create(this,this.onLoadComplete));//加载资源。
			*}
		*
		*private onLoadComplete():void {
			*var radioGroup:RadioGroup=new RadioGroup();//创建一个 RadioGroup 类的实例对象 radioGroup 。
			*radioGroup.pos(100,100);//设置 radioGroup 的位置信息。
			*radioGroup.labels="item0,item1,item2";//设置 radioGroup 的标签集。
			*radioGroup.skin="resource/ui/radio.png";//设置 radioGroup 的皮肤。
			*radioGroup.space=10;//设置 radioGroup 的项间隔距离。
			*radioGroup.selectHandler=new Handler(this,this.onSelect);//设置 radioGroup 的选择项发生改变时执行的处理器。
			*Laya.stage.addChild(radioGroup);//将 radioGroup 添加到显示列表。
			*}
		*
		*private onSelect(index:number):void {
			*console.log("当前选择的单选按钮索引: index= ",index);
			*}
		*
		*}
	*</listing>
	*@author yung
	*/
	//class laya.ui.RadioGroup extends laya.ui.Group
	var RadioGroup=(function(_super){
		function RadioGroup(){RadioGroup.__super.call(this);;
		};

		__class(RadioGroup,'laya.ui.RadioGroup',_super);
		var __proto=RadioGroup.prototype;
		/**@inheritDoc */
		__proto.createItem=function(skin,label){
			return new Radio(skin,label);
		}

		return RadioGroup;
	})(Group)


	/**HBox容器*/
	//class laya.ui.HBox extends laya.ui.LayoutBox
	var HBox=(function(_super){
		function HBox(){
			HBox.__super.call(this);
		}

		__class(HBox,'laya.ui.HBox',_super);
		var __proto=HBox.prototype;
		__proto.sortItem=function(items){
			if(items)items.sort(function(a,b){return a.x > b.x ? 1 :-1});
		}

		__proto.changeItems=function(){
			var items=[];
			var maxHeight=0;
			for (var i=0,n=this.numChildren;i < n;i++){
				var item=this.getChildAt(i);
				if (item){
					items.push(item);
					maxHeight=Math.max(maxHeight,item.displayHeight);
				}
			}
			this.sortItem(items);
			var left=0;
			var $each_item;
			for($each_item in items){
				item=items[$each_item];
				item.x=left;
				left+=item.displayWidth+this._space;
				if (this._align=="top"){
					item.y=0;
					}else if (this._align=="middle"){
					item.y=(maxHeight-item.displayHeight)*0.5;
					}else if (this._align=="bottom"){
					item.y=maxHeight-item.displayHeight;
				}
			}
			this.changeSize();
		}

		HBox.NONE="none";
		HBox.TOP="top";
		HBox.MIDDLE="middle";
		HBox.BOTTOM="bottom";
		return HBox;
	})(LayoutBox)


	/**VBox容器*/
	//class laya.ui.VBox extends laya.ui.LayoutBox
	var VBox=(function(_super){
		function VBox(){
			VBox.__super.call(this);
		}

		__class(VBox,'laya.ui.VBox',_super);
		var __proto=VBox.prototype;
		__proto.changeItems=function(){
			var items=[];
			var maxWidth=0;
			for (var i=0,n=this.numChildren;i < n;i++){
				var item=this.getChildAt(i);
				if (item){
					items.push(item);
					maxWidth=Math.max(maxWidth,item.displayWidth);
				}
			}
			this.sortItem(items);
			var top=0;
			var $each_item;
			for($each_item in items){
				item=items[$each_item];
				item.y=top;
				top+=item.displayHeight+this._space;
				if (this._align=="left"){
					item.x=0;
					}else if (this._align=="center"){
					item.x=(maxWidth-item.displayWidth)*0.5;
					}else if (this._align=="right"){
					item.x=maxWidth-item.displayWidth;
				}
			}
			this.changeSize();
		}

		VBox.NONE="none";
		VBox.LEFT="left";
		VBox.CENTER="center";
		VBox.RIGHT="right";
		return VBox;
	})(LayoutBox)


	//class laya.editor.ui.comp.AlertUI extends laya.ui.Dialog
	var AlertUI=(function(_super){
		function AlertUI(){
			this.titleLbl=null;
			this.msgLbl=null;
			AlertUI.__super.call(this);
		}

		__class(AlertUI,'laya.editor.ui.comp.AlertUI',_super);
		var __proto=AlertUI.prototype;
		__proto.createChildren=function(){
			laya.ui.Component.prototype.createChildren.call(this);
			this.createView(AlertUI.uiView);
		}

		__static(AlertUI,
		['uiView',function(){return this.uiView={"child":[{"type":"Image","props":{"x":"0","y":"0","width":"450","skin":"view/bg_dialog.png","height":"180","sizeGrid":"50,15,15,15"}},{"type":"Button","props":{"skin":"view/btn_close.png","y":"16","name":"close","x":"417"}},{"type":"Image","props":{"y":"8","width":"397","skin":"comp/blank.png","height":"32","name":"drag","x":"8"}},{"type":"Label","props":{"y":"18","var":"titleLbl","text":"提示","color":"#dddddd","fontSize":"14","x":"28"}},{"type":"Label","props":{"align":"center","text":"确认内容","mouseEnabled":"false","color":"#dddddd","multiline":"true","x":"43","y":"66","wordWrap":"true","width":"364","isHtml":"true","height":"56","var":"msgLbl","mouseChildren":"false"}},{"type":"Button","props":{"name":"sure","labelColors":"#dddddd,#dddddd,#dddddd","label":"确定","skin":"comp/btn.png","height":"30","y":"123","width":"100","x":"175"}}],"type":"Dialog","props":{"height":"180","scenecolor":"#dddddd","width":"450"}};}
		]);
		return AlertUI;
	})(Dialog)


	//class laya.editor.ui.comp.ConfirmUI extends laya.ui.Dialog
	var ConfirmUI=(function(_super){
		function ConfirmUI(){
			this.titleLbl=null;
			this.msgLbl=null;
			ConfirmUI.__super.call(this);
		}

		__class(ConfirmUI,'laya.editor.ui.comp.ConfirmUI',_super);
		var __proto=ConfirmUI.prototype;
		__proto.createChildren=function(){
			laya.ui.Component.prototype.createChildren.call(this);
			this.createView(ConfirmUI.uiView);
		}

		__static(ConfirmUI,
		['uiView',function(){return this.uiView={"child":[{"type":"Image","props":{"x":"0","y":"0","width":"450","skin":"view/bg_dialog.png","height":"180","sizeGrid":"50,15,15,15"}},{"type":"Button","props":{"skin":"view/btn_close.png","y":"17","name":"close","x":"418"}},{"type":"Image","props":{"y":"8","width":"397","skin":"comp/blank.png","height":"32","name":"drag","x":"8"}},{"type":"Label","props":{"y":"18","var":"titleLbl","text":"确认框","color":"#dddddd","fontSize":"14","x":"28"}},{"type":"Label","props":{"align":"center","text":"确认内容","mouseEnabled":"false","color":"#dddddd","multiline":"true","x":"35.5","y":"67","wordWrap":"true","width":"379","isHtml":"true","height":"54","var":"msgLbl","mouseChildren":"false"}},{"type":"Button","props":{"name":"cancel","labelColors":"#dddddd,#dddddd,#dddddd","width":"100","skin":"comp/btn.png","height":"30","y":"125","label":"取消","x":"240"}},{"type":"Button","props":{"sizeGrid":"4,0,4,0","name":"sure","labelColors":"#dddddd,#dddddd,#dddddd","width":"100","skin":"comp/button.png","height":"30","y":"125","label":"确定","x":"110"}}],"type":"Dialog","props":{"height":"180","scenecolor":"#dddddd","width":"450"}};}
		]);
		return ConfirmUI;
	})(Dialog)


	//class laya.editor.ui.comp.WaitingUI extends laya.ui.Dialog
	var WaitingUI=(function(_super){
		function WaitingUI(){
			this.titleLbl=null;
			this.msgLbl=null;
			WaitingUI.__super.call(this);
		}

		__class(WaitingUI,'laya.editor.ui.comp.WaitingUI',_super);
		var __proto=WaitingUI.prototype;
		__proto.createChildren=function(){
			laya.ui.Component.prototype.createChildren.call(this);
			this.createView(WaitingUI.uiView);
		}

		__static(WaitingUI,
		['uiView',function(){return this.uiView={"child":[{"type":"Image","props":{"x":"0","y":"0","width":"450","skin":"view/bg_dialog.png","height":"180","sizeGrid":"50,15,15,15"}},{"type":"Image","props":{"y":"8","width":"433","skin":"comp/blank.png","height":"32","name":"drag","x":"8"}},{"type":"Label","props":{"y":"18","var":"titleLbl","text":"处理中","color":"#dddddd","fontSize":"14","x":"28"}},{"type":"Label","props":{"isHtml":"true","y":"89","var":"msgLbl","wordWrap":"true","text":"确认内容","width":"386","align":"center","height":"49","color":"#dddddd","multiline":"true","x":"29.5"}}],"type":"Dialog","props":{"height":"180","scenecolor":"#dddddd","width":"450"}};}
		]);
		return WaitingUI;
	})(Dialog)


	/**
	*...
	*@author ww
	*/
	//class laya.editor.comonents.ColorPickerPanel extends laya.editor.ui.other.ColorPickerPanelUI
	var ColorPickerPanel=(function(_super){
		function ColorPickerPanel(){
			this.prePickerItem=null;
			this.picker=null;
			ColorPickerPanel.__super.call(this);
			this.createUI();
		}

		__class(ColorPickerPanel,'laya.editor.comonents.ColorPickerPanel',_super);
		var __proto=ColorPickerPanel.prototype;
		__proto.createUI=function(){
			this.picker=new ColorSelector();
			this.pickBack.addChild(this.picker);
			this.picker.on("ColorChanged",this,this.updateToUI);
			this.updateToUI();
			this.addTxtChangeH(this.colorTxt,this.colorTxtChange);
			this.addTxtChangeH(this.redTxt,this.rgbTxtChange);
			this.addTxtChangeH(this.greenTxt,this.rgbTxtChange);
			this.addTxtChangeH(this.blueTxt,this.rgbTxtChange);
		}

		__proto.addTxtChangeH=function(tar,fun){
			tar.on("enter",this,fun);
			tar.on("blur",this,fun);
		}

		__proto.updateToUI=function(){
			console.log("updateToUI");
			var rgb;
			rgb=this.picker.tColor;
			this.setColorTxts(rgb,true);
		}

		__proto.setColor=function(rgb){
			this.setColorTxts(rgb);
		}

		__proto.setColorTxts=function(rgb,fromPicker){
			(fromPicker===void 0)&& (fromPicker=false);
			console.log("setColorTxts");
			this.colorTxt.text=ColorTool.getRGBStr(rgb);
			this.redTxt.text=Math.floor(rgb[0])+"";
			this.greenTxt.text=Math.floor(rgb[1])+"";
			this.blueTxt.text=Math.floor(rgb[2])+"";
			if(!fromPicker)
				this.picker.setColor(rgb[0],rgb[1],rgb[2],false);
			this.event("ColorChanged",this);
		}

		__proto.colorTxtChange=function(){
			console.log("colorTxtChange:",this.colorTxt.text);
			if(this.colorTxt.text==""){
				this.event("COLOR_CLEARED",this);
				return;
			};
			var rgb;
			rgb=ColorTool.getRGBByRGBStr(this.colorTxt.text);
			this.setColorTxts(rgb);
		}

		__proto.rgbTxtChange=function(){
			console.log("rgbTxtChange");
			var rgb;
			rgb=[this.getInt(this.redTxt.text),this.getInt(this.greenTxt.text),this.getInt(this.blueTxt.text)];
			this.setColorTxts(rgb);
		}

		__proto.getInt=function(str){
			return Math.floor(parseFloat(str));
		}

		__proto.updateFromUI=function(){
			console.log("updateFromUI");
		}

		return ColorPickerPanel;
	})(ColorPickerPanelUI)


	/**
	*布局框标签
	*@author ww
	*/
	//class laya.editor.comonents.LayoutTab extends laya.editor.ui.comp.LayoutTabUI
	var LayoutTab=(function(_super){
		function LayoutTab(tabUI){
			this._ui=null;
			this._rec=null;
			LayoutTab.__super.call(this);
			this._ui=tabUI;
			this._ui.left=this._ui.right=this._ui.bottom=0;
			this._ui.top=25;
			if(!this.canMix){
				this._ui.top=0;
			}
			this.close.on("click",this,this.onCloseClick);
			this.btn.on("mousedown",this,this.onBtnDown);
			this.onTitleChange();
			if(!this.canClose){
				this.close.visible=false;
			}
			this.btn.labelAlign="left";
			this.btn.labelPadding="-2,5,0,5"
			this.btn.labelColors="#8a8a8a,#c8c8c8,#c8c8c8,#c8c8c8";
			this.cacheAsBitmap=true;
		}

		__class(LayoutTab,'laya.editor.comonents.LayoutTab',_super);
		var __proto=LayoutTab.prototype;
		__proto.onBtnDown=function(e){
			if(LayoutRecManager.popLocked())return;
			if(this._rec&&!this._rec.canDragMe)return;
			var clip=new Clip(SkinDefines.LayoutTabDragIcon,1,3);
			clip.index=2;
			var type="LayoutTab";
			LayaBuilder.drag.doDrag(this ,clip,{type:type,target:this._rec},new Point(5,5));
		}

		__proto.onCloseClick=function(e){
			if(this._rec)
				this._rec.removeTab(this,true);
			this.clears();
		}

		__proto.onTitleChange=function(e){
			var title;
			title=this._ui["title"]?this._ui["title"]:"我是标题啊";
			var len=ObjectUtils.getTextField(null,"*"+title).width+20;
			this.btn.width=len;
			this.close.x=len-this.close.width-3;
			this.btn.label=title;
		}

		__proto.clears=function(){
			this._ui=null;
		}

		__getset(0,__proto,'canClose',function(){
			if(!this._ui)return true;
			return this._ui["canClose"];
		});

		__getset(0,__proto,'canMix',function(){
			if(!this._ui||!this._ui.hasOwnProperty("canMix"))return true;
			return this._ui["canMix"];
		});

		__getset(0,__proto,'width',function(){
			return this.btn.width;
		},_super.prototype._$set_width);

		/**点击处理器(无默认参数)*/
		__getset(0,__proto,'clickHandler',function(){
			return this.btn.clickHandler;
			},function(value){
			this.btn.clickHandler=value;
		});

		__getset(0,__proto,'ui',function(){
			return this._ui;
		});

		/**是否是选择状态*/
		__getset(0,__proto,'selected',function(){
			return this.btn.selected;
			},function(value){
			this.btn.selected=value;
		});

		return LayoutTab;
	})(LayoutTabUI)


	/**视图标签
	*@author yung
	*/
	//class laya.editor.comonents.ViewTab extends laya.editor.ui.comp.viewTabUI
	var ViewTab=(function(_super){
		function ViewTab(uiViewer,tip){
			this._uiViewer=null;
			ViewTab.__super.call(this);
			this._uiViewer=uiViewer;
			uiViewer.left=uiViewer.right=uiViewer.bottom=0;
			uiViewer.top=0;
			if ((uiViewer instanceof laya.editor.view.UIViewer )){
				uiViewer.design.on("change",this,this.onDesignChange);
				}else{
				Laya.stage.on("pageChanged",this,this.onDesignChange);
			}
			this.onDesignChange(null);
			this.close.on("click",this,this.onCloseClick);
			this.btn.labelAlign="left";
			this.btn.labelPadding="-2,5,0,5"
			this.btn.labelColors="#8a8a8a,#c8c8c8,#c8c8c8,#c8c8c8";
			this.toolTip=tip?tip:FileManager.getRelativePath(SystemSetting.pagesPath,uiViewer.pagePath);
		}

		__class(ViewTab,'laya.editor.comonents.ViewTab',_super);
		var __proto=ViewTab.prototype;
		__proto.onCloseClick=function(e){
			UIPanel.instance.tryToClose(this._uiViewer);
		}

		//e.stopPropagation();
		__proto.onDesignChange=function(e){
			var len=ObjectUtils.getTextField(null,"*"+this._uiViewer.title).width+25;
			this.btn.width=len;
			this.close.x=len-this.close.width-3;
			this.btn.label=(this._uiViewer.hasChange ? "*" :"")+this._uiViewer.title;
		}

		//trace("btn:",btn,btn.width);
		__getset(0,__proto,'width',function(){
			return this.btn.width;
		},_super.prototype._$set_width);

		/**点击处理器(无默认参数)*/
		__getset(0,__proto,'clickHandler',function(){
			return this.btn.clickHandler;
			},function(value){
			this.btn.clickHandler=value;
		});

		/**是否是选择状态*/
		__getset(0,__proto,'selected',function(){
			return this.btn.selected;
			},function(value){
			this.btn.selected=value;
		});

		__getset(0,__proto,'uiViewer',function(){
			return this._uiViewer;
		});

		return ViewTab;
	})(viewTabUI)


	//class laya.editor.ui.other.AboutUI extends laya.ui.Dialog
	var AboutUI=(function(_super){
		function AboutUI(){
			this.currVer=null;
			AboutUI.__super.call(this);
		}

		__class(AboutUI,'laya.editor.ui.other.AboutUI',_super);
		var __proto=AboutUI.prototype;
		__proto.createChildren=function(){
			laya.ui.Component.prototype.createChildren.call(this);
			this.createView(AboutUI.uiView);
		}

		__static(AboutUI,
		['uiView',function(){return this.uiView={"child":[{"type":"Image","props":{"x":"0","y":"0","width":"450","skin":"view/bg_dialog.png","height":"150","sizeGrid":"50,15,15,15"}},{"type":"Image","props":{"y":"8","width":"398","skin":"comp/blank.png","height":"32","name":"drag","x":"8"}},{"type":"Label","props":{"y":"18","color":"#dddddd","fontSize":"14","text":"关于","x":"28"}},{"type":"Button","props":{"skin":"view/btn_close.png","y":"16","name":"close","x":"418"}},{"type":"Label","props":{"y":"73","var":"currVer","text":"当前版本","width":"251","height":"23","color":"#dddddd","x":"130"}}],"type":"Dialog","props":{"height":"150","scenecolor":"#dddddd","width":"450"}};}
		]);
		return AboutUI;
	})(Dialog)


	//class laya.editor.ui.other.AddProjectUI extends laya.ui.Dialog
	var AddProjectUI=(function(_super){
		function AddProjectUI(){
			this.nameTxt=null;
			this.pathTxt=null;
			this.browseBtn=null;
			this.langDrop=null;
			AddProjectUI.__super.call(this);
		}

		__class(AddProjectUI,'laya.editor.ui.other.AddProjectUI',_super);
		var __proto=AddProjectUI.prototype;
		__proto.createChildren=function(){
			laya.ui.Component.prototype.createChildren.call(this);
			this.createView(AddProjectUI.uiView);
		}

		__static(AddProjectUI,
		['uiView',function(){return this.uiView={"child":[{"type":"Image","props":{"x":"0","y":"0","width":"500","skin":"view/bg_dialog.png","height":"300","sizeGrid":"50,15,15,15"}},{"type":"Button","props":{"skin":"view/btn_close.png","y":"16","name":"close","x":"465"}},{"type":"Image","props":{"y":"8","width":"446","skin":"comp/blank.png","height":"32","name":"drag","x":"8"}},{"type":"Label","props":{"y":"18","color":"#dddddd","fontSize":"14","text":"新建项目","x":"28"}},{"type":"Label","props":{"y":"74.5","color":"#dddddd","text":"项目名称：","x":"32"}},{"type":"TextInput","props":{"sizeGrid":"3,3,3,3","y":"73","var":"nameTxt","width":"350","skin":"comp/textinput.png","padding":"0,5,0,5","color":"#dddddd","x":"105"}},{"type":"Button","props":{"y":"224","labelColors":"#dddddd,#dddddd,#dddddd","label":"确定","skin":"comp/btn.png","height":"30","name":"sure","width":"100","x":"358"}},{"type":"Label","props":{"y":"119","color":"#dddddd","text":"项目位置：","x":"32"}},{"type":"TextInput","props":{"sizeGrid":"3,3,3,3","y":"118","var":"pathTxt","width":"260","skin":"comp/textinput.png","padding":"0,5,0,5","color":"#dddddd","x":"105"}},{"type":"Button","props":{"sizeGrid":"4,0,4,0","y":"117","labelColors":"#dddddd,#dddddd,#dddddd","text":"项目名称：","width":"80","skin":"comp/button.png","height":"24","var":"browseBtn","label":"浏览","x":"375"}},{"type":"ComboBox","props":{"sizeGrid":"3,20,3,3","y":"164","labels":"ActionScript3,TypeScript,JavaScript","width":"350","skin":"comp/combobox.png","height":"23","var":"langDrop","selectedIndex":"0","x":"107"}},{"type":"Label","props":{"y":"164","color":"#dddddd","text":"使用语言：","x":"32"}}],"type":"Dialog","props":{"height":"300","scenecolor":"#dddddd","width":"500"}};}
		]);
		return AddProjectUI;
	})(Dialog)


	//class laya.editor.ui.other.BoxCompUI extends laya.ui.Dialog
	var BoxCompUI=(function(_super){
		function BoxCompUI(){
			this.typeDrop=null;
			BoxCompUI.__super.call(this);
		}

		__class(BoxCompUI,'laya.editor.ui.other.BoxCompUI',_super);
		var __proto=BoxCompUI.prototype;
		__proto.createChildren=function(){
			laya.ui.Component.prototype.createChildren.call(this);
			this.createView(BoxCompUI.uiView);
		}

		__static(BoxCompUI,
		['uiView',function(){return this.uiView={"child":[{"type":"Image","props":{"x":"0","y":"0","width":"450","skin":"view/bg_dialog.png","height":"160","sizeGrid":"50,15,15,15"}},{"type":"Button","props":{"skin":"view/btn_close.png","y":"16","name":"close","x":"418"}},{"type":"Image","props":{"y":"8","width":"396","skin":"comp/blank.png","height":"32","name":"drag","x":"8"}},{"type":"Label","props":{"y":"18","color":"#dddddd","fontSize":"14","text":"转换为容器","x":"28"}},{"type":"Label","props":{"y":"80.5","color":"#dddddd","text":"容器类型：","x":"60"}},{"type":"Button","props":{"y":"75","labelColors":"#dddddd,#dddddd,#dddddd","label":"确定","skin":"comp/btn.png","height":"30","name":"sure","width":"100","x":"291"}},{"type":"ComboBox","props":{"x":"133","y":"79","labelColors":"#dddddd","scrollBarSkin":"comp/vscroll.png","width":"130","skin":"comp/combobox.png","height":"23","var":"typeDrop","sizeGrid":"3,20,3,3"}}],"type":"Dialog","props":{"height":"160","scenecolor":"#dddddd","width":"450"}};}
		]);
		return BoxCompUI;
	})(Dialog)


	//class laya.editor.ui.other.ConvertProjectUI extends laya.ui.Dialog
	var ConvertProjectUI=(function(_super){
		function ConvertProjectUI(){
			this.pathTxt=null;
			this.browseBtn=null;
			this.pathOldTxt=null;
			this.browseOldBtn=null;
			ConvertProjectUI.__super.call(this);
		}

		__class(ConvertProjectUI,'laya.editor.ui.other.ConvertProjectUI',_super);
		var __proto=ConvertProjectUI.prototype;
		__proto.createChildren=function(){
			laya.ui.Component.prototype.createChildren.call(this);
			this.createView(ConvertProjectUI.uiView);
		}

		__static(ConvertProjectUI,
		['uiView',function(){return this.uiView={"child":[{"type":"Image","props":{"x":"0","y":"0","width":"500","skin":"view/bg_dialog.png","height":"250","sizeGrid":"50,15,15,15"}},{"type":"Button","props":{"skin":"view/btn_close.png","y":"17","name":"close","x":"465"}},{"type":"Image","props":{"y":"8","width":"441","skin":"comp/blank.png","height":"32","name":"drag","x":"8"}},{"type":"Label","props":{"y":"18","color":"#dddddd","fontSize":"14","text":"转换项目","x":"28"}},{"type":"Button","props":{"y":"188","labelColors":"#dddddd,#dddddd,#dddddd","label":"确定","skin":"comp/btn.png","height":"30","name":"sure","width":"100","x":"366"}},{"type":"Label","props":{"y":"143","text":"目标项目位置：","width":"83","align":"right","height":"18","color":"#dddddd","x":"30"}},{"type":"TextInput","props":{"sizeGrid":"3,3,3,3","y":"141","var":"pathTxt","width":"250","skin":"comp/textinput.png","padding":"0,5,0,5","color":"#dddddd","x":"125"}},{"type":"Button","props":{"sizeGrid":"4,0,4,0","y":"140","labelColors":"#dddddd,#dddddd,#dddddd","text":"项目名称：","width":"80","skin":"comp/button.png","height":"24","var":"browseBtn","label":"浏览","x":"385"}},{"type":"Label","props":{"y":"93","text":"原项目位置：","width":"90","align":"right","height":"18","color":"#dddddd","x":"26"}},{"type":"TextInput","props":{"sizeGrid":"3,3,3,3","y":"92","var":"pathOldTxt","width":"250","skin":"comp/textinput.png","padding":"0,5,0,5","color":"#dddddd","x":"125"}},{"type":"Button","props":{"sizeGrid":"4,0,4,0","y":"91","labelColors":"#dddddd,#dddddd,#dddddd","text":"项目名称：","width":"80","skin":"comp/button.png","height":"24","var":"browseOldBtn","label":"浏览","x":"385"}},{"type":"Label","props":{"y":"56","color":"#00ccff","text":"项目转换可以把老的MornUI项目转换为LayaUI项目","x":"32"}}],"type":"Dialog","props":{"height":"250","scenecolor":"#dddddd","width":"500"}};}
		]);
		return ConvertProjectUI;
	})(Dialog)


	//class laya.editor.ui.other.FindAndReplaceUI extends laya.ui.Dialog
	var FindAndReplaceUI=(function(_super){
		function FindAndReplaceUI(){
			this.msgTxt=null;
			this.list=null;
			this.findTxt=null;
			this.replaceTxt=null;
			this.findBtn=null;
			this.replaceBtn=null;
			FindAndReplaceUI.__super.call(this);
		}

		__class(FindAndReplaceUI,'laya.editor.ui.other.FindAndReplaceUI',_super);
		var __proto=FindAndReplaceUI.prototype;
		__proto.createChildren=function(){
			laya.ui.Component.prototype.createChildren.call(this);
			this.createView(FindAndReplaceUI.uiView);
		}

		__static(FindAndReplaceUI,
		['uiView',function(){return this.uiView={"child":[{"type":"Image","props":{"x":"0","y":"0","width":"500","skin":"view/bg_dialog.png","height":"380","sizeGrid":"50,15,15,15"}},{"type":"Button","props":{"skin":"view/btn_close.png","y":"17","name":"close","x":"467"}},{"type":"Image","props":{"y":"8","width":"449","skin":"comp/blank.png","height":"32","name":"drag","x":"8"}},{"type":"Label","props":{"y":"18","color":"#dddddd","fontSize":"14","text":"查找替换","x":"28"}},{"type":"Image","props":{"x":"24","y":"214","width":"454","skin":"view/bg_body.png","height":"144","sizeGrid":"3,3,3,3"}},{"type":"Label","props":{"y":"193","color":"#dddddd","var":"msgTxt","text":"共找到 {0} 个页面，双击列表打开页面","x":"25"}},{"child":[{"child":[{"type":"Clip","props":{"name":"selectBox","clipY":"2","left":"0","height":"24","right":"0","skin":"comp/clip_selectBox.png"}},{"type":"Label","props":{"name":"label","text":"label","width":"150","left":"10","height":"24","color":"#dddddd","right":"80","x":"20"}}],"type":"Box","props":{"name":"render","right":"0","left":"0"}}],"type":"List","props":{"y":"217","vScrollBarSkin":"comp/vscroll.png","width":"450","height":"140","var":"list","repeatX":"1","x":"26"}},{"type":"Label","props":{"y":"62.5","color":"#dddddd","text":"查找文本：","x":"82"}},{"type":"TextInput","props":{"sizeGrid":"3,3,3,3","y":"61","var":"findTxt","width":"250","skin":"comp/textinput.png","padding":"0,5,0,5","color":"#dddddd","x":"155"}},{"type":"Label","props":{"y":"102","color":"#dddddd","text":"替换文本：","x":"82"}},{"type":"TextInput","props":{"sizeGrid":"3,3,3,3","y":"101","var":"replaceTxt","width":"250","skin":"comp/textinput.png","padding":"0,5,0,5","color":"#dddddd","x":"155"}},{"type":"Button","props":{"sizeGrid":"4,0,4,0","y":"145","labelColors":"#dddddd,#dddddd,#dddddd","width":"100","skin":"comp/button.png","height":"30","var":"findBtn","label":"查找","x":"128"}},{"type":"Button","props":{"y":"145","labelColors":"#dddddd,#dddddd,#dddddd","width":"100","skin":"comp/btn.png","height":"30","var":"replaceBtn","label":"替换","x":"272"}}],"type":"Dialog","props":{"height":"380","scenecolor":"#dddddd","width":"500"}};}
		]);
		return FindAndReplaceUI;
	})(Dialog)


	//class laya.editor.ui.other.FindUnUsedResUI extends laya.ui.Dialog
	var FindUnUsedResUI=(function(_super){
		function FindUnUsedResUI(){
			this.resultBox=null;
			this.msgTxt=null;
			this.delBtn=null;
			this.checkSelectAll=null;
			this.list=null;
			this.findBtn=null;
			FindUnUsedResUI.__super.call(this);
		}

		__class(FindUnUsedResUI,'laya.editor.ui.other.FindUnUsedResUI',_super);
		var __proto=FindUnUsedResUI.prototype;
		__proto.createChildren=function(){
			laya.ui.Component.prototype.createChildren.call(this);
			this.createView(FindUnUsedResUI.uiView);
		}

		__static(FindUnUsedResUI,
		['uiView',function(){return this.uiView={"child":[{"type":"Image","props":{"x":"0","y":"0","width":"500","skin":"view/bg_dialog.png","height":"380","sizeGrid":"50,15,15,15"}},{"type":"Button","props":{"skin":"view/btn_close.png","y":"16","name":"close","x":"468"}},{"type":"Image","props":{"y":"8","width":"450","skin":"comp/blank.png","height":"32","name":"drag","x":"8"}},{"type":"Label","props":{"y":"18","color":"#dddddd","fontSize":"14","text":"查找未被使用的资源","x":"28"}},{"type":"Image","props":{"x":"24","y":"158","width":"454","skin":"view/bg_body.png","height":"200","sizeGrid":"3,3,3,3"}},{"child":[{"type":"Label","props":{"var":"msgTxt","color":"#dddddd","text":"共找到 {0} 个资源"}},{"type":"Button","props":{"y":"0","labelColors":"#dddddd,#dddddd,#dddddd","width":"50","skin":"comp/btn.png","height":"20","var":"delBtn","label":"删除","x":"347"}},{"type":"CheckBox","props":{"y":"3","labelColors":"#dddddd","label":"全选","skin":"comp/checkbox.png","var":"checkSelectAll","x":"410"}},{"child":[{"child":[{"type":"Clip","props":{"name":"selectBox","clipY":"2","left":"0","height":"24","right":"0","skin":"comp/clip_selectBox.png"}},{"type":"Label","props":{"name":"label","text":"label","width":"360","height":"24","y":"0","color":"#dddddd","x":"5"}},{"type":"CheckBox","props":{"y":"4","labelColors":"#dddddd","width":"13","skin":"comp/checkbox.png","height":"13","name":"check","x":"409"}}],"type":"Box","props":{"name":"render","right":"0","left":"0"}}],"type":"List","props":{"y":"26","vScrollBarSkin":"comp/vscroll.png","width":"450","height":"195","var":"list","x":"1"}}],"type":"Box","props":{"y":"135","var":"resultBox","x":"25"}},{"type":"Button","props":{"sizeGrid":"4,0,4,0","y":"62","labelColors":"#dddddd,#dddddd,#dddddd","label":"查找","skin":"comp/button.png","height":"40","var":"findBtn","width":"120","x":"190"}}],"type":"Dialog","props":{"height":"380","scenecolor":"#dddddd","width":"500"}};}
		]);
		return FindUnUsedResUI;
	})(Dialog)


	//class laya.editor.ui.other.PreviewUI extends laya.ui.Dialog
	var PreviewUI=(function(_super){
		function PreviewUI(){
			this.panel=null;
			PreviewUI.__super.call(this);
		}

		__class(PreviewUI,'laya.editor.ui.other.PreviewUI',_super);
		var __proto=PreviewUI.prototype;
		__proto.createChildren=function(){
			laya.ui.Component.prototype.createChildren.call(this);
			this.createView(PreviewUI.uiView);
		}

		__static(PreviewUI,
		['uiView',function(){return this.uiView={"child":[{"type":"Image","props":{"sizeGrid":"4,4,4,4","y":"137","right":"0","skin":"view/bg_body.png","left":"0","top":"0","bottom":"0","x":"164"}},{"child":[{"type":"Button","props":{"sizeGrid":"4,0,4,0","labelColors":"#aaaaaa,#aaaaaa,#aaaaaa","label":"label","skin":"comp/button.png"}}],"type":"Panel","props":{"y":"26","bottom":"5","vScrollBarSkin":"comp/vscroll.png","left":"5","hScrollBarSkin":"comp/hscroll.png","top":"5","var":"panel","right":"5","x":"21"}},{"type":"Button","props":{"y":"33","name":"close","skin":"view/btn_close.png","top":"5","right":"5","x":"550"}}],"type":"Dialog","props":{"height":"400","scenecolor":"#dddddd","width":"600"}};}
		]);
		return PreviewUI;
	})(Dialog)


	//class laya.editor.ui.other.RepeatCompUI extends laya.ui.Dialog
	var RepeatCompUI=(function(_super){
		function RepeatCompUI(){
			this.rowTxt=null;
			this.columnTxt=null;
			this.paddingXTxt=null;
			this.paddingYTxt=null;
			RepeatCompUI.__super.call(this);
		}

		__class(RepeatCompUI,'laya.editor.ui.other.RepeatCompUI',_super);
		var __proto=RepeatCompUI.prototype;
		__proto.createChildren=function(){
			laya.ui.Component.prototype.createChildren.call(this);
			this.createView(RepeatCompUI.uiView);
		}

		__static(RepeatCompUI,
		['uiView',function(){return this.uiView={"child":[{"type":"Image","props":{"x":"0","y":"0","width":"450","skin":"view/bg_dialog.png","height":"220","sizeGrid":"50,15,15,15"}},{"type":"Button","props":{"skin":"view/btn_close.png","y":"16","name":"close","x":"419"}},{"type":"Image","props":{"y":"8","width":"399","skin":"comp/blank.png","height":"32","name":"drag","x":"8"}},{"type":"Label","props":{"y":"18","color":"#dddddd","fontSize":"14","text":"重复组件","x":"28"}},{"type":"Label","props":{"y":"72.5","color":"#dddddd","text":"行个数：","x":"92"}},{"type":"TextInput","props":{"sizeGrid":"3,3,3,3","y":"71","var":"rowTxt","text":"5","width":"45","skin":"comp/textinput.png","padding":"0,5,0,5","color":"#dddddd","x":"145"}},{"type":"Button","props":{"y":"157","labelColors":"#dddddd,#dddddd,#dddddd","label":"确定","skin":"comp/btn.png","height":"30","name":"sure","width":"100","x":"175"}},{"type":"Label","props":{"y":"72","color":"#dddddd","text":"列个数：","x":"242"}},{"type":"TextInput","props":{"sizeGrid":"3,3,3,3","y":"71","var":"columnTxt","text":"1","width":"45","skin":"comp/textinput.png","padding":"0,5,0,5","color":"#dddddd","x":"295"}},{"type":"Label","props":{"y":"112","color":"#dddddd","text":"右间距：","x":"92"}},{"type":"TextInput","props":{"sizeGrid":"3,3,3,3","y":"111","var":"paddingXTxt","text":"8","width":"45","skin":"comp/textinput.png","padding":"0,5,0,5","color":"#dddddd","x":"145"}},{"type":"Label","props":{"y":"112","color":"#dddddd","text":"下间距：","x":"242"}},{"type":"TextInput","props":{"sizeGrid":"3,3,3,3","y":"111","var":"paddingYTxt","text":"8","width":"45","skin":"comp/textinput.png","padding":"0,5,0,5","color":"#dddddd","x":"295"}}],"type":"Dialog","props":{"height":"220","scenecolor":"#dddddd","width":"450"}};}
		]);
		return RepeatCompUI;
	})(Dialog)


	//class laya.editor.ui.other.SetProjectUI extends laya.ui.Dialog
	var SetProjectUI=(function(_super){
		function SetProjectUI(){
			this.resTypes=null;
			this.resExportPath=null;
			this.resExportPathBtn=null;
			this.codeImports=null;
			this.codeExportPath=null;
			this.codeExportPathBtn=null;
			this.uiType=null;
			this.uiExportPath=null;
			this.boxTypes=null;
			this.pageTypes=null;
			this.shareResPath=null;
			this.shareResPathBtn=null;
			this.langPath=null;
			this.langPathBtn=null;
			this.codeType=null;
			this.defaultFont=null;
			this.textureWidth=null;
			this.textureHeight=null;
			this.picWidth=null;
			this.picHeight=null;
			this.power2=null;
			this.trimempty=null;
			SetProjectUI.__super.call(this);
		}

		__class(SetProjectUI,'laya.editor.ui.other.SetProjectUI',_super);
		var __proto=SetProjectUI.prototype;
		__proto.createChildren=function(){
			laya.ui.Component.prototype.createChildren.call(this);
			this.createView(SetProjectUI.uiView);
		}

		__static(SetProjectUI,
		['uiView',function(){return this.uiView={"child":[{"type":"Image","props":{"x":"0","y":"0","width":"600","skin":"view/bg_dialog.png","height":"641","sizeGrid":"50,15,15,15"}},{"type":"Button","props":{"skin":"view/btn_close.png","y":"17","name":"close","x":"566"}},{"type":"Image","props":{"y":"8","width":"547","skin":"comp/blank.png","height":"32","name":"drag","x":"8"}},{"type":"Label","props":{"y":"18","color":"#dddddd","fontSize":"14","text":"项目设置","x":"28"}},{"type":"Label","props":{"y":"63.5","text":"位图资源类型：","width":"100","align":"right","height":"20","color":"#dddddd","x":"52"}},{"type":"TextInput","props":{"sizeGrid":"3,3,3,3","y":"62","var":"resTypes","width":"200","skin":"comp/textinput.png","padding":"0,5,0,5","color":"#dddddd","x":"150"}},{"type":"Button","props":{"sizeGrid":"4,0,4,0","y":"580","labelColors":"#dddddd,#dddddd,#dddddd","label":"确定","skin":"comp/button.png","height":"30","name":"sure","width":"100","x":"250"}},{"type":"Label","props":{"y":"98","text":"资源发布目录：","width":"100","align":"right","height":"20","color":"#dddddd","x":"52"}},{"type":"TextInput","props":{"sizeGrid":"3,3,3,3","y":"97","var":"resExportPath","width":"200","skin":"comp/textinput.png","padding":"0,5,0,5","color":"#dddddd","x":"150"}},{"type":"Button","props":{"y":"96","labelColors":"#dddddd,#dddddd,#dddddd","text":"项目名称：","width":"80","skin":"comp/btn.png","height":"24","var":"resExportPathBtn","label":"浏览","x":"354"}},{"type":"Image","props":{"skin":"comp/line.png","y":"213","width":"496","x":"40"}},{"type":"Label","props":{"y":"237","text":"UICode导入类：","width":"100","align":"right","height":"20","color":"#dddddd","x":"52"}},{"type":"TextArea","props":{"sizeGrid":"3,3,3,3","y":"238","var":"codeImports","scrollBarSkin":"comp/vscroll.png","width":"300","skin":"comp/textinput.png","height":"60","padding":"5,5,5,5","color":"#dddddd","x":"150"}},{"type":"Label","props":{"align":"left","y":"256","color":"#cccccc","text":"回车换行","x":"465"}},{"type":"Label","props":{"y":"312","text":"UICode发布目录：","width":"120","align":"right","height":"20","color":"#dddddd","x":"32"}},{"type":"TextInput","props":{"sizeGrid":"3,3,3,3","y":"311","var":"codeExportPath","width":"200","skin":"comp/textinput.png","padding":"0,5,0,5","color":"#dddddd","x":"150"}},{"type":"Button","props":{"y":"310","labelColors":"#dddddd,#dddddd,#dddddd","text":"项目名称：","width":"80","skin":"comp/btn.png","height":"24","var":"codeExportPathBtn","label":"浏览","x":"354"}},{"type":"Label","props":{"y":"369","text":"UI模式：","width":"120","align":"right","height":"20","color":"#dddddd","x":"32"}},{"type":"ComboBox","props":{"x":"150","y":"368","labels":"内嵌模式,加载模式","width":"200","skin":"comp/combobox.png","var":"uiType","sizeGrid":"3,20,3,3"}},{"type":"Label","props":{"y":"400","text":"加载UI发布目录：","width":"120","align":"right","height":"20","color":"#dddddd","x":"32"}},{"type":"TextInput","props":{"sizeGrid":"3,3,3,3","y":"399","var":"uiExportPath","width":"200","skin":"comp/textinput.png","padding":"0,5,0,5","color":"#dddddd","x":"150"}},{"type":"Image","props":{"skin":"comp/line.png","y":"429","width":"496","x":"40"}},{"type":"Label","props":{"y":"438","text":"容器列表：","width":"120","align":"right","height":"20","color":"#dddddd","x":"32"}},{"type":"TextInput","props":{"sizeGrid":"3,3,3,3","y":"437","var":"boxTypes","width":"200","skin":"comp/textinput.png","padding":"0,5,0,5","color":"#dddddd","x":"150"}},{"type":"Label","props":{"y":"470","text":"页面类型：","width":"120","align":"right","height":"20","color":"#dddddd","x":"32"}},{"type":"TextInput","props":{"sizeGrid":"3,3,3,3","y":"469","var":"pageTypes","width":"200","skin":"comp/textinput.png","padding":"0,5,0,5","color":"#dddddd","x":"150"}},{"type":"Label","props":{"y":"502","text":"共用资源目录：","width":"120","align":"right","height":"20","color":"#dddddd","x":"32"}},{"type":"TextInput","props":{"sizeGrid":"3,3,3,3","y":"501","var":"shareResPath","width":"200","skin":"comp/textinput.png","padding":"0,5,0,5","color":"#dddddd","x":"150"}},{"type":"Button","props":{"y":"500","labelColors":"#dddddd,#dddddd,#dddddd","text":"项目名称：","width":"80","skin":"comp/btn.png","height":"24","var":"shareResPathBtn","label":"浏览","x":"354"}},{"type":"Label","props":{"align":"left","y":"400","color":"#cccccc","text":"加载模式可用","x":"355"}},{"type":"Label","props":{"align":"left","y":"438","color":"#cccccc","text":"转换为容器功能使用","x":"355"}},{"type":"Label","props":{"align":"left","y":"470","color":"#cccccc","text":"用于自定义页面继承","x":"355"}},{"type":"Label","props":{"align":"left","y":"502","color":"#cccccc","text":"多项目共用的资源目录","x":"442"}},{"type":"Label","props":{"y":"534","text":"UI语言包路径：","width":"120","align":"right","height":"20","color":"#dddddd","x":"32"}},{"type":"TextInput","props":{"sizeGrid":"3,3,3,3","y":"533","var":"langPath","width":"200","skin":"comp/textinput.png","padding":"0,5,0,5","color":"#dddddd","x":"150"}},{"type":"Button","props":{"y":"532","labelColors":"#dddddd,#dddddd,#dddddd","text":"项目名称：","width":"80","skin":"comp/btn.png","height":"24","var":"langPathBtn","label":"浏览","x":"354"}},{"type":"Label","props":{"y":"531","wordWrap":"true","text":"设置后，会按照语言包内的配置替换UI界面语言","width":"130","align":"left","height":"80","color":"#cccccc","x":"442"}},{"type":"Label","props":{"align":"left","y":"98","color":"#cccccc","text":"需和项目在同一个盘符","x":"439"}},{"type":"Label","props":{"align":"left","y":"312","color":"#cccccc","text":"需和项目在同一个盘符","x":"439"}},{"type":"Label","props":{"y":"338","text":"语言：","width":"120","align":"right","height":"20","color":"#dddddd","x":"32"}},{"type":"ComboBox","props":{"x":"150","y":"337","labels":"ActionScript3,TypeScript,JavaScript","width":"200","skin":"comp/combobox.png","var":"codeType","sizeGrid":"3,20,3,3"}},{"type":"Label","props":{"y":"189","text":"默认字体：","width":"100","align":"right","height":"20","color":"#dddddd","x":"53"}},{"type":"TextInput","props":{"sizeGrid":"3,3,3,3","y":"188","var":"defaultFont","width":"200","skin":"comp/textinput.png","padding":"0,5,0,5","color":"#dddddd","x":"150"}},{"type":"Label","props":{"y":"130","text":"图集最大宽：","width":"100","align":"right","height":"20","color":"#dddddd","x":"52"}},{"type":"TextInput","props":{"sizeGrid":"3,3,3,3","y":"129","var":"textureWidth","width":"82","skin":"comp/textinput.png","height":"22","padding":"0,5,0,5","color":"#dddddd","x":"150"}},{"type":"Label","props":{"y":"128","text":"图集最大高：","width":"100","align":"right","height":"20","color":"#dddddd","x":"221"}},{"type":"TextInput","props":{"sizeGrid":"3,3,3,3","y":"127","var":"textureHeight","width":"89","skin":"comp/textinput.png","height":"22","padding":"0,5,0,5","color":"#dddddd","x":"319"}},{"type":"Label","props":{"y":"160","text":"单图最大宽：","width":"100","align":"right","height":"20","color":"#dddddd","x":"53"}},{"type":"TextInput","props":{"sizeGrid":"3,3,3,3","y":"159","var":"picWidth","width":"81","skin":"comp/textinput.png","height":"22","padding":"0,5,0,5","color":"#dddddd","x":"150"}},{"type":"Label","props":{"y":"158","text":"单图最大高：","width":"79","align":"right","height":"20","color":"#dddddd","x":"242"}},{"type":"TextInput","props":{"sizeGrid":"3,3,3,3","y":"157","var":"picHeight","width":"90","skin":"comp/textinput.png","height":"22","padding":"0,5,0,5","color":"#dddddd","x":"319"}},{"type":"CheckBox","props":{"y":"132","labelColors":"#aaaaaa","selected":"true","skin":"comp/checkbox.png","var":"power2","label":"是否限定2的幂次方","x":"440"}},{"type":"CheckBox","props":{"y":"157","labelColors":"#aaaaaa","selected":"false","skin":"comp/checkbox.png","var":"trimempty","label":"是否裁剪空白区域","x":"440"}}],"type":"Dialog","props":{"height":"580","scenecolor":"#dddddd","width":"600"}};}
		]);
		return SetProjectUI;
	})(Dialog)


	//class laya.editor.ui.other.StartPageUI extends laya.ui.Dialog
	var StartPageUI=(function(_super){
		function StartPageUI(){
			StartPageUI.__super.call(this);
		}

		__class(StartPageUI,'laya.editor.ui.other.StartPageUI',_super);
		var __proto=StartPageUI.prototype;
		__proto.createChildren=function(){
			laya.ui.Component.prototype.createChildren.call(this);
			this.createView(StartPageUI.uiView);
		}

		__static(StartPageUI,
		['uiView',function(){return this.uiView={"child":[{"type":"Image","props":{"x":"0","y":"0","width":"550","skin":"view/bg_dialog.png","height":"300","sizeGrid":"50,15,15,15"}},{"type":"Image","props":{"y":"8","width":"535","skin":"comp/blank.png","height":"32","name":"drag","x":"8"}},{"type":"Label","props":{"y":"15","color":"#d5d5d5","fontSize":"14","text":"欢迎使用LayaAirIDE","x":"27"}},{"type":"Button","props":{"y":"217","labelColors":"#D8D8D8","width":"223","labelSize":"18","height":"30","name":"newProject","label":"点击这里【创建新项目】","x":"35"}},{"type":"Button","props":{"y":"217","labelColors":"#D8D8D8","width":"243","labelSize":"18","height":"30","name":"openProject","label":"点击这里【打开已有项目】","x":"275"}},{"type":"Button","props":{"skin":"view/btn_open.png","y":"92","stateNum":"1","name":"openProject","x":"339"}},{"type":"Button","props":{"skin":"view/btn_new.png","y":"92","stateNum":"1","name":"newProject","x":"90"}}],"type":"Dialog","props":{"height":"300","scenecolor":"#dddddd","width":"550"}};}
		]);
		return StartPageUI;
	})(Dialog)


	//class laya.editor.ui.page.AddAnimationUI extends laya.ui.Dialog
	var AddAnimationUI=(function(_super){
		function AddAnimationUI(){
			this.title=null;
			this.typeDrop=null;
			this.nameTxt=null;
			this.imgTxt=null;
			this.widthTxt=null;
			this.heightTxt=null;
			this.bgColorPicker=null;
			this.sureBtn=null;
			this.selectBtn=null;
			this.widthCheck=null;
			this.heightCheck=null;
			AddAnimationUI.__super.call(this);
		}

		__class(AddAnimationUI,'laya.editor.ui.page.AddAnimationUI',_super);
		var __proto=AddAnimationUI.prototype;
		__proto.createChildren=function(){
			laya.ui.Component.prototype.createChildren.call(this);
			this.createView(AddAnimationUI.uiView);
		}

		__static(AddAnimationUI,
		['uiView',function(){return this.uiView={"child":[{"type":"Image","props":{"x":"0","y":"0","width":"450","skin":"view/bg_dialog.png","height":"330","sizeGrid":"50,15,15,15"}},{"type":"Button","props":{"skin":"view/btn_close.png","y":"7","name":"close","x":"425"}},{"type":"Image","props":{"y":"8","width":"423","skin":"comp/blank.png","height":"32","name":"drag","x":"8"}},{"type":"Label","props":{"y":"5","color":"#dddddd","var":"title","text":"新增动画","x":"16"}},{"type":"Label","props":{"y":"57","color":"#dddddd","text":"页面类型：","x":"78"}},{"type":"Label","props":{"y":"90","color":"#dddddd","text":"页面名称：","x":"78"}},{"type":"Label","props":{"y":"123","color":"#dddddd","text":"参考视图：","x":"78"}},{"type":"Label","props":{"y":"156","color":"#dddddd","text":"页面宽度：","x":"78"}},{"type":"Label","props":{"y":"189","color":"#dddddd","text":"页面高度：","x":"78"}},{"type":"Label","props":{"y":"222","color":"#dddddd","text":"参考背景：","x":"78"}},{"type":"ComboBox","props":{"x":"151","y":"55","labelColors":"#dddddd","labels":"View,Dialog","scrollBarSkin":"comp/vscroll.png","width":"140","skin":"comp/combobox.png","height":"23","var":"typeDrop","selectedIndex":"0","sizeGrid":"3,20,3,3"}},{"type":"TextInput","props":{"sizeGrid":"3,3,3,3","y":"89","var":"nameTxt","width":"140","skin":"comp/textinput.png","padding":"0,5,0,5","color":"#dddddd","x":"151"}},{"type":"TextInput","props":{"sizeGrid":"3,3,3,3","y":"122","var":"imgTxt","width":"100","skin":"comp/textinput.png","padding":"0,5,0,5","color":"#dddddd","x":"151"}},{"type":"TextInput","props":{"sizeGrid":"3,3,3,3","y":"155","var":"widthTxt","text":"600","width":"140","skin":"comp/textinput.png","padding":"0,5,0,5","color":"#dddddd","x":"151"}},{"type":"TextInput","props":{"sizeGrid":"3,3,3,3","y":"188","var":"heightTxt","text":"400","width":"140","skin":"comp/textinput.png","padding":"0,5,0,5","color":"#dddddd","x":"151"}},{"type":"ColorPicker","props":{"skin":"comp/color.png","y":"221","var":"bgColorPicker","selectedcolor":"#dddddd","x":"151"}},{"type":"Button","props":{"sizeGrid":"4,0,4,0","y":"272","labelColors":"#dddddd,#dddddd,#dddddd","label":"新增","skin":"comp/button.png","height":"30","name":"sure","var":"sureBtn","width":"100","x":"175"}},{"type":"Label","props":{"y":"123","color":"#dddddd","text":"(可选，参考背景)","x":"306"}},{"type":"Label","props":{"y":"221","color":"#dddddd","text":"(可选，设计面板的背景颜色)","x":"180"}},{"type":"Button","props":{"y":"122","labelColors":"#dddddd,#dddddd,#dddddd","width":"40","skin":"comp/btn.png","height":"22","var":"selectBtn","label":"选择","x":"251"}},{"type":"CheckBox","props":{"y":"159","labelColors":"#aaaaaa","label":"仅作为参考宽度","skin":"comp/checkbox.png","var":"widthCheck","x":"298"}},{"type":"CheckBox","props":{"y":"192","labelColors":"#aaaaaa","label":"仅作为参考高度","skin":"comp/checkbox.png","var":"heightCheck","x":"298"}}],"type":"Dialog","props":{"height":"330","scenecolor":"#dddddd","width":"450"}};}
		]);
		return AddAnimationUI;
	})(Dialog)


	//class laya.editor.core.Design extends laya.editor.core.UIView
	var Design=(function(_super){
		function Design(){
			this._xml=null;
			this._autoId=1;
			this._compMap={};
			this._selectedBox=null;
			this._selectedComps=[];
			this._isMove=false;
			this._isDragSelect=false;
			this._hasChange=false;
			this._maskLayer=null;
			this._sceneWidth=0;
			this._sceneHeight=0;
			this._sceneColor=null;
			this._sceneBg=null;
			this._count=0;
			this._treeData=null;
			Design.__super.call(this);
			this._xmls=[];
			this._xmlsRemoved=[];
			this._currMouse=new Point();
			this._bgLayer=new Image2();
			this._maskAboveLayer=new UIBox();
			this._dragBoxLayer=new DragBoxManager();
			this._selectLineLayer=new Sprite();
			this.graphics.drawRect(0,0,100,100,null,"#ff0000");
			this.addChildAt(this._bgLayer,0);
			this._dragBoxLayer.mouseThrough=true;
			this._dragBoxLayer.height=2;
			this._maskLayer=Utils.createMaskArea(5000,5000,"#575757",0.5);
			this._maskLayer.pivot(2500,2500);
			this._maskLayer.mouseEnabled=true;
			this._maskLayer.on("doubleclick",this,this.onMaskDoubleClick);
			this._maskLayer.visible=false;
			this._maskLayer.width=this._maskLayer.height=5000;
			this._maskLayer.name="_maskLayer";
			this.addChild(this._maskLayer);
			this.addChild(this._maskAboveLayer);
			this._maskAboveLayer.width=this._maskAboveLayer.height=5000;
			this._maskAboveLayer.visible=false;
			this._maskAboveLayer.on("doubleclick",this,this.onDoubleClick);
			this._maskAboveLayer.name="_maskAboveLayer";
			this.addChild(this._dragBoxLayer);
			this.addChild(this._selectLineLayer);
			this.on("keydown",this,this.onKeyDown);
			this.on("mousedown",this,this.onMouseDown);
			this.on("doubleclick",this,this.onDoubleClick);
			this.mouseThrough=true;
			this.on("display",this,this.addListens);
			this.on("undisplay",this,this.removeListens);
		}

		__class(Design,'laya.editor.core.Design',_super);
		var __proto=Design.prototype;
		//trace("design size:",this.width,this.height);
		__proto.addListens=function(){
			console.log("addListens");
			Notice.listen("Prop_change",this,this.changeProps,null,true);
			Notice.listen("Prop_changeing",this,this.changeingProps,null,true);
			Notice.listen("Display_selected",this,this.selectCompChainHanadler,null,true);
			Notice.listen("display_value_changes",this,this.displayValueChangeHandler,null,true);
			Notice.listen("Display_tree_change",this,this.displayTreeChangeHandler,null,true);
			Notice.listen("IDEKey_Event",this,this.onKeyDown,null,true);
		}

		__proto.removeListens=function(){
			console.log("removeListens");
			Notice.cancel("Prop_change",this,this.changeProps);
			Notice.cancel("Display_selected",this,this.selectCompChainHanadler);
			Notice.cancel("display_value_changes",this,this.displayValueChangeHandler);
			Notice.cancel("Display_tree_change",this,this.displayTreeChangeHandler);
			Notice.cancel("IDEKey_Event",this,this.onKeyDown);
		}

		__proto.displayValueChangeHandler=function(itemId,key,value){
			this.changeCompProp(itemId,key,value);
		}

		__proto.displayTreeChangeHandler=function(){
			this.changeXml(this._xml,true);
		}

		__proto.getRootID=function(){
			return this._xml.compId;
		}

		//改变属性通知
		__proto.changeMixItemProps=function(proName,pro,targetID,cache){
			(cache===void 0)&& (cache=true);
			var mixO;
			mixO=this.getSelectePropItem();
			var dValue=NaN;
			switch(proName){
				case "x":
				case "y":
					dValue=pro-mixO.props[proName];
					this.changeSelecteCompValues(proName,dValue,cache);
					mixO.props[proName]=pro;
					break ;
				case "mouseEnabled":
				case "visible":
					this.setSelecteCompValues(proName,pro,cache);
					break ;
				}
			this.refreshStatusInfo();
		}

		__proto.changeSelecteCompValues=function(key,dValue,cache){
			(cache===void 0)&& (cache=true);
			var items;
			var i=0,len=0;
			var tItem;
			items=this._selectedComps;
			len=items.length;
			for(i=0;i<len;i++){
				tItem=items[i];
				tItem[key]+=dValue;
				this._dragBoxLayer.refreshDrag(tItem);
				tItem.comXml.props[key]=tItem[key];
			}
			if(cache)
				this.changeXml(this._xml,false);
		}

		__proto.setSelecteCompValues=function(key,dValue,cache){
			(cache===void 0)&& (cache=true);
			var items;
			var i=0,len=0;
			var tItem;
			items=this._selectedComps;
			len=items.length;
			for(i=0;i<len;i++){
				tItem=items[i];
				if(key!="visible")
					tItem[key]=dValue;
				this._dragBoxLayer.refreshDrag(tItem);
				tItem.comXml.props[key]=dValue;
			}
			if(cache)
				this.changeXml(this._xml,false);
		}

		__proto.changeingProps=function(proName,pro,targetID){
			this.changeProps(proName,pro,targetID,false);
		}

		__proto.changeProps=function(proName,pro,targetID,cache){
			(cache===void 0)&& (cache=true);
			console.log("changeProps: cache:",cache);
			if(this._selectedComps&&this._selectedComps.length>1){
				this.changeMixItemProps(proName,pro,targetID,cache);
				return;
			};
			var selected;
			selected=this.selectedCompXml?this.selectedCompXml:this._xml;
			if(!selected)return;
			if(pro===""){
				delete selected.props[proName];
				console.log("delete key:",proName);
				}else{
				ObjectTools.setObjValue(selected.props,proName,pro);
			}
			console.log("changeProp from design");
			this.refreshComp(this._compMap[selected.compId],proName,pro);
			this.nodeChanged(selected);
			if(cache)
				this.changeXml(this._xml,false);
			if(proName=="name"){
				if(this._treeData){
					this._treeData=TreeData.createByUIObj(this._xml);
				}
				this.updateNameToPanels();
			}
			this._dragBoxLayer.refreshDrag(this.selectedComp);
		}

		__proto.updateChanges=function(){}
		__proto.changeCompProp=function(itemId,key,value){
			var comp;
			comp=this._compMap[itemId];
			var dataO;
			dataO=this._treeData.getNodeByID(itemId);
			console.log("changeProp from design");
			if(key==Signs.HideSign){
				if(comp)
					comp["visible"]=!value;
				ObjectTools.setAutoTypeValue(dataO.props,"visible",!value);
				ObjectTools.setAutoTypeValue(dataO,key,value);
				if(value&&this._treeData.isNodeSame(this.selectedCompXml,dataO)){
					this.clearSelect();
				}
				}else if(key==Signs.LockSign){
				ObjectTools.setAutoTypeValue(dataO,key,value);
				if(value&&this._treeData.isNodeSame(this.selectedCompXml,dataO)){
					this.clearSelect();
				}
				}else{
				ObjectTools.setAutoTypeValue(dataO.props,key,value);
			}
			if(comp){
			}
			this.callLater(this.changeXmlLater);
		}

		__proto.changeXmlLater=function(){
			this.changeXml(this._xml,false);
			console.log("_coount:",this._count++);
		}

		//
		__proto.selectCompChainHanadler=function(compId){
			var item;
			item=this._compMap[compId];
			if(!item)return;
			if(this.selectedCompXml&&compId==this.selectedCompXml.compId)return;
			if(!FilterFuns.isEditorSelectableChain(item)){
				return;
			};
			var tParent;
			tParent=this.getCompById((item).comXml.nodeParent);
			if(!tParent)return;
			this.clearSelect();
			if(FilterFuns.isEditorBox(item)&&0){
				this.selectComp(item);
				}else{
				this.recoverSelected();
				if(FilterFuns.isEditorBox(tParent)){
					if(tParent==this._viewLayer||tParent.parent==this){
						if(this._selectedBox!=this._viewLayer){
							this.selectedBox=tParent;
							this._xml.selectedBox=this.getRootID();
						}
						}else{
						this._xml.selectedBox=(item).comXml.nodeParent;
						this.selectedBox=tParent;
					}
				}
				this.selectComp(item);
			}
		}

		/**处理鼠标按下*/
		__proto.onMouseDown=function(e){
			this.callLater(this.onMouseDownWork,[e]);
			this.stage.focus=this;
		}

		/**单击选择和取消*/
		__proto.onMouseDownWork=function(e){
			if(ColorPickerItem.showed)return;
			var comp=this.getCompSelectedAtCurrBox;
			if (comp !=null && Laya.__typeof(comp,'laya.ui.IComponent')&& (comp).comXml){
				var index=this._selectedComps.indexOf(comp);
				if (e&&(e.nativeEvent.ctrlKey || e.nativeEvent.shiftKey)){
					if (index==-1){
						this.selectComp(comp);
						}else {
						this.unSelectComp(comp);
					}
					}else {
					if (index==-1){
						this.clearSelect();
						this.selectComp(comp);
					}
				}
				this.readyToMove();
				}else {
				this.clearSelect();
				this.readyToDragSelect();
			}
		}

		/**准备移动*/
		__proto.readyToMove=function(){
			this._isDragSelect=false;
			if (this._selectedComps.length > 0){
				this._currMouse.x=this.stage.mouseX;
				this._currMouse.y=this.stage.mouseY;
				this.stage.on("mousemove",this,this.onStageMouseMove);
				this.stage.on("mouseup",this,this.onStageMouseUp);
			}
		}

		/**开始选择（显示选择框）*/
		__proto.readyToDragSelect=function(){
			this._isDragSelect=true;
			this._selectLineLayer.x=this.mouseX;
			this._selectLineLayer.y=this.mouseY;
			this.stage.on("mousemove",this,this.onStageMouseMove);
			this.stage.on("mouseup",this,this.onStageMouseUp);
		}

		__proto.cancelMouseState=function(){
			return;
			this._isDragSelect=false;
			this.stage.off("mousemove",this,this.onStageMouseMove);
			this.stage.off("mouseup",this,this.onStageMouseUp);
			this._selectLineLayer.graphics.clear();
		}

		/**移动组件*/
		__proto.onStageMouseMove=function(e){
			if (this._isDragSelect){
				this._selectLineLayer.graphics.clear();
				Utils.drawDashedRect(this._selectLineLayer.graphics,this.mouseX-this._selectLineLayer.x,this.mouseY-this._selectLineLayer.y);
				}else {
				var mx=(this.stage.mouseX-this._currMouse.x)/ this.scaleX;
				var my=(this.stage.mouseY-this._currMouse.y)/ this.scaleY;
				if (this._isMove==false && (Math.abs(mx)> 2 || Math.abs(my)> 2)){
					this._isMove=true;
				}
				if (this._isMove){
					this._currMouse.x+=mx *this.scaleX;
					this._currMouse.y+=my *this.scaleY;
					for (var i=0,n=this._selectedComps.length;i < n;i++){
						var comp=this._selectedComps[i];
						comp.x=Math.round(comp.x+mx);
						comp.y=Math.round(comp.y+my);
						var info=(comp).comXml.props;
						info.x=comp.x;
						info.y=comp.y;
						this.updateNodePosInfo(info);
						this._dragBoxLayer.refreshDrag(comp);
					}
					this.refreshStatusInfo();
					this.showSelectRuleRange();
				}
			}
		}

		__proto.updateNodePosInfo=function(info){
			if(info.hasOwnProperty("left")){
				info.left=info.x;
			}
			if(info.hasOwnProperty("top")){
				info.top=info.y;
			}
		}

		__proto.showCompRuleRange=function(comp){
			Design._recPoints[0].setTo(comp.x,comp.y);
			Design._recPoints[1].setTo(comp.x+comp.width,comp.y+comp.height);
			this.showRuleRange(comp.parent);
		}

		__proto.showSelectRuleRange=function(){
			if(!this._selectedComps||this._selectedComps.length<1){
				Notice.notify("Clear_RULE_RANGE");
				return;
			};
			var tComp;
			tComp=this._selectedComps[0];
			this.calculateSelecteRange();
			this.showRuleRange(tComp.parent);
		}

		__proto.calculateSelecteRange=function(){
			var sPoint;
			var ePoint;
			sPoint=Design._recPoints[0];
			ePoint=Design._recPoints[1];
			var i=0,len=0;
			len=this._selectedComps.length;
			var tComp;
			tComp=this._selectedComps[0];
			sPoint.x=tComp.x;
			sPoint.y=tComp.y;
			ePoint.x=tComp.x+tComp.width;
			ePoint.y=tComp.y+tComp.height;
			for(i=1;i<len;i++){
				tComp=this._selectedComps[i];
				if(sPoint.x>tComp.x){
					sPoint.x=tComp.x;
				}
				if(sPoint.y>tComp.y){
					sPoint.y=tComp.y;
				}
				if(ePoint.x<tComp.x+tComp.width){
					ePoint.x=tComp.x+tComp.width;
				}
				if(ePoint.y<tComp.y+tComp.height){
					ePoint.y=tComp.y+tComp.height;
				}
			}
		}

		__proto.getSelectePropItem=function(){
			this.calculateSelecteRange();
			var sPoint;
			var ePoint;
			sPoint=Design._recPoints[0];
			ePoint=Design._recPoints[1];
			var prop;
			prop=Design._selectePropItem.props;
			var key;
			for(key in prop){
				delete prop[key];
			}
			prop.x=sPoint.x;
			prop.y=sPoint.y;
			prop.width=ePoint.x-sPoint.x;
			prop.height=ePoint.y-sPoint.y;
			return Design._selectePropItem;
		}

		__proto.showRuleRange=function(container){
			if(!container)return;
			var i=0,len=0;
			var tPoint;
			len=Design._recPoints.length;
			for(i=0;i<len;i++){
				tPoint=Design._recPoints[i];
				tPoint=container.localToGlobal(tPoint);
			}
			Notice.notify("SHOW_RULE_RANGE",[Design._recPoints]);
		}

		/**处理鼠标点开*/
		__proto.onStageMouseUp=function(e){
			this.stage.off("mousemove",this,this.onStageMouseMove);
			this.stage.off("mouseup",this,this.onStageMouseUp);
			if (this._isDragSelect){
				this._selectLineLayer.width=this.mouseX-this._selectLineLayer.x;this._selectLineLayer.height=this.mouseY-this._selectLineLayer.y;
				var rect=this._selectLineLayer.getBounds();
				var point;
				point=new Point();
				point.setTo(rect.x,rect.y);
				point=(this._selectLineLayer.parent).localToGlobal(point);
				point=this._selectedBox.globalToLocal(point);
				rect.x=point.x;
				rect.y=point.y;
				if (rect.width>0){
					var box=rect;
					var compRect=new Rectangle();
					for (var i=0,n=this._selectedBox.numChildren;i < n;i++){
						var display=this._selectedBox.getChildAt(i);
						if (Laya.__typeof(display,'laya.ui.IComponent')&& (display).comXml){
							compRect.setTo(display.x,display.y,display.width,display.height);
							if (box.intersects(compRect)){
								if(FilterFuns.isEditorSelectable(display))
									this.selectComp(display);
							}
						}
					}
				}
				this._selectLineLayer.graphics.clear();
				}else if (this._isMove){
				this.nodeChanged(this.selectedCompXml);
				this.changeXml(this._xml,false);
				this._isMove=false;
				this.callLater(this.changeSelectComp);
			}
		}

		/**刷新参考视图*/
		__proto.refreshBg=function(){
			if (Boolean(this._sceneBg)){
				console.log("setBg:",this._sceneBg);
				this._bgLayer.skin=FileTools.getAbsPath(FileManager.getWorkPath(this._sceneBg));
				}else {
				this._bgLayer.skin=null;
			}
		}

		/**显示隐藏参考视图*/
		__proto.toggleBg=function(){
			this._bgLayer.visible=!this._bgLayer.visible;
		}

		/**更改场景大小*/
		__proto.changeSceneSize=function(){
			var g=this.graphics;
			g.clear();
			console.log("sceneColor:",this._sceneColor);
			g.drawRect(0,0,this._sceneWidth,this._sceneHeight,this._sceneColor);
		}

		/**初始化视图*/
		__proto.init=function(viewXml){
			this._xml=viewXml
			this.cacheXML(this._xml);
		}

		/**更改视图*/
		__proto.change=function(reCreate){
			(reCreate===void 0)&& (reCreate=true);
			this.changeXml(this._xml,reCreate);
		}

		/**改变视图*/
		__proto.changeXml=function(newXml,reCreate){
			(reCreate===void 0)&& (reCreate=true);
			if (reCreate){
				this.xml=newXml;
			}
			this.cacheXML(newXml);
			this.hasChange=true;
			this._xmlsRemoved.length=0;
		}

		/**缓存视图*/
		__proto.cacheXML=function(newXml){
			var cacheData;
			cacheData=ObjectTools.copyObj(newXml);
			this._xmls.push(cacheData);
			if (this._xmls.length > 500+50){
				this._xmls.splice(1,50);
			}
		}

		/**向前恢复*/
		__proto.goForward=function(){
			if (this._xmlsRemoved.length > 0){
				this.clearSelect();
				var newXml=this._xmlsRemoved.pop();
				this.xml=newXml;
				this.cacheXML(newXml);
				this.hasChange=true;
			}
		}

		/**向后恢复*/
		__proto.goBack=function(){
			this.clearSelect();
			if (this._xmls.length > 1){
				this._xmlsRemoved.push(this._xmls.pop());
			}
			this.xml=Utils.clone(this._xmls[this._xmls.length-1]);
			this.hasChange=true;
		}

		/**清除选择*/
		__proto.clearSelect=function(){
			var comp;
			for(var $each_comp in this._selectedComps){
				comp=this._selectedComps[$each_comp];
				this.removeBorder(comp);
			}
			this._selectedComps.length=0;
			this.callLater(this.changeSelectComp);
		}

		/**改变选择*/
		__proto.changeSelectComp=function(){
			this.updatePropPanel();
			this.refreshStatusInfo();
			this.showSelectRuleRange();
		}

		__proto.updatePropPanel=function(){
			var selectedXml=this.selectedCompXml;
			if(this.selectedComp){
				DisplayTreePanel.instance.selectByDis(this.selectedComp);
			}
			if (selectedXml){
				PropPanel.instance.init(selectedXml);
				Notice.notify("DesignItemSelected",[selectedXml.compId]);
				}else if (this._selectedComps.length==0&&this.selectedBox){
				PropPanel.instance.init((this.selectedBox).comXml);
				}else if(this._selectedComps&&this._selectedComps.length>1){
				PropPanel.instance.init(this.getSelectePropItem());
				}else{
				PropPanel.instance.init(null);
			}
		}

		__proto.updateNameToPanels=function(){
			this.updateDisTreePanel();
			this.updateTimeLinePanel();
		}

		/**状态栏信息*/
		__proto.refreshStatusInfo=function(){
			var rect=this.getSelectCompsBonus();
			if(!UIPanel.instance.currViewer.compInfo)return;
			if (rect){
				UIPanel.instance.currViewer.compInfo.text=Sys.lang("选择对象：")+"x:"+rect.x+" y:"+rect.y+"  w:"+rect.width+" h:"+rect.height;
				}else {
				UIPanel.instance.currViewer.compInfo.text="";
			}
		}

		/**获得多个选择对象的区域*/
		__proto.getSelectCompsBonus=function(){
			if (this._selectedComps.length < 1){
				return null;
				}else {
				var rect=Design._designCompsBouns;
				rect.width=-1;
				for (var i=0,n=this._selectedComps.length;i < n;i++){
					var comp=this._selectedComps[i];
					var rt=comp.getBounds();
					rect=rect.width >=0 ? rect.union(rt):rect.setTo(rt.x,rt.y,rt.width,rt.height);
				}
				return rect;
			}
		}

		/**刷新视图*/
		__proto.refresh=function(){
			this.xml=this._xml;
			this.changeSelectedBox();
			this.changeSelectComp();
		}

		__proto.updateTreePanels=function(){
			this.updateDisTreePanel();
			this.updateTimeLinePanel();
		}

		__proto.updateTimeLinePanel=function(){}
		__proto.updateDisTreePanel=function(){
			DisplayTreePanel.instance.init(this._treeData);
		}

		__proto.createView=function(xml){
			console.log("createView:",xml);
			if(!this.findXmlById(xml,xml.selectedBox)){
				xml.selectedBox=xml.compId;
			};
			var box=this.getCompById(xml.selectedBox);
			if(box&&box.parent==this){
				box=null;
			}
			if (box&&box.parent){
				this.selectedBox=this.createByBox(box,this.findXmlById(xml,xml.selectedBox));
				}else {
				_super.prototype.createView.call(this,xml);
				this.selectedBox=this._viewLayer;
			}
			if(!xml.props){
				xml.props={};
			}
			this.sceneColor=xml.props.sceneColor;
			this.sceneWidth=Laya.__parseInt(xml.props.width || xml.props.sceneWidth || "800");
			this.sceneHeight=Laya.__parseInt(xml.props.height || xml.props.sceneHeight || "600");
			this.size(this.sceneWidth,this.sceneHeight);
			this.sceneBg=xml.props.sceneBg;
			this._dragBoxLayer.removeAll();
			var arr=[];
			var comp;
			for(var $each_comp in this._selectedComps){
				comp=this._selectedComps[$each_comp];
				var display=this.getCompById((comp).comXml.compId);
				if (display !=null){
					arr.push(display);
					this.addBorder(display);
				}
			}
			this._selectedComps=arr;
			console.log("_selectedBox after create",this._selectedBox);
		}

		/**根据compId查找xml*/
		__proto.findXmlById=function(xml,id){
			var map={};
			Utils.xmlToMapByCompId(xml,map);
			return map[id];
		}

		__proto.createComp=function(xml,comp,visibleMap){
			comp=_super.prototype.createComp.call(this,xml,comp,visibleMap);
			if (comp==null){
				return null;
			};
			var compId=(xml.compId)? xml.compId :this._autoId++;
			this._autoId=Math.max(compId+1,this._autoId);
			xml.compId=compId;
			this._compMap[compId]=comp;
			(comp).comXml=xml;
			return comp;
		}

		/**画矩形*/
		__proto.drawBox=function(width,height){
			var box=new Sprite();
			box.size(width,height);
			box.graphics.drawRect(0,0,width,height,null,"#ff0000");
			return box;
		}

		/**添加描边*/
		__proto.addBorder=function(target){
			var dragType=Laya.__parseInt(UIConfigManager.getCompProp((target).comXml.type,"drag"));
			this._dragBoxLayer.addDrag(target,dragType);
		}

		/**去除描边*/
		__proto.removeBorder=function(target){
			this._dragBoxLayer.removeDrag(target);
		}

		/**根据id获取组件*/
		__proto.getCompById=function(id){
			return this._compMap[id];
		}

		__proto.selectCompByID=function(id){
			var comp;
			comp=this.getCompById(id);
			if(comp){
				this.selectComp(comp);
			}
		}

		__proto.recoverSelected=function(){
			console.log("recoverSelected");
			if(this._selectedBox==this._viewLayer)return;
			this._maskLayer.visible=false;
			if (this._selectedBox !=null && this._selectedBox !=this._viewLayer){
				var boxParent=this.getCompById((this._selectedBox).comXml.nodeParent);
				boxParent.addChild(this._selectedBox);
			}
			this._selectedBox=null;
			this._xml.selectedBox=-1;
		}

		__proto.isItemSame=function(itemA,itemB){
			if(!itemA||!itemB)return false;
			if(itemA==itemB)return true;
			if(itemA.compId==itemB.compId&&itemA.compId)return true;
			return false;
		}

		/**选择容器变化*/
		__proto.changeSelectedBox=function(){}
		/**双击选择父容器*/
		__proto.onMaskDoubleClick=function(e){
			if(e){
				e.stopPropagation();
			}
			console.log("双击选择父容器");
			this.cancelMouseState();
			if (this._selectedBox !=this._viewLayer){
				(this._selectedBox).comXml=this.parseAutoBox((this._selectedBox).comXml);
				}else{
				return;
			}
			this.playBoxEffect(true);
			this._xml.selectedBox=(this._selectedBox).comXml.nodeParent;
			this.cacheXML(this._xml);
			this.refresh();
		}

		//this._maskLayer.visible=false;
		__proto.goBackToStage=function(){
			while(1){
				if (this._selectedBox !=this._viewLayer){
					(this._selectedBox).comXml=this.parseAutoBox((this._selectedBox).comXml);
				}
				if((this._selectedBox).comXml.nodeParent){
					this._xml.selectedBox=(this._selectedBox).comXml.nodeParent;
					this.cacheXML(this._xml);
					this.refresh();
					}else{
					return;
				}
			}
		}

		/**处理双击*/
		__proto.onDoubleClick=function(e){
			e.stopPropagation();
			console.log("双击进入");
			var target=this.selectedComp;
			if(target==null){
				this.onMaskDoubleClick(null);
				return;
			}
			if ((target instanceof laya.editor.core.UIView )&& (target).comXml.type=="UIView"){
				var path=FileManager.getPath(SystemSetting.pagesPath,(target).comXml.source);
				path=path.replace(".xml","."+TypeManager.getExtension("Page"));
				Notice.notify("openPAGE",[path]);
				}else if (target && this._selectedBox !=target && Laya.__typeof(target,'laya.ui.IBox')){
				this._xml.selectedBox=(target).comXml.compId;
				this.cacheXML(this._xml);
				this.selectedBox=target;
				this.playBoxEffect(false);
			}
		}

		// if(!DisControlTool.isInTree(tar
		__proto.playBoxEffect=function(isBack){
			var point=(this._selectedBox.parent).localToGlobal(new Point(this._selectedBox.x+this._selectedBox.width *0.5,this._selectedBox.y+this._selectedBox.height *0.5));
			UIPanel.instance.currViewer.playBoxEffect(point.x,point.y,isBack);
		}

		/**移动组件*/
		__proto.moveSelectedComps=function(mx,my){
			if (this._selectedComps.length > 0){
				for (var i=0,n=this._selectedComps.length;i < n;i++){
					var comp=this._selectedComps[i];
					comp.x+=mx;
					comp.y+=my;
					var info=(comp).comXml;
					info.props.x=comp.x;
					info.props.y=comp.y;
					this.updateNodePosInfo(info.props);
					this._dragBoxLayer.refreshDrag(comp);
					this.nodeChanged(info);
				}
				this.changeXml(this._xml,false);
				this.callLater(this.changeSelectComp);
			}
		}

		/**选择组件*/
		__proto.selectComp=function(comp){
			if(!FilterFuns.isEditorSelectable(comp))return;
			this._selectedComps.push(comp);
			this.addBorder(comp);
			this.callLater(this.changeSelectComp);
		}

		/**撤销组件选择*/
		__proto.unSelectComp=function(comp){
			var index=this._selectedComps.indexOf(comp);
			if (index !=-1){
				this._selectedComps.splice(index,1);
				this.removeBorder(comp);
				this.callLater(this.changeSelectComp);
			}
		}

		/**选择所有*/
		__proto.selectAll=function(){
			this.clearSelect();
			var box=this._selectedBox;
			for (var i=0,n=box.numChildren;i < n;i++){
				var comp=box.getChildAt(i);
				if(!FilterFuns.isEditorSelectable(comp))continue ;
				if (Laya.__typeof(comp,'laya.ui.IComponent')&& (comp).comXml){
					this.selectComp(comp);
				}
			}
		}

		__proto.deleteCompId=function(xml){
			delete xml.compId;
			var list=xml.child;
			if(!list)return;
			var child;
			for(var $each_child in list){
				child=list[$each_child];
				this.deleteCompId(child);
			}
		}

		/**删除组件*/
		__proto.delSelectedComps=function(){
			for (var i=0,n=this._selectedComps.length;i < n;i++){
				var comp=this._selectedComps[i];
				if (comp.parent){
					var compX;
					compX=(comp).comXml;
					var info=this._treeData.getNodeParent(compX).child;
					info.splice(info.indexOf(compX),1);
					comp.parent.removeChild(comp);
				}
			}
			this.clearSelect();
			this.changeXml(this._xml,true);
			this.updateTreePanels();
		}

		/**根据层选择组件*/
		__proto.selectByLayer=function(layer){
			this.clearSelect();
			var box=(this._selectedBox).comXml;
			var list=box.child;
			var child;
			for(var $each_child in list){
				child=list[$each_child];
				if (child.layer==layer){
					this.selectComp(this.getCompById(child.compId));
				}
			}
		}

		/**转换容器内部坐标为相对坐标*/
		__proto.parseAutoBox=function(box){
			var list=box.child;
			var length=list.length;
			if (length < 1 || Laya.__parseInt(box.props.width)!=0 || Laya.__parseInt(box.props.height)!=0){
				return box;
			};
			var mx=Laya.__parseInt(list[0].props.x);
			var my=Laya.__parseInt(list[0].props.y);
			for (var i=1;i < length;i++){
				var child=list[i];
				mx=Math.min(mx,child.props.x||0);
				my=Math.min(my,child.props.y||0);
			}
			if (mx !=0 || my !=0){
				box.props.x=Laya.__parseInt(box.props.x)+mx;
				box.props.y=Laya.__parseInt(box.props.y)+my;
				for (var j=0;j < length;j++){
					child=list[j];
					child.props.x=Laya.__parseInt(child.props.x)-mx;
					child.props.y=Laya.__parseInt(child.props.y)-my;
					if (child.props.x=="0"){
						delete child.props.x;
					}
					if (child.props.y=="0"){
						delete child.props.y;
					}
				}
			}
			return box;
		}

		/**根据图层清理选择*/
		__proto.clearSelectByLayer=function(layer){
			for (var i=this._selectedComps.length-1;i >-1;i--){
				var comp=this._selectedComps[i];
				if ((comp).comXml.layer==layer){
					this.removeBorder(comp);
					this._selectedComps.splice(i,1);
				}
			}
		}

		/**根据图层控制，隐藏关闭的图层上面的组件*/
		__proto.refreshCompsByLayer=function(){
			console.log("refreshCompsByLayer");
			var info=(this._selectedBox).comXml;
			var layers=String(info.layers).split(";");
			var closeLayers=[];
			for (var i=0,n=layers.length;i < n;i++){
				var a=layers[i].split(",");
				if (a[1]==0){
					closeLayers.push(a[0]);
				}
			}
			for (var j=0,m=this._selectedBox.numChildren;j < m;j++){
				var comp=this._selectedBox.getChildAt(j);
				if (Laya.__typeof(comp,'laya.ui.IComponent')&& (comp).comXml !=null){
					comp.visible=closeLayers.indexOf(String((comp).comXml.layer))==-1;
				}
			}
		}

		/**新增组件*/
		__proto.addComp=function(resPath,type,x,y){
			(x===void 0)&& (x=-1);
			(y===void 0)&& (y=-1);
			this.stage.focus=this;
			var box=this.getCompById(this.xml.selectedBox);
			x=(x==-1 ? this.stage.mouseX :x);
			y=(y==-1 ? this.stage.mouseY :y);
			var point=box.globalToLocal(new Point(x,y));
			var compType=type;
			var boxXml=(box).comXml;
			boxXml=this.findXmlById(this._xml,(box).comXml.compId);
			var prop=UIConfigManager.getCompSkinLabel(compType);
			if (boxXml !=null){
				var compId=this._autoId++;
				var str="";
				var obj={};
				obj.props={};
				obj.props.x=Math.round(point.x);
				obj.props.y=Math.round(point.y);
				obj.props[prop]=FileManager.getResRelativePath(resPath);
				obj.type=type;
				obj.compId=compId;
				UIConfigManager.inserDefaultValue(obj);
				boxXml.child.push(obj);
				this.changeXml(this._xml);
				this.clearSelect();
				this.selectComp(this.getCompById(compId));
			}
		}

		//}
		__proto.addParticlePlayer=function(particlePath,x,y){
			(x===void 0)&& (x=-1);
			(y===void 0)&& (y=-1);
			this.stage.focus=this;
			x=(x==-1 ? this.stage.mouseX :x);
			y=(y==-1 ? this.stage.mouseY :y);
			var box=this.getCompById(this.xml.selectedBox);
			var point=box.globalToLocal(new Point(x,y));
			var boxXml=(box).comXml;
			if (boxXml !=null){
				var compId=this._autoId++;
				var path=FileManager.adptToCommonUrl(FileManager.getRelativePath(SystemSetting.pagesPath,particlePath));
				var nData;
				nData={
					type:"ParticlePlayer",
					compId:compId,
					source:path,
					props:{
						file:path,
						x:Math.floor(point.x),
						y:Math.floor(point.y)
					},
					child:[]
				};
				boxXml.child.push(nData);
				this.changeXml(this._xml);
				this.clearSelect();
				this.selectComp(this.getCompById(compId));
			}
		}

		__proto.addTemplate=function(tempPath,x,y){
			(x===void 0)&& (x=-1);
			(y===void 0)&& (y=-1);
			this.stage.focus=this;
			x=(x==-1 ? this.stage.mouseX :x);
			y=(y==-1 ? this.stage.mouseY :y);
			var box=this.getCompById(this.xml.selectedBox);
			var point=box.globalToLocal(new Point(x,y));
			var boxXml=(box).comXml;
			if (boxXml !=null){
				var compId=0;
				var path=FileManager.adptToCommonUrl(FileManager.getRelativePath(SystemSetting.pagesPath,tempPath));
				var filePath;
				filePath=TemplateManager.getUIFilePath(tempPath);
				var resPath;
				resPath=TemplateManager.getUIResPath(tempPath);
				FileTools.copyDir(resPath,FileManager.getResPath("template"+"/"+FileTools.getFileName(tempPath)));
				Notice.notify("FRESH_RES");
				var tempData;
				tempData=FileManager.readJSONFile(filePath);
				this.reIDNode(tempData);
				console.log("tempData",tempData);
				console.log("boxXml",boxXml);
				console.log("point:",point.x,point.y);
				var addChilds;
				addChilds=tempData.child;
				if(!addChilds)addChilds=[];
				var tarChilds;
				if(!boxXml.child)boxXml.child=[];
				tarChilds=boxXml.child;
				var i=0,len=0;
				var tChild;
				len=addChilds.length;
				var tProp;
				var addCompIds;
				addCompIds=[];
				for(i=0;i<len;i++){
					tChild=addChilds[i];
					compId=tChild.compId;
					addCompIds.push(compId);
					tProp=tChild.props;
					tProp.x=tProp.x?tProp.x:0;
					tProp.y=tProp.y?tProp.y:0;
					tProp.x=Math.floor(parseFloat(tProp.x)+point.x);
					tProp.y=Math.floor(parseFloat(tProp.y)+point.y);
					tarChilds.push(tChild);
				}
				Laya.timer.once(1000,this,this.freshUI,[this._xml,addCompIds]);
			}
		}

		__proto.reIDNode=function(node){
			this._autoId++;
			node.compId=this._autoId;
			var childs;
			if(!node.child)node.child=[];
			childs=node.child;
			var i=0,len=0;
			len=childs.length;
			for(i=0;i<len;i++){
				this.reIDNode(childs[i]);
			}
		}

		__proto.ensureIDNode=function(node){
			this.idNode(node,false);
			var childs;
			if(!node.child)node.child=[];
			childs=node.child;
			var i=0,len=0;
			len=childs.length;
			for(i=0;i<len;i++){
				this.ensureIDNode(childs[i]);
			}
		}

		__proto.freshUI=function(newXML,selects){
			this.changeXml(newXML);
			this.clearSelect();
			var i=0,len=0;
			len=selects.length;
			for(i=0;i<len;i++){
				this.selectCompByID(selects[i]);
			}
		}

		/**新增ui视图*/
		__proto.addUIView=function(uiPath,x,y){
			(x===void 0)&& (x=-1);
			(y===void 0)&& (y=-1);
			switch(TypeManager.getFileType(uiPath)){
				case "Particle":
					this.addParticlePlayer(uiPath,x,y);
					return;
					break ;
				case "UITemplate":
					return;
					break ;
				}
			this.stage.focus=this;
			x=(x==-1 ? this.stage.mouseX :x);
			y=(y==-1 ? this.stage.mouseY :y);
			var box=this.getCompById(this.xml.selectedBox);
			var point=box.globalToLocal(new Point(x,y));
			var boxXml=(box).comXml;
			if (boxXml !=null){
				var compId=this._autoId++;
				var path=FileManager.adptToCommonUrl(FileManager.getRelativePath(SystemSetting.pagesPath,uiPath));
				var nData;
				nData={
					type:"UIView",
					compId:compId,
					source:path,
					props:{
						x:Math.floor(point.x),
						y:Math.floor(point.y)
					},
					child:[]
				};
				boxXml.child.push(nData);
				this.changeXml(this._xml);
				this.clearSelect();
				this.selectComp(this.getCompById(compId));
			}
		}

		/**层变化后切换*/
		__proto.refreshAtLayerChanged=function(){
			this.sortXmlByLayer((this._selectedBox).comXml);
			this.changeXml(this._xml);
		}

		/**根据层进行排序*/
		__proto.sortXmlByLayer=function(box){}
		/**创建皮肤*/
		__proto.createSkin=function(type,path){
			var prop=""
			prop=prop || "styleSkin";
			return " "+prop+"=\""+path+"\"";
		}

		/**创建属性*/
		__proto.createProp=function(prop,value){
			if (prop=="x" || prop=="y" || prop=="width" || prop=="height"){
				if (value=="0"){
					return "";
				}
			}
			return " "+prop+"=\""+value+"\"";
		}

		/**将所选组件打包到容器内*/
		__proto.boxComp=function(type){
			if (type && this._selectedComps.length > 0){
				var box;
				var compId=this._autoId++;
				box={
					type:type,
					compId:compId,
					child:[],
					props:{}
				};
				var comps=this.selectedXmls;
				var parent=(this._selectedBox).comXml;
				var parentChilds=parent.child;
				for (var i=comps.length-1;i >-1;i--){
					var info=comps[i];
					parentChilds.splice(info.index,1);
					this._treeData.addChild(info.xml,box);
				}
				box.child=box.child.reverse();
				box=this.parseAutoBox(box);
				this._treeData.addChild(box,parent);
				this.clearSelect();
				this.changeXml(this._xml);
			}
		}

		__proto.idNode=function(node,force){
			(force===void 0)&& (force=false);
			if(!force&&node.compId)return;
			var compId=this._autoId++;
			node.compId=compId;
		}

		__proto.dealAction=function(funName,param){
			console.log(funName,"快捷键");
			if ((typeof (this[funName])=='function')){
				this[funName].apply(this,param);
			}
		}

		__proto.refreshComp=function(comp,key,value){
			if(!comp){
				console.log("refreshComp but comp==null");
				return;
			};
			var data=(comp).comXml;
			console.log("refreshComp:",comp,data);
			if(Design.simpleValueDic[key]&&value!=""){
				console.log("simple key set value only");
				ObjectTools.setObjValue(comp,key,value);
				if(data.compId==this._xml.compId){
					if(key=="width"){
						this.sceneWidth=value;
					}
					if(key=="height"){
						this.sceneHeight=value;
					}
				}
				return;
			}
			console.log("not simple key recreate");
			if(this._treeData.isNodeSame(data,this._treeData.root)){
				this.xml=this._xml;
				return;
			};
			var newComp;
			newComp=this.createComp(data);
			console.log("is same:",comp==newComp,comp,newComp);
			if(comp.parent){
				var preIndex=0;
				var preParent;
				preParent=comp.parent;
				preIndex=preParent.getChildIndex(comp);
				preParent.addChildAt(newComp,preIndex);
				comp.removeSelf();
			}
		}

		/**
		*获取节点的配置信息
		*@param comp
		*@return
		*
		*/
		__proto.getConfigData=function(comp){
			if(!comp)return null;
			var data=(comp).comXml;
			if(!data)return null;
			var i=0,len=0;
			var childList;
			if(!data.child)data.child=[];
			var dataChildList;
			dataChildList=data.child;
			dataChildList.length=0;
			childList=DisControlTool.getAllChild(comp);
			len=childList.length;
			var tChildData;
			for(i=0;i<len;i++){
				tChildData=this.getConfigData(childList[i]);
				if(tChildData){
					if(!tChildData.type){
						debugger;
					}
					dataChildList.push(tChildData);
				}
			}
			return data;
		}

		/**把组件从容器内打散*/
		__proto.unBoxComp=function(){
			var target=this.selectedComp;
			if (target !=null && Laya.__typeof(target,'laya.ui.IBox')){
				var box=(target).comXml;
				var parent=this._treeData.getNodeParent(box).child;
				parent.splice(parent.indexOf(box),1);
				var ox=box.props.x || 0;
				var oy=box.props.y || 0;
				var list=box.child;
				for (var j=0,n=list.length;j < n;j++){
					var child=list[j];
					parent.push(child);
					child.props.x=Laya.__parseInt(child.props.x || "0")+ox;
					child.props.y=Laya.__parseInt(child.props.y ||"0")+oy;
				}
				this.clearSelect();
				this.changeXml(this._xml);
			}
		}

		/**对齐选中的组件*/
		__proto.alignComp=function(type){
			if (Boolean(type)&& this._selectedComps.length > 1){
				var goal=0;
				var target=this._selectedComps[0];
				if (type=="left"){
					goal=target.x;
					}else if (type=="right"){
					goal=target.x+target.width;
					}else if (type=="top"){
					goal=target.y;
					}else if (type=="bottom"){
					goal=target.y+target.height;
					}else if (type=="middle"){
					goal=target.y+target.height *0.5;
					}else if (type=="center"){
					goal=target.x+target.width *0.5;
				}
				for (var i=1,n=this._selectedComps.length;i < n;i++){
					target=this._selectedComps[i];
					if (type=="left"){
						goal=Math.min(target.x,goal);
						}else if (type=="right"){
						goal=Math.max(target.x+target.width,goal);
						}else if (type=="top"){
						goal=Math.min(target.y,goal);
						}else if (type=="bottom"){
						goal=Math.max(target.y+target.height,goal);
						}else if (type=="middle"){
						goal=Math.max(target.y+target.height *0.5,goal);
						}else if (type=="center"){
						goal=Math.max(target.x+target.width *0.5,goal);
					}
				}
				for (var j=0,m=this._selectedComps.length;j < m;j++){
					target=this._selectedComps[j];
					var info=(target).comXml;
					var props;
					props=info.props;
					if (type=="left"){
						target.x=props.x=goal;
						}else if (type=="right"){
						target.x=props.x=goal-target.width;
						}else if (type=="top"){
						target.y=props.y=goal;
						}else if (type=="bottom"){
						target.y=props.y=goal-target.height;
						}else if (type=="middle"){
						target.y=props.y=goal-target.height *0.5;
						}else if (type=="center"){
						target.x=props.x=goal-target.width *0.5;
					}
					this._dragBoxLayer.refreshDrag(target);
					this.nodeChanged(info);
				}
				this.changeXml(this._xml,false);
			}
		}

		/**调整组件对其*/
		__proto.placeComp=function(type){
			var target=this.selectedComp;
			if (target !=null){
				var info=(target).comXml;
				if (type=="top_left"){
					target.x=target.y=info.props.x=info.props.y=0;
					}else if (type=="top_right" && target.parent){
					var width=(target.parent).width;
					var height=(target.parent).height;
					target.x=info.props.x=width-target.width;
					target.y=0;
					}else if (type=="bottom_left" && target.parent){
					width=(target.parent).width;
					height=(target.parent).height;
					target.x=0;
					target.y=info.props.y=height-target.height;
					}else if (type=="bottom_right" && target.parent){
					width=(target.parent).width;
					height=(target.parent).height;
					target.x=info.props.x=width-target.width;
					target.y=info.props.y=height-target.height;
					}else if (type=="center" && target.parent){
					target.x=info.props.x=((target.parent).width-target.width)*0.5;
					}else if (type=="middle" && target.parent){
					target.y=info.props.y=((target.parent).height-target.height)*0.5;
				}
				this._dragBoxLayer.refreshDrag(target);
				this.changeSelectComp();
				this.nodeChanged(info);
				this.changeXml(this._xml,false);
			}
		}

		/**平均分配组件*/
		__proto.spaceComp=function(type){
			if (this._selectedComps.length > 2){
				var total=0;
				var count=0;
				var num=this._selectedComps.length;
				this._selectedComps.sort(MathUtil.SortByKey(type=="h" ? "x" :"y"));
				var first=this._selectedComps[0];
				var last=this._selectedComps[num-1];
				total=type=="h" ? last.x+last.width-first.x :last.y+last.height-this._selectedComps[0].y;
				for (var i=0;i < num;i++){
					var comp=this._selectedComps[i];
					count+=type=="h" ? comp.width :comp.height;
				};
				var space=(total-count)/ (num-1);
				var start=type=="h" ? first.x :first.y;
				for (var j=0;j < num;j++){
					comp=this._selectedComps[j];
					var info=(comp).comXml;
					if (type=="h"){
						comp.x=info.props.x=Math.round(start);
						start+=comp.width+space;
						}else {
						comp.y=info.props.y=Math.round(start);
						start+=comp.height+space;
					}
					this._dragBoxLayer.refreshDrag(comp);
					this.nodeChanged(info);
				}
				this.changeXml(this._xml,false);
			}
		}

		/**重复组件*/
		__proto.repeatComp=function(row,column,paddingX,paddingY){
			var target=this.selectedComp;
			if (target !=null){
				var currXml=(target).comXml;
				var parent=target.parent;
				for (var i=0;i < row;i++){
					for (var j=0;j < column;j++){
						if (i==0 && j==0){
							currXml.props.name="item0";
							}else {
							var clone=Utils.clone(currXml);
							clone.props.x=Laya.__parseInt(clone.props.x)+j *(paddingX+target.width);
							clone.props.y=Laya.__parseInt(clone.props.y)+i *(paddingY+target.height);
							clone.props.name="item"+(j+i *column);
							delete clone.compId;
							parent.comXml.child.push(clone);
						}
					}
				}
				this.changeXml(this._xml);
			}
		}

		/**粘贴组件*/
		__proto.pasteComp=function(copyTemp,samePoint){
			var ids=[];
			var parent=(this._selectedBox).comXml;
			var obj;
			for(var $each_obj in copyTemp){
				obj=copyTemp[$each_obj];
				var temp=obj.xml;
				temp.props.x=Laya.__parseInt(temp.props.x)+(samePoint ? 0 :10);
				temp.props.y=Laya.__parseInt(temp.props.y)+(samePoint ? 0 :10);
				var newXml=Utils.clone(temp);
				ids.push(this._autoId);
				newXml.compId=this._autoId++;
				parent.child.push(newXml);
			}
			this.changeXml(this._xml);
			this.clearSelect();
			var compId;
			for(var $each_compId in ids){
				compId=ids[$each_compId];
				this.selectComp(this.getCompById(compId));
			}
		}

		__proto.nodeChanged=function(node){}
		/**更改同层先后顺序*/
		__proto.sortComp1=function(up){
			(up===void 0)&& (up=true);
			var arr=this._selectedComps.sort(this.sortOnIndex);
			if (up){
				arr.reverse();
			};
			var flag=false;
			for (var i=0,n=arr.length;i < n;i++){
				var target=arr[i];
				var info=(target).comXml;
				var parent=(target.parent).comXml;
				var index=info.childIndex();
				delete parent.children()[index];
				var insertIndex=up ? index :index-1;
				var count=parent.children().length();
				insertIndex=insertIndex < 0 ? 0 :(insertIndex > count-1 ? count-1 :insertIndex);
				if (up){
					parent.insertChildAfter(parent.children()[insertIndex],info);
					}else {
					parent.insertChildBefore(parent.children()[insertIndex],info);
				}
				flag=true;
				this.nodeChanged(info);
			}
			if (flag){
				this.sortXmlByLayer((target.parent).comXml);
				this.changeXml(this._xml);
			}
		}

		/**更改同层先后顺序*/
		__proto.sortComp=function(up){
			(up===void 0)&& (up=true);
			var arr=this._selectedComps.sort(this.sortOnIndex);
			if (up){
				arr.reverse();
			};
			var flag=false;
			for (var i=0,n=arr.length;i < n;i++){
				var target=arr[i];
				var info=(target).comXml;
				var parent=this._treeData.getNodeParent(info);
				var index=this._treeData.getChildIndex(info,parent);
				this._treeData.removeSelf(info);
				var insertIndex=up ? index+1 :index-1;
				var count=TreeData.getNodeChilds(parent).length;
				insertIndex=insertIndex < 0 ? 0 :(insertIndex > count ? count :insertIndex);
				this._treeData.addChildAt(info,insertIndex,parent);
				flag=true;
				this.nodeChanged(info);
			}
			if (flag){
				this.changeXml(this._xml);
			}
		}

		__proto.sortOnIndex=function(a,b){
			var parent=a.parent;
			var aindex=parent.getChildIndex(a);
			var bindex=parent.getChildIndex(b);
			if (aindex > bindex){
				return 1;
				}else if (aindex < bindex){
				return-1;
				}else {
				return 0;
			}
		}

		/**改变层*/
		__proto.moveLayer=function(isUp){}
		/**处理快捷键*/
		__proto.onKeyDown=function(e){
			if (e.ctrlKey && e.keyCode==38){
				this.sortComp(true);
				}else if (e.ctrlKey && e.keyCode==40){
				this.sortComp(false);
				}else if (e.ctrlKey && e.keyCode==75){
				this.showSelecteRes();
				}else if (e.ctrlKey && e.keyCode==37){
				this.moveLayer(false);
				}else if (e.ctrlKey && e.keyCode==39){
				this.moveLayer(true);
				}else if (e.keyCode==38 && e.shiftKey){
				this.moveSelectedComps(0,-10);
				}else if (e.keyCode==40 && e.shiftKey){
				this.moveSelectedComps(0,10);
				}else if (e.keyCode==37 && e.shiftKey){
				this.moveSelectedComps(-10,0);
				}else if (e.keyCode==39 && e.shiftKey){
				this.moveSelectedComps(10,0);
				}else if (e.keyCode==38){
				this.moveSelectedComps(0,-1);
				}else if (e.keyCode==40){
				this.moveSelectedComps(0,1);
				}else if (e.keyCode==37){
				this.moveSelectedComps(-1,0);
				}else if (e.keyCode==39){
				this.moveSelectedComps(1,0);
				}else if (e.keyCode==13){
				var target=this.selectedComp;
				if (target !=null){
					if (Laya.__typeof(target,'laya.editor.core.IClip')){
						(target).autoPlay=!(target).autoPlay;
					}
				}
				}else if(e.shiftKey &&e.ctrlKey && e.keyCode==82){
			}
		}

		__proto.showSelecteRes=function(){
			var selecteO=this.selectedCompXml;
			if(selecteO){
				console.log("showSelecteRes:",selecteO);
				if(selecteO.props&&selecteO.props.skin){
					Notice.notify("SelecteResFile",[selecteO.props.skin]);
				}
			}
		}

		__getset(0,__proto,'measureHeight',function(){
			var max=0;
			for (var i=this.numChildren-1;i >-1;i--){
				var comp=this.getChildAt(i);
				if (comp !=this._maskLayer){
					max=Math.max(comp.y+comp.height *comp.scaleY,max);
				}
			}
			return max;
		});

		/**场景高度*/
		__getset(0,__proto,'sceneHeight',function(){
			return this._sceneHeight;
			},function(value){
			if (this._sceneHeight !=value){
				this._sceneHeight=value;
				this._viewLayer.height=this._sceneHeight;
				this.callLater(this.changeSceneSize);
			}
		});

		//change(true);
		__getset(0,__proto,'measureWidth',function(){
			var max=0;
			for (var i=this.numChildren-1;i >-1;i--){
				var comp=this.getChildAt(i);
				if (comp !=this._maskLayer){
					max=Math.max(comp.x+comp.width *comp.scaleX,max);
				}
			}
			return max;
		});

		__getset(0,__proto,'mouseX',function(){
			return DisControlTool.getMousePoint(this).x;
		});

		__getset(0,__proto,'mouseY',function(){
			return DisControlTool.getMousePoint(this).y;
		});

		/**场景宽度*/
		__getset(0,__proto,'sceneWidth',function(){
			return this._sceneWidth;
			},function(value){
			if (this._sceneWidth !=value){
				this._sceneWidth=value;
				this._viewLayer.width=this._sceneWidth;
				this.callLater(this.changeSceneSize);
			}
		});

		/**场景背景颜色*/
		__getset(0,__proto,'sceneColor',function(){
			return this._sceneColor;
			},function(value){
			if (this._sceneColor !=value){
				this._sceneColor=value;
				this.callLater(this.changeSceneSize);
			}
		});

		/**视图代码*/
		__getset(0,__proto,'xml',function(){
			return this._xml;
			},function(value){
			console.log("recreate");
			this._xml=value;
			this.ensureIDNode(this._xml);
			this.createView(this._xml);
			this._treeData=TreeData.createByUIObj(this._xml);
			this.updateTreePanels();
			this.showSelectRuleRange();
		});

		/**参考视图*/
		__getset(0,__proto,'sceneBg',function(){
			return this._sceneBg;
			},function(value){
			if (this._sceneBg !=value){
				this._sceneBg=value;
				this.refreshBg();
			}
		});

		/**是否有变化*/
		__getset(0,__proto,'hasChange',function(){
			return this._hasChange;
			},function(value){
			if (this._hasChange !=value){
				this._hasChange=value;
				this.event("change");
			}
		});

		/**当前选择的容器*/
		__getset(0,__proto,'selectedBox',function(){
			return this._selectedBox;
			},function(value){
			console.log("set selectedBox:",value);
			if(!value)debugger;
			if (!this.isItemSame(this._selectedBox,value)&&this._selectedBox !=value && Laya.__typeof(value,'laya.ui.IBox')&& !((value instanceof laya.editor.core.UIView ))){
				if (this._selectedBox !=null && this._selectedBox !=this._viewLayer && (value.parent==this._selectedBox || (Laya.__typeof(this._selectedBox,'laya.editor.core.IContent')&& value.parent==(this._selectedBox).content))){
					var boxParent=this.getCompById((this._selectedBox).comXml.nodeParent);
					boxParent.addChild(this._selectedBox);
				}
				this._selectedBox=value;
				var point;
				var newPoint;
				if(this._selectedBox.parent){
					point=(this._selectedBox.parent).localToGlobal(new Point());
					newPoint=(this._maskAboveLayer.parent).globalToLocal(point);
				}
				this._maskAboveLayer.removeChildren();
				this.clearSelect();
				if (this._selectedBox !=this._viewLayer){
					this._maskLayer.visible=true;
					this._maskAboveLayer.visible=true;
					this._maskAboveLayer.x=newPoint.x;
					this._maskAboveLayer.y=newPoint.y;
					this._maskAboveLayer.width=(this._selectedBox.parent).width;
					this._maskAboveLayer.height=(this._selectedBox.parent).height;
					(this._selectedBox).comXml.nodeParent=this._treeData.getNodeParent((this._selectedBox).comXml).compId;
					this._maskAboveLayer.addChild(this._selectedBox);
					if (Laya.__typeof(this._selectedBox,'laya.ui.IRender')){
						this.createByBox((this._selectedBox),(this._selectedBox).comXml);
					}
					}else if (this._maskLayer.visible){
					this._maskLayer.visible=false;
					this._maskAboveLayer.visible=false;
				}
				if (value !=null && Laya.__typeof(value,'laya.ui.IRender')){
					if (value.getChildByName("render")){
						for (var i=value.numChildren-1;i >-1;i--){
							var child=value.getChildAt(i);
							if (child.name.indexOf("item")!=-1){
								value.removeChild(child);
							}
						}
					}
				}
			}
			if(this._selectedBox){
				this._xml.selectedBox=this._selectedBox["comXml"].compId;
			}
			this.callLater(this.changeSelectedBox);
		});

		/**获得当前选中的单一组件*/
		__getset(0,__proto,'selectedComp',function(){
			return this._selectedComps.length==1 ? this._selectedComps[0] :null;
		});

		/**获得当前选中的单一组件XML*/
		__getset(0,__proto,'selectedCompXml',function(){
			var selectComp=this.selectedComp;
			return selectComp !=null ? (selectComp).comXml :null;
		});

		/**获取当前点击被选中的组件*/
		__getset(0,__proto,'getCompSelectedAtCurrBox',function(){
			var compRect=new Rectangle();
			var mousePos;
			mousePos=this._selectedBox.getMousePoint();
			for (var i=this._selectedBox.numChildren-1;i>=0;i--){
				var display=this._selectedBox.getChildAt(i);
				if (Laya.__typeof(display,'laya.ui.IComponent')&& (display).comXml){
					compRect.setTo(display.x,display.y,display.width,display.height);
					if (compRect.contains(mousePos.x,mousePos.y)){
						if(FilterFuns.isEditorSelectable(display)){
							return display;
						}
					}
				}
			}
			return null;
		});

		/**选择的所有组件*/
		__getset(0,__proto,'selectedComps',function(){
			return this._selectedComps;
		});

		/**获得被选中的内容*/
		__getset(0,__proto,'selectedXmls',function(){
			var arr=[];
			if (this._selectedComps.length > 0){
				var comp;
				for(var $each_comp in this._selectedComps){
					comp=this._selectedComps[$each_comp];
					var info=(comp).comXml;
					var clone=Utils.clone(info);
					this.deleteCompId(clone);
					var parentChilds=this._treeData.getNodeParent(info).child;
					arr.push({index:parentChilds.indexOf(info),xml:clone});
				}
				arr.sort(MathUtil.SortByKey("index"));
			}
			return arr;
		});

		Design.MAX_HISTORY=500;
		__static(Design,
		['_recPoints',function(){return this._recPoints=[new Point(),new Point()];},'_selectePropItem',function(){return this._selectePropItem={type:"MixItems",props:{}};},'_designCompsBouns',function(){return this._designCompsBouns=new Rectangle();},'simpleValueDic',function(){return this.simpleValueDic={
				"x":true,
				"y":true,
				"width":true,
				"height":true,
				"skin":true,
				"left":true,
				"right":true,
				"top":true,
				"visible":true,
				"bottom":true
		};}

		]);
		return Design;
	})(UIView)


	//class laya.editor.ui.page.AddDirectoryUI extends laya.ui.Dialog
	var AddDirectoryUI=(function(_super){
		function AddDirectoryUI(){
			this.nameTxt=null;
			AddDirectoryUI.__super.call(this);
		}

		__class(AddDirectoryUI,'laya.editor.ui.page.AddDirectoryUI',_super);
		var __proto=AddDirectoryUI.prototype;
		__proto.createChildren=function(){
			laya.ui.Component.prototype.createChildren.call(this);
			this.createView(AddDirectoryUI.uiView);
		}

		__static(AddDirectoryUI,
		['uiView',function(){return this.uiView={"child":[{"type":"Image","props":{"x":"0","y":"0","width":"420","skin":"view/bg_dialog.png","height":"150","sizeGrid":"50,15,15,15"}},{"type":"Button","props":{"skin":"view/btn_close.png","y":"16","name":"close","x":"389"}},{"type":"Image","props":{"y":"8","width":"373","skin":"comp/blank.png","height":"32","name":"drag","x":"8"}},{"type":"Label","props":{"y":"18","color":"#dddddd","text":"新增页面目录","x":"28"}},{"type":"Label","props":{"y":"73.5","color":"#dddddd","text":"目录名称：","x":"44"}},{"type":"TextInput","props":{"sizeGrid":"3,3,3,3","y":"72","var":"nameTxt","width":"130","skin":"comp/textinput.png","padding":"0,5,0,5","color":"#dddddd","x":"117"}},{"type":"Button","props":{"y":"68","labelColors":"#dddddd,#dddddd,#dddddd","label":"新增","skin":"comp/btn.png","height":"30","name":"sure","width":"100","x":"271"}}],"type":"Dialog","props":{"height":"150","scenecolor":"#dddddd","width":"420"}};}
		]);
		return AddDirectoryUI;
	})(Dialog)


	//class laya.editor.ui.page.AddDocumentUI extends laya.ui.Dialog
	var AddDocumentUI=(function(_super){
		function AddDocumentUI(){
			this.tab=null;
			this.title=null;
			this.views=null;
			this.sureBtn=null;
			AddDocumentUI.__super.call(this);
		}

		__class(AddDocumentUI,'laya.editor.ui.page.AddDocumentUI',_super);
		var __proto=AddDocumentUI.prototype;
		__proto.createChildren=function(){
			View.viewClassMap["laya.editor.ui.page.AddParticleUI"]=AddParticleUI;
			View.viewClassMap["laya.editor.view.page.AddPage"]=AddPage;
			laya.ui.Component.prototype.createChildren.call(this);
			this.createView(AddDocumentUI.uiView);
		}

		__static(AddDocumentUI,
		['uiView',function(){return this.uiView={"child":[{"type":"Image","props":{"x":"0","y":"0","width":"550","skin":"view/bg_dialog1.png","height":"400","sizeGrid":"60,15,15,15"}},{"type":"Image","props":{"x":"28","y":"45","width":"491","skin":"view/bg_dialog2.png","height":"324","sizeGrid":"3,3,3,3"}},{"type":"Image","props":{"x":"28","y":"45","width":"491","skin":"view/newtitle_bg.png","height":"23","sizeGrid":"3,3,3,3"}},{"type":"Tab","props":{"y":"45","labels":"页面,粒子","skin":"comp/tab3.png","var":"tab","selectedIndex":"0","x":"28"}},{"type":"Button","props":{"skin":"view/btn_close.png","y":"20","name":"close","x":"512"}},{"type":"Image","props":{"y":"12","width":"495","skin":"comp/blank.png","height":"32","name":"drag","x":"12"}},{"type":"Label","props":{"y":"18","var":"title","text":"新增文档","color":"#dddddd","fontSize":"14","x":"28"}},{"child":[{"type":"AddPage","props":{"name":"item0","runtime":"laya.editor.view.page.AddPage"}},{"type":"AddParticle","props":{"y":"2","name":"item1","runtime":"laya.editor.ui.page.AddParticleUI","x":"0"}}],"type":"ViewStack","props":{"mouseEnabled":"true","y":"92","var":"views","x":"68"}},{"type":"Button","props":{"y":"317","labelColors":"#dddddd,#dddddd,#dddddd","label":"确定","skin":"comp/btn.png","height":"30","name":"sure","var":"sureBtn","width":"100","x":"408"}}],"type":"Dialog","props":{"height":"400","scenecolor":"#dddddd","width":"550"}};}
		]);
		return AddDocumentUI;
	})(Dialog)


	//class laya.editor.ui.page.AddPageUI extends laya.ui.Dialog
	var AddPageUI=(function(_super){
		function AddPageUI(){
			this.typeDrop=null;
			this.nameTxt=null;
			this.imgTxt=null;
			this.widthTxt=null;
			this.heightTxt=null;
			this.bgColorPicker=null;
			this.selectBtn=null;
			this.widthCheck=null;
			this.heightCheck=null;
			AddPageUI.__super.call(this);
		}

		__class(AddPageUI,'laya.editor.ui.page.AddPageUI',_super);
		var __proto=AddPageUI.prototype;
		__proto.createChildren=function(){
			laya.ui.Component.prototype.createChildren.call(this);
			this.createView(AddPageUI.uiView);
		}

		__static(AddPageUI,
		['uiView',function(){return this.uiView={"child":[{"type":"Label","props":{"y":"12","color":"#dddddd","text":"页面类型：","x":"10"}},{"type":"Label","props":{"y":"45","color":"#dddddd","text":"页面名称：","x":"10"}},{"type":"Label","props":{"y":"78","color":"#dddddd","text":"参考视图：","x":"10"}},{"type":"Label","props":{"y":"111","color":"#dddddd","text":"页面宽度：","x":"10"}},{"type":"Label","props":{"y":"144","color":"#dddddd","text":"页面高度：","x":"10"}},{"type":"Label","props":{"y":"177","color":"#dddddd","text":"参考背景：","x":"10"}},{"type":"ComboBox","props":{"x":"83","y":"8","labelColors":"#dddddd","labels":"View,Dialog","scrollBarSkin":"comp/vscroll.png","width":"160","skin":"comp/combobox.png","height":"23","var":"typeDrop","selectedIndex":"0","sizeGrid":"3,20,3,3"}},{"type":"TextInput","props":{"sizeGrid":"3,3,3,3","y":"42","var":"nameTxt","width":"160","skin":"comp/textinput.png","padding":"0,5,0,5","color":"#dddddd","x":"83"}},{"type":"TextInput","props":{"sizeGrid":"3,3,3,3","y":"75","var":"imgTxt","width":"120","skin":"comp/textinput.png","padding":"0,5,0,5","color":"#dddddd","x":"83"}},{"type":"TextInput","props":{"sizeGrid":"3,3,3,3","y":"108","var":"widthTxt","text":"600","width":"160","skin":"comp/textinput.png","padding":"0,5,0,5","color":"#dddddd","x":"83"}},{"type":"TextInput","props":{"sizeGrid":"3,3,3,3","y":"141","var":"heightTxt","text":"400","width":"160","skin":"comp/textinput.png","padding":"0,5,0,5","color":"#dddddd","x":"83"}},{"type":"ColorPicker","props":{"skin":"comp/color.png","y":"174","var":"bgColorPicker","selectedcolor":"#dddddd","x":"83"}},{"type":"Label","props":{"y":"77","color":"#dddddd","text":"(可选，参考背景)","x":"249"}},{"type":"Label","props":{"y":"176","color":"#dddddd","text":"(可选，设计面板的背景颜色)","x":"112"}},{"type":"Button","props":{"y":"75","labelColors":"#dddddd,#dddddd,#dddddd","width":"40","skin":"comp/btn.png","height":"22","var":"selectBtn","label":"选择","x":"203"}},{"type":"CheckBox","props":{"y":"112","labelColors":"#aaaaaa","label":"仅作为参考宽度","skin":"comp/checkbox.png","var":"widthCheck","x":"249"}},{"type":"CheckBox","props":{"y":"145","labelColors":"#aaaaaa","label":"仅作为参考高度","skin":"comp/checkbox.png","var":"heightCheck","x":"249"}}],"type":"Dialog","props":{"height":"250","scenecolor":"#dddddd","width":"400"}};}
		]);
		return AddPageUI;
	})(Dialog)


	//class laya.editor.ui.page.AddParticleUI extends laya.ui.Dialog
	var AddParticleUI=(function(_super){
		function AddParticleUI(){
			this.nameTxt=null;
			this.typeDrop=null;
			AddParticleUI.__super.call(this);
		}

		__class(AddParticleUI,'laya.editor.ui.page.AddParticleUI',_super);
		var __proto=AddParticleUI.prototype;
		__proto.createChildren=function(){
			laya.ui.Component.prototype.createChildren.call(this);
			this.createView(AddParticleUI.uiView);
		}

		__static(AddParticleUI,
		['uiView',function(){return this.uiView={"child":[{"type":"Label","props":{"y":"48","color":"#dddddd","text":"粒子名称：","x":"10"}},{"type":"TextInput","props":{"x":"83","y":"47","var":"nameTxt","width":"160","skin":"comp/textinput.png","padding":"0,5,0,5","color":"#dddddd","sizeGrid":"3,3,3,3"}},{"type":"Label","props":{"y":"10","color":"#dddddd","text":"页面类型：","x":"10"}},{"type":"ComboBox","props":{"x":"83","y":"9","labelColors":"#dddddd","labels":"重力模式,半径模式","scrollBarSkin":"comp/vscroll.png","width":"160","skin":"comp/combobox.png","height":"23","var":"typeDrop","selectedIndex":"0","sizeGrid":"3,20,3,3"}}],"type":"Dialog","props":{"height":"200","scenecolor":"#dddddd","width":"400"}};}
		]);
		return AddParticleUI;
	})(Dialog)


	//class laya.editor.ui.page.AddSceneUI extends laya.ui.Dialog
	var AddSceneUI=(function(_super){
		function AddSceneUI(){
			this.nameTxt=null;
			this.imgTxt=null;
			this.widthTxt=null;
			this.heightTxt=null;
			this.bgColorPicker=null;
			this.selectBtn=null;
			this.widthCheck=null;
			this.heightCheck=null;
			AddSceneUI.__super.call(this);
		}

		__class(AddSceneUI,'laya.editor.ui.page.AddSceneUI',_super);
		var __proto=AddSceneUI.prototype;
		__proto.createChildren=function(){
			laya.ui.Component.prototype.createChildren.call(this);
			this.createView(AddSceneUI.uiView);
		}

		__static(AddSceneUI,
		['uiView',function(){return this.uiView={"child":[{"type":"Label","props":{"y":"12","color":"#dddddd","text":"场景名称：","x":"10"}},{"type":"Label","props":{"y":"45","color":"#dddddd","text":"参考视图：","x":"10"}},{"type":"Label","props":{"y":"78","color":"#dddddd","text":"场景宽度：","x":"10"}},{"type":"Label","props":{"y":"111","color":"#dddddd","text":"场景高度：","x":"10"}},{"type":"Label","props":{"y":"144","color":"#dddddd","text":"参考背景：","x":"10"}},{"type":"TextInput","props":{"x":"83","y":"10","var":"nameTxt","width":"160","skin":"comp/textinput.png","padding":"0,5,0,5","color":"#dddddd","sizeGrid":"3,3,3,3"}},{"type":"TextInput","props":{"sizeGrid":"3,3,3,3","y":"43","var":"imgTxt","width":"120","skin":"comp/textinput.png","padding":"0,5,0,5","color":"#dddddd","x":"83"}},{"type":"TextInput","props":{"sizeGrid":"3,3,3,3","y":"76","var":"widthTxt","text":"600","width":"160","skin":"comp/textinput.png","padding":"0,5,0,5","color":"#dddddd","x":"83"}},{"type":"TextInput","props":{"sizeGrid":"3,3,3,3","y":"109","var":"heightTxt","text":"400","width":"160","skin":"comp/textinput.png","padding":"0,5,0,5","color":"#dddddd","x":"83"}},{"type":"ColorPicker","props":{"skin":"comp/color.png","y":"142","var":"bgColorPicker","selectedcolor":"#dddddd","x":"83"}},{"type":"Label","props":{"y":"44","color":"#dddddd","text":"(可选，参考背景)","x":"248"}},{"type":"Label","props":{"y":"142","color":"#dddddd","text":"(可选，设计面板的背景颜色)","x":"112"}},{"type":"Button","props":{"y":"43","labelColors":"#dddddd,#dddddd,#dddddd","width":"40","skin":"comp/btn.png","height":"22","var":"selectBtn","label":"选择","x":"202"}},{"type":"CheckBox","props":{"y":"80","labelColors":"#aaaaaa","label":"仅作为参考宽度","skin":"comp/checkbox.png","var":"widthCheck","x":"248"}},{"type":"CheckBox","props":{"y":"113","labelColors":"#aaaaaa","label":"仅作为参考高度","skin":"comp/checkbox.png","var":"heightCheck","x":"248"}}],"type":"Dialog","props":{"scenecolor":"#dddddd"}};}
		]);
		return AddSceneUI;
	})(Dialog)


	//class laya.editor.ui.page.MovePageUI extends laya.ui.Dialog
	var MovePageUI=(function(_super){
		function MovePageUI(){
			this.msgLbl=null;
			this.updateCheck=null;
			MovePageUI.__super.call(this);
		}

		__class(MovePageUI,'laya.editor.ui.page.MovePageUI',_super);
		var __proto=MovePageUI.prototype;
		__proto.createChildren=function(){
			laya.ui.Component.prototype.createChildren.call(this);
			this.createView(MovePageUI.uiView);
		}

		__static(MovePageUI,
		['uiView',function(){return this.uiView={"child":[{"type":"Image","props":{"x":"0","y":"0","width":"440","skin":"view/bg_dialog.png","height":"200","sizeGrid":"50,15,15,15"}},{"type":"Button","props":{"skin":"view/btn_close.png","y":"16","name":"close","x":"407"}},{"type":"Image","props":{"y":"8","width":"388","skin":"comp/blank.png","height":"32","name":"drag","x":"8"}},{"type":"Label","props":{"y":"18","color":"#dddddd","fontSize":"14","text":"移动页面","x":"28"}},{"type":"Label","props":{"y":"55","var":"msgLbl","wordWrap":"true","text":"确定移动页面吗？","width":"332","align":"center","height":"43","color":"#dddddd","multiline":"true","x":"54"}},{"type":"CheckBox","props":{"y":"107","labelColors":"#dddddd,#999999,#dddddd","label":"是否更新页面嵌套引用(不选择能提高性能)","skin":"comp/checkbox.png","var":"updateCheck","selected":"true","x":"99"}},{"type":"Button","props":{"sizeGrid":"4,0,4,0","name":"sure","labelColors":"#dddddd,#dddddd,#dddddd","width":"100","skin":"comp/button.png","height":"30","y":"138","label":"确定","x":"100"}},{"type":"Button","props":{"name":"cancel","labelColors":"#dddddd,#dddddd,#dddddd","width":"100","skin":"comp/btn.png","height":"30","y":"138","label":"取消","x":"240"}}],"type":"Dialog","props":{"height":"200","scenecolor":"#dddddd","width":"440"}};}
		]);
		return MovePageUI;
	})(Dialog)


	//class laya.editor.ui.page.NeedSaveUI extends laya.ui.Dialog
	var NeedSaveUI=(function(_super){
		function NeedSaveUI(){
			this.msgLbl=null;
			NeedSaveUI.__super.call(this);
		}

		__class(NeedSaveUI,'laya.editor.ui.page.NeedSaveUI',_super);
		var __proto=NeedSaveUI.prototype;
		__proto.createChildren=function(){
			laya.ui.Component.prototype.createChildren.call(this);
			this.createView(NeedSaveUI.uiView);
		}

		__static(NeedSaveUI,
		['uiView',function(){return this.uiView={"child":[{"type":"Image","props":{"x":"0","y":"0","width":"470","skin":"view/bg_dialog.png","height":"200","sizeGrid":"50,15,15,15"}},{"type":"Button","props":{"skin":"view/btn_close.png","y":"16","name":"close","x":"438"}},{"type":"Image","props":{"y":"8","width":"423","skin":"comp/blank.png","height":"32","name":"drag","x":"8"}},{"type":"Label","props":{"y":"18","color":"#dddddd","fontSize":"14","text":"提醒","x":"28"}},{"type":"Label","props":{"y":"73","var":"msgLbl","wordWrap":"true","text":"是否保存修改？","width":"383","align":"center","height":"21","color":"#dddddd","multiline":"true","x":"43.5"}},{"child":[{"type":"Button","props":{"name":"sure","labelColors":"#dddddd,#dddddd,#dddddd","width":"100","skin":"comp/button.png","height":"30","label":"保存","sizeGrid":"4,0,4,0"}},{"type":"Button","props":{"name":"cancel","labelColors":"#dddddd,#dddddd,#dddddd","width":"100","skin":"comp/btn.png","height":"30","label":"不保存","x":"130"}},{"type":"Button","props":{"name":"close","labelColors":"#dddddd,#dddddd,#dddddd","width":"100","skin":"comp/btn.png","height":"30","label":"取消关闭","x":"260"}}],"type":"Box","props":{"y":"123","x":"55"}}],"type":"Dialog","props":{"height":"200","scenecolor":"#dddddd","width":"470"}};}
		]);
		return NeedSaveUI;
	})(Dialog)


	//class laya.editor.ui.page.RenamePageUI extends laya.ui.Dialog
	var RenamePageUI=(function(_super){
		function RenamePageUI(){
			this.nameTxt=null;
			this.updateCheck=null;
			this.resLbl=null;
			RenamePageUI.__super.call(this);
		}

		__class(RenamePageUI,'laya.editor.ui.page.RenamePageUI',_super);
		var __proto=RenamePageUI.prototype;
		__proto.createChildren=function(){
			laya.ui.Component.prototype.createChildren.call(this);
			this.createView(RenamePageUI.uiView);
		}

		__static(RenamePageUI,
		['uiView',function(){return this.uiView={"child":[{"type":"Image","props":{"x":"0","y":"0","width":"450","skin":"view/bg_dialog.png","height":"220","sizeGrid":"50,15,15,15"}},{"type":"Button","props":{"skin":"view/btn_close.png","y":"17","name":"close","x":"415"}},{"type":"Image","props":{"y":"8","width":"394","skin":"comp/blank.png","height":"32","name":"drag","x":"8"}},{"type":"Label","props":{"y":"18","color":"#dddddd","fontSize":"14","text":"重命名页面","x":"28"}},{"type":"Label","props":{"y":"87","color":"#dddddd","text":"新名称：","x":"101"}},{"type":"TextInput","props":{"sizeGrid":"3,3,3,3","y":"86","var":"nameTxt","width":"150","skin":"comp/textinput.png","padding":"0,5,0,5","color":"#dddddd","x":"157"}},{"type":"CheckBox","props":{"y":"120","labelColors":"#dddddd,#999999,#dddddd","label":"是否更新页面嵌套引用(不选择能提高性能)","skin":"comp/checkbox.png","var":"updateCheck","selected":"true","x":"155"}},{"type":"Label","props":{"height":"20","y":"56","color":"#dddddd","text":"原名称：","x":"101"}},{"type":"Label","props":{"y":"56","var":"resLbl","text":"页面内容","width":"214","height":"20","color":"#cccc00","x":"157"}},{"type":"Button","props":{"sizeGrid":"4,0,4,0","name":"sure","labelColors":"#dddddd,#dddddd,#dddddd","width":"100","skin":"comp/button.png","height":"30","y":"156","label":"确定","x":"105"}},{"type":"Button","props":{"name":"cancel","labelColors":"#dddddd,#dddddd,#dddddd","width":"100","skin":"comp/btn.png","height":"30","y":"156","label":"取消","x":"245"}}],"type":"Dialog","props":{"height":"220","scenecolor":"#dddddd","width":"450"}};}
		]);
		return RenamePageUI;
	})(Dialog)


	//class laya.editor.ui.page.SetPagePropUI extends laya.ui.Dialog
	var SetPagePropUI=(function(_super){
		function SetPagePropUI(){
			this.nameLbl=null;
			this.propsTxt=null;
			SetPagePropUI.__super.call(this);
		}

		__class(SetPagePropUI,'laya.editor.ui.page.SetPagePropUI',_super);
		var __proto=SetPagePropUI.prototype;
		__proto.createChildren=function(){
			laya.ui.Component.prototype.createChildren.call(this);
			this.createView(SetPagePropUI.uiView);
		}

		__static(SetPagePropUI,
		['uiView',function(){return this.uiView={"child":[{"type":"Image","props":{"x":"0","y":"0","width":"450","skin":"view/bg_dialog.png","height":"360","sizeGrid":"50,15,15,15"}},{"type":"Button","props":{"skin":"view/btn_close.png","y":"17","name":"close","x":"413"}},{"type":"Image","props":{"y":"8","width":"389","skin":"comp/blank.png","height":"32","name":"drag","x":"8"}},{"type":"Label","props":{"y":"18","color":"#dddddd","fontSize":"14","text":"设置页面默认属性","x":"28"}},{"type":"Label","props":{"y":"58","color":"#dddddd","text":"页面名称：","x":"58"}},{"type":"Label","props":{"y":"89","color":"#dddddd","text":"默认属性：","x":"58"}},{"type":"Label","props":{"y":"120","wordWrap":"true","text":"示例(回车换行)\\ncolor=#00ff00\\nsize=14\\ntext=test","width":"100","isHtml":"true","height":"85","color":"#dddddd","multiline":"true","x":"26"}},{"type":"Button","props":{"y":"299","labelColors":"#dddddd,#dddddd,#dddddd","label":"确定","skin":"comp/btn.png","height":"30","name":"sure","width":"100","x":"126"}},{"type":"Label","props":{"y":"58","var":"nameLbl","text":"页面内容","width":"260","height":"20","color":"#cccc00","x":"126"}},{"type":"TextArea","props":{"scrollBarSkin":"png.comp.vscroll","vScrollBarSkin":"comp/vscroll.png","skin":"comp/textarea.png","color":"#dddddd","margin":"2,2,2,2","multiline":"true","x":"126","y":"87","wordWrap":"true","width":"220","height":"150","padding":"5,5,5,5","var":"propsTxt","sizeGrid":"3,3,3,3"}},{"type":"Label","props":{"y":"248","wordWrap":"true","text":"提示：页面嵌套时，会自动应用上面设置默认属性，此属性为全局属性","width":"269","height":"41","color":"#cc00","multiline":"true","x":"123"}}],"type":"Dialog","props":{"height":"360","scenecolor":"#dddddd","width":"450"}};}
		]);
		return SetPagePropUI;
	})(Dialog)


	//class laya.editor.ui.page.SetPageUI extends laya.ui.Dialog
	var SetPageUI=(function(_super){
		function SetPageUI(){
			this.title=null;
			this.widthCheck=null;
			this.heightCheck=null;
			this.typeDrop=null;
			this.nameTxt=null;
			this.imgTxt=null;
			this.widthTxt=null;
			this.heightTxt=null;
			this.bgColorPicker=null;
			this.sureBtn=null;
			this.selectBtn=null;
			SetPageUI.__super.call(this);
		}

		__class(SetPageUI,'laya.editor.ui.page.SetPageUI',_super);
		var __proto=SetPageUI.prototype;
		__proto.createChildren=function(){
			laya.ui.Component.prototype.createChildren.call(this);
			this.createView(SetPageUI.uiView);
		}

		__static(SetPageUI,
		['uiView',function(){return this.uiView={"child":[{"type":"Image","props":{"x":"0","y":"0","width":"470","skin":"view/bg_dialog.png","height":"330","sizeGrid":"50,15,15,15"}},{"type":"Button","props":{"skin":"view/btn_close.png","y":"16","name":"close","x":"439"}},{"type":"Image","props":{"y":"8","width":"423","skin":"comp/blank.png","height":"32","name":"drag","x":"8"}},{"type":"Label","props":{"y":"18","var":"title","text":"设置页面","color":"#dddddd","fontSize":"14","x":"28"}},{"type":"CheckBox","props":{"y":"159","labelColors":"#aaaaaa","label":"仅作为参考宽度","skin":"comp/checkbox.png","var":"widthCheck","x":"298"}},{"type":"CheckBox","props":{"y":"192","labelColors":"#aaaaaa","label":"仅作为参考高度","skin":"comp/checkbox.png","var":"heightCheck","x":"298"}},{"type":"Label","props":{"y":"57","color":"#dddddd","text":"页面类型：","x":"78"}},{"type":"Label","props":{"y":"90","color":"#dddddd","text":"页面名称：","x":"78"}},{"type":"Label","props":{"y":"123","color":"#dddddd","text":"参考视图：","x":"78"}},{"type":"Label","props":{"y":"156","color":"#dddddd","text":"页面宽度：","x":"78"}},{"type":"Label","props":{"y":"189","color":"#dddddd","text":"页面高度：","x":"78"}},{"type":"Label","props":{"y":"222","color":"#dddddd","text":"参考背景：","x":"78"}},{"type":"ComboBox","props":{"x":"151","y":"55","labelColors":"#dddddd","labels":"View,Dialog","scrollBarSkin":"comp/vscroll.png","width":"140","skin":"comp/combobox.png","height":"23","var":"typeDrop","selectedIndex":"0","sizeGrid":"3,20,3,3"}},{"type":"TextInput","props":{"sizeGrid":"3,3,3,3","y":"89","var":"nameTxt","disabled":"true","width":"140","skin":"comp/textinput.png","padding":"0,5,0,5","color":"#dddddd","x":"151"}},{"type":"TextInput","props":{"sizeGrid":"3,3,3,3","y":"122","var":"imgTxt","width":"108","skin":"comp/textinput.png","height":"22","padding":"0,5,0,5","color":"#dddddd","x":"151"}},{"type":"TextInput","props":{"sizeGrid":"3,3,3,3","y":"155","var":"widthTxt","text":"600","width":"140","skin":"comp/textinput.png","padding":"0,5,0,5","color":"#dddddd","x":"151"}},{"type":"TextInput","props":{"sizeGrid":"3,3,3,3","y":"188","var":"heightTxt","text":"400","width":"140","skin":"comp/textinput.png","padding":"0,5,0,5","color":"#dddddd","x":"151"}},{"type":"ColorPicker","props":{"skin":"comp/color.png","y":"221","var":"bgColorPicker","selectedcolor":"#dddddd","x":"151"}},{"type":"Button","props":{"y":"271","labelColors":"#dddddd,#dddddd,#dddddd","label":"修改","skin":"comp/btn.png","height":"30","name":"sure","var":"sureBtn","width":"100","x":"175"}},{"type":"Label","props":{"y":"123","color":"#dddddd","text":"(可选，参考背景)","x":"306"}},{"type":"Label","props":{"y":"221","color":"#dddddd","text":"(可选，设计面板的背景颜色)","x":"180"}},{"type":"Button","props":{"skin":"comp/referback.png","y":"123","labelColors":"#dddddd,#dddddd,#dddddd","var":"selectBtn","x":"266"}}],"type":"Dialog","props":{"height":"330","scenecolor":"#dddddd","width":"470"}};}
		]);
		return SetPageUI;
	})(Dialog)


	//class laya.editor.ui.res.MoveResUI extends laya.ui.Dialog
	var MoveResUI=(function(_super){
		function MoveResUI(){
			this.msgLbl=null;
			this.updateCheck=null;
			MoveResUI.__super.call(this);
		}

		__class(MoveResUI,'laya.editor.ui.res.MoveResUI',_super);
		var __proto=MoveResUI.prototype;
		__proto.createChildren=function(){
			laya.ui.Component.prototype.createChildren.call(this);
			this.createView(MoveResUI.uiView);
		}

		__static(MoveResUI,
		['uiView',function(){return this.uiView={"child":[{"type":"Image","props":{"x":"0","y":"0","width":"450","skin":"view/bg_dialog.png","height":"200","sizeGrid":"50,15,15,15"}},{"type":"Button","props":{"skin":"view/btn_close.png","y":"17","name":"close","x":"416"}},{"type":"Image","props":{"y":"8","width":"396","skin":"comp/blank.png","height":"32","name":"drag","x":"8"}},{"type":"Label","props":{"y":"18","color":"#dddddd","fontSize":"14","text":"移动资源","x":"28"}},{"type":"Label","props":{"y":"55","var":"msgLbl","wordWrap":"true","text":"确定移动资源吗？","width":"350","align":"center","height":"43","color":"#dddddd","multiline":"true","x":"50"}},{"type":"CheckBox","props":{"y":"100","labelColors":"#dddddd,#999999,#dddddd","label":"是否更新页面引用(不选择能提高性能)","skin":"comp/checkbox.png","var":"updateCheck","selected":"true","x":"116"}},{"type":"Button","props":{"sizeGrid":"4,0,4,0","name":"sure","labelColors":"#dddddd,#dddddd,#dddddd","width":"100","skin":"comp/button.png","height":"30","y":"140","label":"确定","x":"100"}},{"type":"Button","props":{"name":"cancel","labelColors":"#dddddd,#dddddd,#dddddd","width":"100","skin":"comp/btn.png","height":"30","y":"140","label":"取消","x":"250"}}],"type":"Dialog","props":{"height":"200","scenecolor":"#dddddd","width":"450"}};}
		]);
		return MoveResUI;
	})(Dialog)


	//class laya.editor.ui.res.RenameResUI extends laya.ui.Dialog
	var RenameResUI=(function(_super){
		function RenameResUI(){
			this.nameTxt=null;
			this.updateCheck=null;
			this.resLbl=null;
			RenameResUI.__super.call(this);
		}

		__class(RenameResUI,'laya.editor.ui.res.RenameResUI',_super);
		var __proto=RenameResUI.prototype;
		__proto.createChildren=function(){
			laya.ui.Component.prototype.createChildren.call(this);
			this.createView(RenameResUI.uiView);
		}

		__static(RenameResUI,
		['uiView',function(){return this.uiView={"child":[{"type":"Image","props":{"x":"0","y":"0","width":"450","skin":"view/bg_dialog.png","height":"220","sizeGrid":"50,15,15,15"}},{"type":"Button","props":{"skin":"view/btn_close.png","y":"17","name":"close","x":"416"}},{"type":"Image","props":{"y":"8","width":"396","skin":"comp/blank.png","height":"32","name":"drag","x":"8"}},{"type":"Label","props":{"y":"18","color":"#dddddd","fontSize":"14","text":"重命名资源","x":"28"}},{"type":"Label","props":{"y":"94","color":"#dddddd","text":"新名称：","x":"94"}},{"type":"TextInput","props":{"sizeGrid":"3,3,3,3","y":"93","var":"nameTxt","width":"150","skin":"comp/textinput.png","padding":"0,5,0,5","color":"#dddddd","x":"150"}},{"type":"CheckBox","props":{"y":"129","labelColors":"#dddddd,#999999,#dddddd","label":"是否更新页面引用(不选择能提高性能)","skin":"comp/checkbox.png","var":"updateCheck","selected":"true","x":"151"}},{"type":"Label","props":{"height":"20","y":"63","color":"#dddddd","text":"原名称：","x":"94"}},{"type":"Label","props":{"y":"63","var":"resLbl","text":"资源内容","width":"214","height":"20","color":"#cccc00","x":"150"}},{"type":"Button","props":{"sizeGrid":"4,0,4,0","name":"sure","labelColors":"#dddddd,#dddddd,#dddddd","width":"100","skin":"comp/button.png","height":"30","y":"158","label":"确定","x":"100"}},{"type":"Button","props":{"name":"cancel","labelColors":"#dddddd,#dddddd,#dddddd","width":"100","skin":"comp/btn.png","height":"30","y":"158","label":"取消","x":"250"}}],"type":"Dialog","props":{"scenecolor":"#dddddd"}};}
		]);
		return RenameResUI;
	})(Dialog)


	//class laya.editor.ui.res.SetResPropUI extends laya.ui.Dialog
	var SetResPropUI=(function(_super){
		function SetResPropUI(){
			this.nameLbl=null;
			this.propsTxt=null;
			this.typeDrop=null;
			SetResPropUI.__super.call(this);
		}

		__class(SetResPropUI,'laya.editor.ui.res.SetResPropUI',_super);
		var __proto=SetResPropUI.prototype;
		__proto.createChildren=function(){
			laya.ui.Component.prototype.createChildren.call(this);
			this.createView(SetResPropUI.uiView);
		}

		__static(SetResPropUI,
		['uiView',function(){return this.uiView={"child":[{"type":"Image","props":{"x":"0","y":"0","width":"520","skin":"view/bg_dialog.png","height":"410","sizeGrid":"50,15,15,15"}},{"type":"Button","props":{"skin":"view/btn_close.png","y":"16","name":"close","x":"488"}},{"type":"Image","props":{"y":"8","width":"470","skin":"comp/blank.png","height":"32","name":"drag","x":"8"}},{"type":"Label","props":{"y":"18","color":"#dddddd","fontSize":"14","text":"资源属性设置","x":"28"}},{"type":"Label","props":{"y":"60","color":"#dddddd","text":"资源名称：","x":"94"}},{"type":"Label","props":{"y":"134","color":"#dddddd","text":"默认全局属性：","x":"69"}},{"type":"Label","props":{"y":"166","wordWrap":"true","text":"示例(回车换行)\\ncolor=#00ff00\\nsize=14\\ntext=test","width":"100","height":"115","color":"#dddddd","multiline":"true","x":"62"}},{"type":"Button","props":{"y":"343","labelColors":"#dddddd,#dddddd,#dddddd","label":"确定","skin":"comp/btn.png","height":"30","name":"sure","width":"100","x":"162"}},{"type":"Label","props":{"y":"60","var":"nameLbl","text":"页面内容","width":"260","height":"20","color":"#cccc00","x":"162"}},{"type":"TextArea","props":{"scrollBarSkin":"png.comp.vscroll","vScrollBarSkin":"comp/vscroll.png","skin":"comp/textarea.png","color":"#dddddd","margin":"2,2,2,2","x":"162","y":"133","width":"250","height":"150","padding":"5,5,5,5","var":"propsTxt","sizeGrid":"3,3,3,3"}},{"type":"Label","props":{"y":"93","color":"#dddddd","text":"组件类型：","x":"94"}},{"type":"ComboBox","props":{"x":"162","y":"92","labels":"Button,CheckBox,Clip,ComboBox,HScrollBar,HSlider,Image,Label,LinkButton,List,ProgressBar,Radio,RadioGroup,Tab,TextArea,TextInput,VScrollBar,VSlider,Tree","width":"150","skin":"comp/combobox.png","var":"typeDrop","scrollBarSkin":"comp/vscroll.png","sizeGrid":"3,20,3,3"}},{"type":"Label","props":{"y":"292","wordWrap":"true","text":"提示：使用组件时，会自动应用上面设置默认属性。此属性为全局属性，","width":"312","height":"38","color":"#00cc00","x":"160"}}],"type":"Dialog","props":{"height":"410","scenecolor":"#dddddd","width":"520"}};}
		]);
		return SetResPropUI;
	})(Dialog)


	//class laya.editor.ui.template.AddTemplateUI extends laya.ui.Dialog
	var AddTemplateUI=(function(_super){
		function AddTemplateUI(){
			this.title=null;
			this.typeDrop=null;
			this.nameTxt=null;
			this.sureBtn=null;
			AddTemplateUI.__super.call(this);
		}

		__class(AddTemplateUI,'laya.editor.ui.template.AddTemplateUI',_super);
		var __proto=AddTemplateUI.prototype;
		__proto.createChildren=function(){
			laya.ui.Component.prototype.createChildren.call(this);
			this.createView(AddTemplateUI.uiView);
		}

		__static(AddTemplateUI,
		['uiView',function(){return this.uiView={"child":[{"type":"Image","props":{"x":"0","y":"0","width":"470","skin":"view/bg_dialog.png","height":"220","sizeGrid":"50,15,15,15"}},{"type":"Button","props":{"skin":"view/btn_close.png","y":"17","name":"close","x":"440"}},{"type":"Image","props":{"y":"8","width":"423","skin":"comp/blank.png","height":"32","name":"drag","x":"8"}},{"type":"Label","props":{"y":"18","var":"title","text":"转换成模板","width":"119","height":"18","color":"#dddddd","fontSize":"14","x":"28"}},{"type":"Label","props":{"y":"74","color":"#dddddd","text":"目录：","x":"142"}},{"type":"Label","props":{"y":"108","color":"#dddddd","text":"页面名称：","x":"118"}},{"type":"ComboBox","props":{"x":"191","y":"72","labelColors":"#dddddd","labels":"自定义模板,常用模板","scrollBarSkin":"comp/vscroll.png","width":"140","skin":"comp/combobox.png","height":"23","var":"typeDrop","selectedIndex":"0","sizeGrid":"3,20,3,3"}},{"type":"TextInput","props":{"sizeGrid":"3,3,3,3","y":"107","var":"nameTxt","width":"140","skin":"comp/textinput.png","padding":"0,5,0,5","color":"#dddddd","x":"191"}},{"type":"Button","props":{"y":"159","labelColors":"#dddddd,#dddddd,#dddddd","label":"新增","skin":"comp/btn.png","height":"30","name":"sure","var":"sureBtn","width":"100","x":"190"}}],"type":"Dialog","props":{"height":"220","scenecolor":"#dddddd","width":"470"}};}
		]);
		return AddTemplateUI;
	})(Dialog)


	//class laya.editor.ui.DisplayTreePanelUI extends laya.ide.ui.DragView
	var DisplayTreePanelUI=(function(_super){
		function DisplayTreePanelUI(){
			this.opBox=null;
			this.fliterTxt=null;
			this.displayTree=null;
			DisplayTreePanelUI.__super.call(this);
		}

		__class(DisplayTreePanelUI,'laya.editor.ui.DisplayTreePanelUI',_super);
		var __proto=DisplayTreePanelUI.prototype;
		__proto.createChildren=function(){
			laya.ui.Component.prototype.createChildren.call(this);
			this.createView(DisplayTreePanelUI.uiView);
		}

		__static(DisplayTreePanelUI,
		['uiView',function(){return this.uiView={"child":[{"type":"Image","props":{"x":"10","y":"10","right":"0","width":"200","skin":"view/bg_body.png","left":"0","height":"300","top":"0","bottom":"0","sizeGrid":"4,4,4,4"}},{"child":[{"type":"Image","props":{"sizeGrid":"3,3,3,3","right":"0","width":"191","skin":"view/bg_panel_bar.png","height":"28","top":"0","bottom":"0","left":"0"}},{"type":"TextInput","props":{"skin":"comp/textinput.png","color":"#dddddd","x":"80","y":"7","toolTip":"输入关键词过滤","width":"148","left":"80","height":"20","padding":"0,0,0,18","var":"fliterTxt","right":"5","sizeGrid":"3,3,3,3"}},{"type":"Button","props":{"y":"5.5","toolTip":"刷新页面列表","skin":"view/refresh2.png","name":"refreshBtn","stateNum":"3","x":"3"}},{"type":"Clip","props":{"y":"10.5","clipY":"2","toolTip":"全部隐藏","skin":"view/clip_hide.png","name":"ifShowAll","x":"31"}},{"type":"Clip","props":{"y":"6.5","clipY":"2","toolTip":"全部锁定","skin":"view/clip_lock.png","name":"ifLockAll","x":"57"}},{"type":"Clip","props":{"skin":"view/search.png","y":"7","clipY":"2","index":"1","x":"82"}}],"type":"Box","props":{"y":"291","right":"0","left":"0","height":"30","var":"opBox","bottom":"0","x":"25"}},{"child":[{"child":[{"type":"Clip","props":{"x":"12","y":"0","clipY":"2","width":"184","skin":"comp/clip_selectBox.png","height":"26","name":"selectBox","right":"0","left":"9"}},{"type":"Label","props":{"padding":"4,0,0,0","y":"3","text":"label","width":"108","left":"38","height":"18","name":"label","color":"#d8d8d8","right":"50","x":"38"}},{"type":"Clip","props":{"x":"0","y":"6","clipY":"2","name":"arrow","skin":"comp/clip_tree.png"}},{"type":"Clip","props":{"y":"7","clipY":"2","skin":"view/clip_hide.png","mouseEnabled":"true","name":"ifShow","clipX":"1","right":"38","x":"143"}},{"type":"Clip","props":{"y":"2","clipY":"2","skin":"view/clip_lock.png","mouseEnabled":"true","name":"ifLock","clipX":"1","right":"15","x":"160"}},{"type":"Image","props":{"skin":"comp/folder.png","y":"5","name":"icon","x":"14"}}],"type":"Box","props":{"name":"render","right":"0","left":"0"}}],"type":"TreeEx","props":{"y":"45","scrollBarSkin":"comp/vscroll.png","bottom":"30","left":"2","top":"10","var":"displayTree","right":"2","x":"15"}}],"type":"DragView","props":{"height":"400","title":"层级","scenecolor":"#dddddd","width":"200"}};}
		]);
		return DisplayTreePanelUI;
	})(DragView)


	//class laya.editor.ui.PagePanelUI extends laya.ide.ui.DragView
	var PagePanelUI=(function(_super){
		function PagePanelUI(){
			this.pageTree=null;
			this.opBox=null;
			this.fliterTxt=null;
			PagePanelUI.__super.call(this);
		}

		__class(PagePanelUI,'laya.editor.ui.PagePanelUI',_super);
		var __proto=PagePanelUI.prototype;
		__proto.createChildren=function(){
			laya.ui.Component.prototype.createChildren.call(this);
			this.createView(PagePanelUI.uiView);
		}

		__static(PagePanelUI,
		['uiView',function(){return this.uiView={"child":[{"type":"Image","props":{"sizeGrid":"4,4,4,4","y":"0","right":"0","width":"200","skin":"view/bg_body.png","left":"0","height":"300","top":"0","bottom":"0","x":"0"}},{"child":[{"child":[{"type":"Clip","props":{"x":"13","y":"0","clipY":"2","skin":"comp/clip_selectBox.png","height":"24","name":"selectBox","right":"0","left":"9"}},{"type":"Image","props":{"skin":"comp/folder.png","name":"icon","y":"3","x":"15"}},{"type":"Label","props":{"padding":"4,0,0,0","y":"1","text":"label","width":"150","left":"38","height":"22","name":"label","color":"#d8d8d8","right":"0","x":"33"}},{"type":"Clip","props":{"x":"0","y":"5","clipY":"2","name":"arrow","skin":"comp/clip_tree.png"}}],"type":"Box","props":{"name":"render","right":"0","left":"0"}}],"type":"Tree","props":{"y":"22","scrollBarSkin":"comp/vscroll.png","bottom":"29","width":"190","left":"2","height":"260","top":"5","var":"pageTree","right":"2","x":"306"}},{"child":[{"type":"Image","props":{"sizeGrid":"3,3,3,3","right":"0","width":"191","skin":"view/bg_panel_bar.png","height":"28","top":"0","bottom":"0","left":"0"}},{"type":"TextInput","props":{"skin":"comp/textinput.png","color":"#dddddd","x":"80","y":"7","toolTip":"输入关键词过滤","width":"148","left":"80","height":"20","padding":"0,0,0,18","var":"fliterTxt","right":"5","sizeGrid":"5,5,5,5"}},{"type":"Button","props":{"y":"6","toolTip":"打开所在目录","width":"21","skin":"view/login2.png","height":"21","name":"openDirBtn","stateNum":"3","x":"3"}},{"type":"Button","props":{"y":"6","toolTip":"设置默认属性","skin":"view/settings2.png","name":"setPropBtn","stateNum":"3","x":"29"}},{"type":"Button","props":{"y":"7","toolTip":"刷新页面列表","skin":"view/refresh2.png","name":"refreshBtn","stateNum":"3","x":"55"}},{"type":"Clip","props":{"skin":"view/search.png","y":"7","clipY":"2","index":"1","x":"79"}}],"type":"Box","props":{"y":"281","right":"0","left":"0","height":"30","var":"opBox","bottom":"0","x":"15"}}],"type":"DragView","props":{"height":"300","title":"项目","scenecolor":"#dddddd","width":"200"}};}
		]);
		return PagePanelUI;
	})(DragView)


	//class laya.editor.ui.PropPanelUI extends laya.ide.ui.DragView
	var PropPanelUI=(function(_super){
		function PropPanelUI(){
			this.typeIcon=null;
			this.typeLbl=null;
			PropPanelUI.__super.call(this);
		}

		__class(PropPanelUI,'laya.editor.ui.PropPanelUI',_super);
		var __proto=PropPanelUI.prototype;
		__proto.createChildren=function(){
			laya.ui.Component.prototype.createChildren.call(this);
			this.createView(PropPanelUI.uiView);
		}

		__static(PropPanelUI,
		['uiView',function(){return this.uiView={"child":[{"type":"Image","props":{"x":"0","y":"0","bottom":"0","width":"200","skin":"view/bg_body.png","left":"0","height":"300","top":"0","right":"0","sizeGrid":"4,4,4,4"}},{"type":"Image","props":{"skin":"comp/image.png","y":"10","var":"typeIcon","x":"7"}},{"type":"Label","props":{"y":"10","var":"typeLbl","text":"label","color":"#ffff00","fontSize":"14","bold":"true","x":"34"}}],"type":"DragView","props":{"minWidth":"200","title":"属性","scenecolor":"#dddddd","mouseEnabled":"true"}};}
		]);
		return PropPanelUI;
	})(DragView)


	//class laya.editor.ui.ResPanelUI extends laya.ide.ui.DragView
	var ResPanelUI=(function(_super){
		function ResPanelUI(){
			this.resTree=null;
			this.resViewer=null;
			this.opBox=null;
			this.fliterTxt=null;
			ResPanelUI.__super.call(this);
		}

		__class(ResPanelUI,'laya.editor.ui.ResPanelUI',_super);
		var __proto=ResPanelUI.prototype;
		__proto.createChildren=function(){
			laya.ui.Component.prototype.createChildren.call(this);
			this.createView(ResPanelUI.uiView);
		}

		__static(ResPanelUI,
		['uiView',function(){return this.uiView={"child":[{"type":"Image","props":{"x":"415","y":"48","right":"0","width":"200","skin":"view/bg_body.png","left":"0","height":"300","top":"0","bottom":"0","sizeGrid":"4,4,4,4"}},{"child":[{"child":[{"type":"Clip","props":{"x":"13","y":"0","clipY":"2","skin":"comp/clip_selectBox.png","height":"25","name":"selectBox","right":"0","left":"9"}},{"type":"Image","props":{"skin":"comp/folder.png","name":"icon","y":"4","x":"14"}},{"type":"Label","props":{"padding":"4,0,0,0","y":"2","text":"label","width":"150","left":"38","height":"22","name":"label","color":"#d8d8d8","right":"0","x":"33"}},{"type":"Clip","props":{"x":"0","y":"6","clipY":"2","name":"arrow","skin":"comp/clip_tree.png"}}],"type":"Box","props":{"name":"render","right":"0","left":"0"}}],"type":"Tree","props":{"y":"552","scrollBarSkin":"comp/vscroll.png","bottom":"29","width":"196","left":"2","height":"136","top":"112","var":"resTree","right":"2","x":"173"}},{"type":"Image","props":{"x":"222","y":"3","width":"198","left":"1","height":"100","var":"resViewer","right":"1","sizeGrid":"3,3,3,3"}},{"type":"Image","props":{"skin":"comp/line.png","y":"106","left":"2","right":"2","x":"2"}},{"child":[{"type":"Image","props":{"sizeGrid":"3,3,3,3","right":"0","width":"191","skin":"view/bg_panel_bar.png","height":"28","top":"0","bottom":"0","left":"0"}},{"type":"TextInput","props":{"skin":"comp/textinput.png","color":"#dddddd","x":"80","y":"7","toolTip":"输入关键词过滤","width":"148","left":"80","height":"20","padding":"0,0,0,18","var":"fliterTxt","right":"5","sizeGrid":"3,3,3,3"}},{"type":"Button","props":{"y":"6","toolTip":"打开所在目录","skin":"view/login2.png","name":"openDirBtn","stateNum":"3","x":"3"}},{"type":"Button","props":{"y":"6","toolTip":"设置默认属性","skin":"view/settings2.png","name":"setPropBtn","stateNum":"3","x":"29"}},{"type":"Button","props":{"y":"7","toolTip":"刷新资源树","skin":"view/refresh2.png","name":"refreshBtn","stateNum":"3","x":"55"}},{"type":"Clip","props":{"skin":"view/search.png","y":"7","clipY":"2","index":"1","x":"79"}}],"type":"Box","props":{"y":"271","right":"0","width":"198","left":"0","height":"30","var":"opBox","bottom":"0","x":"1"}}],"type":"DragView","props":{"height":"300","title":"资源","scenecolor":"#dddddd","width":"200"}};}
		]);
		return ResPanelUI;
	})(DragView)


	//class laya.editor.ui.template.CompPanelUI extends laya.ide.ui.DragView
	var CompPanelUI=(function(_super){
		function CompPanelUI(){
			this.bg=null;
			this.groupBox=null;
			CompPanelUI.__super.call(this);
		}

		__class(CompPanelUI,'laya.editor.ui.template.CompPanelUI',_super);
		var __proto=CompPanelUI.prototype;
		__proto.createChildren=function(){
			laya.ui.Component.prototype.createChildren.call(this);
			this.createView(CompPanelUI.uiView);
		}

		__static(CompPanelUI,
		['uiView',function(){return this.uiView={"child":[{"type":"Image","props":{"x":"20","y":"20","top":"0","skin":"view/bg_body.png","height":"31","sizeGrid":"4,4,4,4","var":"bg","right":"0","bottom":"0","left":"0"}},{"child":[{"type":"Button","props":{"sizeGrid":"4,0,4,0","labelColors":"#dddddd,#dddddd,#dddddd","label":"label","skin":"comp/button.png"}}],"type":"Box","props":{"x":"0","y":"0","bottom":"2","left":"0","top":"2","var":"groupBox","right":"0","mouseEnabled":"true"}}],"type":"DragView","props":{"height":"400","title":"模板","scenecolor":"#dddddd","width":"600"}};}
		]);
		return CompPanelUI;
	})(DragView)


	//class laya.editor.ui.TimeLinePanelUI extends laya.ide.ui.DragView
	var TimeLinePanelUI=(function(_super){
		function TimeLinePanelUI(){
			this.timeLine=null;
			this.mHScroll=null;
			this.mVScroll=null;
			TimeLinePanelUI.__super.call(this);
		}

		__class(TimeLinePanelUI,'laya.editor.ui.TimeLinePanelUI',_super);
		var __proto=TimeLinePanelUI.prototype;
		__proto.createChildren=function(){
			View.viewClassMap["laya.editor.view.timeline.PlayControl"]=PlayControl;
			View.viewClassMap["laya.editor.view.timeline.TimeGrid"]=TimeGrid;
			laya.ui.Component.prototype.createChildren.call(this);
			this.createView(TimeLinePanelUI.uiView);
		}

		__static(TimeLinePanelUI,
		['uiView',function(){return this.uiView={"child":[{"type":"Image","props":{"x":"0","y":"0","right":"0","width":"200","skin":"view/bg_panel.png","left":"0","height":"300","top":"0","bottom":"0","sizeGrid":"50,15,15,15"}},{"type":"TimeGrid","props":{"runtime":"laya.editor.view.timeline.TimeGrid","y":"0","var":"timeLine","x":"203"}},{"type":"HScrollBar","props":{"y":"284","right":"5","width":"266","skin":"comp/hscroll.png","height":"13","var":"mHScroll","bottom":"5","x":"325"}},{"type":"VScrollBar","props":{"y":"15","right":"2","width":"13","skin":"comp/vscroll.png","height":"264","top":"0","var":"mVScroll","bottom":"20","x":"582"}},{"type":"PlayControl","props":{"runtime":"laya.editor.view.timeline.PlayControl","name":"playControl","bottom":"2","y":"277","right":"280","x":"221"}}],"type":"DragView","props":{"title":"时间轴","bottom":"0","width":"600","left":"0","height":"300","minWidth":"400","right":"0","scenecolor":"#dddddd"}};}
		]);
		return TimeLinePanelUI;
	})(DragView)


	//class laya.editor.ui.UIPanelUI extends laya.ide.ui.DragView
	var UIPanelUI=(function(_super){
		function UIPanelUI(){
			this.tab=null;
			UIPanelUI.__super.call(this);
		}

		__class(UIPanelUI,'laya.editor.ui.UIPanelUI',_super);
		var __proto=UIPanelUI.prototype;
		__proto.createChildren=function(){
			laya.ui.Component.prototype.createChildren.call(this);
			this.createView(UIPanelUI.uiView);
		}

		__static(UIPanelUI,
		['uiView',function(){return this.uiView={"child":[{"type":"Image","props":{"x":"472","sizeGrid":"4,4,4,4","y":"-72","bottom":"0","skin":"view/bg_body2.png","top":"0","right":"0","left":"0"}},{"type":"Image","props":{"sizeGrid":"3,3,3,3","y":"0","width":"164","skin":"view/bg_panel_layoutrec.png","height":"25","x":"0","right":"0","left":"0"}},{"type":"Tab","props":{"skin":"comp/tab.png","y":"0","var":"tab","labelColors":"#aaaaaa,#aaaaaa,#aaaaaa","x":"0"}}],"type":"DragView","props":{"title":"UI","scenecolor":"#dddddd"}};}
		]);
		return UIPanelUI;
	})(DragView)


	/**
	*...
	*@author ww
	*/
	//class laya.editor.view.group.ItemGroup extends laya.editor.ui.group.ItemGroupUI
	var ItemGroup=(function(_super){
		function ItemGroup(){
			this._itemBox=null;
			ItemGroup.__super.call(this);
			this.groupBox.removeChildren();
			this.groubBar.on("mousedown",this,this.onGroubBarClick);
			this.left=0;
			this.right=0;
			this.groupBox.left=0;
			this.groupBox.right=0;
		}

		__class(ItemGroup,'laya.editor.view.group.ItemGroup',_super);
		var __proto=ItemGroup.prototype;
		__proto.setData=function(name,itemBox){
			this._itemBox=itemBox;
			this.groupLabl.text=name;
			this.arrowClip.index=1;
			this.groupBox.removeChildren();
			this.groupBox.addChild(itemBox);
		}

		//
		__proto.onGroubBarClick=function(e){
			if (this.groupBox.parent){
				this.groupBox.removeSelf();
				this.arrowClip.index=0;
				}else {
				this.addChild(this.groupBox);
				this.arrowClip.index=1;
			}
			this.event("UIChange");
		}

		return ItemGroup;
	})(ItemGroupUI)


	/**
	*布局框
	*@author ww
	*/
	//class laya.editor.view.LayoutRec extends laya.editor.ui.LayoutRecUI
	var LayoutRec=(function(_super){
		function LayoutRec(){
			this.disList=null;
			this._dragBox=null;
			this._backHeight=NaN;
			this.preWidth=0;
			this.preHeight=0;
			this._curUI=null;
			this.tTabTxt=null;
			this.relativeO={};
			this._disMode=2;
			LayoutRec.__super.call(this);
			this.tab.on("change",this,this.onTabChange);
			this.back.on("mousedown",this,this.onBackDown);
			this.back.on("doubleclick",this,this.onBackDoubleDown);
			this.disList=[this.tab];
			this._backHeight=this.back.height;
			this.on("Draging_Hit",this,this._$7_onMouseOver);
			this.on("mouseover",this,this.onMouseOverThis);
			this.updateUIState();
		}

		__class(LayoutRec,'laya.editor.view.LayoutRec',_super);
		var __proto=LayoutRec.prototype;
		__proto.updateUIState=function(){
			this.back.visible=this.tab.visible=this.canAddTab;
		}

		__proto.onMouseOverThis=function(E){
			if (this.parent==LayerManager.stage){
				DisResizer.setUp(this,true);
			}
		}

		__proto.onThisDown=function(e){
			if (this.parent==LayerManager.stage){
				DisResizer.setUp(this,true);
			}
		}

		__proto.onBackDown=function(e){
			if (this.parent==LayerManager.stage){
				this.startDrag();
				this.once("dragend",this,this.stopDrag);
				}else{
				this.startDragMe();
			}
		}

		__proto.onBackDoubleDown=function(e){
			if (this.parent !=LayerManager.stage){
				LayoutRecManager.popRec(this);
			}
			else{
			}
		}

		//DisResizer.setUp(this);
		__proto.goMinState=function(){
			DisControlTool.removeItems(this.disList);
		}

		//back.bottom=0;
		__proto.goMaxState=function(){
			DisControlTool.addItems(this.disList,this);
		}

		//Laya.timer.once(100,this,later);
		__proto.later=function(){
			this.back.height=this._backHeight;
		}

		__proto._$7_onMouseOver=function(e){
			if (!DragManager.isDraging)return;
			if (!(DragManager.getDragType()=="LayoutRec" || DragManager.getDragType()=="LayoutTab"))return;
			console.log("onMouseOver");
			var type=RelativePos.getDisMouseRelativePos(this);
			if(DragManager.getDragTarget()==this){
				if(type=="up"){
					type="center";
				}
			}
			if(DragManager.getDragType()=="LayoutTab"){
				if(type=="up"){
					type="center";
				}
			};
			var focusWidth=NaN;
			switch (type){
				case "right":
				case "left":
					focusWidth=0.5*this.width;
					FocusManager.showBorder(this,type,true,null,focusWidth);
					break ;
				case "up":
				case "down":
					focusWidth=0.5*this.height;
					FocusManager.showBorder(this,type,true,null,focusWidth);
					break ;
				case "center":
					FocusManager.showFocus(this);
					break ;
				}
			DisControlTool.setTop(this);
		}

		__proto._$7_onMouseOut=function(e){}
		__proto.onDragDown=function(e){
			e.stopPropagation();
			this.startDragMe();
		}

		__proto.startDragMe=function(self){
			(self===void 0)&& (self=false);
			if(LayoutRecManager.popLocked())return;
			if(!this.canDragMe)return;
			var clip=new Clip(SkinDefines.LayoutRecDragIcon,1,3);
			clip.index=2;
			var type="LayoutRec";
			LayaBuilder.drag.doDrag(this,self?null:clip,{type:type,target:this},new Point(5,5));
		}

		__proto.closeHandler=function(e){
			LayoutRecManager.removeRec(this);
		}

		__proto.changeSize=function(){
			laya.ui.Component.prototype.changeSize.call(this);
		}

		__proto.onTabChange=function(e){
			if (this._curUI){
				this._curUI.removeSelf();
				this._curUI=null;
			}
			if (this.tab.selectedIndex !=-1){
				this._curUI=(this.tab.selection).ui;
				this.addChildAt(this._curUI,0);
				this.tTabTxt=this._curUI["title"];
			}
		}

		__proto.addUI=function(ui){
			var uiTab=new LayoutTab(ui);
			this.addTab(uiTab);
		}

		__proto.addTab=function(uiTab){
			var index=0;
			index=this.tab.addItem(uiTab);
			this.tab.selectedIndex=index;
			uiTab._rec=this;
			this.updateUIState();
		}

		__proto.removeTab=function(uiTab,autoRemove){
			(autoRemove===void 0)&& (autoRemove=false);
			this.tab.delItem(uiTab);
			uiTab._rec=null;
			this.updateUIState();
			if(autoRemove&&this.tab.items.length<1){
				LayoutRecManager.removeRec(this);
			}
		}

		// onTabChange(null);
		__proto.getUIs=function(){
			var i=0,len=0;
			var items;
			items=this.tab.items;
			len=items.length;
			var rst;
			rst=[];
			for (i=0;i < len;i++){
				rst.push((items [i]).ui);
			}
			return rst;
		}

		__proto.clearRelative=function(){
			RelativePos.clearBar(this);
		}

		__proto.clears=function(){
			this.clearRelative();
			this.tab.destroy();
			this.destroy(false);
		}

		__getset(0,__proto,'disMode',function(){
			return this._disMode;
			},function(type){
			console.log("setDisMode:",type,"pre:",this._disMode);
			if (this._disMode !=1){
				this.preWidth=this.width;
				this.preHeight=this.height;
			}
			if (this._disMode==type)
				return;
			this._disMode=type;
			switch (this._disMode){
				case 1:
					this.goMinState();
					LayoutRecManager.minRec(this);
					this.back.off("mousedown",this,this.onBackDown);
					this.back.on("mousedown",this,this.onBackDown);
					break ;
				default :
					this.back.off("mousedown",this,this.onBackDown);
					this.goMaxState();
					LayoutRecManager.recoverRec(this);
				}
		});

		__getset(0,__proto,'canClose',function(){
			var tabList;
			tabList=this.tab.items;
			var i=0,len=0;
			len=tabList.length;
			for(i=0;i<len;i++){
				if(!tabList[i].canClose)return false;
			}
			return true;
		});

		__getset(0,__proto,'canAddTab',function(){
			var tabList;
			tabList=this.tab.items;
			var i=0,len=0;
			len=tabList.length;
			for(i=0;i<len;i++){
				if(!tabList[i].canMix)return false;
			}
			return true;
		});

		__getset(0,__proto,'canDragMe',function(){
			return this.canAddTab;
		});

		__getset(0,__proto,'sizeFree',function(){
			return !this.canAddTab;
		});

		LayoutRec.Min=1;
		LayoutRec.Normal=2;
		LayoutRec.Max=3;
		return LayoutRec;
	})(LayoutRecUI)


	/**菜单
	*@author yung
	*/
	//class laya.editor.view.MenuBar extends laya.editor.ui.MenuBarUI
	var MenuBar=(function(_super){
		function MenuBar(){
			this._isMax=false;
			this._menuMap={};
			this._menuContexts={
				item0:["新建项目","打开项目(Ctrl+O)","转换项目","","设置项目(F9)","打开项目所在目录"],
				item1:["新建目录(Ctrl+D)","新建文件(Ctrl+N)","","设置页面(Ctrl+P)","资源转换工具"],
				item2:["撤销(Ctrl+Z)","重做(Ctrl+Y)","","删除(Delete)","复制(Ctrl+C)","粘贴(Ctrl+V)","原位粘贴(Ctrl+Shift+V)","剪贴(Ctrl+X)","全选(Ctrl+A)","","移动组件(方向键)","快速移动(Ctrl+方向键)","","转换为容器(Ctrl+B)","移除容器(Ctrl+U)","重复复制(Ctrl+R)","定位资源(Ctrl+K)","","查找替换(Ctrl+F)","保存文件(Ctrl+S)","保存所有文件(Ctrl+Shift+S)"],
				item3:["放大视图(Ctrl++)","缩小视图(Ctrl+-)","恢复视图(Ctrl+|)","","拖动视图(鼠标右键)","显示/隐藏参考视图(F8)","显示/隐藏标尺(Ctrl+Shift+R)","","节点向上(Ctrl+↑)","节点向下(Ctrl+↓)"],
				item4:["项目面板","资源面板","属性面板","层级面板","模板面板","","恢复面板位置(F3)"],
				item5:["发布(F12)","清理并发布(Ctrl+F12)","正式发布(不打包未使用资源)(F11)","","刷新资源及页面(F5)","刷新页面(F6)","刷新资源(F7)","","查找未被使用的资源(F4)"],
				item6:[],
				item7:["关于","帮助"]
			};
			MenuBar.__super.call(this);
			Laya.stage.on("click",this,this.onStageClick);
			this.tab.on("mousedown",this,this.onTabMouseDown);
			this.tab.on("click",this,this.onTabClick);
			this.tab.on("change",this,this.onTabChange);
			this.on("mousedown",this,this.onMouseDown);
			this.on("doubleclick",this,this.onDoubleClick);
			this.minBtn.on("click",this,this.onMinBtnClick);
			this.backBtn.on("click",this,this.onBackBtnClick);
			this.closeBtn.on("click",this,this.onCloseBtnClick);
			var btns;
			btns=this.tab.items;
			var i=0,len=0;
			len=btns.length;
			for(i=0;i<len;i++){
				(btns [i]).labelColors="#d2d2d2,#d2d2d2,#d2d2d2,#d2d2d2";
			}
			this.cacheAsBitmap=true;
		}

		__class(MenuBar,'laya.editor.view.MenuBar',_super);
		var __proto=MenuBar.prototype;
		__proto.onTabMouseDown=function(e){
			if (e.target==this.tab.selection){
				this.tab.selectedIndex=-1;
			}
		}

		__proto.onCloseBtnClick=function(e){
			console.log("onCloseBtnClick");
			Device.winFun("close");
		}

		//stage.nativeWindow.dispatchEvent(new Event(Event.CLOSING));
		__proto.onBackBtnClick=function(e){
			console.log("onMinBtnClick");
			if (this._isMax){
				Device.winFun("unmaximize");
			}
			else{
				Device.winFun("maximize");
			}
			this._isMax=!this._isMax;
		}

		__proto.onMinBtnClick=function(e){
			console.log("onMinBtnClick");
			Device.winFun("minimize");
		}

		//stage.nativeWindow.minimize();
		__proto.onDoubleClick=function(e){
			var target=e.target;
			if (!target.parent==this.tab && !target.parent==this.btnBox){
				this.onBackBtnClick(null);
			}
		}

		__proto.onMouseDown=function(e){
			return;
			var target=e.target;
		}

		// }
		__proto.onStageMouseUp=function(e){
			this.off("mousemove",this,this.onMouseMove);
			this.off("mousemove",this,this.onStageMouseUp);
		}

		__proto.onMouseMove=function(e){
			this.off("mousemove",this,this.onMouseMove);
			this.off("mousemove",this,this.onStageMouseUp);
			this.onBackBtnClick(null);
		}

		__proto.onTabChange=function(e){
			if (this.tab.selectedIndex !=-1){
				this.showMenu(this.tab.selection);
			}
		}

		__proto.onTabClick=function(e){
			e.stopPropagation();
		}

		__proto.onStageClick=function(e){
			this.tab.selectedIndex=-1;
		}

		__proto.showMenu=function(btn){
			var type=btn.name;
			var menu=this._menuMap[type];
			if (menu==null){
				menu=ContextMenu.createMenuByArray(this._menuContexts[type]);
				menu.on("select",this,this.onEmunSelect);
				this._menuMap[type]=menu;
			};
			var p=btn.localToGlobal(new Point());
			menu.show(p.x,p.y+btn.height);
		}

		/**处理菜单选择*/
		__proto.onEmunSelect=function(e){
			var data=(e.target).data;
			if ((typeof data=='string')){
				var name=data;
				console.log("menuClick:",name);
				switch (name){
					case "新建项目":
						AddProject.instance.start();
						break ;
					case "设置项目(F9)":
						ShortcutManager.exeKey(120);
						break ;
					case "转换项目":
						ConvertProject.instance.start();
						break ;
					case "打开项目(Ctrl+O)":
						ShortcutManager.exeKey(79,true);
						break ;
					case "打开项目所在目录":
						ProjectManager.openProjectDir();
						break ;
					case "新建文件(Ctrl+N)":
						ShortcutManager.exeKey(78,true);
						break ;
					case "新建粒子":
						Notice.notify("open_AddParticle");
						return;
						break ;
					case "新建场景":
						Notice.notify("OPEN_ADDSCENE");
						return;
						break ;
					case "新建时间轴动画":
						Notice.notify("OPEN_ADD_TIMELINE_ANIMATION");
						return;
						break ;
					case "新建目录(Ctrl+D)":
						ShortcutManager.exeKey(68,true);
						break ;
					case "设置页面(Ctrl+P)":
						ShortcutManager.exeKey(80,true);
						break ;
					case "保存页面(Ctrl+S)":
						ShortcutManager.exeKey(83,true);
						break ;
					case "保存所有页面(Ctrl+Shift+S)":
						ShortcutManager.exeKey(83,true,true);
						break ;
					case "放大视图(Ctrl++)":
						ShortcutManager.exeKey(187,true);
						break ;
					case "缩小视图(Ctrl+-)":
						ShortcutManager.exeKey(189,true);
						break ;
					case "恢复视图(Ctrl+|)":
						ShortcutManager.exeKey(220,true);
						break ;
					case "显示/隐藏参考视图(F8)":
						ShortcutManager.exeKey(119);
						break ;
					case "显示/隐藏标尺(Ctrl+Shift+R)":
						ShortcutManager.exeKey(82,true,true);
						IDEEvent.emitKeyEvent(82,true,true);
						break ;
					case "预览视图(Ctrl+Enter)":
						ShortcutManager.exeKey(13,true);
						break ;
					case "撤销(Ctrl+Z)":
						ShortcutManager.exeKey(90,true);
						break ;
					case "重做(Ctrl+Y)":
						ShortcutManager.exeKey(89,true);
						break ;
					case "复制(Ctrl+C)":
						ShortcutManager.exeKey(67,true);
						break ;
					case "粘贴(Ctrl+V)":
						ShortcutManager.exeKey(86,true);
						break ;
					case "原位粘贴(Ctrl+Shift+V)":
						ShortcutManager.exeKey(86,true,true);
						break ;
					case "剪贴(Ctrl+X)":
						ShortcutManager.exeKey(88,true);
						break ;
					case "全选(Ctrl+A)":
						ShortcutManager.exeKey(65,true);
						break ;
					case "转换为容器(Ctrl+B)":
						ShortcutManager.exeKey(66,true);
						break ;
					case "移除容器(Ctrl+U)":
						ShortcutManager.exeKey(85,true);
						break ;
					case "重复复制(Ctrl+R)":
						ShortcutManager.exeKey(82,true);
						break ;
					case "查找替换(Ctrl+F)":
						ShortcutManager.exeKey(70,true);
						break ;
					case "向上(Ctrl+↑)":
						ShortcutManager.exeKey(38,true);
						IDEEvent.emitKeyEvent(38,true);
						break ;
					case "向下(Ctrl+↓)":
						ShortcutManager.exeKey(40,true);
						IDEEvent.emitKeyEvent(40,true);
						break ;
					case "到上一层(Ctrl+→)":
						ShortcutManager.exeKey(39,true);
						break ;
					case "到下一层(Ctrl+←)":
						ShortcutManager.exeKey(37,true);
						break ;
					case "刷新资源及页面(F5)":
						ShortcutManager.exeKey(116);
						break ;
					case "刷新页面(F6)":
						ShortcutManager.exeKey(117);
						break ;
					case "刷新资源(F7)":
						ShortcutManager.exeKey(118);
						break ;
					case "查找未被使用的资源(F4)":
						ShortcutManager.exeKey(115);
						break ;
					case "发布(F12)":
						ShortcutManager.exeKey(123);
						break ;
					case "清理并发布(Ctrl+F12)":
						ShortcutManager.exeKey(123,true);
						break ;
					case "正式发布(不打包未使用资源)(F11)":
						ShortcutManager.exeKey(122);
						break ;
					case "编辑器设置(F10)":
						ShortcutManager.exeKey(121);
						break ;
					case "恢复面板位置(F3)":
						ShortcutManager.exeKey(114);
						break ;
					case "显示/隐藏日志(Ctrl+L)":
						ShortcutManager.exeKey(76,true);
						break ;
					case "扩展(F1)":
						break ;
					case "关于":
						About.instance.start();
						break ;
					case "帮助":
						Help.instance.start();
						break ;
					case "项目面板":
						LayoutRecManager.showPanelByClassName("PagePanel");
						break ;
					case "资源面板":
						LayoutRecManager.showPanelByClassName("ResPanel");
						break ;
					case "模板面板":
						LayoutRecManager.showPanelByClassName("CompPanel");
						break ;
					case "属性面板":
						LayoutRecManager.showPanelByClassName("PropPanel");
						break ;
					case "层级面板":
						LayoutRecManager.showPanelByClassName("DisplayTreePanel");
						break ;
					case "时间轴":
						LayoutRecManager.showPanelByClassName("TimeLinePanel");
						break ;
					case "资源转换工具":
						CMDShell.exeFile(FileManager.getAppPath("libs/LayaAirTool/LayaAirTool.exe"),null,null);
						break ;
					case "定位资源(Ctrl+K)":
						IDEEvent.emitKeyEvent(75,true,false);
						break ;
					}
			}
			else{
				if (data.key=="project"){
					ProjectManager.openProjectByPath(data.label);
				}
			}
			this.tab.selectedIndex=-1;
		}

		/**添加插件菜单*/
		__proto.addPluginMenu=function(name){
			var menus=this._menuContexts["item7"];
			if (menus.length > 0){
				menus.push("");
			}
			menus.push({label:name,key:"plugin"});
			this._menuMap["item7"]=null;
		}

		/**显示最近打开的项目*/
		__proto.showProjectOpened=function(projects){
			var menus=this._menuContexts["item0"];
			if (menus.length > 5){
				menus.length=5;
			}
			menus.push("");
			for (var i=0;i < projects.length && i < 5;i++){
				menus.push({label:projects[i],key:"project"});
			}
			this._menuMap["item0"]=null;
		}

		__getset(1,MenuBar,'instance',function(){
			return MenuBar._instance ? MenuBar._instance :MenuBar._instance=new MenuBar();
		},laya.editor.ui.MenuBarUI._$SET_instance);

		MenuBar._instance=null
		return MenuBar;
	})(MenuBarUI)


	/**
	*
	*@author ww
	*@version 1.0
	*
	*@created 2015-11-28 上午11:17:28
	*/
	//class laya.editor.view.other.NewsPage extends laya.editor.ui.other.NewsPageUI
	var NewsPage=(function(_super){
		function NewsPage(){
			NewsPage.__super.call(this);
		}

		__class(NewsPage,'laya.editor.view.other.NewsPage',_super);
		return NewsPage;
	})(NewsPageUI)


	/**UI视图
	*@author yung
	*/
	//class laya.editor.view.UIViewer extends laya.editor.ui.UIViewerUI
	var UIViewer=(function(_super){
		function UIViewer(){
			this._design=null;
			this._title=null;
			this._uiName=null;
			this._pagePath=null;
			this._lastSelectXml=null;
			this.ruleSideLen=2;
			this._gridPoints=[new Point(),new Point()];
			UIViewer.__super.call(this);
			this._ruleH=new RuleGrid();
			this._ruleV=new RuleGrid();
			this._ruleRangeLayer=new Sprite();
			this.initPanel();
		}

		__class(UIViewer,'laya.editor.view.UIViewer',_super);
		var __proto=UIViewer.prototype;
		__proto.initPanel=function(){
			this.viewStack.on("resize",this,this.onResize);
			this.on("mousedown",this,this.onMouseDown);
			this.on("dragDrop",this,this.onDragDrop);
			this._design=new Design();
			this.designView.on("rightmousedown",this,this.onDesignRightMouseDown);
			this.designView.on("rightmouseup",this,this.onDesignRightMouseUp);
			this.designView.addChild(this._design);
			this.tab.selectHandler=new Handler(this,this.onTabSelect);
			this.tab.selectedIndex=0;
			this.addChild(this._ruleH);
			this._ruleH.y=this.designView.y-0;
			this._ruleH.type=0;
			this._ruleH.x=this.ruleSideLen;
			this.addChild(this._ruleV);
			this._ruleV.y=this._ruleH.y+5;
			this._ruleV.type=1;
			this._ruleV.x=this.ruleSideLen;
			this.addChild(this._ruleRangeLayer);
			this.onResize(null);
			this.on("display",this,this.addListens);
			this.on("undisplay",this,this.removeListens);
			this.compInfo.color=this.scaleInfo.color="#636363";
			this.setScaleInfo(1);
		}

		__proto.addListens=function(){
			console.log("addListens");
			Notice.listen("SHOW_RULE_RANGE",this,this.showRuleRange,null,true);
			Notice.listen("Clear_RULE_RANGE",this,this.clearRuleRange,null,true);
		}

		__proto.removeListens=function(){
			console.log("removeListens");
			Notice.cancel("SHOW_RULE_RANGE",this,this.showRuleRange);
			Notice.cancel("Clear_RULE_RANGE",this,this.clearRuleRange);
		}

		__proto.clearRuleRange=function(){
			this._ruleRangeLayer.graphics.clear();
		}

		__proto.showRuleRange=function(pointList){
			if(!SystemSetting.ifShowRuleGrid){
				this.clearRuleRange();
				return;
			};
			var i=0,len=0;
			var tPoint;
			len=pointList.length;
			for(i=0;i<len;i++){
				tPoint=pointList[i];
				tPoint=this.globalToLocal(tPoint);
			};
			var g;
			g=this._ruleRangeLayer.graphics;
			g.clear();
			var sY=NaN;
			sY=this._ruleH.y;
			g.drawLine(pointList[0].x,sY,pointList[0].x,sY+20,"#dddddd",1);
			g.drawLine(pointList[1].x,sY,pointList[1].x,sY+20,"#dddddd",1);
			var sX=NaN;
			sX=this._ruleV.x;
			g.drawLine(sX,pointList[0].y,sX+20,pointList[0].y,"#dddddd",1);
			g.drawLine(sX,pointList[1].y,sX+20,pointList[1].y,"#dddddd",1);
		}

		__proto.switchRuleGrid=function(){
			SystemSetting.ifShowRuleGrid=!SystemSetting.ifShowRuleGrid;
			this.freshRule();
		}

		__proto.dealAction=function(funName,param){
			if ((typeof (this[funName])=='function')){
				this[funName].apply(this,param);
			}else
			if(this.design){
				this.design.dealAction(funName,param);
			}
		}

		__proto.onMouseDown=function(event){
			if (this.viewStack.selectedIndex==0){
				this._lastSelectXml=this._design.selectedCompXml;
				Laya.stage.focus=this._design;
				this._design.event("mousedown",event);
			}
		}

		__proto.onAddedToStage=function(e){
			this.showAndHidePanels();
		}

		__proto.onDesignRightMouseUp=function(e){
			this._design.stopDrag();
			this.freshRule();
		}

		// _design.endDrag();
		__proto.onDesignRightMouseDown=function(e){
			console.log("onDesignRightMouseDown");
			this._design.startDrag();
		}

		__proto.onResize=function(e){
			this.designView.scrollRect=new Rectangle(0,0,this.designView.width,this.designView.height);
			this._design.x=(this.designView.width-this._design.width)*0.5;
			this._design.y=(this.designView.height-this._design.height)*0.5;
			this.freshRule();
		}

		__proto.freshRule=function(){
			this.clearRuleRange();
			if(!SystemSetting.ifShowRuleGrid){
				this._ruleH.clearMe();
				this._ruleV.clearMe();
				return;
			}
			this._gridPoints[0].setTo(this._ruleH.x,this._ruleV.y);
			this._gridPoints[1].setTo(this.width+this._ruleH.x,this.height+this._ruleV.y);
			var i=0,len=0;
			var tPoint;
			for(i=0;i<2;i++){
				tPoint=this._gridPoints[i];
				tPoint=this.localToGlobal(tPoint);
				tPoint=this._design.globalToLocal(tPoint);
			}
			this._ruleH.width=this.width;
			this._ruleH.renderMe(this.width,this._gridPoints[0].x,this._gridPoints[1].x);
			this._ruleV.height=this.height-40;
			this._ruleV.renderMe(this._ruleV.height,this._gridPoints[0].y,this._gridPoints[1].y);
		}

		/**根据页面地址加载页面*/
		__proto.loadPage=function(path){
			try {
				var con=FileManager.readTxtFile(path);
				var uiView=JSON.parse(con);
				}catch (e){
				Alert.show("读取视图("+path+")出错\n"+e.toString(),"读取视图出错");
				return;
			}
			this._design.init(uiView);
		}

		__proto.setScaleInfo=function(value){
			this.scaleInfo.text=Sys.lang("当前缩放：")+Math.floor(value*100)+"%";
		}

		/**保存*/
		__proto.save=function(){
			if (this.tab.selectedIndex==0){
				if (this._design.hasChange){
					PagePanel.instance.save(this._pagePath,this._design.xml);
					this._design.hasChange=false;
					MessageManager.instance.show("保存成功");
					Laya.stage.event("pageSaved");
				}
				}else {
				Alert.instance.start("请先切换到设计模式后再保存","保存出错");
			}
		}

		/**容器线框动画*/
		__proto.playBoxEffect=function(gx,gy,isBack){
			(isBack===void 0)&& (isBack=false);
			var point=this.localToGlobal(new Point(0,0));
			var effect=new BoxEffect();
			this.stage.addChild(effect);
			effect.play(gx,gy,new Rectangle(point.x,point.y,this.designView.width,this.designView.height),isBack);
		}

		/**处理资源或页面拖入*/
		__proto.onDragDrop=function(e){
			if (e.data.type=="res"){
				this._design.addComp(e.data.asset,e.data.compType);
				}else if (e.data.type=="page"){
				if (e.data.path !=this._pagePath){
					this._design.addUIView(e.data.path);
				}
				}else if(e.data.type=="template"){
				this._design.addTemplate(e.data.data.path);
			}
		}

		__proto.showAndHidePanels=function(){}
		/**切换设计和代码视图*/
		__proto.onTabSelect=function(index){
			this.viewStack.selectedIndex=index;
			this._ruleH.visible=this._ruleV.visible=index==0;
			if (index==1){
				this.stage.focus=this.codeView.textField;
				var xmlStr;
				xmlStr=DesignInfo.uiObjToXml(this._design.xml);
				DesignInfo.xmlStrToUIObj(xmlStr);
				console.log("uiObjO:",this._design.xml);
				this.codeView.text=xmlStr;
				this.codeView.textField.event("mousedown",Event.EMPTY.setTo("mousedown",this.codeView.textField,this.codeView.textField));
			}else {}
			this.showAndHidePanels();
		}

		/**页面显示的标题*/
		__getset(0,__proto,'title',function(){
			return this._title;
			},function(value){
			this._title=value;
		});

		/**页面地址*/
		__getset(0,__proto,'pagePath',function(){
			return this._pagePath;
			},function(value){
			if (this._pagePath !=value){
				this._pagePath=value;
				this.title=this._uiName=FileManager.getFileName(this._pagePath);
				this.loadPage(this._pagePath);
			}
		});

		/**获得编辑器实体*/
		__getset(0,__proto,'design',function(){
			return this._design;
		});

		__getset(0,__proto,'hasChange',function(){
			return this.design.hasChange;
		});

		/**缩放页面视图*/
		__getset(0,__proto,'scaleView',function(){
			return this._design.scaleX;
			},function(value){
			value=Math.round(value *100)/ 100;
			if (this._design.scaleX !=value){
				var center=this.localToGlobal(new Point(this.width *0.5,this.height *0.5));
				var tCenter=new Point();
				tCenter.setTo(center.x,center.y);
				var viewCenter=this._design.globalToLocal(tCenter);
				this._design.scaleY=this._design.scaleX=value;
				var newCenter=this._design.localToGlobal(viewCenter);
				this._design.x+=center.x-newCenter.x;
				this._design.y+=center.y-newCenter.y;
				this.setScaleInfo(value);
			}
			this.freshRule();
		});

		return UIViewer;
	})(UIViewerUI)


	/**属性组
	*@author yung
	*/
	//class laya.editor.view.prop.PropGroup extends laya.editor.ui.prop.PropGroupUI
	var PropGroup=(function(_super){
		function PropGroup(name,props,inputList){
			this._props=null;
			this._isSettingValue=false;
			this._xml=null;
			this.isSpecial=false;
			this.layouter=null;
			this._items=null;
			this.ItemHeight=30;
			this.ItemD=5;
			this.inputList=null;
			this.x2=85;
			this.x1=15;
			this.rightD=15;
			this._data=null;
			PropGroup.__super.call(this);
			this.inputList=inputList?inputList:[];
			this._props=props;
			this.groupLabl.text=name;
			this.groupLabl.color="#c8c8c8";
			this.groupLabl.bold=true;
			this.groupBox.removeChildren();
			this.arrowClip.index=1;
			this._items=[];
			if (name=="公用"){
			};
			var nickName;
			var tY=NaN;
			for (var i=0,n=props.length;i < n;i++){
				var prop=props[i].p;
				nickName=prop.nickname || prop.name;
				tY=i *this.ItemHeight+this.ItemD;
				if (this.isSpecial){
					tY=Math.floor(i / 2)*this.ItemHeight+this.ItemD;
				}
				this.createPropUI(prop.name,nickName,prop.type,prop.tips,tY,prop.option,prop);
			}
			this.groubBar.on("mousedown",this,this.onGroubBarClick);
			var len=0;
			var lItems;
			lItems=[];
			len=this._items.length;
			var tLayout;
			var items;
			if (this.isSpecial){
				for (i=0;i < len;i+=2){
					if (this._items[i+1]){
						items=[this._items[i],this._items[i+1]];
						(this._items [i+1]).items[0].align="right";
						}else{
						items=[ this._items[i+1]];
					}
					tLayout=LayoutFuns.getSameWidthLayout(items,5);
					lItems.push(tLayout);
				}
				this._items=lItems;
			}
			this.layouter=LayoutFuns.getFullFillLayout(this._items,0,20);
			this.cacheAsBitmap=true;
		}

		__class(PropGroup,'laya.editor.view.prop.PropGroup',_super);
		var __proto=PropGroup.prototype;
		__proto.changeSize=function(){
			laya.ui.Component.prototype.changeSize.call(this);
			if (this.layouter){
				this.layouter.width=this.width;
			}
		}

		__proto.onGroubBarClick=function(e){
			if (this.groupBox.parent){
				this.groupBox.removeSelf();
				this.arrowClip.index=0;
				}else {
				this.addChild(this.groupBox);
				this.arrowClip.index=1;
			}
			PropPanel.instance.refreshGroupsPosition();
		}

		/**创建属性设置面板*/
		__proto.createPropUI=function(name,nickName,type,tips,y,option,data){
			var label=new Label();
			label.text=nickName;
			label.pos(this.x1,y+4);
			label.color="#aaaaaa";
			label.width=80;
			label.height=20;
			label.toolTip=tips;
			if (this.isSpecial){
				label.width=60;
				}else{
			}
			this.x2=label.width;
			this.groupBox.addChild(label);
			var tItems;
			tItems=[];
			tItems.push(label);
			if (type=="bool" || type=="option"){
				var drop=new ComboBox();
				drop.skin="comp/combobox.png";
				drop.sizeGrid="3,20,3,3";
				drop.name=name;
				drop.labels=type=="bool" ? ",false,true" :","+option;
				drop.left=this.x2;
				drop.right=this.rightD;
				drop.labelColors="#8a8a8a, #ffffff, #efefef";
				tItems.push(drop);
				drop.y=y;
				drop.on("change",this,this.onDropChange);
				this.groupBox.addChild(drop);
				}else if (type=="color"){
				var picker;
				picker=new ColorPickerItem();
				picker.right=this.rightD;
				picker.left=this.x2;
				picker.height=20;
				picker.y=y;
				picker.name=name;
				this.groupBox.addChild(picker);
				picker.on("ColorChanged",this,this.onColorChangeNew);
				picker.on("COLOR_CLEARED",this,this.onColorCleared);
				tItems.push(picker);
				}else if (type=="colorBox"){
				var colorInput=new TextInput();
				colorInput.skin="comp/textinput.png";
				colorInput.sizeGrid="4,4,4,4";
				colorInput.name=name;
				colorInput.left=this.x2;
				colorInput.right=this.rightD+15;
				colorInput.y=y;
				this.groupBox.addChild(colorInput);
				var colorPic=new ColorPicker();
				colorPic.skin="comp/color.png";
				colorPic.name=name+"_color";
				colorPic.on("change",this,this.onColorBoxChange);
				colorPic.right=this.rightD;
				colorPic.y=y;
				this.groupBox.addChild(colorPic);
				tItems.push(colorInput,colorPic);
				}else if (type=="sNumber"){
				var slider=new HSlider("comp/hslider.png");
				slider.name=name;
				slider.left=this.x2;
				slider.right=this.rightD;
				slider.y=y+8;
				slider.tick=0.01;
				slider.setSlider(parseFloat(data.min),parseFloat(data.max),0.5*(parseFloat(data.min)+parseFloat(data.max)));
				this.groupBox.addChild(slider);
				slider.on("changed",this,this.onSliderChange,[slider]);
				this.groupBox.addChild(label);
				tItems.push(slider);
				}else {
				var input;
				input=new EditorTextInput();
				input.skin="comp/textinput.png";
				input.name=name;
				input.left=this.x2;
				input.right=this.rightD;
				input.y=y;
				input.color="#8a8a8a";
				input.padding="0,0,0,5";
				input.height=24;
				input.sizeGrid="4,4,4,4";
				this.inputList.push(input);
				input.on("keydown",this,this.onkeyDown,[input]);
				this.mouseEnabled=true;
				input.on("enter",this,this.onInput);
				input.on("blur",this,this.onInput);
				input.on("focus",this,this.inputFocus,[input]);
				this.groupBox.addChild(input);
				if (type=="stringdrag"||name=="skin"||data.accept=="res"){
					input.padding="1,36,1,3"
					input.on("dragDrop",this,this.onDragDrop);
					var btn;
					btn=new Button();
					btn.label="";
					btn.y=y+6;
					btn.skin="comp/skinres.png";
					btn.right=this.rightD-1;
					btn.labelColors="#44a7ff,#44a7ff,#44a7ff,#44a7ff";
					btn.on("mousedown",this,this.onSkinDown,[input]);
					btn.toolTip="拖动资源到输入框可替换皮肤\n点击skin可快速定位皮肤资源";
					this.groupBox.addChild(btn);
				}
				tItems.push(input);
			}
			LayoutFuns.clearItemsRelativeInfo(tItems);
			var tLayout;
			tLayout=LayoutFuns.getFixPos(tItems,5,false);
			this._items.push(tLayout);
		}

		__proto.inputFocus=function(input){
			Laya.timer.once(100,this,this.setFocus,[input],true);
		}

		__proto.setFocus=function(input){
			Laya.stage.focus=input;
		}

		__proto.onkeyDown=function(input,event){
			if(event.keyCode!=9)return;
			var index=0;
			var tInputList;
			tInputList=this.inputList;
			index=tInputList.indexOf(input);
			if(index>=0){
				index++;
				if(index>=tInputList.length){
					index=0;
				}
				input=this.findNextInput(index,tInputList);
				(input.textField).focus=true;
				Notice.notify("SELECTE_INPUT",[input]);
			}
		}

		__proto.findNextInput=function(startIndex,inputList){
			var i=0,len=0;
			len=inputList.length;
			var tInput;
			for(i=startIndex;i<len;i++){
				tInput=inputList[i];
				if(tInput.displayInStage)return tInput;
			}
			for(i=0;i<startIndex;i++){
				tInput=inputList[i];
				if(tInput.displayInStage)return tInput;
			}
			return inputList[0];
		}

		__proto.onSkinDown=function(input,e){
			console.log("skinDown:",e,input);
			Notice.notify("SelecteResFile",[input.text]);
		}

		__proto.onDragDrop=function(e){
			var tar=e.target;
			var data=e.data;
			var src=e.dragInitiator;
			console.log("onDragDrop:",tar,src,data);
			var path;
			path=FileManager.getRelativePath(SystemSetting.assetsPath,data.asset);
			path=FileManager.adptToCommonUrl(path);
			console.log("path:",path);
			tar.text=path;
			this.onInput(tar);
		}

		__proto.onSliderChanging=function(txt,tar){}
		//txt.text=tar.value+"";
		__proto.onSliderChange=function(slider){
			console.log("onSliderChange:",slider);
			this.setCompProp(slider.name,slider.value);
		}

		/**处理颜色变化*/
		__proto.onColorChange=function(e){
			var color=e.currentTarget;
			this.setCompProp(color.name,color.selectedColor);
		}

		__proto.onColorChangeNew=function(picker){
			this.setCompProp(picker.name,picker.getColorStr());
		}

		__proto.onColorCleared=function(picker){
			this.setCompProp(picker.name,"");
		}

		/**处理颜色变化*/
		__proto.onColorBoxChange=function(e){
			var color=e.currentTarget;
			var colorStr=color.selectedColor;
			var propName=color.name.replace("_color","");
			var input=color.parent.getChildByName(propName);
			var arr=input.text.split(",");
			if (input.text !="" && arr){
				for (var i=0;i < arr.length;i++){
					var item=arr[i];
					if (item.indexOf("#")>-1){
						arr[i]=colorStr;
						break ;
					}
				}
				input.text=arr.join(",");
				}else {
				input.text=colorStr;
			}
			this.setCompProp(input.name,input.text);
		}

		/**处理下拉框变化*/
		__proto.onDropChange=function(e){
			var drop=e.currentTarget;
			this.setCompProp(drop.name,drop.selectedLabel);
		}

		__proto.onInputChanging=function(input){
			this.setCompProp(input.name,input.text,true);
		}

		__proto.onInput=function(input){
			this.setCompProp(input.name,input.text);
		}

		/**处理输入框回车*/
		__proto.onInputKeyDown=function(e){
			if (e.keyCode==13){
				var input=e.currentTarget;
				this.setCompProp(input.name,input.text);
			}
		}

		/**输入框获得焦点处理*/
		__proto.onTextFocusIn=function(e){
			var input=e.currentTarget;
			Laya.timer.once(1,this,this.selectAllText,[input]);
		}

		__proto.selectAllText=function(input){}
		/**处理输入框失去焦点*/
		__proto.onTextFocusOut=function(e){
			var input=e.currentTarget;
			this.setCompProp(input.name,input.text);
		}

		/**设置组件属性*/
		__proto.setCompProp=function(key,value,isChanging){
			(isChanging===void 0)&& (isChanging=false);
			if (!this._isSettingValue){
				console.log("setCompProp");
				var flag=false;
				var oldValue=String(this._data[key]);
				if(value==""&&!this._data.hasOwnProperty(key))return;
				if (oldValue !=value){
					if (Boolean(value)){
						this._data[key]=value;
						flag=true;
						}else if (Boolean(oldValue)){
						delete this._data[key];
						flag=true;
					}
				}
				if (flag){
					this.event("change",[]);
					console.log("valueChange");
					PropPanel.instance.valueChange(key,value,isChanging);
				}
			}
		}

		/**设置属性*/
		__proto.setData=function(data){
			this.setValueD(data.cList[0].p);
		}

		__proto.setValueD=function(data){
			this._data=data=data;
			this._isSettingValue=true;
			for (var i=0,n=this._props.length;i < n;i++){
				var prop=this._props[i].p;
				var name=prop.name;
				var value="";
				if (!data.hasOwnProperty(name)){
					}else{
					value=data[name];
					if(prop.type=="bool"){
						value=value?"true":"false";
					}
				};
				var target=this.groupBox.getChildByName(name);
				if ((target instanceof laya.ui.TextInput )){
					(target).text=value+"";
					}else if ((target instanceof laya.ui.ComboBox )){
					(target).selectedLabel=value;
					}else if ((target instanceof laya.ui.ColorPicker )){
					(target).selectedColor=value;
					}else if ((target instanceof laya.ui.Slider )){
					(target).value=parseFloat(value);
					}else if ((target instanceof laya.editor.comonents.ColorPickerItem )){
					(target).setColor(value);
				}
			}
			this._isSettingValue=false;
		}

		return PropGroup;
	})(PropGroupUI)


	/**快捷工具栏
	*@author yung
	*/
	//class laya.editor.view.QuickTool extends laya.editor.ui.QuickToolUI
	var QuickTool=(function(_super){
		function QuickTool(){
			this.commonBtns=
			[
			"addFolder",
			"addPage",
			"|",
			"save",
			"saveAll",
			"|",
			"back",
			"reBack",
			"|",
			"refresh",
			"publish"];
			this.zoomBtns=
			[
			"zoomIn",
			"zoomOut",
			"zoomBack"];
			this.alignBtns=
			[
			"alignLeft",
			"alignCenter",
			"alignRight",
			"alignTop",
			"alignMiddle",
			"alignbottom",
			"|",
			"spaceH",
			"spaceV",
			"|",
			"topLeft",
			"topRight",
			"bottomLeft",
			"bottomRight",
			"center",
			"middle"];
			this.allBtns=null;
			this.tBtns=null;
			this.btnDic=null;
			this.typeBtnsDic={};
			this._BtnList=null;
			QuickTool.__super.call(this);
			this._visibleRec=new Rectangle();
			this.on("click",this,this.onClick);
			var _btnNames=
			[
			"addFolder",
			"addPage",
			"save",
			"saveAll",
			"back",
			"reBack",
			"zoomIn",
			"zoomOut",
			"zoomBack",
			"refresh",
			"publish",
			"alignLeft",
			"alignCenter",
			"alignRight",
			"alignTop",
			"alignMiddle",
			"alignbottom",
			"spaceH",
			"spaceV",
			"topLeft",
			"topRight",
			"bottomLeft",
			"bottomRight",
			"center",
			"middle"];
			this._BtnList=[];
			var i=0,len=0;
			len=_btnNames.length;
			this.btnDic={};
			for(i=0;i<len;i++){
				this._BtnList.push(this.getChildByName(_btnNames[i]));
				this.btnDic[_btnNames[i]]=this.getChildByName(_btnNames[i]);
			}
			DisControlTool.removeItems(this._BtnList);
			this.allBtns=Utils1.setValueArr([],this._BtnList);
			this.typeBtnsDic["Common"]=this.commonBtns;
			this.typeBtnsDic["Zoom"]=this.zoomBtns;
			this.typeBtnsDic["Align"]=this.alignBtns;
			this.namesToBtns(this.commonBtns);
			this.namesToBtns(this.zoomBtns);
			this.namesToBtns(this.alignBtns);
			this.setShowBtns(["Common"]);
			this.cacheAsBitmap=true;
		}

		__class(QuickTool,'laya.editor.view.QuickTool',_super);
		var __proto=QuickTool.prototype;
		__proto.namesToBtns=function(names){
			var i=0,len=0;
			len=names.length;
			for(i=0;i<len;i++){
				if(names[i]=="|"){
					names[i]=new Image2("view/line.png");
					}else{
					names[i]=this.btnDic[names[i]];
				}
			}
			return names[i];
		}

		__proto.setShowBtns=function(types){
			DisControlTool.removeItems(this.allBtns);
			if(this._BtnList)
				DisControlTool.removeItems(this._BtnList);
			var i=0,len=0;
			var tType;
			var tTypeBtns;
			len=types.length;
			Utils1.clearArr(this._BtnList);
			for(i=0;i<len;i++){
				if(this._BtnList.length>0){
					this._BtnList.push(new Image2("view/line.png"));
				}
				Utils1.concatArr(this._BtnList,this.typeBtnsDic[types[i]]);
			}
			DisControlTool.addItems(this._BtnList,this);
			this.changeSize();
			return this._BtnList;
		}

		__proto.changeSize=function(){
			laya.ui.Component.prototype.changeSize.call(this);
			var nWidth=NaN;
			nWidth=this.width;
			LayoutTools.layoutToWidth(this._BtnList,nWidth,5,5,12,9);
			this._visibleRec.setTo(0,0,this.width,this.height);
			this.scrollRect=this._visibleRec;
		}

		//public var title:String="工具";
		__proto.onClick=function(e){
			var btn=e.target;
			if (btn){
				switch (btn.name){
					case "addFolder":
						ShortcutManager.exeKey(77,true);
						break ;
					case "addPage":
						console.log("addPage 暂时被劫持");
						ShortcutManager.exeKey(78,true);
						break ;
					case "save":
						console.log("save action here");
						ShortcutManager.exeKey(83,true);
						break ;
					case "saveAll":
						ShortcutManager.exeKey(83,true,true);
						break ;
					case "back":
						ShortcutManager.exeKey(90,true);
						break ;
					case "reBack":
						ShortcutManager.exeKey(89,true);
						break ;
					case "zoomIn":
						ShortcutManager.exeKey(189,true);
						break ;
					case "zoomOut":
						ShortcutManager.exeKey(187,true);
						break ;
					case "zoomBack":
						ShortcutManager.exeKey(220,true);
						break ;
					case "refresh":
						ShortcutManager.exeKey(116);
						break ;
					case "publish":
						ShortcutManager.exeKey(123);
						break ;
					case "alignLeft":
						UIPanel.instance.alignComp("left");
						break ;
					case "alignCenter":
						UIPanel.instance.alignComp("center");
						break ;
					case "alignRight":
						UIPanel.instance.alignComp("right");
						break ;
					case "alignTop":
						UIPanel.instance.alignComp("top");
						break ;
					case "alignMiddle":
						UIPanel.instance.alignComp("middle");
						break ;
					case "alignbottom":
						UIPanel.instance.alignComp("bottom");
						break ;
					case "spaceH":
						UIPanel.instance.spaceComp("h");
						break ;
					case "spaceV":
						UIPanel.instance.spaceComp("v");
						break ;
					case "topLeft":
						UIPanel.instance.placeComp("top_left");
						break ;
					case "topRight":
						UIPanel.instance.placeComp("top_right");
						break ;
					case "bottomLeft":
						UIPanel.instance.placeComp("bottom_left");
						break ;
					case "bottomRight":
						UIPanel.instance.placeComp("bottom_right");
						break ;
					case "center":
						UIPanel.instance.placeComp("center");
						break ;
					case "middle":
						UIPanel.instance.placeComp("middle");
						break ;
					}
			}
		}

		__getset(1,QuickTool,'instance',function(){
			return QuickTool._instance ? QuickTool._instance :QuickTool._instance=new QuickTool();
		},laya.editor.ui.QuickToolUI._$SET_instance);

		QuickTool._instance=null
		QuickTool.Common="Common";
		QuickTool.Zoom="Zoom";
		QuickTool.Align="Align";
		return QuickTool;
	})(QuickToolUI)


	/**
	*
	*@author ww
	*@version 1.0
	*
	*@created 2016-2-24 上午11:13:48
	*/
	//class laya.editor.view.template.TemplateItem extends laya.editor.ui.template.TemplateItemUI
	var TemplateItem=(function(_super){
		function TemplateItem(){
			this.imgWidth=NaN;
			this.imgHeight=NaN;
			this.tImg=null;
			TemplateItem.__super.call(this);
			this.tImg=new Image2();
			this.tImg.on("loaded",this,this.adptImg);
			this.imgWidth=this.imgBg.width;
			this.imgHeight=this.imgBg.height;
			this.addChild(this.tImg);
		}

		__class(TemplateItem,'laya.editor.view.template.TemplateItem',_super);
		var __proto=TemplateItem.prototype;
		__proto.initData=function(tData,picWidth,picHeight,tipFun){
			this.tImg.skin=tData.icon;
			this.tImg["uData"]=tData;
			this.tImg.mouseEnabled=true;
			this.mouseEnabled=true;
			this.toolTip=new Handler(null,tipFun,[tData]);
			this.size(picWidth,picHeight);
			this.tLabel.text=tData.title;
			this.tLabel.align="center";
		}

		__proto.adptImg=function(){
			this.imgWidth=this.imgBg.width;
			this.imgHeight=this.imgBg.height;
			this.imgWidth=76;
			this.imgHeight=65;
			var tt;
			tt=this.tImg.source;
			if(!tt)return;
			var sX=NaN;
			sX=this.imgWidth/tt.width;
			var sY=NaN;
			sY=this.imgHeight/tt.height;
			var scale=NaN;
			scale=sX<sY?sX:sY;
			this.tImg.width*=scale;
			this.tImg.height*=scale;
			this.tImg.x=(this.imgWidth-this.tImg.width)*0.5;
			this.tImg.y=(this.imgHeight-this.tImg.height)*0.5;
		}

		return TemplateItem;
	})(TemplateItemUI)


	/**
	*动画播放控制
	*@author ww
	*@version 1.0
	*
	*@created 2015-12-19 上午11:10:12
	*/
	//class laya.editor.view.timeline.PlayControl extends laya.editor.ui.timeline.PlayControlUI
	var PlayControl=(function(_super){
		function PlayControl(){
			PlayControl.__super.call(this);
			this.on("mousedown",this,this.mouseClickHandler);
		}

		__class(PlayControl,'laya.editor.view.timeline.PlayControl',_super);
		var __proto=PlayControl.prototype;
		__proto.mouseClickHandler=function(e){
			console.log("mouseClick:",e.target.name);
			var tKey;
			tKey=e.target.name;
			if(PlayControl.nameToActionDic.hasOwnProperty(tKey)){
				Notice.notify(PlayControl.nameToActionDic[tKey],[PlayControl.nameToActionDic[tKey]])
			}
		}

		__static(PlayControl,
		['nameToActionDic',function(){return this.nameToActionDic={
				"toBeginPos":"PlayControl_ToBeginPos",
				"pre":"PLAYCONTROL_Pre",
				"play":"PLAYCONTROL_Play",
				"next":"PLAYCONTROL_Next",
				"toEndPos":"PLAYCONTROL_TOEndPOS"
		};}

		]);
		return PlayControl;
	})(PlayControlUI)


	/**
	*时间轴网格
	*@author ww
	*@version 1.0
	*
	*@created 2015-12-4 上午11:06:05
	*/
	//class laya.editor.view.timeline.TimeGrid extends laya.editor.ui.timeline.TimeGridUI
	var TimeGrid=(function(_super){
		function TimeGrid(){
			this._holder=null;
			this._selectFrame=0;
			this.titleLayer=null;
			this.lineLayer=null;
			this.frameLayer=null;
			this.markLayer=null;
			this.timeCursor=null;
			this.frameCount=130;
			this.titleHeight=20;
			this.bigLine=5;
			this.lineScrollX=0;
			this.lineScrollY=0;
			this.layerDataList=null;
			TimeGrid.__super.call(this);
			this.lineLayer=new Sprite();
			this.addChild(this.lineLayer);
			this.titleLayer=new Sprite();
			this.addChild(this.titleLayer);
			this.titleLayer.x=0;
			this.titleLayer.y=0;
			this.lineLayer.x=0;
			this.lineLayer.y=this.titleHeight;
			this.scrollRect=new Rectangle(0,0,this.width,this.height);
			this.lineLayer.on("mousedown",this,this.lineClick);
			this.frameLayer=new Sprite();
			this.addChild(this.frameLayer);
			this.frameLayer.x=this.lineLayer.x;
			this.frameLayer.y=this.lineLayer.y;
			this.frameLayer.size(1,1);
			this.frameLayer.on("mousedown",this,this.lineClick);
			this.markLayer=new Sprite();
			this.addChild(this.markLayer);
			this.markLayer.mouseEnabled=false;
			this.markLayer.y=this.titleLayer.y;
			this.markLayer.x=this.lineLayer.x;
			this.timeCursor=new TimeCursor();
			this.timeCursor.visible=false;
			this.timeCursor.y=this.lineLayer.y;
			this.addChild(this.timeCursor);
			this.timeCursor.on("mousedown",this,this.cursorMouseDown);
			this.timeCursor.on("dragend",this,this.cursorDragEnd);
			this._holder=new TimeFrame();
			var hData;
			hData=new TimeFrameData();
			hData.type=2;
			this._holder.setData(hData);
			this.addListens();
		}

		__class(TimeGrid,'laya.editor.view.timeline.TimeGrid',_super);
		var __proto=TimeGrid.prototype;
		__proto.addListens=function(){}
		__proto.removeListens=function(){}
		__proto.removeHolder=function(){
			this._holder.removeSelf();
		}

		__proto.fakeFrameData=function(){
			var layerList;
			layerList=[];
			var frameList;
			frameList=[];
			var tFrameData;
			tFrameData=new TimeFrameData();
			tFrameData.frame=9;
			frameList.push(tFrameData);
			tFrameData=new TimeFrameData();
			tFrameData.frame=10;
			frameList.push(tFrameData);
			tFrameData=new TimeFrameData();
			tFrameData.frame=34;
			frameList.push(tFrameData);
			tFrameData=new TimeFrameData();
			tFrameData.frame=79;
			frameList.push(tFrameData);
			layerList.push([]);
			layerList.push(frameList);
			layerList.push([]);
			layerList.push([]);
			this.layerDataList=layerList;
		}

		__proto.cursorMouseDown=function(e){
			console.log("cursorMouseDown");
			var option;
			option={};
			option.area=new Rectangle(0,this.timeCursor.y,this.width,0);
			this.timeCursor.startDrag(option.area);
		}

		__proto.cursorDragEnd=function(e){
			this.selectFrame=this.getFrameByX(this.timeCursor.x);
		}

		// updateCursor();
		__proto.getFrameByX=function(xPos){
			return this.lineScrollX+Math.floor(xPos/TimeGrid.frameWidth);
		}

		__proto.getLayerByY=function(yPos){
			return this.lineScrollY+Math.floor(yPos/TimeGrid.frameHeight);
		}

		__proto.lineClick=function(e){
			this.removeHolder();
			var mousePoint;
			mousePoint=DisControlTool.getMousePoint(this.lineLayer);
			console.log("lineClick:",mousePoint.x,mousePoint.y);
			var clickLayer=0;
			var clickFrame=0;
			clickLayer=this.getLayerByY(mousePoint.y);
			clickFrame=this.getFrameByX(mousePoint.x);
			console.log("lineClick: layer:",clickLayer,"frame:",clickFrame);
			this.selectFrame=clickFrame;
			this.event("TIMELINE_CLICKFRAME",[clickLayer,clickFrame]);
			if(e.target.name=="timeFrame"){
				console.log("timeFrameClick:",e.target);
				console.log("frameDragBegin");
				var tFrame;
				tFrame=e.target.parent;
				if(tFrame.data.type==2){
					return;
				}
				tFrame.off("dragend",this,this.frameDragEnd);
				tFrame.on("dragend",this,this.frameDragEnd,[tFrame]);
				var option;
				option={};
				option.area=new Rectangle(0,tFrame.y,this.width,0);
				tFrame.startDrag(option.area);
				}else{
				if(clickLayer<this.layerCount&&clickFrame<this.frameCount){
					this.frameLayer.addChild(this._holder);
					this._holder.x=this.getXByFrame(clickFrame);
					this._holder.y=this.getYByLayer(clickLayer);
				}
			}
		}

		// updateCursor();
		__proto.frameDragEnd=function(frame){
			frame.off("dragend",this,this.frameDragEnd);
			var layer=0;
			layer=this.getLayerByY(frame.y);
			console.log("frameDragEnd: layer:",layer);
			this.selectFrame=this.getFrameByX(frame.x);
			frame.x=this.getXByFrame(this.selectFrame);
			if(frame.data.frame==this.selectFrame)return;
			if(frame.data.frame==0){
				var newFrameData;
				frame.data.frame=this.selectFrame;
				newFrameData=TreeData.addFrame(this.layerDataList[layer],0,ObjectTools.copyObj(frame.data.props));
				var newFrame;
				newFrame=new TimeFrame();
				newFrame.setData(newFrameData);
				frame.parent.addChild(newFrame);
				newFrame.y=frame.y;
				newFrame.x=this.getXByFrame(0);
				}else{
			}
			frame.data.frame=this.selectFrame;
			Notice.notify("TimeLine_changed");
		}

		__proto.updateCursor=function(){
			if(this.selectFrame<this.lineScrollX||this.selectFrame>this.lineScrollX+this.xCount){
				this.timeCursor.visible=false;
				return;
			}
			this.timeCursor.visible=true;
			this.timeCursor.x=this.getXByFrame(this.selectFrame)+0.5*TimeGrid.frameWidth;;
			Notice.notify("TimeLineFrameSelected",[this.selectFrame]);
		}

		__proto.getFramePos=function(layer,frame){
			TimeGrid.framePos.x=this.getXByFrame(frame);
			TimeGrid.framePos.y=this.getYByLayer(layer);
			return TimeGrid.framePos;
		}

		__proto.getXByFrame=function(frame){
			return (frame-this.lineScrollX)*TimeGrid.frameWidth;
		}

		__proto.getYByLayer=function(layer){
			return (layer-this.lineScrollY)*TimeGrid.frameHeight;
		}

		__proto.changeSize=function(){
			laya.ui.Component.prototype.changeSize.call(this);
			this.adptToSize();
		}

		__proto.adptToSize=function(){
			var rec;
			rec=this.scrollRect;
			rec.width=this.width;
			rec.height=this.height;
			this.titleLayer.width=this.width;
			this.lineLayer.width=this.width;
			this.lineLayer.height=this.height-this.lineLayer.y;
			this.timeCursor.sizeTo(this.lineLayer.height);
			this.renderData();
		}

		__proto.setHScrollValue=function(value){
			this.lineScrollX=Math.floor(value);
			this.renderData();
		}

		__proto.setVScrollValue=function(value){
			this.lineScrollY=Math.floor(value);
			this.renderData();
		}

		__proto.setData=function(layerList){
			this.layerDataList=layerList;
			this.renderData();
		}

		__proto.renderData=function(){
			this.drawTitle();
			this.drawGrids();
			this.updateCursor();
			this.renderItems();
		}

		__proto.renderItems=function(){
			this.frameLayer.removeChildren();
			if(!this.layerDataList)return;
			var layerStart=0;
			var layerMax=0;
			var i=0;
			layerStart=this.lineScrollY;
			layerMax=layerStart+this.yCount+1;
			for(i=layerStart;i<layerMax;i++){
				this.renderLayerData(i);
			}
		}

		__proto.renderLayerData=function(layer){
			if(!this.layerDataList||!this.layerDataList[layer])return;
			var frameStart=0;
			var frameMax=0;
			var i=0;
			frameStart=this.lineScrollX;
			frameMax=frameStart+this.xCount+1;
			var frameList;
			frameList=this.layerDataList[layer].frames;
			var len=0;
			len=frameList.length;
			var tFrame;
			var tData;
			var tY=NaN;
			tY=this.getYByLayer(layer);
			for(i=0;i<len;i++){
				tData=frameList[i];
				if(tData.frame<frameStart)continue ;
				if(tData.frame>frameMax)break ;
				tFrame=new TimeFrame();
				tFrame.setData(tData);
				tFrame.pos(this.getXByFrame(tData.frame),tY);
				this.frameLayer.addChild(tFrame);
			}
		}

		__proto.drawTitle=function(){
			var i=0,len=0;
			var g=this.titleLayer.graphics;
			g.clear();
			var tX=NaN;
			tX=0;
			var startI=NaN;
			startI=this.lineScrollX;
			var maxX=NaN;
			maxX=tX+this.titleLayer.width;
			for(i=startI;tX<maxX;i++){
				if(i%this.bigLine==0){
					g.fillText(i+"",tX,2,null,"#ff0000","left");
					}else{
				}
				tX+=TimeGrid.frameWidth;
			}
		}

		__proto.drawGrids=function(){
			var i=0,len=0;
			this.lineLayer.removeChildren();
			var g=this.lineLayer.graphics;
			g.clear();
			var sx=NaN;
			sx=0;
			var startYI=0;
			startYI=this.lineScrollY;
			var maxY=NaN;
			maxY=this.lineLayer.height;
			var lineWidth=0;
			lineWidth=this.lineLayer.width;
			var tY=NaN;
			tY=0;
			var colorList=["#ffff00","#999900","#555500"];
			for(i=startYI;tY<=maxY;i++){
				if(i>=this.layerCount)break ;
				g.drawRect(sx,tY,lineWidth,TimeGrid.frameHeight-2,colorList[i%3],"#222222",1);
				tY+=TimeGrid.frameHeight;
			};
			var tX=NaN;
			tX=this.scrollRect.x;
			var startI=NaN;
			startI=this.lineScrollX;
			tX=0;
			var lineHeight=NaN;
			lineHeight=tY-2;
			var maxX=NaN;
			maxX=tX+this.lineLayer.width;
			for(i=startI;tX<maxX;i++){
				if(i%this.bigLine==0){
					g.drawLine(tX,0,tX,lineHeight,"#009999",3);
					}else{
					g.drawLine(tX,0,tX,lineHeight,"#006666",1);
				}
				tX+=TimeGrid.frameWidth;
			}
		}

		// public var layerCount:int=6;
		__getset(0,__proto,'layerCount',function(){
			if(!this.layerDataList)return 0;
			return this.layerDataList.length;
		});

		__getset(0,__proto,'selectFrame',function(){
			return this._selectFrame;
			},function(value){
			this._selectFrame=value;
			console.log("selectFrame:",this.selectFrame);
			this.updateCursor();
		});

		__getset(0,__proto,'startXRange',function(){
			return this.frameCount-Math.floor(this.lineLayer.width/TimeGrid.frameWidth);
		});

		__getset(0,__proto,'xCount',function(){
			return Math.floor(this.lineLayer.width/TimeGrid.frameWidth);
		});

		__getset(0,__proto,'yCount',function(){
			return Math.floor(this.lineLayer.height/TimeGrid.frameHeight);
		});

		__getset(0,__proto,'startYRange',function(){
			return this.layerCount-Math.floor(this.lineLayer.height/TimeGrid.frameHeight);
		});

		TimeGrid.frameWidth=10;
		TimeGrid.frameHeight=30;
		__static(TimeGrid,
		['framePos',function(){return this.framePos=new Point();}
		]);
		return TimeGrid;
	})(TimeGridUI)


	/**
	*
	*@author ww
	*@version 1.0
	*
	*@created 2015-12-7 上午10:20:44
	*/
	//class laya.editor.view.timeline.tree.TimeLineTree extends laya.ide.ui.NodeTree
	var TimeLineTree=(function(_super){
		function TimeLineTree(){
			TimeLineTree.__super.call(this);
		}

		__class(TimeLineTree,'laya.editor.view.timeline.tree.TimeLineTree',_super);
		var __proto=TimeLineTree.prototype;
		__proto.createChildren=function(){
			this.addChild(this._list=new TimeLineList());
			this._list.renderHandler=Handler.create(this,this.renderItem,null,false);
			this._list.repeatX=1;
			this._list.on("change",this,this.onListChange);
		}

		__getset(0,__proto,'mList',function(){
			return this._list;
		});

		return TimeLineTree;
	})(NodeTree)


	/**
	*...
	*@author ww
	*/
	//class laya.ide.ui.TreeEx extends laya.ide.ui.NodeTree
	var TreeEx=(function(_super){
		function TreeEx(){
			TreeEx.__super.call(this);
		}

		__class(TreeEx,'laya.ide.ui.TreeEx',_super);
		var __proto=TreeEx.prototype;
		__proto.createChildren=function(){
			this.addChild(this._list=new ListEx());
			this._list.renderHandler=Handler.create(this,this.renderItem,null,false);
			this._list.repeatX=1;
			this._list.on("change",this,this.onListChange);
		}

		__getset(0,__proto,'mList',function(){
			return this._list;
		});

		return TreeEx;
	})(NodeTree)


	/**
	*
	*@author ww
	*@version 1.0
	*
	*@created 2016-2-29 下午3:07:35
	*/
	//class laya.ide.ui.TabEx extends laya.ui.Tab
	var TabEx=(function(_super){
		function TabEx(){
			this._otherBack=null;
			this.maxLen=-1;
			this._otherContainer=null;
			this._otherBtn=null;
			TabEx.__super.call(this);
			this._otherContainer=new Box();
			this._otherContainer.mouseEnabled=true;
			this._otherBtn=new Button();
			this._otherBtn.skin="comp/button.png";
			this._otherBtn.width=20;
			this._otherBtn.on("click",this,this.switchOtherContainer);
			this._otherContainer.on("click",this,this.hideOtherContainer);
		}

		__class(TabEx,'laya.ide.ui.TabEx',_super);
		var __proto=TabEx.prototype;
		__proto.switchOtherContainer=function(){
			if(this._otherContainer.parent){
				this.hideOtherContainer();
				}else{
				this.showOtherContainer();
			}
		}

		__proto.hideOtherContainer=function(){
			this._otherContainer.removeSelf();
			Laya.stage.off("click",this,this.hideOtherContainer);
		}

		__proto.showOtherContainer=function(){
			var tPoint;
			tPoint=Point.TEMP;
			tPoint.setTo(this._otherBtn.width,this._otherBtn.height);
			tPoint=this._otherBtn.localToGlobal(tPoint);
			Laya.stage.addChild(this._otherContainer);
			this._otherContainer.pos(tPoint.x-this._otherContainer.width,tPoint.y);
			Laya.timer.once(100,this,this.addRemoveEvents);
		}

		__proto.addRemoveEvents=function(){
			if(!this._otherContainer.parent)return;
			Laya.stage.off("click",this,this.hideOtherContainer);
			Laya.stage.on("click",this,this.hideOtherContainer);
		}

		__proto.addItem=function(item,autoLayOut){
			(autoLayOut===void 0)&& (autoLayOut=true);
			var rst=0;
			rst=laya.ui.Group.prototype.addItem.call(this,item,autoLayOut);
			this.updateUI();
			if(this.maxLen<0)return rst;
			if((item).parent==this._otherContainer){
				this.itemClick(rst);
			}
			return this._items.indexOf(item);
		}

		__proto.delItem=function(item,autoLayOut){
			(autoLayOut===void 0)&& (autoLayOut=true);
			var index=this._items.indexOf(item);
			if (index !=-1){
				var display=item;
				this.removeChild(display);
				for (var i=index+1,n=this._items.length;i < n;i++){
					var child=this._items [i];
					child.name="item"+(i-1);
					if (autoLayOut){
						if (this._direction=="horizontal"){
							child.x-=display.width+this._space;
							}else {
							child.y-=display.height+this._space;
						}
					}
				}
				this._items.splice(index,1);
				this.initItems();
				if (this._selectedIndex >-1){
					var newIndex=0;
					newIndex=this._selectedIndex < this._items.length ? this._selectedIndex :(this._selectedIndex-1);
					this._selectedIndex=99;
					this.selectedIndex=newIndex;
				}
			}
			this.updateUI();
		}

		__proto.switchItemToDis=function(index){
			var tItem;
			tItem=this._items[index];
			this._items.splice(index,1);
			this._items.unshift(tItem);
			this.reNameItems();
			this.initItems();
			this.updateUI();
			return this._items.indexOf(tItem);
		}

		__proto.reNameItems=function(){
			var i=0,len=0;
			var tItem;
			len=this._items.length;
			for(i=0;i<len;i++){
				tItem=this._items [i];
				tItem.name="item"+i;
			}
		}

		__proto.itemClick=function(index){
			laya.ui.Group.prototype.itemClick.call(this,index);
		}

		__proto.updateUI=function(){
			if(this.maxLen<0)return;
			var maxUILen=NaN;
			maxUILen=this.maxLen-this._otherBtn.width-2;
			var i=0,len=0;
			len=this._items.length;
			var _otherList;
			_otherList=[];
			var preItem;
			var tItem;
			var tX=NaN;
			var tY=NaN;
			tX=0;
			tY=0;
			for(i=0;i<len;i++){
				tItem=this._items [i];
				tItem.pos(tX,tY);
				this.addChild(tItem);
				if (this._direction=="horizontal"){
					tX=tItem.x+tItem.width+this._space;
					if(tX>maxUILen){
						_otherList.push(tItem);
					}
					}else {
					tY=tItem.y+tItem.height+this._space;
				}
			}
			if(_otherList.length>0){
				this.addChild(this._otherBtn);
				this._otherBtn.pos(this.maxLen-this._otherBtn.width,0);
				}else{
				this._otherBtn.removeSelf();
			}
			this.setUpOtherList(_otherList);
		}

		__proto.setUpOtherList=function(_items){
			if(!this._otherBack){
				this._otherBack=new Image2();
				this._otherBack.skin="view/bg_menu.png";
			}
			this._otherContainer.removeChildren();
			this._otherBack.size(10,10);
			this._otherContainer.addChild(this._otherBack);
			var i=0,len=0;
			len=_items.length;
			var tItem;
			var tX=NaN;
			var tY=NaN;
			tX=0;
			tY=0;
			for(i=0;i<len;i++){
				tItem=_items[i];
				tItem.pos(tX,tY);
				this._otherContainer.addChild(tItem);
				tY=tItem.y+tItem.height+this._space;
			}
			this._otherBack.size(this._otherContainer.width,this._otherContainer.height);
		}

		__proto.initItems=function(){
			if(this.maxLen>0){
				if(this._items){
					var i=0,len=0;
					len=this._items.length;
					var tItem;
					for(i=0;i<len;i++){
						tItem=this._items [i];
						this.addChild(tItem);
					}
				}
			}
			laya.ui.Group.prototype.initItems.call(this);
		}

		__getset(0,__proto,'selectedIndex',_super.prototype._$get_selectedIndex,function(value){
			if(this.maxLen<0){
				_super.prototype._$set_selectedIndex.call(this,value);
				return;
			};
			var tItem;
			tItem=this._items [value];
			if(tItem){
				if(tItem.parent==this._otherContainer){
					var newIndex=0;
					newIndex=this.switchItemToDis(value);
					_super.prototype._$set_selectedIndex.call(this,newIndex);
					return;
				}
			}
			this.setSelect(this._selectedIndex,false);
			this._selectedIndex=-2;
			_super.prototype._$set_selectedIndex.call(this,value);
		});

		return TabEx;
	})(Tab)


	/**提示框
	*@author yung
	*/
	//class laya.editor.comonents.Alert extends laya.editor.ui.comp.AlertUI
	var Alert=(function(_super){
		function Alert(){Alert.__super.call(this);;
		};

		__class(Alert,'laya.editor.comonents.Alert',_super);
		var __proto=Alert.prototype;
		__proto.start=function(msg,title){
			this.titleLbl.text=title;
			this.msgLbl.text=msg;
			this.popup();
		}

		__getset(1,Alert,'instance',function(){
			return Alert._instance?Alert._instance:Alert._instance=new Alert();
		},laya.editor.ui.comp.AlertUI._$SET_instance);

		Alert.show=function(msg,title){
			(title===void 0)&& (title="提示");
			Alert.instance.start(msg,title);
		}

		Alert._instance=null
		return Alert;
	})(AlertUI)


	/**确认框
	*@author yung
	*/
	//class laya.editor.comonents.Confirm extends laya.editor.ui.comp.ConfirmUI
	var Confirm=(function(_super){
		function Confirm(){
			this._handler=null;
			this._args=null;
			Confirm.__super.call(this);
		}

		__class(Confirm,'laya.editor.comonents.Confirm',_super);
		var __proto=Confirm.prototype;
		__proto.start=function(msg,title,handler,args){
			this.titleLbl.text=title;
			this.msgLbl.text=msg;
			this._handler=handler;
			this._args=args;
			this.popup();
		}

		__proto.close=function(type){
			laya.ui.Dialog.prototype.close.call(this,type);
			if (this._handler !=null){
				var data=[type=="sure"];
				this._handler.apply(null,this._args ? this._args.concat(data):data);
			}
		}

		__getset(1,Confirm,'instance',function(){
			return Confirm._instance ? Confirm._instance :Confirm._instance=new Confirm();
		},laya.editor.ui.comp.ConfirmUI._$SET_instance);

		Confirm.show=function(msg,title,handler,args){
			Confirm.instance.start(msg,title,handler,args);
		}

		Confirm._instance=null
		return Confirm;
	})(ConfirmUI)


	/**等待提示框
	*@author yung
	*/
	//class laya.editor.comonents.Waiting extends laya.editor.ui.comp.WaitingUI
	var Waiting=(function(_super){
		function Waiting(){Waiting.__super.call(this);;
		};

		__class(Waiting,'laya.editor.comonents.Waiting',_super);
		var __proto=Waiting.prototype;
		__proto.start=function(msg,title){
			this.titleLbl.text=title;
			this.msgLbl.text=msg;
			this.popup();
		}

		__getset(1,Waiting,'instance',function(){
			return Waiting._instance ? Waiting._instance :Waiting._instance=new Waiting();
		},laya.editor.ui.comp.WaitingUI._$SET_instance);

		Waiting.show=function(msg,title){
			Waiting.instance.start(msg,title);
		}

		Waiting.hide=function(){
			Waiting.instance.close();
		}

		Waiting._instance=null
		return Waiting;
	})(WaitingUI)


	/**关于
	*@author yung
	*/
	//class laya.editor.view.other.About extends laya.editor.ui.other.AboutUI
	var About=(function(_super){
		function About(){
			About.__super.call(this);
		}

		__class(About,'laya.editor.view.other.About',_super);
		var __proto=About.prototype;
		//newVer.textField.addEventListener(Event.LINK,onTextFieldLink);
		__proto.onTextFieldLink=function(e){}
		//}
		__proto.start=function(){
			this.currVer.text="当前版本："+"0.9.7";
			this.popup();
		}

		__getset(1,About,'instance',function(){
			return About._instance ? About._instance :About._instance=new About();
		},laya.editor.ui.other.AboutUI._$SET_instance);

		About._instance=null
		return About;
	})(AboutUI)


	/**新建项目
	*@author yung
	*/
	//class laya.editor.view.other.AddProject extends laya.editor.ui.other.AddProjectUI
	var AddProject=(function(_super){
		function AddProject(){
			AddProject.__super.call(this);
			this.browseBtn.on("click",this,this.onBrowseBtnClick);
		}

		__class(AddProject,'laya.editor.view.other.AddProject',_super);
		var __proto=AddProject.prototype;
		__proto.onBrowseBtnClick=function(e){
			DialogTools.showOpenDir("选择项目所在的位置",Utils1.bind(this.onFileSelect,this));
		}

		//file.addEventListener(Event.SELECT,onFileSelect);
		__proto.onFileSelect=function(files){
			if(files&&files[0])
				this.pathTxt.text=files[0];
		}

		__proto.start=function(){
			this.nameTxt.text="MyLaya";
			this.pathTxt.text=FileManager.getPath(Device.userHome,"MyLaya");
			this.popup();
			Laya.stage.focus=this.nameTxt.textField;
		}

		__proto.close=function(type){
			laya.ui.Dialog.prototype.close.call(this,type);
			if (type=="sure"){
				if (Boolean(this.nameTxt.text)&& Boolean(this.pathTxt.text)){
					if (FileTools.exist(FileManager.getPath(this.pathTxt.text,"laya"))){
						Confirm.instance.start("此目录已经有Laya项目了，确定覆盖掉吗？","是否覆盖",Utils1.bind(this.createProject,this));
						}else{
						this.createProject(true);
					}
					}else {
					Alert.show("项目名称及路径不能为空");
				}
			}
		}

		__proto.createProject=function(sure){
			if (sure){
				AddProject.str=AddProject.str.replace("<codeType>0</codeType>","<codeType>"+this.langDrop.selectedIndex+"</codeType>");
				ProjectSetting.codeType=this.langDrop.selectedIndex;
				FileManager.copyFile(FileManager.getAppPath("laya/default"),FileManager.getPath(this.pathTxt.text,"laya"));
				var path=FileManager.getPath(this.pathTxt.text,this.nameTxt.text+".laya");
				FileManager.createTxtFile(path,AddProject.str);
				ProjectManager.loadProject(path);
			}
		}

		__getset(1,AddProject,'instance',function(){
			return AddProject._instance ? AddProject._instance :AddProject._instance=new AddProject();
		},laya.editor.ui.other.AddProjectUI._$SET_instance);

		AddProject._instance=null
		__static(AddProject,
		['str',function(){return this.str="<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"+"<project version=\"1\">\n"+"	<!--assets异步资源目录，在这些目录里面的资源，不会被编译到swf里面，但会复制到发布目录-->\n"+"	<asynRes>img,temp,sound</asynRes>\n"+"	<!--assets不处理目录，在这些目录里面的资源，不会做任何处理（包括复制）-->\n"+"	<unDealRes>embed</unDealRes>\n"+"	<!--资源类型-->\n"+"	<resTypes>png,jpg</resTypes>\n"+"	<!--发布资源导出目录-->\n"+"	<resExportPath>bin/h5</resExportPath>\n"+"	<!--UICode导出目录-->\n"+"	<codeExportPath>src/game/ui</codeExportPath>\n"+"	<!--UICode默认导入类-->\n"+"	<codeImports>import laya.ui.*;</codeImports>\n"+"	<codeImportsJS>var View=laya.ui.View;\nvar Dialog=laya.ui.Dialog;</codeImportsJS>\n"+"	<!--UI模式（0:内嵌模式，1:加载模式）-->\n"+"	<uiType>0</uiType>\n"+"	<!--UI导出目录（加载模式可用）-->\n"+"	<uiExportPath>bin/ui.swf</uiExportPath>\n"+"	<!--容器列表（转换为容器功能使用）-->\n"+"	<boxTypes>Box,List,Tab,RadioGroup,ViewStack,Panel,HBox,VBox,Tree</boxTypes>\n"+"	<!--页面类型（用于自定义页面继承）-->\n"+"	<pageTypes>View,Dialog</pageTypes>\n"+"	<!--多模块开发时共用的资源目录-->\n"+"	<shareResPath></shareResPath>\n"+"	<!--语言类型-->\n"+"	<codeType>0</codeType>\n"+"</project>";}
		]);
		return AddProject;
	})(AddProjectUI)


	/**
	*
	*@author ww
	*@version 1.0
	*
	*@created 2015-12-15 上午9:55:29
	*/
	//class laya.editor.view.ani.AnimationDesign extends laya.editor.core.Design
	var AnimationDesign=(function(_super){
		function AnimationDesign(){
			this._frame=0;
			AnimationDesign.__super.call(this);
		}

		__class(AnimationDesign,'laya.editor.view.ani.AnimationDesign',_super);
		var __proto=AnimationDesign.prototype;
		__proto.addListens=function(){
			_super.prototype.addListens.call(this);
			Notice.listen("TimeLineFrameSelected",this,this.frameSelected,null,true);
			Notice.listen("TimeLine_changed",this,this.timeLineChanged,null,true);
		}

		__proto.removeListens=function(){
			_super.prototype.removeListens.call(this);
			Notice.cancel("TimeLineFrameSelected",this,this.frameSelected);
			Notice.cancel("TimeLine_changed",this,this.timeLineChanged);
		}

		__proto.frameSelected=function(selectFrame){
			console.log("frameSelected:",selectFrame);
			this.frame=selectFrame;
		}

		__proto.timeLineChanged=function(){
			this.changeXml(this._xml,false);
		}

		/**
		*显示UI到当前帧
		*
		*/
		__proto.showToFrame=function(){
			TreeData.displayTreeToFrame(this._xml,this.frame,true,true);
			this.updateUIs(this._viewLayer);
		}

		/**
		*更新节点树
		*@param comp
		*
		*/
		__proto.updateUIs=function(comp){
			this.freshComp(comp);
			var i=0,len=0;
			var childs;
			childs=DisControlTool.getAllChild(comp);
			len=childs.length;
			for(i=0;i<len;i++){
				this.updateUIs(childs[i]);
			}
		}

		/**
		*刷新节点
		*@param comp
		*
		*/
		__proto.freshComp=function(comp){
			console.log("freshComp:",comp,comp["comXml"]);
			var data;
			if(!comp["comXml"])return;
			data=comp["comXml"].props;
			var key;
			for(key in data){
				comp[key]=data[key];
			}
		}

		__proto.cacheXML=function(newXml){
			_super.prototype.cacheXML.call(this,newXml);
		}

		__proto.nodeChanged=function(node){
			_super.prototype.nodeChanged.call(this,node);
			TreeData.recordFrame(node,this.frame,true);
			this.changeXml(this._xml);
			this.updateTimeLinePanel();
		}

		__proto.updateTimeLinePanel=function(){
			TimeLinePanel.instance.setData(this._treeData);
		}

		__getset(0,__proto,'frame',function(){
			return this._frame;
			},function(value){
			this._frame=value;
			this.showToFrame();
			var preSelect;
			preSelect=this.selectedComp;
			if(preSelect){
				this.clearSelect();
				preSelect=this._compMap[preSelect["comXml"].compId];
				if(preSelect){
					this.selectComp(preSelect);
				}
			}
		});

		return AnimationDesign;
	})(Design)


	/**打包组件
	*@author yung
	*/
	//class laya.editor.view.other.BoxComp extends laya.editor.ui.other.BoxCompUI
	var BoxComp=(function(_super){
		function BoxComp(){BoxComp.__super.call(this);;
		};

		__class(BoxComp,'laya.editor.view.other.BoxComp',_super);
		var __proto=BoxComp.prototype;
		__proto.start=function(){
			this.popup();
			this.typeDrop.labels=ProjectSetting.boxTypes.join(",");
			this.typeDrop.selectedIndex=0;
		}

		__proto.close=function(type){
			laya.ui.Dialog.prototype.close.call(this,type);
			if (type=="sure"){
				var boxType=this.typeDrop.selectedLabel;
				if (Boolean(boxType)){
					UIPanel.instance.boxComp(boxType);
				}
			}
			UIPanel.instance.focusDesign();
			Notice.notify("Focus_design");
		}

		__getset(1,BoxComp,'instance',function(){
			return BoxComp._instance ? BoxComp._instance :BoxComp._instance=new BoxComp();
		},laya.editor.ui.other.BoxCompUI._$SET_instance);

		BoxComp._instance=null
		return BoxComp;
	})(BoxCompUI)


	/**
	*...
	*@author ww
	*/
	//class laya.editor.view.other.ConvertProject extends laya.editor.ui.other.ConvertProjectUI
	var ConvertProject=(function(_super){
		function ConvertProject(){
			ConvertProject.__super.call(this);
			this.browseBtn.on("click",this,this.onBrowseBtnClick);
			this.browseOldBtn.on("click",this,this.onOldBrowseBtnClick);
		}

		__class(ConvertProject,'laya.editor.view.other.ConvertProject',_super);
		var __proto=ConvertProject.prototype;
		__proto.onBrowseBtnClick=function(e){
			DialogTools.showOpenDir("选择目标项目所在的位置",Utils1.bind(this.onFileSelect,this));
		}

		__proto.onFileSelect=function(files){
			if(files&&files[0])
				this.pathTxt.text=files[0];
		}

		__proto.onOldBrowseBtnClick=function(e){
			DialogTools.showOpenFile("打开项目",Utils1.bind(this.onOldFileSelect,this),DialogTools.getOpenProO("打开要转换的项目","morn"));
		}

		__proto.onOldFileSelect=function(files){
			if(files&&files[0])
				this.pathOldTxt.text=files[0];
		}

		__proto.start=function(){
			this.pathTxt.text="";
			this.popup();
		}

		// Laya.stage.focus=nameTxt.textField;
		__proto.close=function(type){
			laya.ui.Dialog.prototype.close.call(this,type);
			if (type=="sure"){
				if (Boolean(this.pathOldTxt.text)&& Boolean(this.pathTxt.text)){
					if (FileTools.exist(FileManager.getPath(this.pathTxt.text,"laya"))){
						Confirm.instance.start("此目录已经有Laya项目了，确定覆盖掉吗？","是否覆盖",Utils1.bind(this.createProject,this));
						}else{
						this.createProject(true);
					}
					}else {
					Alert.show("项目名称及路径不能为空");
				}
			}
		}

		__proto.createProject=function(sure){
			if (sure){
				console.log("convert: oPath:",this.pathOldTxt.text," newPath:",this.pathTxt.text);
				ProjectConvertManager.convertProject(this.pathOldTxt.text,this.pathTxt.text);
			}
		}

		__getset(1,ConvertProject,'instance',function(){
			return ConvertProject._instance ? ConvertProject._instance :ConvertProject._instance=new ConvertProject();
		},laya.editor.ui.other.ConvertProjectUI._$SET_instance);

		ConvertProject._instance=null
		return ConvertProject;
	})(ConvertProjectUI)


	/**查找替换
	*@author yung
	*/
	//class laya.editor.view.other.FindAndReplace extends laya.editor.ui.other.FindAndReplaceUI
	var FindAndReplace=(function(_super){
		function FindAndReplace(){
			FindAndReplace.__super.call(this);
			this.findBtn.on("click",this,this.onFindBtnClick);
			this.replaceBtn.on("click",this,this.onReplaceBtnClick);
			this.list.on("doubleclick",this,this.onListDoubleClick);
		}

		__class(FindAndReplace,'laya.editor.view.other.FindAndReplace',_super);
		var __proto=FindAndReplace.prototype;
		__proto.initListener=function(){
			Notice.listen("findResRefer",this,this.start);
		}

		// list.doubleClickEnabled=true;
		__proto.onListDoubleClick=function(e){
			var path=this.list.array[this.list.selectedIndex].path;
			if (path){
				Notice.notify("openPAGE",[path]);
			}
		}

		__proto.onReplaceBtnClick=function(e){
			if (this.findTxt.text !="" && this.findTxt.text !=this.replaceTxt.text){
				Confirm.show(Sys.lang("你确定要将 [{0}] 替换为 [{1}] 吗？替换后不能直接恢复",this.findTxt.text,this.replaceTxt.text),"确定替换",Utils1.bind(this.onConfirmBack,this));
			}
		}

		__proto.onConfirmBack=function(sure){
			if (sure){
				console.log("替换功能暂时未实现");
				return;
				var arr=PageManager.replace(new RegExp(this.findTxt.text,"g"),this.replaceTxt.text);
				this.list.array=arr;
				this.msgTxt.text=Sys.lang("共替换了 {0} 个页面，双击列表打开页面",arr.length);
			}
		}

		__proto.onFindBtnClick=function(e){
			if (this.findTxt.text !=""){
				this.doFind();
			}
		}

		__proto.doFind=function(){
			var arr=PageManager.find(this.findTxt.text);
			this.list.array=arr;
			this.msgTxt.text=Sys.lang("共找到 {0} 个页面，双击列表打开页面",arr.length);
		}

		__proto.start=function(content){
			this.show(true);
			this.msgTxt.text="";
			if(content){
				this.findTxt.text=content;
			}
			this.list.array=[];
		}

		__getset(1,FindAndReplace,'instance',function(){
			return FindAndReplace._instance ? FindAndReplace._instance :FindAndReplace._instance=new FindAndReplace();
		},laya.editor.ui.other.FindAndReplaceUI._$SET_instance);

		FindAndReplace._instance=null
		return FindAndReplace;
	})(FindAndReplaceUI)


	/**查找未被使用的资源
	*@author yung
	*/
	//class laya.editor.view.other.FindUnUsedRes extends laya.editor.ui.other.FindUnUsedResUI
	var FindUnUsedRes=(function(_super){
		function FindUnUsedRes(){
			this._arr=null;
			FindUnUsedRes.__super.call(this);
			this.findBtn.on("click",this,this.onFindBtnClick);
			this.list.mouseHandler=new Handler(this,this.onList);
			this.delBtn.on("click",this,this.onDelBtnClick);
		}

		__class(FindUnUsedRes,'laya.editor.view.other.FindUnUsedRes',_super);
		var __proto=FindUnUsedRes.prototype;
		__proto.onDelBtnClick=function(e){
			if (this._arr.length > 0){
				Confirm.show("你确定删除选中的资源吗(删除后可在垃圾箱内找回)","确定删除",Utils1.bind(this.onConfirmBack,this));
			}
		}

		__proto.onConfirmBack=function(sure){
			if (sure){
				var item;
				for(var $each_item in this._arr){
					item=this._arr[$each_item];
					if (item.check.selected){
						ResManager.removeRes(item.path);
					}
				}
				Notice.notify("FRESH_RES");
				this.onFindBtnClick(null);
			}
		}

		__proto.onList=function(e,index){
			if (e.type=="click"){
				if ((e.target instanceof laya.ui.CheckBox )){
					this._arr[index].check.selected=(e.target).selected;
					this.list.refresh();
				}
			}
		}

		__proto.onCheckSelectAllChange=function(e){
			var item;
			for(var $each_item in this._arr){
				item=this._arr[$each_item];
				if (Boolean(item.path)){
					item.check={selected:this.checkSelectAll.selected,visible:true};
					}else {
					item.check={selected:false,visible:false};
				}
			}
			this.list.array=this._arr;
		}

		__proto.onFindBtnClick=function(e){
			this.resultBox.visible=true;
			this._arr=ResManager.findUnUsed();
			this.msgTxt.text=Sys.lang("共找到 {0} 个资源",this._arr.length);
			this.checkSelectAll.selected=true;
			this.onCheckSelectAllChange(null);
			this.checkSelectAll.on("change",this,this.onCheckSelectAllChange);
		}

		__proto.start=function(){
			this.show(true);
			this.resultBox.visible=false;
			this.checkSelectAll.off("change",this,this.onCheckSelectAllChange);
		}

		__getset(1,FindUnUsedRes,'instance',function(){
			return FindUnUsedRes._instance ? FindUnUsedRes._instance :FindUnUsedRes._instance=new FindUnUsedRes();
		},laya.editor.ui.other.FindUnUsedResUI._$SET_instance);

		FindUnUsedRes._instance=null
		return FindUnUsedRes;
	})(FindUnUsedResUI)


	/**预览
	*@author yung
	*/
	//class laya.editor.view.other.Preview extends laya.editor.ui.other.PreviewUI
	var Preview=(function(_super){
		function Preview(){
			Preview.__super.call(this);
		}

		__class(Preview,'laya.editor.view.other.Preview',_super);
		var __proto=Preview.prototype;
		__proto.start=function(xml){
			this.size(Laya.stage.width,Laya.stage.height);
			this.popup();
			this.panel.removeChildren();
			var view=new UIView();
			view.createView(Utils.clone(xml));
			var box=view.getChildAt(0);
			view.x=(this._width-view.width)*0.5;
			view.y=(this._height-view.height)*0.5;
			this.panel.addChild(view);
		}

		__getset(1,Preview,'instance',function(){
			return Preview._instance ? Preview._instance :Preview._instance=new Preview();
		},laya.editor.ui.other.PreviewUI._$SET_instance);

		Preview._instance=null
		return Preview;
	})(PreviewUI)


	/**重复创建组件
	*@author yung
	*/
	//class laya.editor.view.other.RepeatComp extends laya.editor.ui.other.RepeatCompUI
	var RepeatComp=(function(_super){
		function RepeatComp(){RepeatComp.__super.call(this);;
		};

		__class(RepeatComp,'laya.editor.view.other.RepeatComp',_super);
		var __proto=RepeatComp.prototype;
		__proto.start=function(){
			this.popup();
		}

		__proto.close=function(type){
			laya.ui.Dialog.prototype.close.call(this,type);
			if (type=="sure"){
				UIPanel.instance.repeatComp(Laya.__parseInt(this.rowTxt.text),Laya.__parseInt(this.columnTxt.text),Laya.__parseInt(this.paddingXTxt.text),Laya.__parseInt(this.paddingYTxt.text));
			}
			Notice.notify("Focus_design");
		}

		__getset(1,RepeatComp,'instance',function(){
			return RepeatComp._instance ? RepeatComp._instance :RepeatComp._instance=new RepeatComp();
		},laya.editor.ui.other.RepeatCompUI._$SET_instance);

		RepeatComp._instance=null
		return RepeatComp;
	})(RepeatCompUI)


	/**设置项目
	*@author yung
	*/
	//class laya.editor.view.other.SetProject extends laya.editor.ui.other.SetProjectUI
	var SetProject=(function(_super){
		function SetProject(){
			SetProject.__super.call(this);
			this.codeExportPathBtn.on("click",this,this.onCodeExportPathBtnClick);
			this.resExportPathBtn.on("click",this,this.onResExportPathBtnClick);
			this.shareResPathBtn.on("click",this,this.onShareResPathBtnClick);
			this.langPathBtn.on("click",this,this.onLangPathBtnClick);
			this.codeType.on("change" ,this,this.onCodeTypeChange);
		}

		__class(SetProject,'laya.editor.view.other.SetProject',_super);
		var __proto=SetProject.prototype;
		__proto.onCodeTypeChange=function(){
			this.updateCodeImportToUI();
		}

		__proto.updateCodeImportToUI=function(){
			switch(Math.ceil(this.codeType.selectedIndex)){
				case 0:
					this.codeImports.text=ProjectSetting.codeImports;
					break ;
				case 2:
				case 2:
					this.codeImports.text=ProjectSetting.codeImportsJS;
					break ;
				case 1:
					this.codeImports.text=ProjectSetting.codeImportsTS;
					break ;
				}
		}

		__proto.init=function(){
			ProjectSetting.adptPaths();
			this.resTypes.text=StringTool.trimSide(ProjectSetting.resTypes.toString());
			this.resExportPath.text=StringTool.trimSide(ProjectSetting.resExportPath);
			this.codeExportPath.text=StringTool.trimSide(ProjectSetting.codeExportPath);
			this.uiType.selectedIndex=Math.ceil(ProjectSetting.uiType);
			this.codeType.selectedIndex=Math.ceil(ProjectSetting.codeType);
			this.uiExportPath.text=StringTool.trimSide(ProjectSetting.uiExportPath);
			this.boxTypes.text=StringTool.trimSide(ProjectSetting.boxTypes.toString());
			this.pageTypes.text=StringTool.trimSide(ProjectSetting.pageTypes.toString());
			this.defaultFont.text=StringTool.trimSide(ProjectSetting.defaultFont);
			this.textureWidth.text=StringTool.trimSide(ProjectSetting.textureWidth.toString());
			this.textureHeight.text=StringTool.trimSide(ProjectSetting.textureHeight.toString());
			this.picWidth.text=StringTool.trimSide(ProjectSetting.picWidth.toString());
			this.picHeight.text=StringTool.trimSide(ProjectSetting.picHeight.toString());
			this.power2.selected=StringTool.trimSide(ProjectSetting.power2)=="true";
			this.trimempty.selected=StringTool.trimSide(ProjectSetting.trimempty)=="true";
			this.updateCodeImportToUI();
			this.shareResPath.text=ProjectSetting.shareResPath;
			this.langPath.text=ProjectSetting.langPath;
		}

		__proto.start=function(){
			this.init();
			this.popup();
		}

		__proto.close=function(type){
			laya.ui.Dialog.prototype.close.call(this,type);
			if (type=="sure"){
				ProjectSetting.resTypes=this.resTypes.text.split(",");
				ProjectSetting.resExportPath=StringTool.trimSide(this.resExportPath.text);
				ProjectSetting.codeExportPath=StringTool.trimSide(this.codeExportPath.text);
				ProjectSetting.uiType=this.uiType.selectedIndex;
				ProjectSetting.codeType=this.codeType.selectedIndex;
				ProjectSetting.uiExportPath=this.uiExportPath.text;
				ProjectSetting.boxTypes=this.boxTypes.text.split(",");
				ProjectSetting.pageTypes=StringTool.trimSide(this.pageTypes.text).split(",");
				ProjectSetting.defaultFont=StringTool.trimSide(this.defaultFont.text);
				ProjectSetting.textureWidth=Laya.__parseInt(this.textureWidth.text);
				ProjectSetting.textureHeight=Laya.__parseInt(this.textureHeight.text);
				ProjectSetting.picWidth=Laya.__parseInt(this.picWidth.text);
				ProjectSetting.picHeight=Laya.__parseInt(this.picHeight.text);
				ProjectSetting.power2=this.power2.selected?"true":"false";
				ProjectSetting.trimempty=this.trimempty.selected?"true":"false";
				switch(Math.ceil(ProjectSetting.codeType)){
					case 0:
						ProjectSetting.codeImports=this.codeImports.text;
						break ;
					case 2:
					case 2:
						ProjectSetting.codeImportsJS=this.codeImports.text;
						break ;
					case 1:
						ProjectSetting.codeImportsTS=this.codeImports.text;
						break ;
					}
				ProjectSetting.shareResPath=this.shareResPath.text;
				ProjectSetting.langPath=this.langPath.text;
				ProjectSetting.adptPaths();
				ProjectManager.saveProject();
			}
		}

		//UILibManager.reloadUILang();
		__proto.onResExportPathBtnClick=function(event){
			console.log(FileManager.getWorkPath(ProjectSetting.resExportPath));
			DialogTools.showOpenDir("选择资源发布目录",Utils1.bind(this.onFileSelect1,this));
		}

		__proto.onFileSelect1=function(path){
			console.log("dir select:"+path);
			if (!path)return;
			this.resExportPath.text=FileManager.getWorkRelativePath(path[0]);
		}

		__proto.onCodeExportPathBtnClick=function(event){
			DialogTools.showOpenDir("选择UI代码发布目录",Utils1.bind(this.onFileSelect2,this));
		}

		__proto.onFileSelect2=function(path){
			if (!path)return;
			this.codeExportPath.text=FileManager.getWorkRelativePath(path[0]);
		}

		__proto.onShareResPathBtnClick=function(event){
			var file=new File(FileManager.getWorkPath(ProjectSetting.shareResPath));
			DialogTools.showOpenDir("选择多项目共用的资源目录",Utils1.bind(this.onFileSelect3,this));
		}

		__proto.onFileSelect3=function(path){
			if (!path)return;
			this.shareResPath.text=FileManager.getWorkRelativePath(path[0]);
		}

		__proto.onLangPathBtnClick=function(e){
			var file=new File(FileManager.getWorkPath(ProjectSetting.langPath));
			DialogTools.showOpenFile("选择语言文件",Utils1.bind(this.onFileSelect4,this));
		}

		__proto.onFileSelect4=function(path){
			if (!path)return;
			this.langPath.text=FileManager.getWorkRelativePath(path[0]);
		}

		__getset(1,SetProject,'instance',function(){
			return SetProject._instance ? SetProject._instance :SetProject._instance=new SetProject();
		},laya.editor.ui.other.SetProjectUI._$SET_instance);

		SetProject._instance=null
		return SetProject;
	})(SetProjectUI)


	/**开始界面
	*@author yung
	*/
	//class laya.editor.view.other.StartPage extends laya.editor.ui.other.StartPageUI
	var StartPage=(function(_super){
		function StartPage(){
			StartPage.__super.call(this);
			this.on("click",this,this.onClick1);
		}

		__class(StartPage,'laya.editor.view.other.StartPage',_super);
		var __proto=StartPage.prototype;
		__proto.start=function(){
			this.popup();
			console.log("StartPage start 暂时屏蔽");
		}

		__proto.onClick1=function(e){
			var link=e.target;
			if (link){
				switch (link.name){
					case "newProject":
						AddProject.instance.start();
						break ;
					case "openProject":
						ProjectManager.openProject();
						break ;
					case "article1":
						break ;
					case "article2":
						break ;
					}
			}
		}

		__getset(1,StartPage,'instance',function(){
			return StartPage._instance ? StartPage._instance :StartPage._instance=new StartPage();
		},laya.editor.ui.other.StartPageUI._$SET_instance);

		StartPage._instance=null
		return StartPage;
	})(StartPageUI)


	/**
	*
	*@author ww
	*@version 1.0
	*
	*@created 2015-12-15 上午10:50:52
	*/
	//class laya.editor.view.page.AddAnimation extends laya.editor.ui.page.AddAnimationUI
	var AddAnimation=(function(_super){
		function AddAnimation(){
			AddAnimation.__super.call(this);
		}

		__class(AddAnimation,'laya.editor.view.page.AddAnimation',_super);
		var __proto=AddAnimation.prototype;
		__proto.initListener=function(){
			Notice.listen("OPEN_ADD_TIMELINE_ANIMATION",this,this.start);
		}

		__proto.onSelectBtnClick=function(e){
			DialogTools.showOpenFile("请选择视图参考图片",Utils1.bind(this.onSelected,this),DialogTools.imgFilterO);
		}

		__proto.onSelected=function(files){
			console.log("fileSelect:",files);
			console.log("图片选择后续未做处理");
			this.imgTxt.text=files[0];
		}

		__proto.start=function(){
			this.typeDrop.labels="时间轴动画,模板动画,骨骼动画";
			if (this.typeDrop.selectedIndex==-1){
				this.typeDrop.selectedIndex=0;
			}
			this.nameTxt.text="";
			this.imgTxt.text="";
			this.widthTxt.text="600";
			this.heightTxt.text="400";
			this.widthCheck.selected=false;
			this.heightCheck.selected=false;
			this.popup();
			Laya.stage.focus=this.nameTxt.textField;
		}

		__proto.close=function(type){
			laya.ui.Dialog.prototype.close.call(this,type);
			if (type=="sure"){
				if (!Boolean(this.typeDrop.selectedLabel)){
					return Alert.show("请选择动画类型");
				}
				Notice.notify("ADDTimeLineAnimation",[this.typeDrop.selectedLabel,this.nameTxt.text,this.imgTxt.text,Laya.__parseInt(this.widthTxt.text),Laya.__parseInt(this.heightTxt.text),this.bgColorPicker.selectedColor,this.widthCheck.selected,this.heightCheck.selected]);
				Notice.notify("Focus_design");
			}
		}

		__getset(1,AddAnimation,'instance',function(){
			return AddAnimation._instance ? AddAnimation._instance :AddAnimation._instance=new AddAnimation();
		},laya.editor.ui.page.AddAnimationUI._$SET_instance);

		AddAnimation._instance=null
		return AddAnimation;
	})(AddAnimationUI)


	/**添加目录
	*@author yung
	*/
	//class laya.editor.view.page.AddDirectory extends laya.editor.ui.page.AddDirectoryUI
	var AddDirectory=(function(_super){
		function AddDirectory(){AddDirectory.__super.call(this);;
		};

		__class(AddDirectory,'laya.editor.view.page.AddDirectory',_super);
		var __proto=AddDirectory.prototype;
		__proto.initListener=function(){
			Notice.listen("open_adddir",this,this.start);
		}

		__proto.start=function(){
			this.nameTxt.text="";
			this.popup();
			Laya.stage.focus=this.nameTxt.textField;
		}

		__proto.close=function(type){
			laya.ui.Dialog.prototype.close.call(this,type);
			if (type=="sure"){
				Notice.notify("adddir",[this.nameTxt.text]);
			}
		}

		__getset(1,AddDirectory,'instance',function(){
			return AddDirectory._instance ? AddDirectory._instance :AddDirectory._instance=new AddDirectory();
		},laya.editor.ui.page.AddDirectoryUI._$SET_instance);

		AddDirectory._instance=null
		return AddDirectory;
	})(AddDirectoryUI)


	/**
	*...
	*@author yung
	*/
	//class laya.editor.view.page.AddDocument extends laya.editor.ui.page.AddDocumentUI
	var AddDocument=(function(_super){
		function AddDocument(){
			AddDocument.__super.call(this);
			this.views.setItems([AddPage.instance,AddParticle.instance]);
			this.tab.selectHandler=this.views.setIndexHandler;
		}

		__class(AddDocument,'laya.editor.view.page.AddDocument',_super);
		var __proto=AddDocument.prototype;
		__proto.initListener=function(){
			Notice.listen("OPEN_ADDPage",this,this.start);
		}

		__proto.start=function(){
			AddPage.instance.typeDrop.labels=ProjectSetting.pageTypes.join(",");
			if (AddPage.instance.typeDrop.selectedIndex==-1){
				AddPage.instance.typeDrop.selectedIndex=0;
			}
			this.popup();
		}

		//Laya.stage.focus=nameTxt.textField;
		__proto.close=function(type){
			laya.ui.Dialog.prototype.close.call(this,type);
			var tDialog;
			tDialog=this.views.selection;
			if(tDialog){
				tDialog.close(type);
			}
		}

		__getset(1,AddDocument,'instance',function(){
			return AddDocument._instance ? AddDocument._instance :AddDocument._instance=new AddDocument();
		},laya.editor.ui.page.AddDocumentUI._$SET_instance);

		AddDocument._instance=null
		return AddDocument;
	})(AddDocumentUI)


	/**添加页面
	*@author yung
	*/
	//class laya.editor.view.page.AddPage extends laya.editor.ui.page.AddPageUI
	var AddPage=(function(_super){
		function AddPage(){
			AddPage.__super.call(this);
			this.selectBtn.on("click",this,this.onSelectBtnClick);
			this.size(450,340);
		}

		__class(AddPage,'laya.editor.view.page.AddPage',_super);
		var __proto=AddPage.prototype;
		__proto.initListener=function(){
			Notice.listen("OPEN_ADDPage",this,this.start);
		}

		__proto.onSelectBtnClick=function(e){
			DialogTools.showOpenFile("请选择视图参考图片",Utils1.bind(this.onSelected,this),DialogTools.imgFilterO);
		}

		__proto.onSelected=function(files){
			console.log("fileSelect:",files);
			console.log("图片选择后续未做处理");
			this.imgTxt.text=files[0];
		}

		//});
		__proto.start=function(){
			this.typeDrop.labels=ProjectSetting.pageTypes.join(",");
			if (this.typeDrop.selectedIndex==-1){
				this.typeDrop.selectedIndex=0;
			}
			this.nameTxt.text="";
			this.imgTxt.text="";
			this.widthTxt.text="600";
			this.heightTxt.text="400";
			this.widthCheck.selected=false;
			this.heightCheck.selected=false;
			this.popup();
			Laya.stage.focus=this.nameTxt.textField;
		}

		__proto.close=function(type){
			if (type=="sure"){
				if (!Boolean(this.typeDrop.selectedLabel)){
					return Alert.show("请选择页面类型");
				}
				Notice.notify("ADDPage",[this.typeDrop.selectedLabel,this.nameTxt.text,this.imgTxt.text,Laya.__parseInt(this.widthTxt.text),Laya.__parseInt(this.heightTxt.text),this.bgColorPicker.selectedColor,this.widthCheck.selected,this.heightCheck.selected]);
				Notice.notify("Focus_design");
			}
		}

		__getset(1,AddPage,'instance',function(){
			return AddPage._instance ? AddPage._instance :AddPage._instance=new AddPage();
		},laya.editor.ui.page.AddPageUI._$SET_instance);

		AddPage._instance=null
		return AddPage;
	})(AddPageUI)


	/**
	*...
	*@author ww
	*/
	//class laya.editor.view.page.AddParticle extends laya.editor.ui.page.AddParticleUI
	var AddParticle=(function(_super){
		function AddParticle(){
			AddParticle.__super.call(this);
		}

		__class(AddParticle,'laya.editor.view.page.AddParticle',_super);
		var __proto=AddParticle.prototype;
		__proto.initListener=function(){
			Notice.listen("open_AddParticle",this,this.start);
		}

		__proto.start=function(){
			this.typeDrop.labels="重力模式,半径模式";
			if (this.typeDrop.selectedIndex==-1){
				this.typeDrop.selectedIndex=0;
			}
			this.nameTxt.text="";
			this.popup();
			Laya.stage.focus=this.nameTxt.textField;
		}

		__proto.close=function(type){
			if (type=="sure"){
				if (!Boolean(this.typeDrop.selectedLabel)){
					return Alert.show("请选择粒子类型");
				}
				Notice.notify("AddParticle",[this.typeDrop.selectedLabel,this.nameTxt.text]);
				Notice.notify("Focus_design");
			}
		}

		__getset(1,AddParticle,'instance',function(){
			return AddParticle._instance ? AddParticle._instance :AddParticle._instance=new AddParticle();
		},laya.editor.ui.page.AddParticleUI._$SET_instance);

		AddParticle._instance=null
		return AddParticle;
	})(AddParticleUI)


	/**
	*
	*@author ww
	*@version 1.0
	*
	*@created 2016-2-23 上午11:34:50
	*/
	//class laya.editor.view.page.AddScene extends laya.editor.ui.page.AddSceneUI
	var AddScene=(function(_super){
		function AddScene(){
			AddScene.__super.call(this);
		}

		__class(AddScene,'laya.editor.view.page.AddScene',_super);
		var __proto=AddScene.prototype;
		__proto.initListener=function(){
			Notice.listen("OPEN_ADDSCENE",this,this.start);
		}

		__proto.start=function(){
			this.nameTxt.text="";
			this.popup();
			Laya.stage.focus=this.nameTxt.textField;
		}

		__proto.close=function(type){
			if (type=="sure"){
				Notice.notify("ADDSCENE",[this.nameTxt.text]);
			}
		}

		__getset(1,AddScene,'instance',function(){
			return AddScene._instance ? AddScene._instance :AddScene._instance=new AddScene();
		},laya.editor.ui.page.AddSceneUI._$SET_instance);

		AddScene._instance=null
		return AddScene;
	})(AddSceneUI)


	/**移动页面
	*@author yung
	*/
	//class laya.editor.view.page.MovePage extends laya.editor.ui.page.MovePageUI
	var MovePage=(function(_super){
		function MovePage(){
			this._oldFile=null;
			this._newFile=null;
			MovePage.__super.call(this);
		}

		__class(MovePage,'laya.editor.view.page.MovePage',_super);
		var __proto=MovePage.prototype;
		__proto.initListener=function(){
			Notice.listen("OPEN_MovePage",this,this.start);
		}

		__proto.start=function(oldFile,newFile){
			var oldPage=FileManager.getWorkRelativePath(oldFile.nativePath).replace("laya/pages/","").replace(".ui","");
			var newPage=FileManager.getWorkRelativePath(newFile.nativePath).replace("laya/pages/","").replace(".ui","");
			this.msgLbl.text=Sys.lang("确定移动页面{0}\n到{1}吗",oldPage,newPage);
			this.updateCheck.selected=true;
			this._oldFile=oldFile;
			this._newFile=newFile;
			this.popup();
		}

		__proto.close=function(type){
			laya.ui.Dialog.prototype.close.call(this,type);
			if (type=="sure"){
				Notice.notify("MovePage",[this._oldFile,this._newFile,this.updateCheck.selected]);
			}
		}

		__getset(1,MovePage,'instance',function(){
			return MovePage._instance ? MovePage._instance :MovePage._instance=new MovePage();
		},laya.editor.ui.page.MovePageUI._$SET_instance);

		MovePage._instance=null
		return MovePage;
	})(MovePageUI)


	/**需要保存
	*@author yung
	*/
	//class laya.editor.view.page.NeedSave extends laya.editor.ui.page.NeedSaveUI
	var NeedSave=(function(_super){
		function NeedSave(){
			this._ok=null;
			this._no=null;
			NeedSave.__super.call(this);
		}

		__class(NeedSave,'laya.editor.view.page.NeedSave',_super);
		var __proto=NeedSave.prototype;
		__proto.start=function(msg,ok,no){
			this.msgLbl.text=msg;
			this._ok=ok;
			this._no=no;
			this.popup();
		}

		__proto.close=function(type){
			laya.ui.Dialog.prototype.close.call(this,type);
			if (type=="sure"){
				if (this._ok !=null){
					this._ok.run();
				}
				}else if (type=="cancel"){
				if (this._no !=null){
					this._no.run();
				}
			}
		}

		__getset(1,NeedSave,'instance',function(){
			return NeedSave._instance ? NeedSave._instance :NeedSave._instance=new NeedSave();
		},laya.editor.ui.page.NeedSaveUI._$SET_instance);

		NeedSave._instance=null
		return NeedSave;
	})(NeedSaveUI)


	/**重命名页面
	*@author yung
	*/
	//class laya.editor.view.page.RenamePage extends laya.editor.ui.page.RenamePageUI
	var RenamePage=(function(_super){
		function RenamePage(){RenamePage.__super.call(this);;
		};

		__class(RenamePage,'laya.editor.view.page.RenamePage',_super);
		var __proto=RenamePage.prototype;
		__proto.initListener=function(){
			Notice.listen("OPEN_RENAME",this,this.start);
		}

		__proto.start=function(oldName){
			this.resLbl.text=oldName;
			this.nameTxt.text="";
			this.updateCheck.selected=true;
			this.popup();
			Laya.stage.focus=this.nameTxt.textField;
		}

		__proto.close=function(type){
			laya.ui.Dialog.prototype.close.call(this,type);
			if (type=="sure"){
				Notice.notify("RENAME",[this.nameTxt.text,this.updateCheck.selected]);
			}
		}

		__getset(1,RenamePage,'instance',function(){
			return RenamePage._instance ? RenamePage._instance :RenamePage._instance=new RenamePage();
		},laya.editor.ui.page.RenamePageUI._$SET_instance);

		RenamePage._instance=null
		return RenamePage;
	})(RenamePageUI)


	/**添加页面
	*@author yung
	*/
	//class laya.editor.view.page.SetPage extends laya.editor.ui.page.SetPageUI
	var SetPage=(function(_super){
		function SetPage(){
			this._viewer=null;
			SetPage.__super.call(this);
			this.selectBtn.on("click",this,this.onSelectBtnClick);
		}

		__class(SetPage,'laya.editor.view.page.SetPage',_super);
		var __proto=SetPage.prototype;
		__proto.onSelectBtnClick=function(e){
			DialogTools.showOpenFile("请选择视图参考图片",Utils1.bind(this.onSelected,this),DialogTools.imgFilterO);
		}

		__proto.onSelected=function(files){
			console.log("fileSelect:",files);
			console.log("图片选择后续未做处理");
			if(!files||!files[0])return;
			this.imgTxt.text=files[0];
			Laya.loader.load(FileTools.getAbsPath(files[0]),Handler.create(this,this.picLoaded));
		}

		__proto.picLoaded=function(pic){
			console.log("picLoadede",pic);
			this.widthTxt.text=pic.width+"";
			this.heightTxt.text=pic.height+"";
		}

		__proto.start=function(){
			if ((UIPanel.instance.currViewer instanceof laya.editor.view.UIViewer )){
				this._viewer=UIPanel.instance.currViewer;
				var xml=this._viewer.design.xml;
				this.typeDrop.labels=ProjectSetting.pageTypes.join(",");
				if (this.typeDrop.selectedIndex==-1){
					this.typeDrop.selectedIndex=0;
				}
				xml.type=StringTool.trimSide(xml.type);
				this.typeDrop.selectedLabel=xml.type;
				this.nameTxt.text=FileManager.getFileName(this._viewer.pagePath);
				this.nameTxt.alpha=0.5;
				this.imgTxt.text=xml.props.sceneBg?xml.props.sceneBg:"";
				this.bgColorPicker.selectedColor=xml.props.sceneColor;
				var width=Laya.__parseInt(xml.props.width);
				if (width > 0){
					this.widthTxt.text=width+"";
					this.widthCheck.selected=false;
					}else {
					this.widthTxt.text=xml.props.sceneWidth;
					this.widthCheck.selected=true;
				};
				var height=Laya.__parseInt(xml.props.height);
				if (height > 0){
					this.heightTxt.text=height+"";
					this.heightCheck.selected=false;
					}else {
					this.heightTxt.text=xml.props.sceneHeight;
					this.heightCheck.selected=true;
				}
				this.popup();
			}
		}

		__proto.close=function(type){
			laya.ui.Dialog.prototype.close.call(this,type);
			if (type=="sure"){
				if (!Boolean(this.typeDrop.selectedLabel)){
					return Alert.show("请选择页面类型");
				};
				var xml=this._viewer.design.xml;
				var width=Laya.__parseInt(this.widthTxt.text);
				var height=Laya.__parseInt(this.heightTxt.text);
				var imgPath=this.imgTxt.text;
				var bgColor=this.bgColorPicker.selectedColor;
				xml.type=this.typeDrop.selectedLabel;
				delete xml.props.width;
				delete xml.props.sceneWidth;
				if (this.widthCheck.selected){
					xml.props.sceneWidth=width;
					}else {
					xml.props.width=width;
				}
				delete xml.props.height;
				delete xml.props.sceneHeight;
				if (this.heightCheck.selected){
					xml.props.sceneHeight=height;
					}else {
					xml.props.height=height;
				}
				xml.props.sceneColor=bgColor;
				if (Boolean(imgPath)){
					if (imgPath.indexOf(":")!=-1){
						imgPath=PageManager.copyPageBg(this._viewer.pagePath,imgPath);
					}
					xml.props.sceneBg=imgPath;
					}else {
					delete xml.props.sceneBg;
				}
				this._viewer.design.change()
				this._viewer.design.refreshBg();
				Notice.notify("Focus_design");
			}
		}

		__getset(1,SetPage,'instance',function(){
			return SetPage._instance ? SetPage._instance :SetPage._instance=new SetPage();
		},laya.editor.ui.page.SetPageUI._$SET_instance);

		SetPage._instance=null
		return SetPage;
	})(SetPageUI)


	/**设置页面默认属性
	*@author yung
	*/
	//class laya.editor.view.page.SetPageProp extends laya.editor.ui.page.SetPagePropUI
	var SetPageProp=(function(_super){
		function SetPageProp(){SetPageProp.__super.call(this);;
		};

		__class(SetPageProp,'laya.editor.view.page.SetPageProp',_super);
		var __proto=SetPageProp.prototype;
		__proto.initListener=function(){
			Notice.listen("OPEN_SEtPageProp",this,this.start);
		}

		__proto.start=function(path){
			path=FileManager.adptToCommonUrl(path);
			this.nameLbl.text=path;
			var props;
			props=PageStyleManager.getPageProps(path);
			console.log("styleTxtGet:",props);
			props=props.split(" ").join("\n");
			this.propsTxt.text=props;
			this.popup();
			Laya.stage.focus=this.propsTxt.textField;
		}

		__proto.close=function(type){
			laya.ui.Dialog.prototype.close.call(this,type);
			console.log("styleTxt:",this.propsTxt.text);
			if (type=="sure"){
				PageStyleManager.updatePageStyle(this.nameLbl.text,this.propsTxt.text);
				UIPanel.instance.refreshCurrView();
			}
		}

		__getset(1,SetPageProp,'instance',function(){
			return SetPageProp._instance ? SetPageProp._instance :SetPageProp._instance=new SetPageProp();
		},laya.editor.ui.page.SetPagePropUI._$SET_instance);

		SetPageProp._instance=null
		return SetPageProp;
	})(SetPagePropUI)


	/**移动资源
	*@author yung
	*/
	//class laya.editor.view.res.MoveRes extends laya.editor.ui.res.MoveResUI
	var MoveRes=(function(_super){
		function MoveRes(){
			this._oldFile=null;
			this._newFile=null;
			MoveRes.__super.call(this);
		}

		__class(MoveRes,'laya.editor.view.res.MoveRes',_super);
		var __proto=MoveRes.prototype;
		__proto.start=function(oldFile,newFile){
			var oldPage=FileManager.getWorkRelativePath(oldFile.nativePath).replace("laya/assets/","");
			var newPage=FileManager.getWorkRelativePath(newFile.nativePath).replace("laya/assets/","");
			this.msgLbl.text=Sys.lang("确定移动资源{0}\n到{1}吗",oldPage,newPage);
			this.updateCheck.selected=true;
			this._oldFile=oldFile;
			this._newFile=newFile;
			this.popup();
		}

		__proto.close=function(type){
			laya.ui.Dialog.prototype.close.call(this,type);
			if (type=="sure"){
				ResPanel.instance.move(this._oldFile,this._newFile,this.updateCheck.selected);
			}
		}

		__getset(1,MoveRes,'instance',function(){
			return MoveRes._instance ? MoveRes._instance :MoveRes._instance=new MoveRes();
		},laya.editor.ui.res.MoveResUI._$SET_instance);

		MoveRes._instance=null
		return MoveRes;
	})(MoveResUI)


	/**重命名资源
	*@author yung
	*/
	//class laya.editor.view.res.RenameRes extends laya.editor.ui.res.RenameResUI
	var RenameRes=(function(_super){
		function RenameRes(){RenameRes.__super.call(this);;
		};

		__class(RenameRes,'laya.editor.view.res.RenameRes',_super);
		var __proto=RenameRes.prototype;
		__proto.start=function(oldName){
			this.resLbl.text=oldName;
			this.nameTxt.text="";
			this.updateCheck.selected=true;
			this.popup();
			Laya.stage.focus=this.nameTxt.textField;
		}

		__proto.close=function(type){
			laya.ui.Dialog.prototype.close.call(this,type);
			if (type=="sure"){
				ResPanel.instance.rename(this.nameTxt.text,this.updateCheck.selected);
			}
		}

		__getset(1,RenameRes,'instance',function(){
			return RenameRes._instance ? RenameRes._instance :RenameRes._instance=new RenameRes();
		},laya.editor.ui.res.RenameResUI._$SET_instance);

		RenameRes._instance=null
		return RenameRes;
	})(RenameResUI)


	/**资源属性设置
	*@author yung
	*/
	//class laya.editor.view.res.SetResProp extends laya.editor.ui.res.SetResPropUI
	var SetResProp=(function(_super){
		function SetResProp(){SetResProp.__super.call(this);;
		};

		__class(SetResProp,'laya.editor.view.res.SetResProp',_super);
		var __proto=SetResProp.prototype;
		__proto.start=function(path){
			this.nameLbl.text=path;
			this.typeDrop.labels=UIConfigManager.getCompNames().join(",");
			this.typeDrop.selectedLabel=ResStyleManager.getResCompType(path);
			var props;
			props=ResStyleManager.getResProps(path);
			props=props.split(" ").join("\n");
			this.propsTxt.text=props;
			this.popup();
			this.mouseThrough=true;
			Laya.stage.focus=this.propsTxt.textField;
		}

		__proto.close=function(type){
			laya.ui.Dialog.prototype.close.call(this,type);
			if (type=="sure"){
				var props=this.propsTxt.text.replace(/\r/g,"\n");
				ResStyleManager.updateResStyle(this.nameLbl.text,this.typeDrop.selectedLabel,0,80,props);
				ResPanel.instance.refreshProp();
				Notice.notify("FRESH_CurView");
			}
		}

		__getset(1,SetResProp,'instance',function(){
			return SetResProp._instance ? SetResProp._instance :SetResProp._instance=new SetResProp();
		},laya.editor.ui.res.SetResPropUI._$SET_instance);

		SetResProp._instance=null
		return SetResProp;
	})(SetResPropUI)


	/**
	*...
	*@author ww
	*/
	//class laya.editor.view.template.AddTemplate extends laya.editor.ui.template.AddTemplateUI
	var AddTemplate=(function(_super){
		function AddTemplate(){
			this._srcPath=null;
			AddTemplate.__super.call(this);
		}

		__class(AddTemplate,'laya.editor.view.template.AddTemplate',_super);
		var __proto=AddTemplate.prototype;
		__proto.initListener=function(){
			Notice.listen("open_AddParticle",this,this.start);
		}

		__proto.start=function(srcPath,templateName){
			(templateName===void 0)&& (templateName="template");
			if (this.typeDrop.selectedIndex==-1){
				this.typeDrop.selectedIndex=0;
			}
			this._srcPath=srcPath;
			this.nameTxt.text=templateName;
			this.popup();
			Laya.stage.focus=this.nameTxt.textField;
		}

		__proto.close=function(type){
			laya.ui.Dialog.prototype.close.call(this,type);
			if (type=="sure"){
				if (!Boolean(this.typeDrop.selectedLabel)){
					return Alert.show("请选择模板目录");
				}
				TemplateManager.convertUIFileByPaths(this._srcPath,this.nameTxt.text,this.typeDrop.selectedLabel);
			}
		}

		__getset(1,AddTemplate,'instance',function(){
			return AddTemplate._instance ? AddTemplate._instance :AddTemplate._instance=new AddTemplate();
		},laya.editor.ui.template.AddTemplateUI._$SET_instance);

		AddTemplate._instance=null
		return AddTemplate;
	})(AddTemplateUI)


	/**
	*...
	*@author ww
	*/
	//class laya.editor.view.DisplayTreePanel extends laya.editor.ui.DisplayTreePanelUI
	var DisplayTreePanel=(function(_super){
		function DisplayTreePanel(){
			this._mouseIndex=0;
			this._treeData=null;
			this._menu=null;
			this.filterFun=null;
			DisplayTreePanel.__super.call(this);
			this.initPanel();
			this.cacheAsBitmap=true;
		}

		__class(DisplayTreePanel,'laya.editor.view.DisplayTreePanel',_super);
		var __proto=DisplayTreePanel.prototype;
		__proto.initListener=function(){
			Notice.listen("SHOW_DISPLAY_TREE",this,this.init);
		}

		__proto.init=function(data){
			if(! (data instanceof laya.editor.core.design.TreeData )){
				return;
			}
			this._treeData=data;
			this.refresh();
		}

		__proto.initPanel=function(){
			this.displayTree.array=[];
			this.displayTree.on("doubleclick",this,this.onTreeDoubleClick);
			this.displayTree.on("rightclick",this,this.onTreeRightMouseDown);
			this.displayTree.mouseHandler=new Handler(this,this.onTreeMouse);
			this.displayTree.renderHandler=new Handler(this,this.treeRender);
			this.displayTree.mList.changeCellStateH=new Handler(this,this.changeCellHandler);
			var menu=ContextMenu.createMenu("显示切换");
			menu.on("select",this,this.onEmunSelect);
			this._menu=menu;
			this.on("click",this,this.onClick);
			this.fliterTxt.on("input",this,this.onFliterTxtChange);
			this.fliterTxt.color="#8a8a8a";
			this.opBox.name="opBox";
			this.opBox.on("click",this,this.onOpBoxClick);
			this.on("dragDrop",this,this.onTreeDragDrop);
			this.displayTree.on("keydown",this,this.onTreeKeyDown);
		}

		/**页面快捷键*/
		__proto.onTreeKeyDown=function(e){
			switch(e.keyCode){
				case 46:
					console.log("key action deletePage");
					Notice.notify("DELETE_SELECTED");
					break ;
				case 37:
					console.log("key action LEFT");
					this.displayTree.setItemState(this.displayTree.list.selectedIndex,false);
					break ;
				case 39:
					console.log("key action RIGHT");
					this.displayTree.setItemState(this.displayTree.list.selectedIndex,true);
					break ;
				case 38:
					console.log("key action UP");
					if (this.displayTree.list.selectedIndex > 0){
						this.displayTree.list.selectedIndex--;
						this.noticeSelected();
					}
					break ;
				case 40:
					console.log("key action DOWN");
					if (this.displayTree.list.selectedIndex < this.displayTree.list.length-1){
						this.displayTree.list.selectedIndex++;
						this.noticeSelected();
					}
					break ;
				}
		}

		__proto.noticeSelected=function(){
			if(this.displayTree.selectedItem){
				Notice.notify("Display_selected",[this.displayTree.selectedItem.compId]);
			}
		}

		__proto.onOpBoxClick=function(e){
			var btn=e.target;
			if (btn){
				console.log(btn.name);
				switch (btn.name){
					case "refreshBtn":
						this.refresh();
						break ;
					case "ifShowAll":
						console.log("ifShowAll Click");
						this.switchHideAll(e.target);
						break ;
					case "ifLockAll":
						console.log("ifLockAll Click");
						this.switchLockAll(e.target);
						break ;
					}
			}
		}

		__proto.switchLockAll=function(icon){
			var items;
			items=this.displayTree.mList.array;
			icon.index=1-icon.index;
			this.setItemsValue(items,Signs.LockSign,icon.index==1);
		}

		__proto.switchHideAll=function(icon){
			var items;
			items=this.displayTree.mList.array;
			icon.index=1-icon.index;
			this.setItemsValue(items,Signs.HideSign,icon.index==1);
		}

		__proto.onFliterTxtChange=function(e){
			this.displayTree.filter(this.fliterTxt.text);
		}

		/**双击*/
		__proto.onTreeDoubleClick=function(e){
			DebugTool.dTrace("ondisplayTreeDoubleClick");
			if (e.target.parent==this.displayTree.list.content && this.displayTree.selectedItem){
				var path;
				path=this.displayTree.selectedItem.path;
			}
		}

		//Laya.timer.once(100,null,DebugTool.showDisBound,[path],true);
		__proto.onClick=function(e){
			var target=e.target;
			if (!DisControlTool.isChildE(this,target)){
				this.displayTree.selectedIndex=-1;
			}
		}

		/**处理右键选择*/
		__proto.onTreeRightMouseDown=function(e){
			console.log("onTreeRightMouseDown");
			var comp=e.target.parent.parent;
			if (comp && comp.dataSource){
				this.displayTree.selectedItem=comp.dataSource;
			}
		}

		/**处理菜单选择*/
		__proto.onEmunSelect=function(e){
			var name=""
			name=e.target.name;
			console.log("onEmunSelect:",e,name);
			var target;
			if (this.displayTree.selectedItem){
				target=this.displayTree.selectedPath;
			}
			switch (name){
				case "显示切换":
					target.visible=!target.visible;
					this.refresh();
					break ;
				case "上移":
					DisControlTool.upDis(target);
					this.refresh();
					break ;
				case "下移":
					DisControlTool.downDis(target);
					this.refresh();
					break ;
				case "父容器链":
					DebugTool.traceDisSizeChain(target);
					break ;
				}
		}

		/**打开当前页面所在的文件夹*/
		__proto.openCurrDirectory=function(){}
		//FileTools.openItem(currDirectory);
		__proto.changeCellHandler=function(cell,visable,index){
			var item=cell.dataSource;
			if (!item)return;
			var ifShow=cell.getChildByName("ifShow");
			var ifLock=cell.getChildByName("ifLock");
			var label=cell.getChildByName("label");
			var tDis=item;
			if(visable){
				ifShow.visible=ifLock.visible=true;
				label.color="#44a7ff";
				}else{
				ifShow.visible=this.isHideChanged(tDis);
				ifLock.visible=this.isLockChanged(tDis);
				label.color=tDis.hasChild?"#c8c8c8":"#aaaaaa";
			}
		}

		/**处理页面拖动*/
		__proto.onTreeMouse=function(e,index){
			var cell=this.displayTree.list.getCell(index);
			var item=cell.dataSource;
			if (!item)return;
			var ifShow=cell.getChildByName("ifShow");
			var ifLock=cell.getChildByName("ifLock");
			var label=cell.getChildByName("label");
			var tDis=item;
			if (e.type=="mousedown"){
				Laya.stage.focus=this.displayTree;
				this._mouseIndex=index;
				ifShow.visible=this.isHideChanged(tDis);
				ifLock.visible=this.isLockChanged(tDis);
				var clip=new Clip(SkinDefines.DisDragIcon,1,3);
				clip.index=2;
				var type="displayDrag";
				LayaBuilder.drag.doDrag(e.currentTarget,clip,{type:type,target:cell},new Point(5,5));
				if(this.displayTree.selectedItem){
					Notice.notify("Display_selected",[this.displayTree.selectedItem.compId]);
				}
				ifShow.visible=ifLock.visible=true;
				label.color="#44a7ff";
			}else
			if (e.type=="mouseover"){
				ifShow.visible=ifLock.visible=true;
				label.color="#44a7ff";
			}else
			if(index==this.displayTree.selectedIndex){
			}else
			if (e.type=="mouseout"){
				ifShow.visible=this.isHideChanged(tDis);
				ifLock.visible=this.isLockChanged(tDis);
				label.color=tDis.hasChild?"#c8c8c8":"#aaaaaa";
			}
		}

		/**刷新*/
		__proto.refresh=function(){
			this.filterFun=FilterFuns.isEditorComp;
			this.displayTree.setTreeData(this._treeData);
		}

		__proto.selectByDis=function(sp){
			if(!sp)return;
			var data;
			data=this._treeData.getNodeByID(sp["comXml"].compId);
			if(this.displayTree.selectedItem&&data.compId==this.displayTree.selectedItem.compId)return;
			this.openParent(data);
			this.displayTree.refreshList();
			this.displayTree.mList.selectedIndex=this.getIndexByDis(data);
		}

		__proto.getTreeIndexByDis=function(dis){
			var dataList;
			dataList=this.displayTree.source;
			var i=0,len=0;
			len=dataList.length;
			for(i=0;i<len;i++){
				if(dataList[i].compId==dis.compId){
					return i;
				}
			}
			return-1;
		}

		__proto.openParent=function(dis){
			if(!dis)return;
			var index=0;
			var parent=this._treeData.getNodeParent(dis);
			if(!parent)return;
			index=this.getTreeIndexByDis(parent);
			console.log("parent find:",index);
			if(this.displayTree.source[index]){
				this.displayTree.source[index].isOpen=true;
				}else{
				return;
			}
			this.openParent(parent);
		}

		__proto.onTreeDragDrop=function(e){
			console.log("ondisplayTreeDragDrop",e);
			if (!(e.data.type=="displayDrag"))return;
			var old;
			old=e.data.target;
			if(!old)return;
			var target;
			var hitList;
			hitList=e.hitList;
			console.log("hitList:",hitList);
			if(hitList.indexOf(old)>=0){
				return;
			};
			var i=0,len=0;
			len=hitList.length;
			var tIndex=0;
			for (i=0;i < len;i++){
				tIndex=this.displayTree.mList.getIndexByCell(hitList[i]);
				if(tIndex>=0){
					if(this.displayTree.mList.isIDSelected(tIndex)){
						return;
						}else{
						target=hitList[i];
						break ;
					}
				}
			}
			console.log("get target:",target);
			var relativePos;
			if (!target){
				console.log("no target");
				relativePos="center";
				target=this.displayTree.mList.getItem(0);
				}else{
				console.log("getRelativePos:",RelativePos.getDisMouseRelativePos(target,0.2))
				relativePos=RelativePos.getDisMouseRelativePos(target,0.2);
				target=target.dataSource;
			};
			var tarList;
			tarList=this.displayTree.mList.selectItems;
			var disList;
			disList=[];
			len=tarList.length;
			for(i=0;i<len;i++){
				disList.push(tarList[i]);
			}
			switch (relativePos){
				case "up":
					this._treeData.insertToTarParent(target,disList,false);
					break ;
				case "down":
					this._treeData.insertToTarParent(target,disList,true);
					break ;
				case "center":
				case "left":
				case "right":
					if(this.isContainer(target)||DisplayTreePanel.AnyItemContains){
						this._treeData.insertToParent(target,disList);
						}else{
						this._treeData.insertToTarParent(target,disList,true);
					}
					break ;
				};
			var dataList;
			dataList=this.displayTree.mList.array;
			var selectIds=[];
			len=dataList.length;
			for(i=0;i<len;i++){
				if(disList.indexOf(dataList[i].path)>=0){
					selectIds.push(i);
				}
			}
			this.displayTree.mList.setSelectList(selectIds);
			console.log("freshDisPlayTree");
			Notice.notify("Display_tree_change",null);
		}

		//Laya.timer.once(100,displayTree.mList,displayTree.mList.setSelectList,[selectIds]);
		__proto.treeRender=function(cell,index){
			var item=cell.dataSource;
			var tDis;
			tDis=item;
			if (item){
				var icon=cell.getChildByName("icon");
				var ifShow=cell.getChildByName("ifShow");
				var ifLock=cell.getChildByName("ifLock");
				var label=cell.getChildByName("label");
				label.color=tDis.hasChild?"#c8c8c8":"#aaaaaa";
				ifShow.index=tDis[Signs.HideSign]?1:0;
				ifLock.index=tDis[Signs.LockSign]?0:1;
				ifShow.visible=this.isHideChanged(tDis)||this.displayTree.selectedIndex==index;
				ifLock.visible=this.isLockChanged(tDis)||this.displayTree.selectedIndex==index;
				if (!ifShow.hasListener("mousedown")){
					ifShow.on("mousedown",this,this.itemAction,null);
					cell.on("mousemove",this,this._$8_onMouseOver);
				}
				if (!ifLock.hasListener("mousedown")){
					ifLock.on("mousedown",this,this.itemAction,null);
				}
				if(Laya.loader.getRes("components/"+item.type+".png")){
					icon.skin="components/"+item.type+".png";
					}else{
					if (item.hasChild){
						icon.skin="comp/folder.png";
						}else {
						icon.skin="components/Image.png";
					}
				}
			}
		}

		__proto.isUserChanged=function(dis){
			if(!dis[Signs.HideSign]&&!dis[Signs.LockSign])return false;
			return true;
		}

		__proto.isHideChanged=function(dis){
			if(!dis[Signs.HideSign])return false;
			return true;
		}

		__proto.isLockChanged=function(dis){
			if(!dis[Signs.LockSign])return false;
			return true;
		}

		__proto._$8_onMouseOver=function(e){
			if (!DragManager.isDraging)return;
			if (!(DragManager.getDragType()=="displayDrag"))return;
			console.log("onMouseOver");
			var target;
			target=e.target;
			var tIndex=0;
			tIndex=this.displayTree.mList.getIndexByCell(target);
			if(this.displayTree.mList.isIDSelected(tIndex)){
				FocusManager.clearFocus();
				return;
			}
			if(!target.dataSource)return;
			var type=RelativePos.getDisMouseRelativePos(target,0.2);
			var tparent;
			switch (type){
				case "up":
				case "down":
					FocusManager.showBorder(target,type,true,null,1);
					if(!target.dataSource)break ;
					tparent=this.getCellByDis(this._treeData.getNodeParent(target.dataSource));
					if(tparent)
						FocusManager.showFocus(tparent,1,false);
					break ;
				case "center":
				case "left":
				case "right":
					if(this.isContainer(target.dataSource)||DisplayTreePanel.AnyItemContains){
						FocusManager.showFocus(target,1);
						}else{
						FocusManager.showBorder(target,"down",true,null,1);
						if(!target.dataSource)break ;
						tparent=this.getCellByDis(this._treeData.getNodeParent(target.dataSource));
						if(tparent)
							FocusManager.showFocus(tparent,1,false);
					}
					break ;
				}
		}

		__proto.isContainer=function(data){
			var type;
			type=data.type;
			return ProjectSetting.isContainer(type);
		}

		__proto.getCellByDis=function(dis){
			if(!dis)return null;
			return this.displayTree.mList.getCell(this.getIndexByDis(dis));
		}

		__proto.getIndexByDis=function(dis){
			var dataList;
			dataList=this.displayTree.mList.array;
			var i=0,len=0;
			len=dataList.length;
			for(i=0;i<len;i++){
				if(dataList[i].compId==dis.compId){
					return i;
				}
			}
			return-1;
		}

		__proto.itemAction=function(e){
			var tClip;
			tClip=e.target;
			var tItem;
			tItem=(tClip.parent).dataSource;
			var tDis;
			tDis=tItem;
			var selectItems;
			selectItems=this.displayTree.mList.selectItems;
			if(selectItems.indexOf(tItem)>=0){
				console.log("itemAction:");
				e.stopPropagation();
				}else{
				this.displayTree.mList.selectedIndex=this.displayTree.mList.array.indexOf(tItem);
				selectItems=[tItem];
			}
			if (tClip.name=="ifShow"){
				this.setItemsValue(selectItems,Signs.HideSign,!tDis[Signs.HideSign]);
			}else
			if(tClip.name=="ifLock"){
				this.setItemsValue(selectItems,Signs.LockSign,!tDis[Signs.LockSign]);
			}
		}

		//tClip.index=1-tClip.index;
		__proto.setItemsValue=function(items,key,value){
			var i=0,len=0;
			len=items.length;
			var tItem;
			var tDis;
			for(i=0;i<len;i++){
				tItem=items[i];
				tDis=tItem;
				Notice.notify("display_value_changes",[tDis.compId,key,value]);
			}
			this.displayTree.mList.reRender();
		}

		/**获取当前目录*/
		__getset(0,__proto,'currDirectory',function(){
			return null;
		});

		__getset(1,DisplayTreePanel,'instance',function(){
			return DisplayTreePanel._instance ? DisplayTreePanel._instance :DisplayTreePanel._instance=new DisplayTreePanel();
		},laya.editor.ui.DisplayTreePanelUI._$SET_instance);

		DisplayTreePanel._instance=null
		DisplayTreePanel.DisplayTreeItemEdgePercent=0.2;
		DisplayTreePanel.AnyItemContains=false;
		return DisplayTreePanel;
	})(DisplayTreePanelUI)


	/**页面列表
	*@author yung
	*/
	//class laya.editor.view.PagePanel extends laya.editor.ui.PagePanelUI
	var PagePanel=(function(_super){
		function PagePanel(){
			this._pagePath=null;
			this._mouseIndex=0;
			this._menu=null;
			PagePanel.__super.call(this);
			this.initPanel();
			this.pageTree.spaceLeft=15;
			this.cacheAsBitmap=true;
		}

		__class(PagePanel,'laya.editor.view.PagePanel',_super);
		var __proto=PagePanel.prototype;
		__proto.initListener=function(){
			Notice.listen("ADDPage",this,this.addPage);
			Notice.listen("ADDSCENE",this,this.addScene);
			Notice.listen("AddParticle",this,this.addParticle);
			Notice.listen("ADDTimeLineAnimation",this,this.addTimeLineAnimation);
			Notice.listen("FRESH_Page",this,this.refresh);
			Notice.listen("adddir",this,this.addDirectory);
			Notice.listen("MovePage",this,this.move);
			Notice.listen("RENAME",this,this.rename);
		}

		__proto.init=function(pagePath){
			this._pagePath=pagePath;
			this.refresh();
		}

		__proto.initPanel=function(){
			this.pageTree.array=[];
			this.pageTree.on("doubleclick",this,this.onPageTreeDoubleClick);
			this.pageTree.on("keydown",this,this.onPageTreeKeyDown);
			this.pageTree.on("rightclick",this,this.onTreeRightMouseDown);
			this.pageTree.mouseHandler=new Handler(this,this.onPageTreeMouse);
			this.pageTree.renderHandler=new Handler(this,this.treeRender);
			var menu=ContextMenu.createMenu("打开","重命名","转为模板","设置默认属性","删除","","新建页面","新建目录","打开所在目录");
			menu.on("select",this,this.onEmunSelect);
			this._menu=menu;
			this.on("click",this,this.onClick);
			this.fliterTxt.on("input",this,this.onFliterTxtChange);
			this.fliterTxt.color="#8a8a8a";
			this.opBox.name="opBox";
			this.opBox.on("click",this,this.onOpBoxClick);
			this.on("dragDrop",this,this.onPageTreeDragDrop);
		}

		//fliterTxt.restrict="^"
		__proto.onOpBoxClick=function(e){
			var btn=e.target;
			if (btn){
				switch (btn.name){
					case "addPageBtn":
						Notice.notify("OPEN_ADDPage");
						break ;
					case "addDirBtn":
						Notice.notify("open_adddir");
						break ;
					case "setPropBtn":
						this.setPageDefaultProp();
						break ;
					case "openDirBtn":
						this.openCurrDirectory();
						break ;
					case "refreshBtn":
						this.refresh();
						break ;
					}
			}
		}

		__proto.onFliterTxtChange=function(e){
			this.pageTree.filter(this.fliterTxt.text);
		}

		/**页面快捷键*/
		__proto.onPageTreeKeyDown=function(e){
			switch(e.keyCode){
				case 46:
					console.log("key action deletePage");
					this.deletePage();
					break ;
				case 113:
					console.log("key action checkRename");
					this.checkRename();
					break ;
				case 37:
					console.log("key action LEFT");
					this.pageTree.setItemState(this.pageTree.list.selectedIndex,false);
					break ;
				case 39:
					console.log("key action RIGHT");
					this.pageTree.setItemState(this.pageTree.list.selectedIndex,true);
					break ;
				case 38:
					console.log("key action UP");
					if(this.pageTree.list.selectedIndex>0)
						this.pageTree.list.selectedIndex--;
					break ;
				case 40:
					console.log("key action DOWN");
					if(this.pageTree.list.selectedIndex<this.pageTree.list.length-1)
						this.pageTree.list.selectedIndex++;
					break ;
				}
		}

		/**删除页面*/
		__proto.deletePage=function(){
			if (this.pageTree.selectedItem !=null){
				var filePath=FileManager.getWorkRelativePath(this.pageTree.selectedPath).replace("laya/pages/","").replace(".ui","");
				var type=this.pageTree.selectedItem.isDirectory ? "目录" :"页面";
				Confirm.show(Sys.lang("确定要删除{0}({1})吗？(删除后可以在回收站里找回)",type,filePath),"确定删除页面吗",Utils1.bind(this.delBack,this));
			}
		}

		/**处理页面删除*/
		__proto.delBack=function(sure){
			if (sure){
				var path=this.pageTree.selectedPath;
				FileManager.removeFile(path);
				var codePath=CodeManager.getCodePath(path);
				FileManager.removeFile(codePath);
				this.refresh();
				Notice.notify("closePage",[path]);
			}
			Laya.stage.focus=this.pageTree;
		}

		/**双击打开页面*/
		__proto.onPageTreeDoubleClick=function(e){
			DebugTool.dTrace("onPageTreeDoubleClick");
			if (e.target.parent==this.pageTree.list.content && this.pageTree.selectedItem){
				var path;
				path=this.pageTree.selectedItem.path;
				if (FileTools.exist(path)&& !FileTools.isDirectory(path)){
					Notice.notify("openPAGE",[path]);
				}
			}
		}

		//}
		__proto.onClick=function(e){
			var target=e.target;
			if (!DisControlTool.isChildE(this,target)){
				this.pageTree.selectedIndex=-1;
			}
		}

		/**处理右键选择*/
		__proto.onTreeRightMouseDown=function(e){
			var comp=e.target.parent.parent;
			if (comp && comp.dataSource){
				this.pageTree.selectedItem=comp.dataSource;
			}
			this._menu.show();
		}

		/**处理菜单选择*/
		__proto.onEmunSelect=function(e){
			var name=""
			name=e.target.name;
			console.log("onEmunSelect:",e,name);
			switch (name){
				case "打开":
					if (this.pageTree.selectedItem && this.pageTree.selectedItem.isDirectory==false){
						Notice.notify("openPAGE",[this.pageTree.selectedPath]);
					}
					break ;
				case "重命名":
					this.checkRename();
					break ;
				case "转为模板":
					this.changeUIToTemplate();
					break ;
				case "删除":
					this.deletePage();
					break ;
				case "设置默认属性":
					this.setPageDefaultProp();
					break ;
				case "新建页面":
					Notice.notify("OPEN_ADDPage");
					break ;
				case "新建目录":
					Notice.notify("open_adddir");
					break ;
				case "打开所在目录":
					this.openCurrDirectory();
					break ;
				}
		}

		/**打开当前页面所在的文件夹*/
		__proto.openCurrDirectory=function(){
			FileTools.openItem(this.currDirectory);
		}

		/**处理页面拖动*/
		__proto.onPageTreeMouse=function(e,index){
			var cell=this.pageTree.list.getCell(index);
			var label=cell.getChildByName("label");
			if (e.type=="mousedown"){
				Laya.stage.focus=this.pageTree;
				this._mouseIndex=index;
				var clip=new Clip(SkinDefines.PageDragIcon,1,3);
				clip.index=2;
				var type=this.pageTree.array[index].isDirectory ? "pageDir" :"page";
				LayaBuilder.drag.doDrag(e.currentTarget ,clip,{type:type,path:this.pageTree.array[index].path},new Point(5,5));
			}else
			if (e.type=="mouseover"){
				label.color="#44a7ff";
			}else
			if (e.type=="mouseout"){
				var item=cell.dataSource;
				if (!item)return;
				label.color=item.hasChild?"#c8c8c8":"#aaaaaa";
			}
		}

		/**刷新*/
		__proto.refresh=function(){
			this.pageTree.array=FileTools.getFileTreeArr(this._pagePath);
			MessageManager.instance.show(Sys.lang("页面刷新完毕"));
		}

		/**是否已经存在同路径文件*/
		__proto.hasFile=function(path){
			var arr=this.pageTree.source;
			var item;
			for(var $each_item in arr){
				item=arr[$each_item];
				if (item.path==path){
					return true;
				}
			}
			return false;
		}

		/**增加目录*/
		__proto.addDirectory=function(name){
			if (!Boolean(name)){
				return Alert.show("新建目录名称不能为空");
			};
			var path=FileManager.getPath(this.currDirectory,name);
			if (this.hasFile(path)){
				return Alert.show("已经此名字的目录了，请换个名字试试","命名重复");
			}
			FileManager.createDirectory(path);
			this.refresh();
		}

		__proto.addScene=function(name){
			if (!Boolean(name)){
				return Alert.show("新建场景名称不能为空");
			};
			var path=FileManager.getPath(this.currDirectory,name+"."+TypeManager.getExtension("Scene"));
			if (this.hasFile(path)){
				return Alert.show("已经有同名字的场景了，请换个名字试试","命名重复");
			};
			var data;
			data={};
			data.type="scene";
			FileManager.createJSONFile(path,data);
			this.refresh();
			Notice.notify("openPAGE",[path]);
		}

		/**
		*添加时间轴动画
		*@param type
		*@param name
		*@param imgPath
		*@param width
		*@param height
		*@param bgColor
		*@param isSceneWidth
		*@param isSceneHeight
		*
		*/
		__proto.addTimeLineAnimation=function(type,name,imgPath,width,height,bgColor,isSceneWidth,isSceneHeight){
			console.log("addTimeLineAnimation:",type,name);
			if (!Boolean(name)){
				return Alert.show("新建页面名称不能为空");
			};
			var path=FileManager.getPath(this.currDirectory,name+".ani");
			if (this.hasFile(path)){
				return Alert.show("已经有同名字的页面了，请换个名字试试","命名重复");
			};
			var xml;
			xml={
				type:"View",
				child:[],
				props:{}
			};
			if (isSceneWidth){
				xml.props.sceneWidth=width;
			}
			else{
				xml.props.width=width;
			}
			if (isSceneWidth){
				xml.props.sceneWidth=width;
			}
			else{
				xml.props.height=height;
			}
			xml.props.sceneColor=bgColor;
			if (Boolean(imgPath)){
				xml.props.sceneBg=PageManager.copyPageBg(path,imgPath);
			}
			this.save(path,xml);
			this.refresh();
			Notice.notify("openPAGE",[path]);
		}

		__proto.addParticle=function(type,name){
			if (!Boolean(name)){
				return Alert.show("新建页面名称不能为空");
			};
			var oPath;
			if (type=="重力模式"){
				oPath=FileManager.getAppPath("laya/default/particle.json");
			}
			else{
				oPath=FileManager.getAppPath("laya/default/particle1.json");
			};
			var path;
			path=FileManager.getPath(this.currDirectory,name+"."+TypeManager.getExtension("Particle"));
			if (this.hasFile(path)){
				return Alert.show("已经有同名字的页面了，请换个名字试试","命名重复");
			}
			console.log("new Particle here");
			FileManager.copyFile(oPath,path);
			var texturePath=SystemSetting.assetsPath+"/"+"texture.png";
			if (!FileTools.exist(texturePath)){
				FileManager.copyFile(FileManager.getAppPath("laya/default/texture.png"),texturePath);
				Notice.notify("FRESH_RES");
			}
			this.refresh();
			Notice.notify("openPAGE",[path]);
		}

		/**增加页面*/
		__proto.addPage=function(type,name,imgPath,width,height,bgColor,isSceneWidth,isSceneHeight){
			if (!Boolean(name)){
				return Alert.show("新建页面名称不能为空");
			};
			var path=FileManager.getPath(this.currDirectory,name+".ui");
			if (type=="Particle"){
			}
			else{
				if (this.hasFile(path)){
					return Alert.show("已经有同名字的页面了，请换个名字试试","命名重复");
				};
				var xml;
				xml={
					type:type,
					child:[],
					props:{}
				};
				if (isSceneWidth){
					xml.props.sceneWidth=width;
				}
				else{
					xml.props.width=width;
				}
				if (isSceneHeight){
					xml.props.sceneHeight=height;
				}
				else{
					xml.props.height=height;
				}
				xml.props.sceneColor=bgColor;
				if (Boolean(imgPath)){
					xml.props.sceneBg=PageManager.copyPageBg(path,imgPath);
				}
				this.save(path,xml);
			}
			this.refresh();
			Notice.notify("openPAGE",[path]);
		}

		/**保存页面*/
		__proto.save=function(path,xml){
			FileManager.createTxtFile(path,ObjectTools.getJsonString(xml));
		}

		/**清理xml无用标记*/
		__proto.cleanPageXml=function(xml){
			delete xml.compId;
			delete xml.selectedBox;
			var list=xml.child;
			for (var j=0,n=list.length;j < n;j++){
				this.cleanPageXml(list[j]);
			}
			return Object;
		}

		__proto.checkRename=function(){
			if(UIPanel.instance.hasPageOpen()){
				Alert.show("重命名页面之前请先关闭所有页面");
				return;
			}
			if (this.pageTree.selectedItem !=null){
				var fileName=this.pageTree.selectedItem.label;
				Notice.notify("OPEN_RENAME",[fileName]);
			}
		}

		__proto.changeUIToTemplate=function(){
			if (this.pageTree.selectedItem !=null){
				var fileName=this.pageTree.selectedPath;
				TemplateManager.changeToTemplate(fileName);
			}
		}

		__proto.copyFile=function(oldFile,tarFile){
			console.log("copyFile:",oldFile,tarFile);
			FileTools.copyFile(oldFile,tarFile);
			this.refresh();
		}

		__proto.rename=function(newName,isUpdate){
			if (!Boolean(newName)){
				return Alert.show("新名称不能为空");
			};
			var oldPath=this.pageTree.selectedPath;
			var newPath;
			if(FileTools.isDirectory(oldPath)){
				newPath=(oldPath+"##").replace(this.pageTree.selectedItem.label+"##",newName);
				}else{
				newPath=(oldPath+"##").replace(FileTools.getFileNameWithExtension(oldPath)+"##",newName+"."+FileTools.getExtensionName(oldPath))
			}
			if (this.hasFile(newPath)){
				Alert.show("已经有同名字的页面了，请换个名字试试","命名重复");
			}
			console.log("try Rename:",oldPath,newPath);
			FileTools.rename(oldPath,newPath);
			if (FileTools.isDirectory(newPath)){
				this.renameByDir(oldPath,newPath,isUpdate);
				}else {
				this.renamePage(oldPath,newPath,isUpdate);
			}
			this.refresh();
		}

		/**重命名目录*/
		__proto.renameByDir=function(oldDir,newDir,isUpdate){
			var arr=FileTools.getFileList(newDir);
			for (var i=0,n=arr.length;i < n;i++){
				var newChild=new File(arr[i]);
				var oldChild=new File(FileManager.getPath(oldDir,newChild.name));
				if (newChild.isDirectory){
					this.renameByDir(oldChild.nativePath,newChild.nativePath,isUpdate);
					}else {
					this.renamePage(oldChild.nativePath,newChild.nativePath,isUpdate);
				}
			}
		}

		/**重命名页面*/
		__proto.renamePage=function(oldPath,newPath,isUpdate){
			Notice.notify("closePage",[oldPath]);
			if (isUpdate){
				var oldKey="\"source\":\""+FileManager.adptToCommonUrl(FileManager.getRelativePath(this._pagePath,oldPath))+"\"";
				var newKey="\"source\":\""+FileManager.adptToCommonUrl(FileManager.getRelativePath(this._pagePath,newPath))+"\"";
				PageManager.replace(new RegExp(oldKey,"g"),newKey);
			}
		}

		__proto.onPageTreeDragDrop=function(e){
			console.log("onPageTreeDragDrop",e);
			if (!e.data)return;
			if (!(e.data.type=="page" || e.data.type=="pageDir"))return;
			var targetFile;
			var hitList;
			hitList=DisControlTool.getObjectsUnderGlobalPoint(this.pageTree);
			var i=0,len=0;
			len=hitList.length;
			for (i=0;i < len;i++){
				if (hitList[i].dataSource && hitList[i].dataSource.path){
					targetFile=new File(hitList[i].dataSource.path);
					break ;
				}
			};
			var targetDir;
			if (!targetFile){
				targetFile=targetDir=new File(this._pagePath);
				}else{
				targetDir=targetFile.isDirectory ? targetFile :targetFile.parent;
			}
			console.log("get file:",targetFile,targetDir);
			var oldFile=new File(this.pageTree.array[this._mouseIndex].path);
			var oldDir=oldFile.parent;
			console.log("old file:",oldFile,oldDir);
			if (oldFile.nativePath !=targetDir.nativePath && oldDir.nativePath !=targetDir.nativePath){
				var newFile=new File(FileManager.getPath(targetDir.nativePath,oldFile.name));
				console.log("movefile:",oldFile,newFile);
				Notice.notify("OPEN_MovePage",[oldFile,newFile]);
			}
		}

		/**移动页面*/
		__proto.move=function(oldFile,newFile,isUpdate){
			Notice.notify("closePage",[oldFile.nativePath]);
			oldFile.moveTo(newFile.nativePath);
			if (newFile.isDirectory){
				this.renameByDir(oldFile.nativePath,newFile.nativePath,isUpdate);
				}else {
				this.renamePage(oldFile.nativePath,newFile.nativePath,isUpdate);
			}
			this.refresh();
		}

		/**设置页面的默认属性*/
		__proto.setPageDefaultProp=function(){
			if (this.pageTree.selectedItem !=null){
				var path=this.pageTree.selectedItem.path;
				if (!FileTools.isDirectory(path)){
					var filePath=FileManager.getRelativePath(this._pagePath,path);
					Notice.notify("OPEN_SEtPageProp",[filePath]);
				}
			}
		}

		__proto.treeRender=function(cell,index){
			var item=cell.dataSource;
			if (item){
				var icon=cell.getChildByName("icon");
				var isDirectory=item.child || item.isDirectory;
				var label=cell.getChildByName("label");
				if (isDirectory){
					if(item.isOpen){
						icon.skin="view/folder_open.png";
						}else{
						icon.skin="view/folder_close.png";
					}
					label.color="#c8c8c8";
					}else {
					label.text=item.label;
					label.color="#aaaaaa";
					var type;
					type=TypeManager.getFileType(item.path);
					switch(type){
						case "Page":
							icon.skin="view/ui.png";
							break ;
						case "Particle":
							icon.skin="view/particle.png";
							break ;
						case "Page":
							icon.skin="view/ui.png";
							break ;
						case "Page":
							icon.skin="view/ui.png";
							break ;
						default :
							icon.skin="view/ui.png";
						}
				}
			}
		}

		/**获取当前目录*/
		__getset(0,__proto,'currDirectory',function(){
			var directory=this._pagePath;
			if (this.pageTree.selectedItem !=null){
				var path=this.pageTree.selectedItem.path;
				return FileTools.getFileDir(path);
			}
			return directory;
		});

		__getset(1,PagePanel,'instance',function(){
			return PagePanel._instance ? PagePanel._instance :PagePanel._instance=new PagePanel();
		},laya.editor.ui.PagePanelUI._$SET_instance);

		PagePanel._instance=null
		return PagePanel;
	})(PagePanelUI)


	/**属性面板
	*@author yung
	*/
	//class laya.editor.view.PropPanel extends laya.editor.ui.PropPanelUI
	var PropPanel=(function(_super){
		function PropPanel(){
			this._panel=null;
			this._panelMap={};
			this.tInputList=null;
			this.objType=null;
			this.targetID=0;
			PropPanel.__super.call(this);
			this.clear();
			this.on("mouseover",this,this.onRollOver);
			this.on("mouseout",this,this.onRollOut);
			PropPanel._instance=this;
		}

		__class(PropPanel,'laya.editor.view.PropPanel',_super);
		var __proto=PropPanel.prototype;
		__proto.initListener=function(){
			Notice.listen("PropPanel_setByObj",this,this.initByObj);
			Notice.listen("SELECTE_INPUT",this,this.selecteInput);
		}

		__proto.selecteInput=function(input){
			var pos;
			pos=new Point(0,0);
			pos=input.localToGlobal(pos);
			pos=this._panel.content.globalToLocal(pos);
			if(pos.y<this._panel.vScrollBar.value){
				this._panel.vScrollBar.value=pos.y;
				}else{
				if(pos.y+input.height>this._panel.height+this._panel.vScrollBar.value){
					this._panel.vScrollBar.value=pos.y+input.height-this._panel.height+10;
				}
			}
		}

		// trace("pos after:",pos.x,pos.y,_panel.vScrollBar.value,_panel.height);
		__proto.valueChange=function(key,value,isChanging){
			(isChanging===void 0)&& (isChanging=false);
			var valueType;
			valueType=UIConfigManager.getCompPropValueType(this.objType,key);
			console.log("valueType:",valueType,key,value);
			if(value!=""){
				switch(valueType){
					case "int":
						value=Laya.__parseInt(value);
					case "Number":
					case "sNumber":
					case "number":
						value=parseFloat(value);
						break ;
					case "bool":
						value=value=="true"?true:false;
						break ;
					}
				if(ObjectTools.isNaN(value)){
					value=0;
				}
			}
			if (!isChanging){
				Notice.notify("Prop_change",[key,value,this.targetID]);
				}else{
				Notice.notify("Prop_changeing",[key,value,this.targetID]);
			}
		}

		// }
		__proto.onRollOut=function(e){}
		//tabChildren=false;
		__proto.onRollOver=function(e){}
		/**清理*/
		__proto.clear=function(){
			this.typeIcon.visible=false;
			this.typeLbl.text="";
			this.targetID=-1;
			if (this._panel){
				this._panel.removeSelf();
			}
		}

		__proto.initByObj=function(data,name,id){
			this.clear();
			this.targetID=id;
			if (data){
				console.log("showProp:",data);
				this.objType=name;
				var type=name;
				this.typeLbl.text=type;
				this.typeLbl.color="#44a7ff";
				var cType;
				cType=UIConfigManager.getCompProp(type,"icon");
				if(!cType){
					cType="Image";
				}
				this.typeIcon.skin=FileTools.getAbsPath(FileManager.getAppPath("laya/icons/components/"+cType+".png"));
				this.typeIcon.visible=true;
				this._panel=this.createPanel(type,data);
				this.tInputList=this._panel["inputs"];
				this.addChild(this._panel);
				this.refreshGroupsPosition();
				var dataO;
				dataO=data;
				for (var i=0,n=this._panel.numChildren;i < n;i++){
					var propGroup=this._panel.getChildAt(i);
					propGroup.setValueD(dataO);
				}
			}
		}

		__proto.init=function(data,id){
			(id===void 0)&& (id=-1);
			this.clear();
			data&&this.initByObj(data.props,data.type,id);
			return;
			if (data){
				console.log("showProp");
				var type=data._nodeName;
				if (!type)return;
				this.typeLbl.text=type;
				this.typeIcon.visible=true;
				this._panel=this.createPanel(type,data);
				this.addChild(this._panel);
				this.refreshGroupsPosition();
				var dataO;
				dataO=XML2Object.parse(Utils1.parseXMLFromString(data.toXMLString()));
				for (var i=0,n=this._panel.numChildren;i < n;i++){
					var propGroup=this._panel.getChildAt(i);
					propGroup.setData(dataO);
				}
			}
		}

		__proto.createPanel=function(type,data){
			var panel=this._panelMap[type];
			if (panel==null){
				var inputList=[];
				panel=new Panel();
				panel["inputs"]=inputList;
				panel.mouseEnabled=true;
				panel.content.mouseEnabled=true;
				panel.vScrollBarSkin="comp/vscroll.png";
				panel.left=panel.right=panel.bottom=2;
				panel.top=40;
				var props=UIConfigManager.getCompConfig(type);
				if (props){
					var labels=props.p.groups;
					var groupLabels=labels ? labels.split(","):[];
					groupLabels.push("其他");
					var groups=[];
					for (var j=0,m=groupLabels.length;j < m;j++){
						groups.push([]);
					};
					var otherGroupIndex=groups.length-1;
					var list=props.c.prop;
					for (var i=0,n=list.length;i < n;i++){
						var prop=list[i];
						var group=prop.p.group;
						if (!Boolean(group)){
							var index=otherGroupIndex;
							}else {
							index=groupLabels.indexOf(group);
							if (index==-1){
								index=otherGroupIndex;
							}
						}
						groups[index].push(prop);
					};
					var otherGroup=groups[otherGroupIndex];
					otherGroup.sort(this.sortByNameHH);
					for (var k=0,t=groups.length;k < t;k++){
						var arr=groups[k];
						if (arr.length > 0){
							var propGroup=new PropGroup(groupLabels[k],arr,inputList);
							propGroup.left=propGroup.right=0;
							panel.addChild(propGroup);
						}
					}
				}
				this._panelMap[type]=panel;
			}
			return panel;
		}

		__proto.sortByNameHH=function(obj0,obj1){
			return obj0.p.name < obj1.p.name?-1:1;
		}

		/**刷新属性面板位置*/
		__proto.refreshGroupsPosition=function(){
			var y=0;
			for (var i=0,n=this._panel.numChildren;i < n;i++){
				var propGroup=this._panel.getChildAt(i);
				if (propGroup){
					propGroup.y=y;
					y=y+propGroup.height+5;
				}
			}
			this._panel.refresh();
		}

		__getset(1,PropPanel,'instance',function(){
			return PropPanel._instance ? PropPanel._instance :PropPanel._instance=new PropPanel();
		},laya.editor.ui.PropPanelUI._$SET_instance);

		PropPanel._instance=null
		return PropPanel;
	})(PropPanelUI)


	/**资源面板
	*@author yung
	*/
	//class laya.editor.view.ResPanel extends laya.editor.ui.ResPanelUI
	var ResPanel=(function(_super){
		function ResPanel(){
			this._resPath=null;
			this._refreshComplete=null;
			this._mouseIndex=0;
			this.isRefreshing=false;
			this._menu=null;
			ResPanel.__super.call(this);
			this.initPanel();
			this.resTree.spaceLeft=15;
			this.cacheAsBitmap=true;
		}

		__class(ResPanel,'laya.editor.view.ResPanel',_super);
		var __proto=ResPanel.prototype;
		__proto.initListener=function(){
			Notice.listen("FRESH_RES",this,this.refresh);
			Notice.listen("SelecteResFile",this,this.selecteByFile);
		}

		/**刷新资源树*/
		__proto.init=function(resPath,complete){
			this._resPath=resPath;
			this.refresh(complete);
		}

		__proto.onTreeMouse=function(e,index){
			var cell=this.resTree.list.getCell(index);
			var label=cell.getChildByName("label");
			if (e.type=="mouseover"){
				label.color="#44a7ff";
			}else
			if (e.type=="mouseout"){
				var item=cell.dataSource;
				if (!item)return;
				label.color=item.hasChild?"#c8c8c8":"#aaaaaa";
			}
		}

		__proto.selecteByFile=function(file){
			var arr;
			arr=this.resTree.source;
			this.parseOpen(arr,file.split("/"));
			this.resTree.fresh();
		}

		__proto.parseOpen=function(tree,arr){
			if(arr.length<1)return;
			var tStr=arr.shift();
			var i=0,len=0;
			len=tree.length;
			var tItem;
			for(i=0;i<len;i++){
				tItem=tree[i];
				if(tItem.label==tStr){
					if(arr.length>0){
						tItem.isOpen=true;
						this.resTree.fresh();
						this.parseOpen(tItem.childs,arr);
						}else{
						this.resTree.selectedItem=tItem;
					}
					return;
				}
			}
		}

		/**刷新*/
		__proto.refresh=function(refreshComplete){
			console.log("refreshRes");
			if(this.isRefreshing)return;
			this._refreshComplete=refreshComplete;
			this.isRefreshing=true;
			ResFileManager.resLoadCompleteHandler=new Handler(this,this.createComplete);
			ResFileManager.setPath(this._resPath);
		}

		//createComplete(null);
		__proto.createComplete=function(){
			console.log("try fresh resPanel");
			this.isRefreshing=false;
			var arr;
			arr=FileTools.getFileTreeArr(SystemSetting.assetsPath);
			var i=0,len=0;
			for(i=arr.length-1;i>=0;i--){
				if(FilterFuns.isSpecialRes(arr[i].path)){
					arr.splice(i,1);
				}
			}
			this.resTree.array=arr;
			Notice.notify("FRESH_CurView");
			if (this._refreshComplete !=null){
				this._refreshComplete.run();
				}else {
				MessageManager.instance.show(Sys.lang("资源刷新完毕"));
			}
		}

		__proto.initPanel=function(){
			this.resTree.array=[];
			this.resTree.on("doubleclick",this,this.onResTreeDoubleClick);
			this.resTree.on("rightmousedown",this,this.onResTreeRightMouseDown);
			this.resTree.mouseHandler=new Handler(this,this.onResTreeMouse);
			var menu=ContextMenu.createMenu("设置默认属性","打开所在目录","查找引用","","重命名","删除");
			menu.on("select",this,this.onEmunSelect);
			this._menu=menu;
			this.fliterTxt.on("input",this,this.onFliterTxtChange);
			this.fliterTxt.color="#8a8a8a";
			this.opBox.on("click",this,this.onOpBoxClick);
			this.resTree.on("change",this,this.onResTreeChange);
			this.resTree.renderHandler=new Handler(this,this.resTreeRender);
			this.resTree.on("keydown",this,this.onResTreeKeyDown);
			this.on("dragDrop",this,this.onResTreeDragDrop);
			this.resTree.on("keydown",this,this.onTreeKeyDown);
		}

		__proto.onResTreeDragDrop=function(e){
			console.log("onResTreeDragDrop",e);
			if (!e.data)return;
			if (!(e.data.type=="res" || e.data.type=="resDir"))return;
			var targetFile;
			var hitList;
			hitList=DisControlTool.getObjectsUnderGlobalPoint(this.resTree);
			console.log("hitList:",hitList);
			var i=0,len=0;
			len=hitList.length;
			for (i=0;i < len;i++){
				if (hitList[i].dataSource && hitList[i].dataSource.path){
					targetFile=new File(hitList[i].dataSource.path);
					break ;
				}
			};
			var targetDir;
			if (!targetFile){
				targetFile=targetDir=new File(this._resPath);
				}else{
				targetDir=targetFile.isDirectory ? targetFile :targetFile.parent;
			}
			console.log("get file:",targetFile,targetDir);
			var oldFile=new File(this.resTree.array[this._mouseIndex].path);
			var oldDir=oldFile.parent;
			console.log("old file:",oldFile,oldDir);
			if (oldFile.nativePath !=targetDir.nativePath && oldDir.nativePath !=targetDir.nativePath){
				var newFile=new File(FileManager.getPath(targetDir.nativePath,oldFile.name));
				if (!this.hasFile(newFile.nativePath)){
					MoveRes.instance.start(oldFile,newFile);
					}else {
					Alert.show("目标文件夹内已经有同名文件，不能进行移动操作");
				}
			}
		}

		/**移动资源*/
		__proto.move=function(oldFile,newFile,isUpdate){
			oldFile.moveTo(newFile.nativePath);
			if (newFile.isDirectory){
				this.renameByDir(oldFile,newFile,isUpdate);
				}else {
				this.renameRes(oldFile,newFile,isUpdate);
			}
			this.refresh();
		}

		/**快捷键*/
		__proto.onResTreeKeyDown=function(e){
			if (e.keyCode==46){
				this.deleteRes();
			}
			if (e.keyCode==113){
				this.checkRename();
			}
		}

		/**删除资源*/
		__proto.deleteRes=function(){
			if (Boolean(this.resTree.selectedPath)){
				var filePath=FileManager.getRelativePath(this._resPath,this.resTree.selectedPath);
				var type=this.resTree.selectedItem.isDirectory ? "目录" :"资源";
				Confirm.show(Sys.lang("确定要删除{0}({1})吗？(删除后可以在回收站里找回)",type,filePath),"确定删除资源吗",Utils1.bind(this.delBack,this));
				}else {
				Alert.show("当前资源为SWF资源，不能直接删除");
			}
		}

		/**处理资源删除*/
		__proto.delBack=function(sure){
			if (sure){
				ResManager.removeRes(this.resTree.selectedPath);
				this.refresh();
			}
			Laya.stage.focus=this.resTree;
		}

		__proto.onResTreeChange=function(e){
			this.cleanViewer();
			console.log("onResTreeChange");
			if (this.resTree.selectedItem && !this.resTree.selectedItem.isDirectory){
				var asset=this.resTree.selectedItem.path;
				var img=new Image2();
				img.skin=FileTools.getAbsPath(asset);
				this.resViewer.addChild(img);
				img.visible=false;
				Laya.timer.once(200,this,this.setResSize,[img],true);
			}
		}

		/**设置资源大小*/
		__proto.setResSize=function(target){
			var scale=Math.min(this.resViewer.width / target.width,this.resViewer.height / target.height,1);
			target.scaleX=target.scaleY=scale;
			target.x=(this.resViewer.width-scale*target.width)/ 2;
			target.y=(this.resViewer.height-scale*target.height)/ 2;
			target.visible=true;
		}

		__proto.changeSize=function(){
			laya.ui.Component.prototype.changeSize.call(this);
			if(this.resViewer&&this.resViewer.numChildren>0){
				this.setResSize(this.resViewer.getChildAt(0));
			}
		}

		/**清理resViewer*/
		__proto.cleanViewer=function(){
			for (var i=this.resViewer.numChildren-1;i >-1;i--){
				this.resViewer.removeChildAt(i);
			}
		}

		__proto.onOpBoxClick=function(e){
			var btn=e.target;
			if (btn){
				switch (btn.name){
					case "setPropBtn":
						this.checkSetResProp();
						break ;
					case "openDirBtn":
						this.openCurrDirectory();
						break ;
					case "refreshBtn":
						this.refresh();
						break ;
					}
			}
		}

		__proto.checkSetResProp=function(){
			if (this.resTree.selectedItem && !this.resTree.selectedItem.isDirectory){
				console.log("click res");
				SetResProp.instance.start(FileManager.getResRelativePath(this.resTree.selectedItem.path));
			}
		}

		/**打开当前资源所在的文件夹*/
		__proto.openCurrDirectory=function(){
			FileTools.openItem(this.currDirectory);
		}

		__proto.onFliterTxtChange=function(e){
			this.resTree.filter(this.fliterTxt.text);
		}

		__proto.onEmunSelect=function(e){
			var name;
			name=e.target.name;
			console.log("onEmunSelect:",e,name);
			switch (name){
				case "设置默认属性":
					this.checkSetResProp();
					break ;
				case "打开所在目录":
					this.openCurrDirectory();
					break ;
				case "重命名":
					this.checkRename();
					break ;
				case "删除":
					this.deleteRes();
					break ;
				case "查找引用":
					this.findResRefer();
					break ;
				}
		}

		__proto.findResRefer=function(){
			if (Boolean(this.resTree.selectedPath)){
				var tarResPath;
				tarResPath=FileManager.getRelativePath(SystemSetting.assetsPath,this.resTree.selectedPath);
				tarResPath=FileManager.adptToCommonUrl(tarResPath);
				Notice.notify("findResRefer",[tarResPath]);
			}
		}

		__proto.checkRename=function(){
			if (Boolean(this.resTree.selectedPath)){
				var fileName=this.resTree.selectedItem.label;
				RenameRes.instance.start(fileName);
				}else {
				Alert.show("当前资源为SWF资源，不能直接重命名");
			}
		}

		__proto.rename=function(newName,isUpdate){
			if (!Boolean(newName)){
				return Alert.show("新名称不能为空");
			};
			var oldFile=new File(this.resTree.selectedPath);
			if (!oldFile.isDirectory){
				newName+="."+oldFile.extension;
			};
			var oldName=this.resTree.selectedItem.label;
			if (oldFile.name !=newName){
				var oldPath=oldFile.nativePath;
				var newPath=(oldPath+"##").replace(oldFile.name+"##",newName);
				if (this.hasFile(newPath)){
					Alert.show("已经有同名字的资源了，请换个名字试试","命名重复");
					}else {
					FileManager.rename(oldPath,newPath);
					var newFile=new File(newPath);
					if (newFile.isDirectory){
						this.renameByDir(oldFile,newFile,isUpdate);
						}else {
						this.renameRes(oldFile,newFile,isUpdate);
					}
					this.refresh();
				}
			}
		}

		/**重命名目录*/
		__proto.renameByDir=function(oldDir,newDir,isUpdate){
			var arr=FileTools.getFileList(newDir.nativePath);
			for (var i=0,n=arr.length;i < n;i++){
				var newChild=new File(arr[i]);
				var oldChild=new File(FileManager.getPath(oldDir.nativePath,newChild.name));
				if (newChild.isDirectory){
					this.renameByDir(oldChild,newChild,isUpdate);
					}else {
					this.renameRes(oldChild,newChild,isUpdate);
				}
			}
		}

		/**重命名资源*/
		__proto.renameRes=function(oldFile,newFile,isUpdate){
			ResManager.removeRes(oldFile.nativePath);
			var oldAsset=ResManager.getResLinkName(oldFile.nativePath);
			var newAsset=ResManager.getResLinkName(newFile.nativePath);
			oldAsset=FileManager.adptToCommonUrl(oldAsset);
			newAsset=FileManager.adptToCommonUrl(newAsset);
			this.replacePage(oldAsset,newAsset);
		}

		__proto.replacePage=function(oldAsset,newAsset){
			var oldKey=""+oldAsset+"";
			var newKey=""+newAsset+"";
			PageManager.replace(new RegExp(oldKey,"g"),newKey);
		}

		/**是否已经存在同路径文件*/
		__proto.hasFile=function(path){
			var arr=this.resTree.source;
			var item;
			for(var $each_item in arr){
				item=arr[$each_item];
				if (item.path==path){
					return true;
				}
			}
			return false;
		}

		__proto.onResTreeMouse=function(e,index){
			if (e.type=="mousedown"){
				Laya.stage.focus=this.resTree;
				this._mouseIndex=index;
				var clip=new Clip(SkinDefines.ResDragIcon,1,3);
				clip.index=2;
				if (this.resTree.array[index].isDirectory){
					LayaBuilder.drag.doDrag(e.currentTarget,clip,{type:"resDir"},new Point(5,5));
					}else {
					console.log("try drag from ResPanel");
					var asset=this.resTree.array[index].path;
					var compType=ResStyleManager.getResCompType(FileManager.getResRelativePath(asset));
					LayaBuilder.drag.doDrag(e.currentTarget,clip,{type:"res",compType:compType,asset:asset},new Point(5,5));
				}
			};
			var cell=this.resTree.list.getCell(index);
			var label=cell.getChildByName("label");
			if (e.type=="mouseover"){
				label.color="#44a7ff";
			}else
			if (e.type=="mouseout"){
				var item=cell.dataSource;
				if (!item)return;
				label.color=item.hasChild?"#c8c8c8":"#aaaaaa";
			}
		}

		__proto.onResTreeRightMouseDown=function(e){
			var comp=e.target.parent.parent;
			if (comp && comp.dataSource){
				this.resTree.selectedItem=comp.dataSource;
			}
			this._menu.show();
		}

		__proto.onResTreeDoubleClick=function(e){
			console.log("onResTreeDoubleClick");
			if (e.target.parent==this.resTree.list.content){
				console.log("checkSetResProp");
				this.checkSetResProp();
			}
		}

		/**页面快捷键*/
		__proto.onTreeKeyDown=function(e){
			switch(e.keyCode){
				case 46:
					console.log("key action deletePage");
					break ;
				case 113:
					console.log("key action checkRename");
					this.checkRename();
					break ;
				case 37:
					console.log("key action LEFT");
					this.resTree.setItemState(this.resTree.list.selectedIndex,false);
					break ;
				case 39:
					console.log("key action RIGHT");
					this.resTree.setItemState(this.resTree.list.selectedIndex,true);
					break ;
				case 38:
					console.log("key action UP");
					if (this.resTree.list.selectedIndex > 0){
						this.resTree.list.selectedIndex--;
					}
					break ;
				case 40:
					console.log("key action DOWN");
					if (this.resTree.list.selectedIndex < this.resTree.list.length-1){
						this.resTree.list.selectedIndex++;
					}
					break ;
				}
		}

		/**属性更改后，属性列表*/
		__proto.refreshProp=function(){
			this.resTree.array=this.resTree.array;
		}

		__proto.resTreeRender=function(cell,index){
			var item=cell.dataSource;
			if (item){
				var icon=cell.getChildByName("icon");
				var isDirectory=item.child || item.isDirectory;
				var label=cell.getChildByName("label");
				if (isDirectory){
					if(item.isOpen){
						icon.skin="view/folder_open.png";
						}else{
						icon.skin="view/folder_close.png";
					}
					label.color="#c8c8c8";
					}else {
					label.text=item.label;
					label.color="#aaaaaa";
					var fName;
					fName=FileTools.getFileName(item.path);
					var compType=ResStyleManager.getResCompType(FileManager.getResRelativePath(item.path),true);
					icon.skin="components/"+compType+".png";
				}
			}
		}

		__getset(0,__proto,'dataSource',_super.prototype._$get_dataSource,function(value){
			_super.prototype._$set_dataSource.call(this,value);
		});

		__getset(0,__proto,'visible',function(){
			return _super.prototype._$get_visible.call(this);
			},function(value){
			_super.prototype._$set_visible.call(this,value);
			debugger;
		});

		/**获取当前目录*/
		__getset(0,__proto,'currDirectory',function(){
			var directory=this._resPath;
			if (this.resTree.selectedItem !=null){
				var path=this.resTree.selectedItem.path;
				return FileTools.getFileDir(path);
			}
			return directory;
		});

		__getset(1,ResPanel,'instance',function(){
			return ResPanel._instance ? ResPanel._instance :ResPanel._instance=new ResPanel();
		},laya.editor.ui.ResPanelUI._$SET_instance);

		ResPanel._instance=null
		return ResPanel;
	})(ResPanelUI)


	/**
	*...
	*@author ww
	*/
	//class laya.editor.view.template.CompPanel extends laya.editor.ui.template.CompPanelUI
	var CompPanel=(function(_super){
		function CompPanel(){
			this._menu=null;
			this._tSelectData=null;
			this._data=null;
			this.lastItem=null;
			CompPanel.__super.call(this);
			this.groupBox.removeChildren();
			this.size(200,600);
			this.inits();
			this.initPanel();
			this.freshData();
			this.groupBox.on("mousedown",this,this.mouseDown);
			this.groupBox.on("rightmousedown",this,this.rightMouseDown);
		}

		__class(CompPanel,'laya.editor.view.template.CompPanel',_super);
		var __proto=CompPanel.prototype;
		__proto.initPanel=function(){
			var menu=ContextMenu.createMenu("打开所在目录");
			menu.on("select",this,this.onEmunSelect);
			this._menu=menu;
		}

		/**处理菜单选择*/
		__proto.onEmunSelect=function(e){
			var name=""
			name=e.target.name;
			console.log("onEmunSelect:",e,name);
			switch (name){
				case "打开所在目录":
					this.openCurrDirectory();
					break ;
				}
		}

		/**打开当前页面所在的文件夹*/
		__proto.openCurrDirectory=function(){
			FileTools.openItem(this.currDirectory);
		}

		__proto.rightMouseDown=function(e){
			this._tSelectData=null
			console.log("mouseDown:",e.target);
			if (!((e.target instanceof laya.ui.Image )))return;
			var compData;
			compData=e.target["uData"];
			console.log("selectData:",compData);
			if (compData){
				this._tSelectData=compData;
			}
			this._menu.show();
		}

		__proto.mouseDown=function(e){
			console.log("mouseDown:",e.target);
			if((e.target instanceof laya.editor.view.template.TemplateItem )){
				e.target=(e.target).tImg;
			}
			if (!((e.target instanceof laya.ui.Image )))return;
			var compData;
			compData=e.target["uData"];
			console.log("selectData:",compData);
			if (compData){
				this.dragComp(compData,e.target);
			}
		}

		__proto.dragComp=function(compData,target){
			var img=new Image2();
			img.skin=compData.image;
			LayaBuilder.drag.doDrag(target,img,{type:"template",data:compData },new Point(5,5));
		}

		__proto.freshData=function(){
			var data;
			data=TemplateManager.getTemplatePanelData();
			this.initByGroupDatas(data.groups);
		}

		__proto.inits=function(){
			Notice.listen("Fresh_CompPanel",this,this.freshData);
		}

		__proto.getCompListData=function(data){
			console.log("getCompData:",data);
			this.setData(data);
		}

		__proto.setData=function(data){
			this._data=data;
			var _groupList;
			_groupList=[];
			var _compList;
			_compList=data.data;
			var i=0,len=0;
			len=_compList.length;
			var tItem;
			var groupDic;
			groupDic={};
			var tGroup;
			var tGroupName;
			for (i=0;i < len;i++){
				tItem=_compList[i];
				tGroupName=tItem.group;
				if (!groupDic[tGroupName]){
					tGroup={};
					tGroup.name=tGroupName;
					tGroup.items=[];
					_groupList.push(tGroup);
					groupDic[tGroupName]=tGroup;
				}
				tGroup=groupDic[tGroupName];
				tGroup.items.push(tItem);
			}
			this.initByGroupDatas(_groupList);
		}

		__proto.initByGroupDatas=function(groupList){
			var tUI;
			tUI=this.createGroupList(groupList);
			tUI.left=tUI.right=1;
			tUI.top=0;
			tUI.bottom=0;
			this.groupBox.removeChildren();
			this.groupBox.addChild(tUI);
			Utils1.enableDisplayTree(tUI);
			this.adptSize();
			Laya.timer.once(100,tUI,tUI.freshUI);
		}

		__proto.createGroupList=function(groupDatas){
			var groups;
			groups=[];
			var i=0,len=0;
			var tGroup;
			len=groupDatas.length;
			for (i=0;i < len;i++){
				tGroup=this.createAGroup(groupDatas[i]);
				groups.push(tGroup);
			};
			var groupList;
			groupList=new GroupList();
			groupList.setGroups(groups);
			Utils1.enableDisplayTree(groupList);
			return groupList;
		}

		__proto.createAGroup=function(groupData){
			var group;
			group=new ItemGroup();
			group.setData(groupData.name,this.createGroupContent(groupData.items));
			Utils1.enableDisplayTree(this.lastItem);
			return group;
		}

		__proto.createGroupContent=function(items){
			var rst;
			rst=new BoxFitToWidth();
			rst.right=0;
			rst.left=0;
			rst.dX=5;
			rst.dY=5;
			var i=0,len=0;
			var tItem;
			len=items.length;
			var picWidth=0;
			var picHeight=0;
			picWidth=80;
			picHeight=80;
			var xCount=0;
			xCount=3;
			var tData;
			rst.y=3;
			var tImg;
			var tLabel;
			var disItems;
			disItems=[];
			for (i=0;i < len;i++){
				tData=items[i];
				tItem=new TemplateItem();
				tItem.initData(tData,picWidth,picHeight,CompPanel.getTip);
				tItem.x=i%3*(picWidth+3);
				tItem.y=Math.floor(i/xCount)*(picHeight+3);
				disItems.push(tItem);
			}
			this.lastItem=rst;
			rst.setItems(disItems);
			return rst;
		}

		__proto.adptSize=function(){
			if(this.groupBox.parent){
				this.height=this.groupBox.y+this.groupBox.height;
				}else{
				this.height=this.groupBox.y;
			}
		}

		__proto.onGroubBarClick=function(e){
			if (this.groupBox.parent){
				this.groupBox.removeSelf();
			}
			else{
				this.addChild(this.groupBox);
			}
			this.adptSize();
			this.event("UIChange");
		}

		/**获取当前目录*/
		__getset(0,__proto,'currDirectory',function(){
			var path;
			if(this._tSelectData){
				path=FileTools.getFileDir(this._tSelectData.path);
				}else{
				path=TemplateManager.getRootPath();
			}
			return path;
		});

		__getset(1,CompPanel,'instance',function(){
			return CompPanel._instance ? CompPanel._instance :CompPanel._instance=new CompPanel();
		},laya.editor.ui.template.CompPanelUI._$SET_instance);

		CompPanel.getTip=function(data){
			CompPanel.tipImg.skin=data.image;
			LayaBuilder.tip.showDisTip(CompPanel.tipImg);
		}

		CompPanel._instance=null
		__static(CompPanel,
		['tipImg',function(){return this.tipImg=new Image2();}
		]);
		return CompPanel;
	})(CompPanelUI)


	/**
	*
	*@author ww
	*@version 1.0
	*
	*@created 2015-12-15 上午9:53:50
	*/
	//class laya.editor.view.ani.AnimationViewer extends laya.editor.view.UIViewer
	var AnimationViewer=(function(_super){
		function AnimationViewer(){
			AnimationViewer.__super.call(this);
		}

		__class(AnimationViewer,'laya.editor.view.ani.AnimationViewer',_super);
		var __proto=AnimationViewer.prototype;
		__proto.initPanel=function(){
			this.viewStack.on("resize",this,this.onResize);
			this.on("mousedown",this,this.onMouseDown);
			this.on("dragDrop",this,this.onDragDrop);
			this._design=new AnimationDesign();
			this.designView.on("rightmousedown",this,this.onDesignRightMouseDown);
			this.designView.on("rightmouseup",this,this.onDesignRightMouseUp);
			this.designView.addChild(this._design);
			this.tab.selectHandler=new Handler(this,this.onTabSelect);
			this.tab.selectedIndex=0;
			this.onResize(null);
		}

		return AnimationViewer;
	})(UIViewer)


	/**
	*时间轴面板
	*@author ww
	*@version 1.0
	*
	*@created 2015-12-4 上午10:57:19
	*/
	//class laya.editor.view.TimeLinePanel extends laya.editor.ui.TimeLinePanelUI
	var TimeLinePanel=(function(_super){
		function TimeLinePanel(){
			this.dragBar=null;
			this.nodeTree=null;
			this.frameRate=30;
			this._maxFrame=0;
			this._treeData=null;
			this.timeRec=null;
			TimeLinePanel.__super.call(this);
			this.size(300,300);
			this.nodeTree=new TimeLineTree();
			this.nodeTree.top=20;
			this.nodeTree.bottom=29;
			this.nodeTree.left=2;
			this.nodeTree.itemRender=TreeNodeRender;
			this.nodeTree.mList.replaceScrollBar(this.mVScroll);
			this.nodeTree.renderHandler=new Handler(this,this.timeLineTreeRender);
			this.nodeTree.mouseHandler=new Handler(this,this.onTimeLineTreeMouse);
			this.addChild(this.nodeTree);
			this.mHScroll.autoHide=true;
			this.mVScroll.autoHide=true;
			this.mHScroll.target=this.timeLine;
			this.mHScroll.on("change",this,this.hScrollChange);
			this.mVScroll.on("change",this,this.vScrollChange);
			this.dragBar=new DragBar();
			this.dragBar.width=2;
			this.dragBar.top=this.timeLine.y;
			this.dragBar.bottom=this.mHScroll.height+2;
			this.addChild(this.dragBar);
			this.dragBar.x=150;
			this.dragBar.on("mousedown",this,this.dragBarMouseDown);
			this.dragBar.on("dragend",this,this.dragBarDragEnd);
			this.dragBar.on("dragmove",this,this.dragBarDragEnd);
			this.nodeTree.mList.on("ListChange",this,this.listChange);
			this.timeLine.on("TIMELINE_CLICKFRAME",this,this.clickFrame);
			this.addListens();
		}

		__class(TimeLinePanel,'laya.editor.view.TimeLinePanel',_super);
		var __proto=TimeLinePanel.prototype;
		__proto.addListens=function(){
			Notice.listen("DesignItemSelected",this,this.selectItem);
			Notice.listen("PlayControl_ToBeginPos",this,this.playControl);
			Notice.listen("PLAYCONTROL_Pre",this,this.playControl);
			Notice.listen("PLAYCONTROL_Play",this,this.playControl);
			Notice.listen("PLAYCONTROL_Next",this,this.playControl);
			Notice.listen("PLAYCONTROL_TOEndPOS",this,this.playControl);
		}

		__proto.removeListens=function(){}
		__proto.playControl=function(action){
			console.log("playControl:",action);
			switch(action){
				case "PlayControl_ToBeginPos":
					this.timeLine.selectFrame=0;
					break ;
				case "PLAYCONTROL_Pre":
					if(this.timeLine.selectFrame>0){
						this.timeLine.selectFrame--;
					}
					break ;
				case "PLAYCONTROL_Play":
					this.beginPlay();
					break ;
				case "PLAYCONTROL_Next":
					if(this.timeLine.selectFrame<this.getMaxFrame()){
						this.timeLine.selectFrame++;
					}
					break ;
				case "PLAYCONTROL_TOEndPOS":
					this.timeLine.selectFrame=this.getMaxFrame();
					break ;
				}
		}

		__proto.getMaxFrame=function(){
			this._maxFrame=this._treeData.getMaxFrame();
			console.log("maxFrame:",this._maxFrame);
			return this._maxFrame;
		}

		__proto.beginPlay=function(){
			if(this.timeLine.selectFrame>=this.getMaxFrame()){
				this.timeLine.selectFrame=0;
			}
			if(this.frameRate<1)this.frameRate=30;
			Laya.timer.loop(1000/this.frameRate,this,this.playAni,null,true);
		}

		__proto.playAni=function(){
			if(this.timeLine.selectFrame<this._maxFrame){
				this.timeLine.selectFrame++;
				}else{
				Laya.timer.clear(this,this.playAni);
			}
		}

		__proto.selectItem=function(compId){
			console.log("selectCompId:",compId);
			this.nodeTree.selectByCompId(compId);
		}

		__proto.setData=function(data){
			if(!data){
				this.nodeTree.array=[];
				this.timeLine.setData([]);
				return;
			}
			console.log("timeLinePanel setData:",data);
			this._treeData=data;
			this.nodeTree.setTreeData(this._treeData);
		}

		__proto.clickFrame=function(layer,frame){
			console.log("clickFrame:",layer,frame);
			this.nodeTree.selectedIndex=layer;
			var selectItem;
			selectItem=this.nodeTree.mList.array[layer];
			if(selectItem){
				Notice.notify("Display_selected",[selectItem.compId]);
			}
		}

		//Notice.notify(IDEEvent.TIMELINE_FRAME_SELECTED,[frame]);
		__proto.listChange=function(dataList){
			console.log("dataList:",dataList);
			this.timeLine.setData(dataList);
		}

		__proto.dragBarMouseDown=function(e){
			var option;
			option={};
			option.area=new Rectangle(50,this.dragBar.y,this.width-100,0);
			this.dragBar.startDrag(option.area);
		}

		__proto.dragBarDragEnd=function(e){
			this.adptTimeLineSize();
		}

		__proto.hScrollChange=function(e){
			this.timeLine.setHScrollValue(this.mHScroll.value);
		}

		__proto.vScrollChange=function(e){
			this.timeLine.setVScrollValue(this.mVScroll.value);
		}

		__proto.changeSize=function(){
			laya.ui.Component.prototype.changeSize.call(this);
			this.adptTimeLineSize();
		}

		__proto.adptTimeLineSize=function(){
			console.log("adptTimeLineSize");
			this.timeLine.x=this.dragBar.x+1;
			this.timeLine.size(this.width-this.timeLine.x-25,this.height-30);
			this.nodeTree.width=this.dragBar.x-this.nodeTree.x;
			this.timeLine.adptToSize();
			this.mHScroll.setScroll(0,this.timeLine.startXRange,this.timeLine.lineScrollX);
			this.mHScroll.thumbPercent=(this.timeLine.frameCount-this.timeLine.startXRange)/this.timeLine.frameCount;
		}

		// mVScroll.thumbPercent=(timeLine.layerCount-timeLine.startYRange)/timeLine.layerCount;
		__proto.timeLineTreeRender=function(cell,index){
			var item=cell.dataSource;
			if (item){
				var nodeRender;
				nodeRender=cell;
				var icon=nodeRender.icon;
				var isDirectory=item.child || item.isDirectory;
				if(Laya.loader.getRes("components/"+item.type+".png")){
					icon.skin="components/"+item.type+".png";
					}else{
					if (item.hasChild){
						icon.skin="comp/folder.png";
						}else {
						icon.skin="comp/image.png";
					}
				};
				var label=nodeRender.label;
				label.text=item.label;
			}
		}

		__proto.onTimeLineTreeMouse=function(e,index){
			if (e.type=="mousedown"){
				console.log("mouseDown:",index);
				var selectItem;
				selectItem=this.nodeTree.mList.array[index];
				if(selectItem){
					Notice.notify("Display_selected",[selectItem.compId]);
				}
			}
		}

		__getset(1,TimeLinePanel,'instance',function(){
			return TimeLinePanel._instance ? TimeLinePanel._instance :TimeLinePanel._instance=new TimeLinePanel();
		},laya.editor.ui.TimeLinePanelUI._$SET_instance);

		TimeLinePanel._instance=null
		return TimeLinePanel;
	})(TimeLinePanelUI)


	/**UI管理器
	*@author yung
	*/
	//class laya.editor.view.UIPanel extends laya.editor.ui.UIPanelUI
	var UIPanel=(function(_super){
		function UIPanel(){
			this._currViewer=null;
			this._copyTemp=null;
			this.tabEx=null;
			this._menu=null;
			UIPanel.__super.call(this);
			this._container=new Box();
			this._mScrollRec=new Rectangle();
			this.init();
			this.canClose=false;
			this.canMix=false;
			this.tabEx=this.tab;
			this._container.width=100;
			this._container.height=100;
			this._container.top=25;
			this._container.bottom=0;
			this._container.left=0;
			this._container.right=0;
			this._container.mouseEnabled=true;
			this.addChild(this._container);
		}

		__class(UIPanel,'laya.editor.view.UIPanel',_super);
		var __proto=UIPanel.prototype;
		__proto.initListener=function(){
			Notice.listen("closePage",this,this.closePage);
			Notice.listen("openPAGE",this,this.openPage);
			Notice.listen("Focus_design",this,this.focusDesign);
			Notice.listen("FRESH_CurView",this,this.refreshCurrView);
			Notice.listen("DELETE_SELECTED",this,this.deleteSelecteForce);
		}

		__proto.init=function(){
			this.tab.on("change",this,this.onTabChange);
			this.tab.on("doubleclick",this,this.onTabDoubleClick);
			this.on("mouseover",this,this.onRollOver);
			this.initTabMenu();
		}

		__proto.hasPageOpen=function(){
			return this.tabEx.items.length>0;
		}

		__proto.changeSize=function(){
			laya.ui.Component.prototype.changeSize.call(this);
			ViewRenderManager.adpt();
			CodeViewManager.adpt();
			this.tabEx.maxLen=this.width;
			this.tabEx.updateUI();
			this._mScrollRec.setTo(0,0,this._container.width,this._container.height);
			this._container.scrollRect=this._mScrollRec;
		}

		__proto.onRollOver=function(e){
			if(!((this._currViewer instanceof laya.editor.view.UIViewer ))){
				return;
			}
			if (this._currViewer !=null && this.stage.focus !=this._currViewer.design && this._currViewer.viewStack.selectedIndex==0){
				this.focusDesign();
			}
		}

		/**双击关闭页面*/
		__proto.onTabDoubleClick=function(e){
			if (this._currViewer){
				this.tryToClose(this._currViewer);
			}
		}

		/**如果内容没有保存，提示保存*/
		__proto.tryToClose=function(uiViewer){
			if (uiViewer.hasChange){
				var filePath=FileManager.getRelativePath(SystemSetting.pagesPath,uiViewer.pagePath).replace(".xml","");
				NeedSave.instance.start(Sys.lang("是否保存 [{0}] 的更改？",filePath),new Handler(this,this.saveBack,[uiViewer]),new Handler(this,this.closeBack,[uiViewer]));
				}else {
				this.closeBack(uiViewer);
			}
		}

		/**保存后关闭*/
		__proto.saveBack=function(uiViewer){
			uiViewer.save();
			this.closePage(uiViewer.pagePath);
		}

		/**处理页面关闭*/
		__proto.closeBack=function(uiViewer){
			this.closePage(uiViewer.pagePath);
		}

		__proto.clearPanelsData=function(){
			PropPanel.instance.initByObj(null,null,-1);
			DisplayTreePanel.instance.init(null);
			TimeLinePanel.instance.setData(null);
		}

		/**切换标签时刷新页面*/
		__proto.onTabChange=function(e){
			if (this._currViewer){
				this._currViewer.removeSelf();
				this._currViewer=null;
				QuickTool.instance.setShowBtns(["Common"]);
			}
			this.clearPanelsData();
			if (this.tab.selectedIndex !=-1){
				this._currViewer=(this.tab.selection).uiViewer;
				if(this._currViewer){
					console.log("pagePath:",this._currViewer.pagePath);
					if(this._currViewer.pagePath!="欢迎页"){
						LayoutRecManager.layoutByPagePath(this._currViewer.pagePath);
						}else{
						LayoutRecManager.layoutToPageType("Page");
					}
				}
				if((this._currViewer instanceof laya.editor.view.ani.AnimationViewer )){
					LayoutRecManager.showPanelByClassName("TimeLinePanel");
				}
				if(!((this._currViewer instanceof laya.editor.view.UIViewer ))){
					console.log("try setUp particleView here");
					(this._currViewer).setUp(this._container);
					(this._currViewer).show();
					}else{
					this._container.addChild(this._currViewer);
					QuickTool.instance.setShowBtns(["Common","Zoom","Align"]);
				}
				this.refreshCurrView();
			}
			this.stage.event("pageChanged");
		}

		/**初始化右键菜单*/
		__proto.initTabMenu=function(){
			var menu=ContextMenu.createMenu("关闭","关闭其他","关闭全部");
			menu.on("select",this,this.onEmunSelect);
			this._menu=menu;
			this.tab.on("rightmousedown",this,this.onTabRightMouseDown);
		}

		__proto.onTabRightMouseDown=function(e){
			for (var i=0,n=this.tab.numChildren;i < n;i++){
				var viewTab=this.tab.getChildAt(i);
				if (viewTab && e.target.parent==viewTab){
					this.tab.selectedIndex=i;
					this._menu.show();
					break ;
				}
			}
		}

		//}
		__proto.onEmunSelect=function(e){
			var name=(e.target).name;
			switch (name){
				case "关闭":
					this.closePage(this._currViewer.pagePath);
					break ;
				case "关闭其他":
					this.closeAll(null,null,this.tab.selectedIndex);
					break ;
				case "关闭全部":
					this.closeAll();
					break ;
				}
		}

		/**关闭页面*/
		__proto.closePage=function(pagePath){
			StateManager.removeState(pagePath);
			StateManager.setChangeState(pagePath,false);
			var index=this.getTabIndex(pagePath);
			if (index !=-1){
				this.tab.delItem(this.tab.items[index]);
				if (this.tab.items.length==0){
					PropPanel.instance.clear();
				}
				this.onTabChange(null);
			}
		}

		/**获得页面索引*/
		__proto.getTabIndex=function(pagePath){
			for (var i=0,n=this.tab.items.length;i < n;i++){
				var viewTab=this.tab.items [i];
				if (pagePath==viewTab.uiViewer.pagePath){
					return i;
				}
			}
			return-1;
		}

		/**显示页面*/
		__proto.openPage=function(pagePath,title){
			var index=this.getTabIndex(pagePath);
			var viewTab;
			var viewer;
			if (index==-1){
				if((pagePath instanceof laya.display.Node )){
					viewer=new UIPageScene();
					viewer.pagePath=title;
					viewer["data"]=pagePath;
					viewTab=new ViewTab(viewer,ClassTool.getClassName(pagePath));
					index=this.tab.addItem(viewTab);
				}
				else if(TypeManager.getFileType(pagePath)=="Particle"){
					viewer=new ParticleScene();
					viewer.pagePath=pagePath;
					viewTab=new ViewTab(viewer);
					index=this.tab.addItem(viewTab);
					}else if(pagePath.indexOf("http://")>=0){
					viewer=new WebPageScene();
					viewer.pagePath=pagePath;
					viewTab=new ViewTab(viewer);
					index=this.tab.addItem(viewTab);
					}else if(TypeManager.getFileType(pagePath)=="Animation"){
					viewer=new AnimationViewer();
					viewer.pagePath=pagePath;
					viewTab=new ViewTab(viewer);
					index=this.tab.addItem(viewTab);
					}else if(TypeManager.getFileType(pagePath)=="Scene"){
					viewer=new SceneEditorScene();
					viewer.pagePath=pagePath;
					viewTab=new ViewTab(viewer);
					index=this.tab.addItem(viewTab);
					}else if(TypeManager.getFileType(pagePath)=="Page"){
					viewer=new UIViewer();
					viewer.pagePath=pagePath;
					viewTab=new ViewTab(viewer);
					index=this.tab.addItem(viewTab);
					}else{
					viewer=new CodeScene();
					viewer.pagePath=pagePath;
					viewTab=new ViewTab(viewer);
					index=this.tab.addItem(viewTab);
				}
			}
			this.tab.selectedIndex=index;
		}

		/**保存当前页面*/
		__proto.save=function(){
			if (this._currViewer !=null){
				this._currViewer.save();
			}
		}

		/**增加容器*/
		__proto.boxComp=function(type){
			if (this._currViewer !=null){
				this._currViewer.dealAction("boxComp",[type]);
			}
		}

		/**去除容器*/
		__proto.unBoxComp=function(){
			if (this._currViewer !=null){
				this._currViewer.dealAction("unBoxComp");
			}
		}

		/**对齐组件*/
		__proto.alignComp=function(type){
			if (this._currViewer !=null){
				this._currViewer.dealAction("alignComp",[type]);
			}
		}

		/**放置组件*/
		__proto.placeComp=function(type){
			if (this._currViewer !=null){
				this._currViewer.dealAction("placeComp",[type]);
			}
		}

		/**平均组件间隔*/
		__proto.spaceComp=function(type){
			if (this._currViewer !=null){
				this._currViewer.dealAction("spaceComp",[type]);
			}
		}

		/**缩放页面*/
		__proto.setScale=function(change){
			if (this._currViewer !=null){
				if (this._currViewer.scaleView+change > 0){
					this._currViewer.scaleView+=change;
				}
			}
		}

		/**恢复页面缩放Ctrl+|*/
		__proto.resizeScale=function(){
			if (this._currViewer !=null){
				this._currViewer.scaleView=1;
			}
		}

		/**复制组件*/
		__proto.copy=function(){
			if (this._currViewer !=null){
				if(!((Laya.stage.focus instanceof laya.editor.core.Design )))return;
				this._copyTemp=this._currViewer.design.selectedXmls;
			}
		}

		/**剪切*/
		__proto.cut=function(){
			if (this._currViewer !=null){
				if(!((Laya.stage.focus instanceof laya.editor.core.Design )))return;
				var selectedXmls=this._currViewer.design.selectedXmls;
				if (selectedXmls.length > 0){
					this._copyTemp=selectedXmls;
					this._currViewer.dealAction("delSelectedComps");
				}
			}
		}

		/**粘贴组件*/
		__proto.pasteComp=function(samePoint){
			if(!((Laya.stage.focus instanceof laya.editor.core.Design )))return;
			if (this._currViewer !=null && this._copyTemp !=null){
				this._currViewer.dealAction("pasteComp",[this._copyTemp,samePoint]);
			}
		}

		/**重复组件*/
		__proto.repeatComp=function(row,column,paddingX,paddingY){
			if (this._currViewer !=null){
				this._currViewer.dealAction("repeatComp",[row,column,paddingX,paddingY]);
			}
		}

		/**刷新当前视图*/
		__proto.refreshCurrView=function(){
			if (this._currViewer !=null){
				this.stage.focus=this._currViewer.design;
				this._currViewer.dealAction("refresh");
			}
		}

		/**刷新当前图层视图*/
		__proto.refreshLayerView=function(){
			if (this._currViewer !=null){
				this._currViewer.dealAction("refreshCompsByLayer");
			}
		}

		/**刷新当前图层视图*/
		__proto.clearSelectByLayer=function(layer){
			if (this._currViewer !=null){
				this._currViewer.dealAction("clearSelectByLayer",[layer]);
			}
		}

		/**刷新当前图层视图*/
		__proto.refreshAtLayerChanged=function(){
			if (this._currViewer !=null){
				this._currViewer.dealAction("refreshAtLayerChanged");
			}
		}

		/**根据层选择组件*/
		__proto.selectByLayer=function(layer){
			if (this._currViewer !=null){
				this._currViewer.dealAction("selectByLayer",[layer]);
			}
		}

		/**恢复*/
		__proto.goBack=function(){
			console.log("goBack");
			if (this._currViewer !=null){
				this._currViewer.dealAction("goBack");
			}
		}

		/**重置*/
		__proto.goForward=function(){
			console.log("goForward");
			if (this._currViewer !=null){
				this._currViewer.dealAction("goForward");
			}
		}

		/**预览*/
		__proto.preview=function(){
			if (this._currViewer !=null){
				Preview.instance.start(this._currViewer.design.xml);
			}
		}

		/**显示隐藏参考视图*/
		__proto.toggleBg=function(){
			if (this._currViewer !=null){
				this._currViewer.dealAction("toggleBg");
			}
		}

		__proto.switchRuleGrid=function(){
			if (this._currViewer !=null){
				this._currViewer.dealAction("switchRuleGrid");
			}
		}

		/**保存所有*/
		__proto.saveAll=function(){
			var viewTab;
			for(var $each_viewTab in this.tab.items){
				viewTab=this.tab.items[$each_viewTab];
				viewTab.uiViewer.save();
			}
		}

		__proto.hasNotSavedFile=function(){
			for (var j=0;j < this.tab.items.length;j++){
				var viewTab=this.tab.items [j];
				if (viewTab.uiViewer.hasChange){
					return true;
				}
			}
			return false;
		}

		/**关闭所有*/
		__proto.closeAll=function(complete,args,exceptIndex){
			var _$this=this;
			(exceptIndex===void 0)&& (exceptIndex=-1);
			for (var j=0;j < this.tab.items.length;j++){
				if (j !=exceptIndex){
					var viewTab=this.tab.items [j];
					if (viewTab.uiViewer.hasChange){
						NeedSave.instance.start("页面还未保存，是否保存这些修改？",new Handler(this,saveAllBack),new Handler(this,closeAllBack));
						return;
					}
				}
			}
			closeAllBack();
			function saveAllBack (){
				_$this.saveAll();
				closeAllBack();
			}
			function closeAllBack (){
				for (var i=_$this.tab.items.length-1;i >-1;i--){
					if (i !=exceptIndex){
						var view=(_$this.tab.items[i]).uiViewer;
						_$this.closePage(view.pagePath);
					}
				}
				if (complete !=null){
					complete.apply(null,args);
				}
			}
		}

		/**关闭当前页面*/
		__proto.closeCurrPage=function(){
			this.onTabDoubleClick(null);
		}

		/**删除选择*/
		__proto.deleteSelect=function(){
			if (this._currViewer !=null){
				if(!((Laya.stage.focus instanceof laya.editor.core.Design )))return;
				this._currViewer.dealAction("delSelectedComps");
			}
		}

		__proto.deleteSelecteForce=function(){
			if (this._currViewer !=null){
				this._currViewer.dealAction("delSelectedComps");
			}
		}

		/**全选*/
		__proto.selectAll=function(){
			if (this._currViewer !=null){
				if(!((Laya.stage.focus instanceof laya.editor.core.Design )))return;
				this._currViewer.dealAction("selectAll");
			}
		}

		/**更改同层先后顺序*/
		__proto.sortComp=function(up){
			(up===void 0)&& (up=true);
			if (this._currViewer !=null){
				this._currViewer.dealAction("sortComp",[up]);
			}
		}

		/**改变层*/
		__proto.moveLayer=function(up){
			(up===void 0)&& (up=true);
			if (this._currViewer !=null){
				this._currViewer.dealAction("moveLayer",[up]);
			}
		}

		/**获得ui视图*/
		__proto.getUIViewer=function(pagePath){
			var viewTab;
			for(var $each_viewTab in this.tab.items){
				viewTab=this.tab.items[$each_viewTab];
				if (viewTab.uiViewer.pagePath==pagePath){
					return viewTab.uiViewer;
				}
			}
			return null;
		}

		/**设置焦点*/
		__proto.focusDesign=function(){
			if (this._currViewer !=null){
				this.stage.focus=this._currViewer.design
			}
		}

		/**是否有变化*/
		__getset(0,__proto,'hasChange',function(){
			var viewTab;
			for(var $each_viewTab in this.tab.items){
				viewTab=this.tab.items[$each_viewTab];
				if (viewTab.uiViewer.design.hasChange){
					return true;
				}
			}
			return false;
		});

		/**打开的页面*/
		__getset(0,__proto,'openPages',function(){
			var arr=[];
			var viewTab;
			for(var $each_viewTab in this.tab.items){
				viewTab=this.tab.items[$each_viewTab];
				arr.push(viewTab.uiViewer.pagePath);
			}
			return arr;
		});

		__getset(0,__proto,'currViewer',function(){
			return this._currViewer;
		});

		__getset(1,UIPanel,'instance',function(){
			return UIPanel._instance ? UIPanel._instance :UIPanel._instance=new UIPanel();
		},laya.editor.ui.UIPanelUI._$SET_instance);

		UIPanel._instance=null
		UIPanel.borderWidth=1;
		UIPanel.topLen=25;
		return UIPanel;
	})(UIPanelUI)


	Laya.__init([EventDispatcher,LoaderManager,Timer,ShaderCompile,Browser,WebGLContext2D,Dialog,WebGLContext,AtlasGrid,RenderTargetMAX]);
	new LayaBuilder();

})(window,document,Laya);
