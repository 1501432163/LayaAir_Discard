precision mediump float;
#include?DIRECTIONLIGHT||POINTLIGHT||SPOTLIGHT "LightHelper.glsl";

uniform float u_Luminance;

#ifdef ALPHATEST
uniform float u_AlphaTestValue;
#endif

#ifdef DIFFUSEMAP
uniform sampler2D u_DiffuseTexture;
#endif

#ifdef REFLECTMAP
uniform samplerCube u_ReflectTexture;
uniform vec3 u_MaterialReflect;
#endif

#ifdef DIFFUSEMAP||((DIRECTIONLIGHT||POINTLIGHT||SPOTLIGHT)&&COLOR&&SPECULARMAP)
varying vec2 v_Texcoord;
#endif

#ifdef COLOR
varying vec4 v_Color;
#endif

#ifdef DIRECTIONLIGHT||POINTLIGHT||SPOTLIGHT||REFLECTMAP
varying vec3 v_Normal;
#endif

#ifdef DIRECTIONLIGHT||POINTLIGHT||SPOTLIGHT
uniform DirectionLight u_DirectionLight;
uniform PointLight u_PointLight;
uniform SpotLight u_SpotLight;

uniform vec3 u_MaterialDiffuse;
uniform vec3 u_MaterialAmbient;
uniform vec4 u_MaterialSpecular;

 #ifdef SPECULARMAP 
 uniform sampler2D u_SpecularTexture;
 #endif
#endif



#ifdef DIRECTIONLIGHT||POINTLIGHT||SPOTLIGHT||FOG||REFLECTMAP
uniform vec3 u_CameraPos;
varying vec3 v_PositionWorld;
#endif

#ifdef FOG
uniform float u_FogStart;
uniform float u_FogRange;
uniform vec3 u_FogColor;
#endif

#ifdef MIXUV
uniform float  u_UVAniAge;
#endif

void main()
{
  #ifdef DIRECTIONLIGHT||POINTLIGHT||SPOTLIGHT||REFLECTMAP
  vec3 normal=normalize(v_Normal);
  #endif
	
  #ifdef DIRECTIONLIGHT||POINTLIGHT||SPOTLIGHT
  vec3 diffuse = vec3(0.0);
  vec3 ambient = vec3(0.0);
  vec3 specular= vec3(0.0);
  vec3 dif, amb, spe;
  //法线归一化问题
  #endif
  
  #ifdef DIRECTIONLIGHT||POINTLIGHT||SPOTLIGHT||FOG||REFLECTMAP
  vec3 toEye=u_CameraPos-v_PositionWorld;
  float toEyeLength=length(toEye);
  toEye/=toEyeLength;
  #endif
	
  #ifdef DIRECTIONLIGHT
  computeDirectionLight(u_MaterialDiffuse,u_MaterialAmbient,u_MaterialSpecular,u_DirectionLight,normal,toEye, dif, amb, spe);
  diffuse+=dif;
  ambient+=amb;
  specular+=spe;
  #endif
 
  #ifdef POINTLIGHT
  computePointLight(u_MaterialDiffuse,u_MaterialAmbient,u_MaterialSpecular,u_PointLight,v_PositionWorld,normal,toEye, dif, amb, spe);
  diffuse+=dif;
  ambient+=amb;
  specular+=spe;
  #endif

  #ifdef SPOTLIGHT
  ComputeSpotLight(u_MaterialDiffuse,u_MaterialAmbient,u_MaterialSpecular,u_SpotLight,v_PositionWorld,normal,toEye, dif, amb, spe);
  diffuse+=dif;
  ambient+=amb;
  specular+=spe;
  #endif
  
  #ifdef DIFFUSEMAP&&!COLOR
  gl_FragColor=texture2D(u_DiffuseTexture, v_Texcoord);
  #endif 
  
  #ifdef COLOR&&!DIFFUSEMAP
  gl_FragColor=v_Color;
  #endif 
  
  #ifdef DIFFUSEMAP&&COLOR
  vec4 texColor=texture2D(u_DiffuseTexture, v_Texcoord);
  gl_FragColor=texColor*v_Color;
  #endif
  
  #ifdef !DIFFUSEMAP&&!COLOR
  gl_FragColor=vec4(1.0,1.0,1.0,1.0);
  #endif 
  
  gl_FragColor.rgb=gl_FragColor.rgb*u_Luminance;
  
 
  
  #ifdef ALPHATEST
  if(gl_FragColor.a-u_AlphaTestValue<0.0)
    discard;
  #endif
  
  
  
  #ifdef DIRECTIONLIGHT||POINTLIGHT||SPOTLIGHT
   #ifdef SPECULARMAP&&(COLOR||DIFFUSEMAP)
   specular =specular*texture2D(u_SpecularTexture, v_Texcoord).rgb;
   #endif
  gl_FragColor =vec4( gl_FragColor.rgb*(ambient + diffuse) + specular,gl_FragColor.a);
  #endif
  
  #ifdef REFLECTMAP
   vec3 incident = -toEye;
   vec3 reflectionVector = reflect(incident,normal);
   vec3 reflectionColor  = textureCube(u_ReflectTexture,reflectionVector).rgb;
   gl_FragColor.rgb += u_MaterialReflect*reflectionColor;
  #endif
  
  #ifdef FOG
  float lerpFact=clamp((toEyeLength-u_FogStart)/u_FogRange,0.0,1.0);
  gl_FragColor.rgb=mix(gl_FragColor.rgb,u_FogColor,lerpFact);
  #endif
  

  gl_FragColor=vec4(1.0,1.0,1.0,1.0);

}

