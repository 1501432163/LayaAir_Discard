//package laya.webgl.resource
//{
	//import laya.maths.Arith;
	//import laya.resource.Bitmap;
	//import laya.resource.Resource;
	//import laya.webgl.WebGL;
	//import laya.webgl.WebGLContext;
	//import laya.resource.HTMLImage;
	//import laya.resource.Texture;
	//
	///**
	 //* ...
	 //* @author laya
	 //*/
	//public class GLTextureCube extends Resource implements IGLTexture
	//{
		///*[DISABLE-ADD-VARIABLE-DEFAULT-VALUE]*/
		//protected var _source:*;
		//protected var _bitmapResources:Array=[];//尺寸等相关参数(BitmapResource),0为POSITIVE_X，1为NEGATIVE_X，2为POSITIVE_Y，3为NEGATIVE_Y，4为POSITIVE_Z，5为NEGATIVE_Z
		//
		//public function GLTextureCube(bitmapResources:Array = null)
		//{
			//super(Resource.TEXTURE, 0, ResourceMgr.GPU);
			//_bitmapResources = bitmapResources;
			//_released = true;
		//}
		//
		//public function destroy():void
		//{
			//unlock();
			//resourceRelease();
			//_bitmapResource = null;
		//}
		//
		//public function get source():*
		//{
			//_released && resourceActive();
			//return _source;
		//}
		//
		//override public function resourceRelease():Boolean
		//{
			//if (!isLock())
			//{
				//if (_source)
				//{
					//WebGL.mainContext.deleteTexture(_source);
					//_source = null;
					//super.resourceRelease();
				//}
				//return true;
			//}
			//return false;
		//}
		//
		//public function texSubImage2D(target:Bitmap, xoffset:Number, yoffset:Number):void
		//{
			//var gl:WebGLContext = WebGL.mainContext;
			//gl.bindTexture(WebGLContext.TEXTURE_2D, _source);
			//gl.texSubImage2D(WebGLContext.TEXTURE_2D, 0, xoffset, yoffset, WebGLContext.RGBA, WebGLContext.UNSIGNED_BYTE, target._source);
		//}
		//
		//override public function resourceRestore():void
		//{
			//var bitmapResource:Bitmap = _bitmapResource;
			//var gl:WebGLContext = WebGL.mainContext;
			//
			//if (!bitmapResource._source)
			//{
				//debugger;
				//throw "create GLTextur err:no data:" + bitmapResource;
			//}
			//
			//var glTex:* = _source = gl.createTexture();
			//gl.bindTexture(WebGLContext.TEXTURE_CUBE_MAP, glTex);
			//_memSize = bitmapResource.getMemSize();
			//
			//gl.texImage2D(WebGLContext.TEXTURE_CUBE_MAP_POSITIVE_X, 0, WebGLContext.RGBA, WebGLContext.RGBA, WebGLContext.UNSIGNED_BYTE, bitmapResource._source);
			//gl.texImage2D(WebGLContext.TEXTURE_CUBE_MAP_NEGATIVE_X, 0, WebGLContext.RGBA, WebGLContext.RGBA, WebGLContext.UNSIGNED_BYTE, bitmapResource._source);
			//gl.texImage2D(WebGLContext.TEXTURE_CUBE_MAP_POSITIVE_Y, 0, WebGLContext.RGBA, WebGLContext.RGBA, WebGLContext.UNSIGNED_BYTE, bitmapResource._source);
			//gl.texImage2D(WebGLContext.TEXTURE_CUBE_MAP_NEGATIVE_Y, 0, WebGLContext.RGBA, WebGLContext.RGBA, WebGLContext.UNSIGNED_BYTE, bitmapResource._source);
			//gl.texImage2D(WebGLContext.TEXTURE_CUBE_MAP_POSITIVE_Z, 0, WebGLContext.RGBA, WebGLContext.RGBA, WebGLContext.UNSIGNED_BYTE, bitmapResource._source);
			//gl.texImage2D(WebGLContext.TEXTURE_CUBE_MAP_NEGATIVE_Z, 0, WebGLContext.RGBA, WebGLContext.RGBA, WebGLContext.UNSIGNED_BYTE, bitmapResource._source);
			//
			//var isPOT:Boolean = Arith.isPOT(bitmapResource.width, bitmapResource.height);
			//var minFifter:int = _bitmapResource._minFifter;
			//var magFifter:int = _bitmapResource._magFifter;
			//var repeat:int = bitmapResource._repeat ? WebGLContext.REPEAT : WebGLContext.CLAMP_TO_EDGE
			//if (isPOT)
			//{
				//if (_bitmapResource._mipmap)
					//(minFifter !== -1) || (minFifter = WebGLContext.LINEAR_MIPMAP_LINEAR);
				//else
					//(minFifter !== -1) || (minFifter = WebGLContext.LINEAR);
				//
				//(magFifter !== -1) || (magFifter = WebGLContext.LINEAR);
				//
				//gl.texParameteri(WebGLContext.TEXTURE_CUBE_MAP, WebGLContext.TEXTURE_MIN_FILTER, minFifter);
				//gl.texParameteri(WebGLContext.TEXTURE_CUBE_MAP, WebGLContext.TEXTURE_MAG_FILTER, magFifter);
				//gl.texParameteri(WebGLContext.TEXTURE_CUBE_MAP, WebGLContext.TEXTURE_WRAP_S, repeat);
				//gl.texParameteri(WebGLContext.TEXTURE_CUBE_MAP, WebGLContext.TEXTURE_WRAP_T, repeat);
				//gl.texParameteri(WebGLContext.TEXTURE_CUBE_MAP, WebGLContext.TEXTURE_WRAP_R, repeat);
				//
				//gl.generateMipmap(WebGLContext.TEXTURE_CUBE_MAP);
			//}
			//else
			//{
				//(minFifter !== -1) || (minFifter = WebGLContext.LINEAR);
				//(magFifter !== -1) || (magFifter = WebGLContext.LINEAR);
				//gl.texParameteri(WebGLContext.TEXTURE_CUBE_MAP, WebGLContext.TEXTURE_MIN_FILTER, minFifter);
				//gl.texParameteri(WebGLContext.TEXTURE_CUBE_MAP, WebGLContext.TEXTURE_MAG_FILTER, magFifter);
				//gl.texParameteri(WebGLContext.TEXTURE_CUBE_MAP, WebGLContext.TEXTURE_WRAP_S, WebGLContext.CLAMP_TO_EDGE);
				//gl.texParameteri(WebGLContext.TEXTURE_CUBE_MAP, WebGLContext.TEXTURE_WRAP_T, WebGLContext.CLAMP_TO_EDGE);
				//gl.texParameteri(WebGLContext.TEXTURE_CUBE_MAP, WebGLContext.TEXTURE_WRAP_R, WebGLContext.CLAMP_TO_EDGE);
			//}
			//
			//gl.bindTexture(WebGLContext.TEXTURE_CUBE_MAP, null);
			//
			//super.resourceRestore();
			//
			//bitmapResource.release();
		//}
	//}
//
//}